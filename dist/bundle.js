/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__color__ = __webpack_require__(3);
const THREE = __webpack_require__(1);
const OrbitControls = __webpack_require__(2)(THREE);



var scene = new THREE.Scene();
scene.background = new THREE.Color(0xFFFFFF);
var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
var control = new OrbitControls(camera);

var renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

var geometry = new THREE.Geometry();

__WEBPACK_IMPORTED_MODULE_0__color__["a" /* COLOR */].colors.forEach(elem => {
  geometry.vertices.push(
    new THREE.Vector3(elem.red / 150, elem.green / 150, elem.blue / 150)
  );

  geometry.colors.push(
    new THREE.Color(elem.rgb)
  );
});

var material = new THREE.PointsMaterial({
  size: 0.04,
  vertexColors: THREE.VertexColors
});

var rgbBox = new THREE.Points(geometry, material);
rgbBox.position.x = -(255 / 150 / 2);
rgbBox.position.y = -(255 / 150 / 2);
rgbBox.position.z = -(255 / 150 / 2);
scene.add(rgbBox);

camera.position.z = 2.5;

function animate() {
	requestAnimationFrame( animate );
	renderer.render( scene, camera );
}
animate();


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderTargetCube", function() { return WebGLRenderTargetCube; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderTarget", function() { return WebGLRenderTarget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderer", function() { return WebGLRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShaderLib", function() { return ShaderLib; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniformsLib", function() { return UniformsLib; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniformsUtils", function() { return UniformsUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShaderChunk", function() { return ShaderChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FogExp2", function() { return FogExp2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fog", function() { return Fog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Scene", function() { return Scene; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LensFlare", function() { return LensFlare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sprite", function() { return Sprite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOD", function() { return LOD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkinnedMesh", function() { return SkinnedMesh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Skeleton", function() { return Skeleton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bone", function() { return Bone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mesh", function() { return Mesh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineSegments", function() { return LineSegments; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineLoop", function() { return LineLoop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Line", function() { return Line; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Points", function() { return Points; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Group", function() { return Group; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTexture", function() { return VideoTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTexture", function() { return DataTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompressedTexture", function() { return CompressedTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeTexture", function() { return CubeTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CanvasTexture", function() { return CanvasTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthTexture", function() { return DepthTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Texture", function() { return Texture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompressedTextureLoader", function() { return CompressedTextureLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTextureLoader", function() { return DataTextureLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeTextureLoader", function() { return CubeTextureLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextureLoader", function() { return TextureLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectLoader", function() { return ObjectLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaterialLoader", function() { return MaterialLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BufferGeometryLoader", function() { return BufferGeometryLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultLoadingManager", function() { return DefaultLoadingManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingManager", function() { return LoadingManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSONLoader", function() { return JSONLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageLoader", function() { return ImageLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FontLoader", function() { return FontLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileLoader", function() { return FileLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Loader", function() { return Loader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cache", function() { return Cache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioLoader", function() { return AudioLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpotLightShadow", function() { return SpotLightShadow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpotLight", function() { return SpotLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointLight", function() { return PointLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RectAreaLight", function() { return RectAreaLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HemisphereLight", function() { return HemisphereLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectionalLightShadow", function() { return DirectionalLightShadow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectionalLight", function() { return DirectionalLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AmbientLight", function() { return AmbientLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LightShadow", function() { return LightShadow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Light", function() { return Light; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StereoCamera", function() { return StereoCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectiveCamera", function() { return PerspectiveCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrthographicCamera", function() { return OrthographicCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeCamera", function() { return CubeCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayCamera", function() { return ArrayCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return Camera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioListener", function() { return AudioListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionalAudio", function() { return PositionalAudio; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioContext", function() { return AudioContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioAnalyser", function() { return AudioAnalyser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Audio", function() { return Audio; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VectorKeyframeTrack", function() { return VectorKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringKeyframeTrack", function() { return StringKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuaternionKeyframeTrack", function() { return QuaternionKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberKeyframeTrack", function() { return NumberKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorKeyframeTrack", function() { return ColorKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BooleanKeyframeTrack", function() { return BooleanKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyMixer", function() { return PropertyMixer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyBinding", function() { return PropertyBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyframeTrack", function() { return KeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationUtils", function() { return AnimationUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationObjectGroup", function() { return AnimationObjectGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationMixer", function() { return AnimationMixer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationClip", function() { return AnimationClip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uniform", function() { return Uniform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InstancedBufferGeometry", function() { return InstancedBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BufferGeometry", function() { return BufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeometryIdCount", function() { return GeometryIdCount; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Geometry", function() { return Geometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterleavedBufferAttribute", function() { return InterleavedBufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InstancedInterleavedBuffer", function() { return InstancedInterleavedBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterleavedBuffer", function() { return InterleavedBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InstancedBufferAttribute", function() { return InstancedBufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Face3", function() { return Face3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Object3D", function() { return Object3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Raycaster", function() { return Raycaster; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Layers", function() { return Layers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventDispatcher", function() { return EventDispatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Clock", function() { return Clock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuaternionLinearInterpolant", function() { return QuaternionLinearInterpolant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearInterpolant", function() { return LinearInterpolant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiscreteInterpolant", function() { return DiscreteInterpolant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubicInterpolant", function() { return CubicInterpolant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Interpolant", function() { return Interpolant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Triangle", function() { return Triangle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Math", function() { return _Math; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Spherical", function() { return Spherical; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cylindrical", function() { return Cylindrical; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plane", function() { return Plane; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Frustum", function() { return Frustum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sphere", function() { return Sphere; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ray", function() { return Ray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix4", function() { return Matrix4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix3", function() { return Matrix3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Box3", function() { return Box3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Box2", function() { return Box2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Line3", function() { return Line3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Euler", function() { return Euler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector4", function() { return Vector4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector3", function() { return Vector3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector2", function() { return Vector2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Quaternion", function() { return Quaternion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Color", function() { return Color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImmediateRenderObject", function() { return ImmediateRenderObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VertexNormalsHelper", function() { return VertexNormalsHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpotLightHelper", function() { return SpotLightHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonHelper", function() { return SkeletonHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointLightHelper", function() { return PointLightHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RectAreaLightHelper", function() { return RectAreaLightHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HemisphereLightHelper", function() { return HemisphereLightHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GridHelper", function() { return GridHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PolarGridHelper", function() { return PolarGridHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FaceNormalsHelper", function() { return FaceNormalsHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectionalLightHelper", function() { return DirectionalLightHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CameraHelper", function() { return CameraHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoxHelper", function() { return BoxHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Box3Helper", function() { return Box3Helper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaneHelper", function() { return PlaneHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrowHelper", function() { return ArrowHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AxisHelper", function() { return AxisHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CatmullRomCurve3", function() { return CatmullRomCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubicBezierCurve3", function() { return CubicBezierCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuadraticBezierCurve3", function() { return QuadraticBezierCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineCurve3", function() { return LineCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArcCurve", function() { return ArcCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EllipseCurve", function() { return EllipseCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplineCurve", function() { return SplineCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubicBezierCurve", function() { return CubicBezierCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuadraticBezierCurve", function() { return QuadraticBezierCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineCurve", function() { return LineCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Shape", function() { return Shape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Path", function() { return Path; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShapePath", function() { return ShapePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Font", function() { return Font; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurvePath", function() { return CurvePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Curve", function() { return Curve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShapeUtils", function() { return ShapeUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SceneUtils", function() { return SceneUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLUtils", function() { return WebGLUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WireframeGeometry", function() { return WireframeGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParametricGeometry", function() { return ParametricGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParametricBufferGeometry", function() { return ParametricBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TetrahedronGeometry", function() { return TetrahedronGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TetrahedronBufferGeometry", function() { return TetrahedronBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OctahedronGeometry", function() { return OctahedronGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OctahedronBufferGeometry", function() { return OctahedronBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IcosahedronGeometry", function() { return IcosahedronGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IcosahedronBufferGeometry", function() { return IcosahedronBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DodecahedronGeometry", function() { return DodecahedronGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DodecahedronBufferGeometry", function() { return DodecahedronBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PolyhedronGeometry", function() { return PolyhedronGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PolyhedronBufferGeometry", function() { return PolyhedronBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TubeGeometry", function() { return TubeGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TubeBufferGeometry", function() { return TubeBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TorusKnotGeometry", function() { return TorusKnotGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TorusKnotBufferGeometry", function() { return TorusKnotBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TorusGeometry", function() { return TorusGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TorusBufferGeometry", function() { return TorusBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextGeometry", function() { return TextGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextBufferGeometry", function() { return TextBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphereGeometry", function() { return SphereGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphereBufferGeometry", function() { return SphereBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RingGeometry", function() { return RingGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RingBufferGeometry", function() { return RingBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaneGeometry", function() { return PlaneGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaneBufferGeometry", function() { return PlaneBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LatheGeometry", function() { return LatheGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LatheBufferGeometry", function() { return LatheBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShapeGeometry", function() { return ShapeGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShapeBufferGeometry", function() { return ShapeBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtrudeGeometry", function() { return ExtrudeGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtrudeBufferGeometry", function() { return ExtrudeBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EdgesGeometry", function() { return EdgesGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConeGeometry", function() { return ConeGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConeBufferGeometry", function() { return ConeBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CylinderGeometry", function() { return CylinderGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CylinderBufferGeometry", function() { return CylinderBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CircleGeometry", function() { return CircleGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CircleBufferGeometry", function() { return CircleBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoxGeometry", function() { return BoxGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoxBufferGeometry", function() { return BoxBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShadowMaterial", function() { return ShadowMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpriteMaterial", function() { return SpriteMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RawShaderMaterial", function() { return RawShaderMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShaderMaterial", function() { return ShaderMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointsMaterial", function() { return PointsMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshPhysicalMaterial", function() { return MeshPhysicalMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshStandardMaterial", function() { return MeshStandardMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshPhongMaterial", function() { return MeshPhongMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshToonMaterial", function() { return MeshToonMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshNormalMaterial", function() { return MeshNormalMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshLambertMaterial", function() { return MeshLambertMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshDepthMaterial", function() { return MeshDepthMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshDistanceMaterial", function() { return MeshDistanceMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshBasicMaterial", function() { return MeshBasicMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineDashedMaterial", function() { return LineDashedMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineBasicMaterial", function() { return LineBasicMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Material", function() { return Material; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float64BufferAttribute", function() { return Float64BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float32BufferAttribute", function() { return Float32BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint32BufferAttribute", function() { return Uint32BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int32BufferAttribute", function() { return Int32BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint16BufferAttribute", function() { return Uint16BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int16BufferAttribute", function() { return Int16BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8ClampedBufferAttribute", function() { return Uint8ClampedBufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8BufferAttribute", function() { return Uint8BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int8BufferAttribute", function() { return Int8BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BufferAttribute", function() { return BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REVISION", function() { return REVISION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSE", function() { return MOUSE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceNone", function() { return CullFaceNone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceBack", function() { return CullFaceBack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceFront", function() { return CullFaceFront; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceFrontBack", function() { return CullFaceFrontBack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontFaceDirectionCW", function() { return FrontFaceDirectionCW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontFaceDirectionCCW", function() { return FrontFaceDirectionCCW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicShadowMap", function() { return BasicShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCFShadowMap", function() { return PCFShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCFSoftShadowMap", function() { return PCFSoftShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontSide", function() { return FrontSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackSide", function() { return BackSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleSide", function() { return DoubleSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatShading", function() { return FlatShading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SmoothShading", function() { return SmoothShading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoColors", function() { return NoColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FaceColors", function() { return FaceColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VertexColors", function() { return VertexColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoBlending", function() { return NoBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NormalBlending", function() { return NormalBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdditiveBlending", function() { return AdditiveBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubtractiveBlending", function() { return SubtractiveBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiplyBlending", function() { return MultiplyBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomBlending", function() { return CustomBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddEquation", function() { return AddEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubtractEquation", function() { return SubtractEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReverseSubtractEquation", function() { return ReverseSubtractEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinEquation", function() { return MinEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxEquation", function() { return MaxEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroFactor", function() { return ZeroFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneFactor", function() { return OneFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcColorFactor", function() { return SrcColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusSrcColorFactor", function() { return OneMinusSrcColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcAlphaFactor", function() { return SrcAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusSrcAlphaFactor", function() { return OneMinusSrcAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DstAlphaFactor", function() { return DstAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusDstAlphaFactor", function() { return OneMinusDstAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DstColorFactor", function() { return DstColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusDstColorFactor", function() { return OneMinusDstColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcAlphaSaturateFactor", function() { return SrcAlphaSaturateFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeverDepth", function() { return NeverDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlwaysDepth", function() { return AlwaysDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessDepth", function() { return LessDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessEqualDepth", function() { return LessEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EqualDepth", function() { return EqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterEqualDepth", function() { return GreaterEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterDepth", function() { return GreaterDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotEqualDepth", function() { return NotEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiplyOperation", function() { return MultiplyOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MixOperation", function() { return MixOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddOperation", function() { return AddOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoToneMapping", function() { return NoToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearToneMapping", function() { return LinearToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReinhardToneMapping", function() { return ReinhardToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uncharted2ToneMapping", function() { return Uncharted2ToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CineonToneMapping", function() { return CineonToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UVMapping", function() { return UVMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeReflectionMapping", function() { return CubeReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeRefractionMapping", function() { return CubeRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquirectangularReflectionMapping", function() { return EquirectangularReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquirectangularRefractionMapping", function() { return EquirectangularRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphericalReflectionMapping", function() { return SphericalReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeUVReflectionMapping", function() { return CubeUVReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeUVRefractionMapping", function() { return CubeUVRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepeatWrapping", function() { return RepeatWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClampToEdgeWrapping", function() { return ClampToEdgeWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MirroredRepeatWrapping", function() { return MirroredRepeatWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestFilter", function() { return NearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestMipMapNearestFilter", function() { return NearestMipMapNearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestMipMapLinearFilter", function() { return NearestMipMapLinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearFilter", function() { return LinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearMipMapNearestFilter", function() { return LinearMipMapNearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearMipMapLinearFilter", function() { return LinearMipMapLinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedByteType", function() { return UnsignedByteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ByteType", function() { return ByteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShortType", function() { return ShortType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShortType", function() { return UnsignedShortType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntType", function() { return IntType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedIntType", function() { return UnsignedIntType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloatType", function() { return FloatType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HalfFloatType", function() { return HalfFloatType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort4444Type", function() { return UnsignedShort4444Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort5551Type", function() { return UnsignedShort5551Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort565Type", function() { return UnsignedShort565Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedInt248Type", function() { return UnsignedInt248Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlphaFormat", function() { return AlphaFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBFormat", function() { return RGBFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBAFormat", function() { return RGBAFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuminanceFormat", function() { return LuminanceFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuminanceAlphaFormat", function() { return LuminanceAlphaFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBEFormat", function() { return RGBEFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthFormat", function() { return DepthFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthStencilFormat", function() { return DepthStencilFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_S3TC_DXT1_Format", function() { return RGB_S3TC_DXT1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT1_Format", function() { return RGBA_S3TC_DXT1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT3_Format", function() { return RGBA_S3TC_DXT3_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT5_Format", function() { return RGBA_S3TC_DXT5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_PVRTC_4BPPV1_Format", function() { return RGB_PVRTC_4BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_PVRTC_2BPPV1_Format", function() { return RGB_PVRTC_2BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_PVRTC_4BPPV1_Format", function() { return RGBA_PVRTC_4BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_PVRTC_2BPPV1_Format", function() { return RGBA_PVRTC_2BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_ETC1_Format", function() { return RGB_ETC1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopOnce", function() { return LoopOnce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopRepeat", function() { return LoopRepeat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopPingPong", function() { return LoopPingPong; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateDiscrete", function() { return InterpolateDiscrete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateLinear", function() { return InterpolateLinear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateSmooth", function() { return InterpolateSmooth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroCurvatureEnding", function() { return ZeroCurvatureEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroSlopeEnding", function() { return ZeroSlopeEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WrapAroundEnding", function() { return WrapAroundEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrianglesDrawMode", function() { return TrianglesDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleStripDrawMode", function() { return TriangleStripDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleFanDrawMode", function() { return TriangleFanDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearEncoding", function() { return LinearEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sRGBEncoding", function() { return sRGBEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GammaEncoding", function() { return GammaEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBEEncoding", function() { return RGBEEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogLuvEncoding", function() { return LogLuvEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBM7Encoding", function() { return RGBM7Encoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBM16Encoding", function() { return RGBM16Encoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBDEncoding", function() { return RGBDEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicDepthPacking", function() { return BasicDepthPacking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBADepthPacking", function() { return RGBADepthPacking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeGeometry", function() { return BoxGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Face4", function() { return Face4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineStrip", function() { return LineStrip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinePieces", function() { return LinePieces; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshFaceMaterial", function() { return MeshFaceMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiMaterial", function() { return MultiMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointCloud", function() { return PointCloud; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Particle", function() { return Particle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParticleSystem", function() { return ParticleSystem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointCloudMaterial", function() { return PointCloudMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParticleBasicMaterial", function() { return ParticleBasicMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParticleSystemMaterial", function() { return ParticleSystemMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vertex", function() { return Vertex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicBufferAttribute", function() { return DynamicBufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int8Attribute", function() { return Int8Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8Attribute", function() { return Uint8Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8ClampedAttribute", function() { return Uint8ClampedAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int16Attribute", function() { return Int16Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint16Attribute", function() { return Uint16Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int32Attribute", function() { return Int32Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint32Attribute", function() { return Uint32Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float32Attribute", function() { return Float32Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float64Attribute", function() { return Float64Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClosedSplineCurve3", function() { return ClosedSplineCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplineCurve3", function() { return SplineCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Spline", function() { return Spline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundingBoxHelper", function() { return BoundingBoxHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EdgesHelper", function() { return EdgesHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WireframeHelper", function() { return WireframeHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XHRLoader", function() { return XHRLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BinaryTextureLoader", function() { return BinaryTextureLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeometryUtils", function() { return GeometryUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageUtils", function() { return ImageUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Projector", function() { return Projector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CanvasRenderer", function() { return CanvasRenderer; });
// Polyfills

if ( Number.EPSILON === undefined ) {

	Number.EPSILON = Math.pow( 2, - 52 );

}

if ( Number.isInteger === undefined ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

	Number.isInteger = function ( value ) {

		return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

	};

}

//

if ( Math.sign === undefined ) {

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

	Math.sign = function ( x ) {

		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

	};

}

if ( Function.prototype.name === undefined ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

	Object.defineProperty( Function.prototype, 'name', {

		get: function () {

			return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

		}

	} );

}

if ( Object.assign === undefined ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

	( function () {

		Object.assign = function ( target ) {

			'use strict';

			if ( target === undefined || target === null ) {

				throw new TypeError( 'Cannot convert undefined or null to object' );

			}

			var output = Object( target );

			for ( var index = 1; index < arguments.length; index ++ ) {

				var source = arguments[ index ];

				if ( source !== undefined && source !== null ) {

					for ( var nextKey in source ) {

						if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

							output[ nextKey ] = source[ nextKey ];

						}

					}

				}

			}

			return output;

		};

	} )();

}

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

function EventDispatcher() {}

Object.assign( EventDispatcher.prototype, {

	addEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) this._listeners = {};

		var listeners = this._listeners;

		if ( listeners[ type ] === undefined ) {

			listeners[ type ] = [];

		}

		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

			listeners[ type ].push( listener );

		}

	},

	hasEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return false;

		var listeners = this._listeners;

		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

	},

	removeEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ type ];

		if ( listenerArray !== undefined ) {

			var index = listenerArray.indexOf( listener );

			if ( index !== - 1 ) {

				listenerArray.splice( index, 1 );

			}

		}

	},

	dispatchEvent: function ( event ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ event.type ];

		if ( listenerArray !== undefined ) {

			event.target = this;

			var array = listenerArray.slice( 0 );

			for ( var i = 0, l = array.length; i < l; i ++ ) {

				array[ i ].call( this, event );

			}

		}

	}

} );

var REVISION = '87';
var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
var CullFaceNone = 0;
var CullFaceBack = 1;
var CullFaceFront = 2;
var CullFaceFrontBack = 3;
var FrontFaceDirectionCW = 0;
var FrontFaceDirectionCCW = 1;
var BasicShadowMap = 0;
var PCFShadowMap = 1;
var PCFSoftShadowMap = 2;
var FrontSide = 0;
var BackSide = 1;
var DoubleSide = 2;
var FlatShading = 1;
var SmoothShading = 2;
var NoColors = 0;
var FaceColors = 1;
var VertexColors = 2;
var NoBlending = 0;
var NormalBlending = 1;
var AdditiveBlending = 2;
var SubtractiveBlending = 3;
var MultiplyBlending = 4;
var CustomBlending = 5;
var AddEquation = 100;
var SubtractEquation = 101;
var ReverseSubtractEquation = 102;
var MinEquation = 103;
var MaxEquation = 104;
var ZeroFactor = 200;
var OneFactor = 201;
var SrcColorFactor = 202;
var OneMinusSrcColorFactor = 203;
var SrcAlphaFactor = 204;
var OneMinusSrcAlphaFactor = 205;
var DstAlphaFactor = 206;
var OneMinusDstAlphaFactor = 207;
var DstColorFactor = 208;
var OneMinusDstColorFactor = 209;
var SrcAlphaSaturateFactor = 210;
var NeverDepth = 0;
var AlwaysDepth = 1;
var LessDepth = 2;
var LessEqualDepth = 3;
var EqualDepth = 4;
var GreaterEqualDepth = 5;
var GreaterDepth = 6;
var NotEqualDepth = 7;
var MultiplyOperation = 0;
var MixOperation = 1;
var AddOperation = 2;
var NoToneMapping = 0;
var LinearToneMapping = 1;
var ReinhardToneMapping = 2;
var Uncharted2ToneMapping = 3;
var CineonToneMapping = 4;
var UVMapping = 300;
var CubeReflectionMapping = 301;
var CubeRefractionMapping = 302;
var EquirectangularReflectionMapping = 303;
var EquirectangularRefractionMapping = 304;
var SphericalReflectionMapping = 305;
var CubeUVReflectionMapping = 306;
var CubeUVRefractionMapping = 307;
var RepeatWrapping = 1000;
var ClampToEdgeWrapping = 1001;
var MirroredRepeatWrapping = 1002;
var NearestFilter = 1003;
var NearestMipMapNearestFilter = 1004;
var NearestMipMapLinearFilter = 1005;
var LinearFilter = 1006;
var LinearMipMapNearestFilter = 1007;
var LinearMipMapLinearFilter = 1008;
var UnsignedByteType = 1009;
var ByteType = 1010;
var ShortType = 1011;
var UnsignedShortType = 1012;
var IntType = 1013;
var UnsignedIntType = 1014;
var FloatType = 1015;
var HalfFloatType = 1016;
var UnsignedShort4444Type = 1017;
var UnsignedShort5551Type = 1018;
var UnsignedShort565Type = 1019;
var UnsignedInt248Type = 1020;
var AlphaFormat = 1021;
var RGBFormat = 1022;
var RGBAFormat = 1023;
var LuminanceFormat = 1024;
var LuminanceAlphaFormat = 1025;
var RGBEFormat = RGBAFormat;
var DepthFormat = 1026;
var DepthStencilFormat = 1027;
var RGB_S3TC_DXT1_Format = 2001;
var RGBA_S3TC_DXT1_Format = 2002;
var RGBA_S3TC_DXT3_Format = 2003;
var RGBA_S3TC_DXT5_Format = 2004;
var RGB_PVRTC_4BPPV1_Format = 2100;
var RGB_PVRTC_2BPPV1_Format = 2101;
var RGBA_PVRTC_4BPPV1_Format = 2102;
var RGBA_PVRTC_2BPPV1_Format = 2103;
var RGB_ETC1_Format = 2151;
var LoopOnce = 2200;
var LoopRepeat = 2201;
var LoopPingPong = 2202;
var InterpolateDiscrete = 2300;
var InterpolateLinear = 2301;
var InterpolateSmooth = 2302;
var ZeroCurvatureEnding = 2400;
var ZeroSlopeEnding = 2401;
var WrapAroundEnding = 2402;
var TrianglesDrawMode = 0;
var TriangleStripDrawMode = 1;
var TriangleFanDrawMode = 2;
var LinearEncoding = 3000;
var sRGBEncoding = 3001;
var GammaEncoding = 3007;
var RGBEEncoding = 3002;
var LogLuvEncoding = 3003;
var RGBM7Encoding = 3004;
var RGBM16Encoding = 3005;
var RGBDEncoding = 3006;
var BasicDepthPacking = 3200;
var RGBADepthPacking = 3201;

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

var _Math = {

	DEG2RAD: Math.PI / 180,
	RAD2DEG: 180 / Math.PI,

	generateUUID: function () {

		// http://www.broofa.com/Tools/Math.uuid.htm

		var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
		var uuid = new Array( 36 );
		var rnd = 0, r;

		return function generateUUID() {

			for ( var i = 0; i < 36; i ++ ) {

				if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

					uuid[ i ] = '-';

				} else if ( i === 14 ) {

					uuid[ i ] = '4';

				} else {

					if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
					r = rnd & 0xf;
					rnd = rnd >> 4;
					uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

				}

			}

			return uuid.join( '' );

		};

	}(),

	clamp: function ( value, min, max ) {

		return Math.max( min, Math.min( max, value ) );

	},

	// compute euclidian modulo of m % n
	// https://en.wikipedia.org/wiki/Modulo_operation

	euclideanModulo: function ( n, m ) {

		return ( ( n % m ) + m ) % m;

	},

	// Linear mapping from range <a1, a2> to range <b1, b2>

	mapLinear: function ( x, a1, a2, b1, b2 ) {

		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	},

	// https://en.wikipedia.org/wiki/Linear_interpolation

	lerp: function ( x, y, t ) {

		return ( 1 - t ) * x + t * y;

	},

	// http://en.wikipedia.org/wiki/Smoothstep

	smoothstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * ( 3 - 2 * x );

	},

	smootherstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

	},

	// Random integer from <low, high> interval

	randInt: function ( low, high ) {

		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	},

	// Random float from <low, high> interval

	randFloat: function ( low, high ) {

		return low + Math.random() * ( high - low );

	},

	// Random float from <-range/2, range/2> interval

	randFloatSpread: function ( range ) {

		return range * ( 0.5 - Math.random() );

	},

	degToRad: function ( degrees ) {

		return degrees * _Math.DEG2RAD;

	},

	radToDeg: function ( radians ) {

		return radians * _Math.RAD2DEG;

	},

	isPowerOfTwo: function ( value ) {

		return ( value & ( value - 1 ) ) === 0 && value !== 0;

	},

	nearestPowerOfTwo: function ( value ) {

		return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

	},

	nextPowerOfTwo: function ( value ) {

		value --;
		value |= value >> 1;
		value |= value >> 2;
		value |= value >> 4;
		value |= value >> 8;
		value |= value >> 16;
		value ++;

		return value;

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

function Vector2( x, y ) {

	this.x = x || 0;
	this.y = y || 0;

}

Object.defineProperties( Vector2.prototype, {

	"width" : {

		get: function () {

			return this.x;

		},

		set: function ( value ) {

			this.x = value;

		}

	},

	"height" : {

		get: function () {

			return this.y;

		},

		set: function ( value ) {

			this.y = value;

		}

	}

} );

Object.assign( Vector2.prototype, {

	isVector2: true,

	set: function ( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	},

	multiply: function ( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

		return this;

	},

	clampScalar: function () {

		var min = new Vector2();
		var max = new Vector2();

		return function clampScalar( minVal, maxVal ) {

			min.set( minVal, minVal );
			max.set( maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	},

	lengthManhattan: function() {

		return Math.abs( this.x ) + Math.abs( this.y );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	angle: function () {

		// computes the angle in radians with respect to the positive x-axis

		var angle = Math.atan2( this.y, this.x );

		if ( angle < 0 ) angle += 2 * Math.PI;

		return angle;

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	},

	distanceToManhattan: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );

		return this;

	},

	rotateAround: function ( center, angle ) {

		var c = Math.cos( angle ), s = Math.sin( angle );

		var x = this.x - center.x;
		var y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

var textureId = 0;

function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

	Object.defineProperty( this, 'id', { value: textureId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';

	this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
	this.mipmaps = [];

	this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

	this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
	this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
	this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

	this.format = format !== undefined ? format : RGBAFormat;
	this.type = type !== undefined ? type : UnsignedByteType;

	this.offset = new Vector2( 0, 0 );
	this.repeat = new Vector2( 1, 1 );

	this.generateMipmaps = true;
	this.premultiplyAlpha = false;
	this.flipY = true;
	this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

	// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
	//
	// Also changing the encoding after already used by a Material will not automatically make the Material
	// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
	this.encoding = encoding !== undefined ? encoding : LinearEncoding;

	this.version = 0;
	this.onUpdate = null;

}

Texture.DEFAULT_IMAGE = undefined;
Texture.DEFAULT_MAPPING = UVMapping;

Object.defineProperty( Texture.prototype, "needsUpdate", {

	set: function ( value ) {

		if ( value === true ) this.version ++;

	}

} );

Object.assign( Texture.prototype, EventDispatcher.prototype, {

	constructor: Texture,

	isTexture: true,

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.name = source.name;

		this.image = source.image;
		this.mipmaps = source.mipmaps.slice( 0 );

		this.mapping = source.mapping;

		this.wrapS = source.wrapS;
		this.wrapT = source.wrapT;

		this.magFilter = source.magFilter;
		this.minFilter = source.minFilter;

		this.anisotropy = source.anisotropy;

		this.format = source.format;
		this.type = source.type;

		this.offset.copy( source.offset );
		this.repeat.copy( source.repeat );

		this.generateMipmaps = source.generateMipmaps;
		this.premultiplyAlpha = source.premultiplyAlpha;
		this.flipY = source.flipY;
		this.unpackAlignment = source.unpackAlignment;
		this.encoding = source.encoding;

		return this;

	},

	toJSON: function ( meta ) {

		if ( meta.textures[ this.uuid ] !== undefined ) {

			return meta.textures[ this.uuid ];

		}

		function getDataURL( image ) {

			var canvas;

			if ( image instanceof HTMLCanvasElement ) {

				canvas = image;

			} else {

				canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = image.width;
				canvas.height = image.height;

				var context = canvas.getContext( '2d' );

				if ( image instanceof ImageData ) {

					context.putImageData( image, 0, 0 );

				} else {

					context.drawImage( image, 0, 0, image.width, image.height );

				}

			}

			if ( canvas.width > 2048 || canvas.height > 2048 ) {

				return canvas.toDataURL( 'image/jpeg', 0.6 );

			} else {

				return canvas.toDataURL( 'image/png' );

			}

		}

		var output = {
			metadata: {
				version: 4.5,
				type: 'Texture',
				generator: 'Texture.toJSON'
			},

			uuid: this.uuid,
			name: this.name,

			mapping: this.mapping,

			repeat: [ this.repeat.x, this.repeat.y ],
			offset: [ this.offset.x, this.offset.y ],
			wrap: [ this.wrapS, this.wrapT ],

			minFilter: this.minFilter,
			magFilter: this.magFilter,
			anisotropy: this.anisotropy,

			flipY: this.flipY
		};

		if ( this.image !== undefined ) {

			// TODO: Move to THREE.Image

			var image = this.image;

			if ( image.uuid === undefined ) {

				image.uuid = _Math.generateUUID(); // UGH

			}

			if ( meta.images[ image.uuid ] === undefined ) {

				meta.images[ image.uuid ] = {
					uuid: image.uuid,
					url: getDataURL( image )
				};

			}

			output.image = image.uuid;

		}

		meta.textures[ this.uuid ] = output;

		return output;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	},

	transformUv: function ( uv ) {

		if ( this.mapping !== UVMapping ) return;

		uv.multiply( this.repeat );
		uv.add( this.offset );

		if ( uv.x < 0 || uv.x > 1 ) {

			switch ( this.wrapS ) {

				case RepeatWrapping:

					uv.x = uv.x - Math.floor( uv.x );
					break;

				case ClampToEdgeWrapping:

					uv.x = uv.x < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

						uv.x = Math.ceil( uv.x ) - uv.x;

					} else {

						uv.x = uv.x - Math.floor( uv.x );

					}
					break;

			}

		}

		if ( uv.y < 0 || uv.y > 1 ) {

			switch ( this.wrapT ) {

				case RepeatWrapping:

					uv.y = uv.y - Math.floor( uv.y );
					break;

				case ClampToEdgeWrapping:

					uv.y = uv.y < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

						uv.y = Math.ceil( uv.y ) - uv.y;

					} else {

						uv.y = uv.y - Math.floor( uv.y );

					}
					break;

			}

		}

		if ( this.flipY ) {

			uv.y = 1 - uv.y;

		}

	}

} );

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector4( x, y, z, w ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;
	this.w = ( w !== undefined ) ? w : 1;

}

Object.assign( Vector4.prototype, {

	isVector4: true,

	set: function ( x, y, z, w ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;
		this.w = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setW: function ( w ) {

		this.w = w;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			case 3: this.w = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			case 3: return this.w;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y, this.z, this.w );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = ( v.w !== undefined ) ? v.w : 1;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		this.w += v.w;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;
		this.w += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		this.w = a.w + b.w;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;
		this.w += v.w * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		this.w -= v.w;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;
		this.w -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		this.w = a.w - b.w;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		this.w *= scalar;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x, y = this.y, z = this.z, w = this.w;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	setAxisAngleFromQuaternion: function ( q ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

		// q is assumed to be normalized

		this.w = 2 * Math.acos( q.w );

		var s = Math.sqrt( 1 - q.w * q.w );

		if ( s < 0.0001 ) {

			 this.x = 1;
			 this.y = 0;
			 this.z = 0;

		} else {

			 this.x = q.x / s;
			 this.y = q.y / s;
			 this.z = q.z / s;

		}

		return this;

	},

	setAxisAngleFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var angle, x, y, z,		// variables for result
			epsilon = 0.01,		// margin to allow for rounding errors
			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

			te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
		     ( Math.abs( m13 - m31 ) < epsilon ) &&
		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

			// singularity found
			// first check for identity matrix which must have +1 for all terms
			// in leading diagonal and zero in other terms

			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

				// this singularity is identity matrix so angle = 0

				this.set( 1, 0, 0, 0 );

				return this; // zero angle, arbitrary axis

			}

			// otherwise this singularity is angle = 180

			angle = Math.PI;

			var xx = ( m11 + 1 ) / 2;
			var yy = ( m22 + 1 ) / 2;
			var zz = ( m33 + 1 ) / 2;
			var xy = ( m12 + m21 ) / 4;
			var xz = ( m13 + m31 ) / 4;
			var yz = ( m23 + m32 ) / 4;

			if ( ( xx > yy ) && ( xx > zz ) ) {

				// m11 is the largest diagonal term

				if ( xx < epsilon ) {

					x = 0;
					y = 0.707106781;
					z = 0.707106781;

				} else {

					x = Math.sqrt( xx );
					y = xy / x;
					z = xz / x;

				}

			} else if ( yy > zz ) {

				// m22 is the largest diagonal term

				if ( yy < epsilon ) {

					x = 0.707106781;
					y = 0;
					z = 0.707106781;

				} else {

					y = Math.sqrt( yy );
					x = xy / y;
					z = yz / y;

				}

			} else {

				// m33 is the largest diagonal term so base result on this

				if ( zz < epsilon ) {

					x = 0.707106781;
					y = 0.707106781;
					z = 0;

				} else {

					z = Math.sqrt( zz );
					x = xz / z;
					y = yz / z;

				}

			}

			this.set( x, y, z, angle );

			return this; // return 180 deg rotation

		}

		// as we have reached here there are no singularities so we can handle normally

		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
		                   ( m13 - m31 ) * ( m13 - m31 ) +
		                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

		if ( Math.abs( s ) < 0.001 ) s = 1;

		// prevent divide by zero, should not happen if matrix is orthogonal and should be
		// caught by singularity test above, but I've left it in just in case

		this.x = ( m32 - m23 ) / s;
		this.y = ( m13 - m31 ) / s;
		this.z = ( m21 - m12 ) / s;
		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

		return this;

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );
		this.w = Math.min( this.w, v.w );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );
		this.w = Math.max( this.w, v.w );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

		return this;

	},

	clampScalar: function () {

		var min, max;

		return function clampScalar( minVal, maxVal ) {

			if ( min === undefined ) {

				min = new Vector4();
				max = new Vector4();

			}

			min.set( minVal, minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );
		this.w = Math.floor( this.w );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );
		this.w = Math.ceil( this.w );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );
		this.w = Math.round( this.w );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;
		this.w = - this.w;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	},

	lengthManhattan: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;
		this.w += ( v.w - this.w ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];
		this.w = array[ offset + 3 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;
		array[ offset + 3 ] = this.w;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );
		this.w = attribute.getW( index );

		return this;

	}

} );

/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 * @author Marius Kintel / https://github.com/kintel
 */

/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/
function WebGLRenderTarget( width, height, options ) {

	this.uuid = _Math.generateUUID();

	this.width = width;
	this.height = height;

	this.scissor = new Vector4( 0, 0, width, height );
	this.scissorTest = false;

	this.viewport = new Vector4( 0, 0, width, height );

	options = options || {};

	if ( options.minFilter === undefined ) options.minFilter = LinearFilter;

	this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
	this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

}

Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {

	isWebGLRenderTarget: true,

	setSize: function ( width, height ) {

		if ( this.width !== width || this.height !== height ) {

			this.width = width;
			this.height = height;

			this.dispose();

		}

		this.viewport.set( 0, 0, width, height );
		this.scissor.set( 0, 0, width, height );

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.width = source.width;
		this.height = source.height;

		this.viewport.copy( source.viewport );

		this.texture = source.texture.clone();

		this.depthBuffer = source.depthBuffer;
		this.stencilBuffer = source.stencilBuffer;
		this.depthTexture = source.depthTexture;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com
 */

function WebGLRenderTargetCube( width, height, options ) {

	WebGLRenderTarget.call( this, width, height, options );

	this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
	this.activeMipMapLevel = 0;

}

WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

function Quaternion( x, y, z, w ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._w = ( w !== undefined ) ? w : 1;

}

Object.assign( Quaternion, {

	slerp: function ( qa, qb, qm, t ) {

		return qm.copy( qa ).slerp( qb, t );

	},

	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		var x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ],

			x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			var s = 1 - t,

				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				var sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			var tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

} );

Object.defineProperties( Quaternion.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this.onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this.onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this.onChangeCallback();

		}

	},

	w: {

		get: function () {

			return this._w;

		},

		set: function ( value ) {

			this._w = value;
			this.onChangeCallback();

		}

	}

} );

Object.assign( Quaternion.prototype, {

	set: function ( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this.onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._w );

	},

	copy: function ( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this.onChangeCallback();

		return this;

	},

	setFromEuler: function ( euler, update ) {

		if ( ! ( euler && euler.isEuler ) ) {

			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

		}

		var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		var cos = Math.cos;
		var sin = Math.sin;

		var c1 = cos( x / 2 );
		var c2 = cos( y / 2 );
		var c3 = cos( z / 2 );

		var s1 = sin( x / 2 );
		var s2 = sin( y / 2 );
		var s3 = sin( z / 2 );

		if ( order === 'XYZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'YXZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'ZXY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'ZYX' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'YZX' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'XZY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		}

		if ( update !== false ) this.onChangeCallback();

		return this;

	},

	setFromAxisAngle: function ( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		var halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33,
			s;

		if ( trace > 0 ) {

			s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this.onChangeCallback();

		return this;

	},

	setFromUnitVectors: function () {

		// assumes direction vectors vFrom and vTo are normalized

		var v1 = new Vector3();
		var r;

		var EPS = 0.000001;

		return function setFromUnitVectors( vFrom, vTo ) {

			if ( v1 === undefined ) v1 = new Vector3();

			r = vFrom.dot( vTo ) + 1;

			if ( r < EPS ) {

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					v1.set( - vFrom.y, vFrom.x, 0 );

				} else {

					v1.set( 0, - vFrom.z, vFrom.y );

				}

			} else {

				v1.crossVectors( vFrom, vTo );

			}

			this._x = v1.x;
			this._y = v1.y;
			this._z = v1.z;
			this._w = r;

			return this.normalize();

		};

	}(),

	inverse: function () {

		return this.conjugate().normalize();

	},

	conjugate: function () {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this.onChangeCallback();

		return this;

	},

	dot: function ( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	},

	lengthSq: function () {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	},

	length: function () {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	},

	normalize: function () {

		var l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this.onChangeCallback();

		return this;

	},

	multiply: function ( q, p ) {

		if ( p !== undefined ) {

			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
			return this.multiplyQuaternions( q, p );

		}

		return this.multiplyQuaternions( this, q );

	},

	premultiply: function ( q ) {

		return this.multiplyQuaternions( q, this );

	},

	multiplyQuaternions: function ( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this.onChangeCallback();

		return this;

	},

	slerp: function ( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		var x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

		if ( Math.abs( sinHalfTheta ) < 0.001 ) {

			this._w = 0.5 * ( w + this._w );
			this._x = 0.5 * ( x + this._x );
			this._y = 0.5 * ( y + this._y );
			this._z = 0.5 * ( z + this._z );

			return this;

		}

		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this.onChangeCallback();

		return this;

	},

	equals: function ( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this.onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector3( x, y, z ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;

}

Object.assign( Vector3.prototype, {

	isVector3: true,

	set: function ( x, y, z ) {

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y, this.z );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	},

	multiply: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
			return this.multiplyVectors( v, w );

		}

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	},

	multiplyVectors: function ( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	},

	applyEuler: function () {

		var quaternion = new Quaternion();

		return function applyEuler( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			return this.applyQuaternion( quaternion.setFromEuler( euler ) );

		};

	}(),

	applyAxisAngle: function () {

		var quaternion = new Quaternion();

		return function applyAxisAngle( axis, angle ) {

			return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

		};

	}(),

	applyMatrix3: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	},

	applyQuaternion: function ( q ) {

		var x = this.x, y = this.y, z = this.z;
		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		var ix =  qw * x + qy * z - qz * y;
		var iy =  qw * y + qz * x - qx * z;
		var iz =  qw * z + qx * y - qy * x;
		var iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	},

	project: function () {

		var matrix = new Matrix4();

		return function project( camera ) {

			matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
			return this.applyMatrix4( matrix );

		};

	}(),

	unproject: function () {

		var matrix = new Matrix4();

		return function unproject( camera ) {

			matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
			return this.applyMatrix4( matrix );

		};

	}(),

	transformDirection: function ( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	},

	clampScalar: function () {

		var min = new Vector3();
		var max = new Vector3();

		return function clampScalar( minVal, maxVal ) {

			min.set( minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	},

	// TODO lengthSquared?

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	},

	lengthManhattan: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	cross: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
			return this.crossVectors( v, w );

		}

		var x = this.x, y = this.y, z = this.z;

		this.x = y * v.z - z * v.y;
		this.y = z * v.x - x * v.z;
		this.z = x * v.y - y * v.x;

		return this;

	},

	crossVectors: function ( a, b ) {

		var ax = a.x, ay = a.y, az = a.z;
		var bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	},

	projectOnVector: function ( vector ) {

		var scalar = vector.dot( this ) / vector.lengthSq();

		return this.copy( vector ).multiplyScalar( scalar );

	},

	projectOnPlane: function () {

		var v1 = new Vector3();

		return function projectOnPlane( planeNormal ) {

			v1.copy( this ).projectOnVector( planeNormal );

			return this.sub( v1 );

		};

	}(),

	reflect: function () {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		var v1 = new Vector3();

		return function reflect( normal ) {

			return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		};

	}(),

	angleTo: function ( v ) {

		var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

		// clamp, to handle numerical problems

		return Math.acos( _Math.clamp( theta, - 1, 1 ) );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	},

	distanceToManhattan: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	},

	setFromSpherical: function ( s ) {

		var sinPhiRadius = Math.sin( s.phi ) * s.radius;

		this.x = sinPhiRadius * Math.sin( s.theta );
		this.y = Math.cos( s.phi ) * s.radius;
		this.z = sinPhiRadius * Math.cos( s.theta );

		return this;

	},

	setFromCylindrical: function ( c ) {

		this.x = c.radius * Math.sin( c.theta );
		this.y = c.y;
		this.z = c.radius * Math.cos( c.theta );

		return this;

	},

	setFromMatrixPosition: function ( m ) {

		var e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	},

	setFromMatrixScale: function ( m ) {

		var sx = this.setFromMatrixColumn( m, 0 ).length();
		var sy = this.setFromMatrixColumn( m, 1 ).length();
		var sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	},

	setFromMatrixColumn: function ( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Matrix4() {

	this.elements = [

		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix4.prototype, {

	isMatrix4: true,

	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new Matrix4().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	},

	copyPosition: function ( m ) {

		var te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	},

	extractBasis: function ( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	},

	makeBasis: function ( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0,       0,       0,       1
		);

		return this;

	},

	extractRotation: function () {

		var v1 = new Vector3();

		return function extractRotation( m ) {

			var te = this.elements;
			var me = m.elements;

			var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
			var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
			var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;

			return this;

		};

	}(),

	makeRotationFromEuler: function ( euler ) {

		if ( ! ( euler && euler.isEuler ) ) {

			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

		}

		var te = this.elements;

		var x = euler.x, y = euler.y, z = euler.z;
		var a = Math.cos( x ), b = Math.sin( x );
		var c = Math.cos( y ), d = Math.sin( y );
		var e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// last column
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// bottom row
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	makeRotationFromQuaternion: function ( q ) {

		var te = this.elements;

		var x = q._x, y = q._y, z = q._z, w = q._w;
		var x2 = x + x, y2 = y + y, z2 = z + z;
		var xx = x * x2, xy = x * y2, xz = x * z2;
		var yy = y * y2, yz = y * z2, zz = z * z2;
		var wx = w * x2, wy = w * y2, wz = w * z2;

		te[ 0 ] = 1 - ( yy + zz );
		te[ 4 ] = xy - wz;
		te[ 8 ] = xz + wy;

		te[ 1 ] = xy + wz;
		te[ 5 ] = 1 - ( xx + zz );
		te[ 9 ] = yz - wx;

		te[ 2 ] = xz - wy;
		te[ 6 ] = yz + wx;
		te[ 10 ] = 1 - ( xx + yy );

		// last column
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// bottom row
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	lookAt: function () {

		var x = new Vector3();
		var y = new Vector3();
		var z = new Vector3();

		return function lookAt( eye, target, up ) {

			var te = this.elements;

			z.subVectors( eye, target );

			if ( z.lengthSq() === 0 ) {

				// eye and target are in the same position

				z.z = 1;

			}

			z.normalize();
			x.crossVectors( up, z );

			if ( x.lengthSq() === 0 ) {

				// up and z are parallel

				if ( Math.abs( up.z ) === 1 ) {

					z.x += 0.0001;

				} else {

					z.z += 0.0001;

				}

				z.normalize();
				x.crossVectors( up, z );

			}

			x.normalize();
			y.crossVectors( z, x );

			te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
			te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
			te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

			return this;

		};

	}(),

	multiply: function ( m, n ) {

		if ( n !== undefined ) {

			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
			return this.multiplyMatrices( m, n );

		}

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	},

	applyToBufferAttribute: function () {

		var v1 = new Vector3();

		return function applyToBufferAttribute( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				v1.x = attribute.getX( i );
				v1.y = attribute.getY( i );
				v1.z = attribute.getZ( i );

				v1.applyMatrix4( this );

				attribute.setXYZ( i, v1.x, v1.y, v1.z );

			}

			return attribute;

		};

	}(),

	determinant: function () {

		var te = this.elements;

		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	},

	transpose: function () {

		var te = this.elements;
		var tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	},

	setPosition: function ( v ) {

		var te = this.elements;

		te[ 12 ] = v.x;
		te[ 13 ] = v.y;
		te[ 14 ] = v.z;

		return this;

	},

	getInverse: function ( m, throwOnDegenerate ) {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		var te = this.elements,
			me = m.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) {

			var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	},

	scale: function ( v ) {

		var te = this.elements;
		var x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	},

	getMaxScaleOnAxis: function () {

		var te = this.elements;

		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	},

	makeTranslation: function ( x, y, z ) {

		this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationX: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0,  0, 0,
			0, c, - s, 0,
			0, s,  c, 0,
			0, 0,  0, 1

		);

		return this;

	},

	makeRotationY: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	},

	makeRotationZ: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s,  c, 0, 0,
			0,  0, 1, 0,
			0,  0, 0, 1

		);

		return this;

	},

	makeRotationAxis: function ( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		var c = Math.cos( angle );
		var s = Math.sin( angle );
		var t = 1 - c;
		var x = axis.x, y = axis.y, z = axis.z;
		var tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		 return this;

	},

	makeScale: function ( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeShear: function ( x, y, z ) {

		this.set(

			1, y, z, 0,
			x, 1, z, 0,
			x, y, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	compose: function ( position, quaternion, scale ) {

		this.makeRotationFromQuaternion( quaternion );
		this.scale( scale );
		this.setPosition( position );

		return this;

	},

	decompose: function () {

		var vector = new Vector3();
		var matrix = new Matrix4();

		return function decompose( position, quaternion, scale ) {

			var te = this.elements;

			var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			var det = this.determinant();
			if ( det < 0 ) sx = - sx;

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part
			matrix.copy( this );

			var invSX = 1 / sx;
			var invSY = 1 / sy;
			var invSZ = 1 / sz;

			matrix.elements[ 0 ] *= invSX;
			matrix.elements[ 1 ] *= invSX;
			matrix.elements[ 2 ] *= invSX;

			matrix.elements[ 4 ] *= invSY;
			matrix.elements[ 5 ] *= invSY;
			matrix.elements[ 6 ] *= invSY;

			matrix.elements[ 8 ] *= invSZ;
			matrix.elements[ 9 ] *= invSZ;
			matrix.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( matrix );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		};

	}(),

	makePerspective: function ( left, right, top, bottom, near, far ) {

		if ( far === undefined ) {

			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

		}

		var te = this.elements;
		var x = 2 * near / ( right - left );
		var y = 2 * near / ( top - bottom );

		var a = ( right + left ) / ( right - left );
		var b = ( top + bottom ) / ( top - bottom );
		var c = - ( far + near ) / ( far - near );
		var d = - 2 * far * near / ( far - near );

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	},

	makeOrthographic: function ( left, right, top, bottom, near, far ) {

		var te = this.elements;
		var w = 1.0 / ( right - left );
		var h = 1.0 / ( top - bottom );
		var p = 1.0 / ( far - near );

		var x = ( right + left ) * w;
		var y = ( top + bottom ) * h;
		var z = ( far + near ) * p;

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		for ( var i = 0; i < 16; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.image = { data: data, width: width, height: height };

	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

	this.generateMipmaps = false;
	this.flipY = false;
	this.unpackAlignment = 1;

}

DataTexture.prototype = Object.create( Texture.prototype );
DataTexture.prototype.constructor = DataTexture;

DataTexture.prototype.isDataTexture = true;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

	images = images !== undefined ? images : [];
	mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

	Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.flipY = false;

}

CubeTexture.prototype = Object.create( Texture.prototype );
CubeTexture.prototype.constructor = CubeTexture;

CubeTexture.prototype.isCubeTexture = true;

Object.defineProperty( CubeTexture.prototype, 'images', {

	get: function () {

		return this.image;

	},

	set: function ( value ) {

		this.image = value;

	}

} );

/**
 * @author tschw
 *
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [renderer] )
 *
 * 		uploads a uniform value(s)
 *  	the 'renderer' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (renderer factorizations):
 *
 * .upload( gl, seq, values, renderer )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (renderer factorizations):
 *
 * .setValue( gl, name, value )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .set( gl, obj, prop )
 *
 * 		sets uniform from object and property with same name than uniform
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */

var emptyTexture = new Texture();
var emptyCubeTexture = new CubeTexture();

// --- Base for inner nodes (including the root) ---

function UniformContainer() {

	this.seq = [];
	this.map = {};

}

// --- Utilities ---

// Array Caches (provide typed arrays for temporary by size)

var arrayCacheF32 = [];
var arrayCacheI32 = [];

// Float32Array caches used for uploading Matrix uniforms

var mat4array = new Float32Array( 16 );
var mat3array = new Float32Array( 9 );

// Flattening for arrays of vectors and matrices

function flatten( array, nBlocks, blockSize ) {

	var firstElem = array[ 0 ];

	if ( firstElem <= 0 || firstElem > 0 ) return array;
	// unoptimized: ! isNaN( firstElem )
	// see http://jacksondunstan.com/articles/983

	var n = nBlocks * blockSize,
		r = arrayCacheF32[ n ];

	if ( r === undefined ) {

		r = new Float32Array( n );
		arrayCacheF32[ n ] = r;

	}

	if ( nBlocks !== 0 ) {

		firstElem.toArray( r, 0 );

		for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

			offset += blockSize;
			array[ i ].toArray( r, offset );

		}

	}

	return r;

}

// Texture unit allocation

function allocTexUnits( renderer, n ) {

	var r = arrayCacheI32[ n ];

	if ( r === undefined ) {

		r = new Int32Array( n );
		arrayCacheI32[ n ] = r;

	}

	for ( var i = 0; i !== n; ++ i )
		r[ i ] = renderer.allocTextureUnit();

	return r;

}

// --- Setters ---

// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.

// Single scalar

function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }
function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }

// Single float vector (from flat array or THREE.VectorN)

function setValue2fv( gl, v ) {

	if ( v.x === undefined ) gl.uniform2fv( this.addr, v );
	else gl.uniform2f( this.addr, v.x, v.y );

}

function setValue3fv( gl, v ) {

	if ( v.x !== undefined )
		gl.uniform3f( this.addr, v.x, v.y, v.z );
	else if ( v.r !== undefined )
		gl.uniform3f( this.addr, v.r, v.g, v.b );
	else
		gl.uniform3fv( this.addr, v );

}

function setValue4fv( gl, v ) {

	if ( v.x === undefined ) gl.uniform4fv( this.addr, v );
	else gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

}

// Single matrix (from flat array or MatrixN)

function setValue2fm( gl, v ) {

	gl.uniformMatrix2fv( this.addr, false, v.elements || v );

}

function setValue3fm( gl, v ) {

	if ( v.elements === undefined ) {

		gl.uniformMatrix3fv( this.addr, false, v );

	} else {

		mat3array.set( v.elements );
		gl.uniformMatrix3fv( this.addr, false, mat3array );

	}

}

function setValue4fm( gl, v ) {

	if ( v.elements === undefined ) {

		gl.uniformMatrix4fv( this.addr, false, v );

	} else {

		mat4array.set( v.elements );
		gl.uniformMatrix4fv( this.addr, false, mat4array );

	}

}

// Single texture (2D / Cube)

function setValueT1( gl, v, renderer ) {

	var unit = renderer.allocTextureUnit();
	gl.uniform1i( this.addr, unit );
	renderer.setTexture2D( v || emptyTexture, unit );

}

function setValueT6( gl, v, renderer ) {

	var unit = renderer.allocTextureUnit();
	gl.uniform1i( this.addr, unit );
	renderer.setTextureCube( v || emptyCubeTexture, unit );

}

// Integer / Boolean vectors or arrays thereof (always flat arrays)

function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }
function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }
function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }

// Helper to pick the right setter for the singular case

function getSingularSetter( type ) {

	switch ( type ) {

		case 0x1406: return setValue1f; // FLOAT
		case 0x8b50: return setValue2fv; // _VEC2
		case 0x8b51: return setValue3fv; // _VEC3
		case 0x8b52: return setValue4fv; // _VEC4

		case 0x8b5a: return setValue2fm; // _MAT2
		case 0x8b5b: return setValue3fm; // _MAT3
		case 0x8b5c: return setValue4fm; // _MAT4

		case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
		case 0x8b60: return setValueT6; // SAMPLER_CUBE

		case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

	}

}

// Array of scalars

function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }
function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }

// Array of vectors (flat or from THREE classes)

function setValueV2a( gl, v ) {

	gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

}

function setValueV3a( gl, v ) {

	gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

}

function setValueV4a( gl, v ) {

	gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

}

// Array of matrices (flat or from THREE clases)

function setValueM2a( gl, v ) {

	gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

}

function setValueM3a( gl, v ) {

	gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

}

function setValueM4a( gl, v ) {

	gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

}

// Array of textures (2D / Cube)

function setValueT1a( gl, v, renderer ) {

	var n = v.length,
		units = allocTexUnits( renderer, n );

	gl.uniform1iv( this.addr, units );

	for ( var i = 0; i !== n; ++ i ) {

		renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

	}

}

function setValueT6a( gl, v, renderer ) {

	var n = v.length,
		units = allocTexUnits( renderer, n );

	gl.uniform1iv( this.addr, units );

	for ( var i = 0; i !== n; ++ i ) {

		renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

	}

}

// Helper to pick the right setter for a pure (bottom-level) array

function getPureArraySetter( type ) {

	switch ( type ) {

		case 0x1406: return setValue1fv; // FLOAT
		case 0x8b50: return setValueV2a; // _VEC2
		case 0x8b51: return setValueV3a; // _VEC3
		case 0x8b52: return setValueV4a; // _VEC4

		case 0x8b5a: return setValueM2a; // _MAT2
		case 0x8b5b: return setValueM3a; // _MAT3
		case 0x8b5c: return setValueM4a; // _MAT4

		case 0x8b5e: return setValueT1a; // SAMPLER_2D
		case 0x8b60: return setValueT6a; // SAMPLER_CUBE

		case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

	}

}

// --- Uniform Classes ---

function SingleUniform( id, activeInfo, addr ) {

	this.id = id;
	this.addr = addr;
	this.setValue = getSingularSetter( activeInfo.type );

	// this.path = activeInfo.name; // DEBUG

}

function PureArrayUniform( id, activeInfo, addr ) {

	this.id = id;
	this.addr = addr;
	this.size = activeInfo.size;
	this.setValue = getPureArraySetter( activeInfo.type );

	// this.path = activeInfo.name; // DEBUG

}

function StructuredUniform( id ) {

	this.id = id;

	UniformContainer.call( this ); // mix-in

}

StructuredUniform.prototype.setValue = function ( gl, value ) {

	// Note: Don't need an extra 'renderer' parameter, since samplers
	// are not allowed in structured uniforms.

	var seq = this.seq;

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ];
		u.setValue( gl, value[ u.id ] );

	}

};

// --- Top-level ---

// Parser - builds up the property tree from the path strings

var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.

function addUniform( container, uniformObject ) {

	container.seq.push( uniformObject );
	container.map[ uniformObject.id ] = uniformObject;

}

function parseUniform( activeInfo, addr, container ) {

	var path = activeInfo.name,
		pathLength = path.length;

	// reset RegExp object, because of the early exit of a previous run
	RePathPart.lastIndex = 0;

	for ( ; ; ) {

		var match = RePathPart.exec( path ),
			matchEnd = RePathPart.lastIndex,

			id = match[ 1 ],
			idIsIndex = match[ 2 ] === ']',
			subscript = match[ 3 ];

		if ( idIsIndex ) id = id | 0; // convert to integer

		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

			// bare name or "pure" bottom-level array "[0]" suffix

			addUniform( container, subscript === undefined ?
					new SingleUniform( id, activeInfo, addr ) :
					new PureArrayUniform( id, activeInfo, addr ) );

			break;

		} else {

			// step into inner node / create it in case it doesn't exist

			var map = container.map, next = map[ id ];

			if ( next === undefined ) {

				next = new StructuredUniform( id );
				addUniform( container, next );

			}

			container = next;

		}

	}

}

// Root Container

function WebGLUniforms( gl, program, renderer ) {

	UniformContainer.call( this );

	this.renderer = renderer;

	var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

	for ( var i = 0; i < n; ++ i ) {

		var info = gl.getActiveUniform( program, i ),
			path = info.name,
			addr = gl.getUniformLocation( program, path );

		parseUniform( info, addr, this );

	}

}

WebGLUniforms.prototype.setValue = function ( gl, name, value ) {

	var u = this.map[ name ];

	if ( u !== undefined ) u.setValue( gl, value, this.renderer );

};

WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

	var v = object[ name ];

	if ( v !== undefined ) this.setValue( gl, name, v );

};


// Static interface

WebGLUniforms.upload = function ( gl, seq, values, renderer ) {

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ],
			v = values[ u.id ];

		if ( v.needsUpdate !== false ) {

			// note: always updating when .needsUpdate is undefined
			u.setValue( gl, v.value, renderer );

		}

	}

};

WebGLUniforms.seqWithValue = function ( seq, values ) {

	var r = [];

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ];
		if ( u.id in values ) r.push( u );

	}

	return r;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

function Color( r, g, b ) {

	if ( g === undefined && b === undefined ) {

		// r is THREE.Color, hex or string
		return this.set( r );

	}

	return this.setRGB( r, g, b );

}

Object.assign( Color.prototype, {

	isColor: true,

	r: 1, g: 1, b: 1,

	set: function ( value ) {

		if ( value && value.isColor ) {

			this.copy( value );

		} else if ( typeof value === 'number' ) {

			this.setHex( value );

		} else if ( typeof value === 'string' ) {

			this.setStyle( value );

		}

		return this;

	},

	setScalar: function ( scalar ) {

		this.r = scalar;
		this.g = scalar;
		this.b = scalar;

		return this;

	},

	setHex: function ( hex ) {

		hex = Math.floor( hex );

		this.r = ( hex >> 16 & 255 ) / 255;
		this.g = ( hex >> 8 & 255 ) / 255;
		this.b = ( hex & 255 ) / 255;

		return this;

	},

	setRGB: function ( r, g, b ) {

		this.r = r;
		this.g = g;
		this.b = b;

		return this;

	},

	setHSL: function () {

		function hue2rgb( p, q, t ) {

			if ( t < 0 ) t += 1;
			if ( t > 1 ) t -= 1;
			if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
			if ( t < 1 / 2 ) return q;
			if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
			return p;

		}

		return function setHSL( h, s, l ) {

			// h,s,l ranges are in 0.0 - 1.0
			h = _Math.euclideanModulo( h, 1 );
			s = _Math.clamp( s, 0, 1 );
			l = _Math.clamp( l, 0, 1 );

			if ( s === 0 ) {

				this.r = this.g = this.b = l;

			} else {

				var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
				var q = ( 2 * l ) - p;

				this.r = hue2rgb( q, p, h + 1 / 3 );
				this.g = hue2rgb( q, p, h );
				this.b = hue2rgb( q, p, h - 1 / 3 );

			}

			return this;

		};

	}(),

	setStyle: function ( style ) {

		function handleAlpha( string ) {

			if ( string === undefined ) return;

			if ( parseFloat( string ) < 1 ) {

				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

			}

		}


		var m;

		if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

			// rgb / hsl

			var color;
			var name = m[ 1 ];
			var components = m[ 2 ];

			switch ( name ) {

				case 'rgb':
				case 'rgba':

					if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// rgb(255,0,0) rgba(255,0,0,0.5)
						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

						handleAlpha( color[ 5 ] );

						return this;

					}

					if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

						handleAlpha( color[ 5 ] );

						return this;

					}

					break;

				case 'hsl':
				case 'hsla':

					if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
						var h = parseFloat( color[ 1 ] ) / 360;
						var s = parseInt( color[ 2 ], 10 ) / 100;
						var l = parseInt( color[ 3 ], 10 ) / 100;

						handleAlpha( color[ 5 ] );

						return this.setHSL( h, s, l );

					}

					break;

			}

		} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

			// hex color

			var hex = m[ 1 ];
			var size = hex.length;

			if ( size === 3 ) {

				// #ff0
				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

				return this;

			} else if ( size === 6 ) {

				// #ff0000
				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

				return this;

			}

		}

		if ( style && style.length > 0 ) {

			// color keywords
			var hex = ColorKeywords[ style ];

			if ( hex !== undefined ) {

				// red
				this.setHex( hex );

			} else {

				// unknown color
				console.warn( 'THREE.Color: Unknown color ' + style );

			}

		}

		return this;

	},

	clone: function () {

		return new this.constructor( this.r, this.g, this.b );

	},

	copy: function ( color ) {

		this.r = color.r;
		this.g = color.g;
		this.b = color.b;

		return this;

	},

	copyGammaToLinear: function ( color, gammaFactor ) {

		if ( gammaFactor === undefined ) gammaFactor = 2.0;

		this.r = Math.pow( color.r, gammaFactor );
		this.g = Math.pow( color.g, gammaFactor );
		this.b = Math.pow( color.b, gammaFactor );

		return this;

	},

	copyLinearToGamma: function ( color, gammaFactor ) {

		if ( gammaFactor === undefined ) gammaFactor = 2.0;

		var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

		this.r = Math.pow( color.r, safeInverse );
		this.g = Math.pow( color.g, safeInverse );
		this.b = Math.pow( color.b, safeInverse );

		return this;

	},

	convertGammaToLinear: function () {

		var r = this.r, g = this.g, b = this.b;

		this.r = r * r;
		this.g = g * g;
		this.b = b * b;

		return this;

	},

	convertLinearToGamma: function () {

		this.r = Math.sqrt( this.r );
		this.g = Math.sqrt( this.g );
		this.b = Math.sqrt( this.b );

		return this;

	},

	getHex: function () {

		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

	},

	getHexString: function () {

		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

	},

	getHSL: function ( optionalTarget ) {

		// h,s,l ranges are in 0.0 - 1.0

		var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

		var r = this.r, g = this.g, b = this.b;

		var max = Math.max( r, g, b );
		var min = Math.min( r, g, b );

		var hue, saturation;
		var lightness = ( min + max ) / 2.0;

		if ( min === max ) {

			hue = 0;
			saturation = 0;

		} else {

			var delta = max - min;

			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

			switch ( max ) {

				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
				case g: hue = ( b - r ) / delta + 2; break;
				case b: hue = ( r - g ) / delta + 4; break;

			}

			hue /= 6;

		}

		hsl.h = hue;
		hsl.s = saturation;
		hsl.l = lightness;

		return hsl;

	},

	getStyle: function () {

		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

	},

	offsetHSL: function ( h, s, l ) {

		var hsl = this.getHSL();

		hsl.h += h; hsl.s += s; hsl.l += l;

		this.setHSL( hsl.h, hsl.s, hsl.l );

		return this;

	},

	add: function ( color ) {

		this.r += color.r;
		this.g += color.g;
		this.b += color.b;

		return this;

	},

	addColors: function ( color1, color2 ) {

		this.r = color1.r + color2.r;
		this.g = color1.g + color2.g;
		this.b = color1.b + color2.b;

		return this;

	},

	addScalar: function ( s ) {

		this.r += s;
		this.g += s;
		this.b += s;

		return this;

	},

	sub: function( color ) {

		this.r = Math.max( 0, this.r - color.r );
		this.g = Math.max( 0, this.g - color.g );
		this.b = Math.max( 0, this.b - color.b );

		return this;

	},

	multiply: function ( color ) {

		this.r *= color.r;
		this.g *= color.g;
		this.b *= color.b;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.r *= s;
		this.g *= s;
		this.b *= s;

		return this;

	},

	lerp: function ( color, alpha ) {

		this.r += ( color.r - this.r ) * alpha;
		this.g += ( color.g - this.g ) * alpha;
		this.b += ( color.b - this.b ) * alpha;

		return this;

	},

	equals: function ( c ) {

		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.r = array[ offset ];
		this.g = array[ offset + 1 ];
		this.b = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.r;
		array[ offset + 1 ] = this.g;
		array[ offset + 2 ] = this.b;

		return array;

	},

	toJSON: function () {

		return this.getHex();

	}

} );

/**
 * Uniforms library for shared webgl shaders
 */

var UniformsLib = {

	common: {

		diffuse: { value: new Color( 0xeeeeee ) },
		opacity: { value: 1.0 },

		map: { value: null },
		offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },

		alphaMap: { value: null },

	},

	specularmap: {

		specularMap: { value: null },

	},

	envmap: {

		envMap: { value: null },
		flipEnvMap: { value: - 1 },
		reflectivity: { value: 1.0 },
		refractionRatio: { value: 0.98 }

	},

	aomap: {

		aoMap: { value: null },
		aoMapIntensity: { value: 1 }

	},

	lightmap: {

		lightMap: { value: null },
		lightMapIntensity: { value: 1 }

	},

	emissivemap: {

		emissiveMap: { value: null }

	},

	bumpmap: {

		bumpMap: { value: null },
		bumpScale: { value: 1 }

	},

	normalmap: {

		normalMap: { value: null },
		normalScale: { value: new Vector2( 1, 1 ) }

	},

	displacementmap: {

		displacementMap: { value: null },
		displacementScale: { value: 1 },
		displacementBias: { value: 0 }

	},

	roughnessmap: {

		roughnessMap: { value: null }

	},

	metalnessmap: {

		metalnessMap: { value: null }

	},

	gradientmap: {

		gradientMap: { value: null }

	},

	fog: {

		fogDensity: { value: 0.00025 },
		fogNear: { value: 1 },
		fogFar: { value: 2000 },
		fogColor: { value: new Color( 0xffffff ) }

	},

	lights: {

		ambientLightColor: { value: [] },

		directionalLights: { value: [], properties: {
			direction: {},
			color: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		directionalShadowMap: { value: [] },
		directionalShadowMatrix: { value: [] },

		spotLights: { value: [], properties: {
			color: {},
			position: {},
			direction: {},
			distance: {},
			coneCos: {},
			penumbraCos: {},
			decay: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		spotShadowMap: { value: [] },
		spotShadowMatrix: { value: [] },

		pointLights: { value: [], properties: {
			color: {},
			position: {},
			decay: {},
			distance: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {},
			shadowCameraNear: {},
			shadowCameraFar: {}
		} },

		pointShadowMap: { value: [] },
		pointShadowMatrix: { value: [] },

		hemisphereLights: { value: [], properties: {
			direction: {},
			skyColor: {},
			groundColor: {}
		} },

		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
		rectAreaLights: { value: [], properties: {
			color: {},
			position: {},
			width: {},
			height: {}
		} }

	},

	points: {

		diffuse: { value: new Color( 0xeeeeee ) },
		opacity: { value: 1.0 },
		size: { value: 1.0 },
		scale: { value: 1.0 },
		map: { value: null },
		offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }

	}

};

/**
 * Uniform Utilities
 */

var UniformsUtils = {

	merge: function ( uniforms ) {

		var merged = {};

		for ( var u = 0; u < uniforms.length; u ++ ) {

			var tmp = this.clone( uniforms[ u ] );

			for ( var p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	},

	clone: function ( uniforms_src ) {

		var uniforms_dst = {};

		for ( var u in uniforms_src ) {

			uniforms_dst[ u ] = {};

			for ( var p in uniforms_src[ u ] ) {

				var parameter_src = uniforms_src[ u ][ p ];

				if ( parameter_src && ( parameter_src.isColor ||
					parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
					parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
					parameter_src.isTexture ) ) {

					uniforms_dst[ u ][ p ] = parameter_src.clone();

				} else if ( Array.isArray( parameter_src ) ) {

					uniforms_dst[ u ][ p ] = parameter_src.slice();

				} else {

					uniforms_dst[ u ][ p ] = parameter_src;

				}

			}

		}

		return uniforms_dst;

	}

};

var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

var begin_vertex = "\nvec3 transformed = vec3( position );\n";

var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

var bsdfs = "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transpose( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";

var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transpose( const in mat3 v ) {\n\tmat3 tmp;\n\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\n\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\n\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\n\treturn tmp;\n}\n";

var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n";

var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n";

var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

var fog_vertex = "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif";

var fog_pars_vertex = "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n";

var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";

var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";

var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

var logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n";

var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

var map_particle_fragment = "#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n";

var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n";

var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n";

var dithering_fragment = "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n";

var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n";

var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n";

var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n";

var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

var tonemapping_pars_fragment = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n";

var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n";

var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n";

var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n";

var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";

var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";

var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";

var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n}\n";

var shadow_vert = "#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

var ShaderChunk = {
	alphamap_fragment: alphamap_fragment,
	alphamap_pars_fragment: alphamap_pars_fragment,
	alphatest_fragment: alphatest_fragment,
	aomap_fragment: aomap_fragment,
	aomap_pars_fragment: aomap_pars_fragment,
	begin_vertex: begin_vertex,
	beginnormal_vertex: beginnormal_vertex,
	bsdfs: bsdfs,
	bumpmap_pars_fragment: bumpmap_pars_fragment,
	clipping_planes_fragment: clipping_planes_fragment,
	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
	clipping_planes_vertex: clipping_planes_vertex,
	color_fragment: color_fragment,
	color_pars_fragment: color_pars_fragment,
	color_pars_vertex: color_pars_vertex,
	color_vertex: color_vertex,
	common: common,
	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
	defaultnormal_vertex: defaultnormal_vertex,
	displacementmap_pars_vertex: displacementmap_pars_vertex,
	displacementmap_vertex: displacementmap_vertex,
	emissivemap_fragment: emissivemap_fragment,
	emissivemap_pars_fragment: emissivemap_pars_fragment,
	encodings_fragment: encodings_fragment,
	encodings_pars_fragment: encodings_pars_fragment,
	envmap_fragment: envmap_fragment,
	envmap_pars_fragment: envmap_pars_fragment,
	envmap_pars_vertex: envmap_pars_vertex,
	envmap_vertex: envmap_vertex,
	fog_vertex: fog_vertex,
	fog_pars_vertex: fog_pars_vertex,
	fog_fragment: fog_fragment,
	fog_pars_fragment: fog_pars_fragment,
	gradientmap_pars_fragment: gradientmap_pars_fragment,
	lightmap_fragment: lightmap_fragment,
	lightmap_pars_fragment: lightmap_pars_fragment,
	lights_lambert_vertex: lights_lambert_vertex,
	lights_pars: lights_pars,
	lights_phong_fragment: lights_phong_fragment,
	lights_phong_pars_fragment: lights_phong_pars_fragment,
	lights_physical_fragment: lights_physical_fragment,
	lights_physical_pars_fragment: lights_physical_pars_fragment,
	lights_template: lights_template,
	logdepthbuf_fragment: logdepthbuf_fragment,
	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
	logdepthbuf_vertex: logdepthbuf_vertex,
	map_fragment: map_fragment,
	map_pars_fragment: map_pars_fragment,
	map_particle_fragment: map_particle_fragment,
	map_particle_pars_fragment: map_particle_pars_fragment,
	metalnessmap_fragment: metalnessmap_fragment,
	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
	morphnormal_vertex: morphnormal_vertex,
	morphtarget_pars_vertex: morphtarget_pars_vertex,
	morphtarget_vertex: morphtarget_vertex,
	normal_fragment: normal_fragment,
	normalmap_pars_fragment: normalmap_pars_fragment,
	packing: packing,
	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
	project_vertex: project_vertex,
	dithering_fragment: dithering_fragment,
	dithering_pars_fragment: dithering_pars_fragment,
	roughnessmap_fragment: roughnessmap_fragment,
	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
	shadowmap_pars_fragment: shadowmap_pars_fragment,
	shadowmap_pars_vertex: shadowmap_pars_vertex,
	shadowmap_vertex: shadowmap_vertex,
	shadowmask_pars_fragment: shadowmask_pars_fragment,
	skinbase_vertex: skinbase_vertex,
	skinning_pars_vertex: skinning_pars_vertex,
	skinning_vertex: skinning_vertex,
	skinnormal_vertex: skinnormal_vertex,
	specularmap_fragment: specularmap_fragment,
	specularmap_pars_fragment: specularmap_pars_fragment,
	tonemapping_fragment: tonemapping_fragment,
	tonemapping_pars_fragment: tonemapping_pars_fragment,
	uv_pars_fragment: uv_pars_fragment,
	uv_pars_vertex: uv_pars_vertex,
	uv_vertex: uv_vertex,
	uv2_pars_fragment: uv2_pars_fragment,
	uv2_pars_vertex: uv2_pars_vertex,
	uv2_vertex: uv2_vertex,
	worldpos_vertex: worldpos_vertex,

	cube_frag: cube_frag,
	cube_vert: cube_vert,
	depth_frag: depth_frag,
	depth_vert: depth_vert,
	distanceRGBA_frag: distanceRGBA_frag,
	distanceRGBA_vert: distanceRGBA_vert,
	equirect_frag: equirect_frag,
	equirect_vert: equirect_vert,
	linedashed_frag: linedashed_frag,
	linedashed_vert: linedashed_vert,
	meshbasic_frag: meshbasic_frag,
	meshbasic_vert: meshbasic_vert,
	meshlambert_frag: meshlambert_frag,
	meshlambert_vert: meshlambert_vert,
	meshphong_frag: meshphong_frag,
	meshphong_vert: meshphong_vert,
	meshphysical_frag: meshphysical_frag,
	meshphysical_vert: meshphysical_vert,
	normal_frag: normal_frag,
	normal_vert: normal_vert,
	points_frag: points_frag,
	points_vert: points_vert,
	shadow_frag: shadow_frag,
	shadow_vert: shadow_vert
};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */

var ShaderLib = {

	basic: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.meshbasic_vert,
		fragmentShader: ShaderChunk.meshbasic_frag

	},

	lambert: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) }
			}
		] ),

		vertexShader: ShaderChunk.meshlambert_vert,
		fragmentShader: ShaderChunk.meshlambert_frag

	},

	phong: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.gradientmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) },
				specular: { value: new Color( 0x111111 ) },
				shininess: { value: 30 }
			}
		] ),

		vertexShader: ShaderChunk.meshphong_vert,
		fragmentShader: ShaderChunk.meshphong_frag

	},

	standard: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.roughnessmap,
			UniformsLib.metalnessmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) },
				roughness: { value: 0.5 },
				metalness: { value: 0.5 },
				envMapIntensity: { value: 1 } // temporary
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	},

	points: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.points,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.points_vert,
		fragmentShader: ShaderChunk.points_frag

	},

	dashed: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.fog,
			{
				scale: { value: 1 },
				dashSize: { value: 1 },
				totalSize: { value: 2 }
			}
		] ),

		vertexShader: ShaderChunk.linedashed_vert,
		fragmentShader: ShaderChunk.linedashed_frag

	},

	depth: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.displacementmap
		] ),

		vertexShader: ShaderChunk.depth_vert,
		fragmentShader: ShaderChunk.depth_frag

	},

	normal: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			{
				opacity: { value: 1.0 }
			}
		] ),

		vertexShader: ShaderChunk.normal_vert,
		fragmentShader: ShaderChunk.normal_frag

	},

	/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */

	cube: {

		uniforms: {
			tCube: { value: null },
			tFlip: { value: - 1 },
			opacity: { value: 1.0 }
		},

		vertexShader: ShaderChunk.cube_vert,
		fragmentShader: ShaderChunk.cube_frag

	},

	equirect: {

		uniforms: {
			tEquirect: { value: null },
		},

		vertexShader: ShaderChunk.equirect_vert,
		fragmentShader: ShaderChunk.equirect_frag

	},

	distanceRGBA: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.displacementmap,
			{
				referencePosition: { value: new Vector3() },
				nearDistance: { value: 1 },
				farDistance: { value: 1000 }
			}
		] ),

		vertexShader: ShaderChunk.distanceRGBA_vert,
		fragmentShader: ShaderChunk.distanceRGBA_frag

	},

	shadow: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.lights,
			{
				color: { value: new Color( 0x00000 ) },
				opacity: { value: 1.0 }
			},
		] ),

		vertexShader: ShaderChunk.shadow_vert,
		fragmentShader: ShaderChunk.shadow_frag

	}

};

ShaderLib.physical = {

	uniforms: UniformsUtils.merge( [
		ShaderLib.standard.uniforms,
		{
			clearCoat: { value: 0 },
			clearCoatRoughness: { value: 0 }
		}
	] ),

	vertexShader: ShaderChunk.meshphysical_vert,
	fragmentShader: ShaderChunk.meshphysical_frag

};

/**
 * @author bhouston / http://clara.io
 */

function Box2( min, max ) {

	this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
	this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

}

Object.assign( Box2.prototype, {

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromPoints: function ( points ) {

		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new Vector2();

		return function setFromCenterAndSize( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = + Infinity;
		this.max.x = this.max.y = - Infinity;

		return this;

	},

	isEmpty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	getSize: function ( optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	},

	containsPoint: function ( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ? false : true;

	},

	containsBox: function ( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new Vector2();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y )
		);

	},

	intersectsBox: function ( box ) {

		// using 4 splitting planes to rule out intersections

		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new Vector2();

		return function distanceToPoint( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function WebGLFlareRenderer( renderer, gl, state, textures, capabilities ) {

	var vertexBuffer, elementBuffer;
	var shader, program, attributes, uniforms;

	var tempTexture, occlusionTexture;

	function init() {

		var vertices = new Float32Array( [
			- 1, - 1,  0, 0,
			 1, - 1,  1, 0,
			 1,  1,  1, 1,
			- 1,  1,  0, 1
		] );

		var faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		// buffers

		vertexBuffer     = gl.createBuffer();
		elementBuffer    = gl.createBuffer();

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

		// textures

		tempTexture      = gl.createTexture();
		occlusionTexture = gl.createTexture();

		state.bindTexture( gl.TEXTURE_2D, tempTexture );
		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

		state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

		shader = {

			vertexShader: [

				"uniform lowp int renderType;",

				"uniform vec3 screenPosition;",
				"uniform vec2 scale;",
				"uniform float rotation;",

				"uniform sampler2D occlusionMap;",

				"attribute vec2 position;",
				"attribute vec2 uv;",

				"varying vec2 vUV;",
				"varying float vVisibility;",

				"void main() {",

					"vUV = uv;",

					"vec2 pos = position;",

					"if ( renderType == 2 ) {",

						"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

						"vVisibility =        visibility.r / 9.0;",
						"vVisibility *= 1.0 - visibility.g / 9.0;",
						"vVisibility *=       visibility.b / 9.0;",
						"vVisibility *= 1.0 - visibility.a / 9.0;",

						"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
						"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

					"}",

					"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform lowp int renderType;",

				"uniform sampler2D map;",
				"uniform float opacity;",
				"uniform vec3 color;",

				"varying vec2 vUV;",
				"varying float vVisibility;",

				"void main() {",

					// pink square

					"if ( renderType == 0 ) {",

						"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

					// restore

					"} else if ( renderType == 1 ) {",

						"gl_FragColor = texture2D( map, vUV );",

					// flare

					"} else {",

						"vec4 texture = texture2D( map, vUV );",
						"texture.a *= opacity * vVisibility;",
						"gl_FragColor = texture;",
						"gl_FragColor.rgb *= color;",

					"}",

				"}"

			].join( "\n" )

		};

		program = createProgram( shader );

		attributes = {
			vertex: gl.getAttribLocation ( program, "position" ),
			uv:     gl.getAttribLocation ( program, "uv" )
		};

		uniforms = {
			renderType:     gl.getUniformLocation( program, "renderType" ),
			map:            gl.getUniformLocation( program, "map" ),
			occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
			opacity:        gl.getUniformLocation( program, "opacity" ),
			color:          gl.getUniformLocation( program, "color" ),
			scale:          gl.getUniformLocation( program, "scale" ),
			rotation:       gl.getUniformLocation( program, "rotation" ),
			screenPosition: gl.getUniformLocation( program, "screenPosition" )
		};

	}

	/*
	 * Render lens flares
	 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
	 *         reads these back and calculates occlusion.
	 */

	this.render = function ( flares, scene, camera, viewport ) {

		if ( flares.length === 0 ) return;

		var tempPosition = new Vector3();

		var invAspect = viewport.w / viewport.z,
			halfViewportWidth = viewport.z * 0.5,
			halfViewportHeight = viewport.w * 0.5;

		var size = 16 / viewport.w,
			scale = new Vector2( size * invAspect, size );

		var screenPosition = new Vector3( 1, 1, 0 ),
			screenPositionPixels = new Vector2( 1, 1 );

		var validArea = new Box2();

		validArea.min.set( viewport.x, viewport.y );
		validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );

		if ( program === undefined ) {

			init();

		}

		state.useProgram( program );

		state.initAttributes();
		state.enableAttribute( attributes.vertex );
		state.enableAttribute( attributes.uv );
		state.disableUnusedAttributes();

		// loop through all lens flares to update their occlusion and positions
		// setup gl and common used attribs/uniforms

		gl.uniform1i( uniforms.occlusionMap, 0 );
		gl.uniform1i( uniforms.map, 1 );

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		state.disable( gl.CULL_FACE );
		state.buffers.depth.setMask( false );

		for ( var i = 0, l = flares.length; i < l; i ++ ) {

			size = 16 / viewport.w;
			scale.set( size * invAspect, size );

			// calc object screen position

			var flare = flares[ i ];

			tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

			tempPosition.applyMatrix4( camera.matrixWorldInverse );
			tempPosition.applyMatrix4( camera.projectionMatrix );

			// setup arrays for gl programs

			screenPosition.copy( tempPosition );

			// horizontal and vertical coordinate of the lower left corner of the pixels to copy

			screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
			screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

			// screen cull

			if ( validArea.containsPoint( screenPositionPixels ) === true ) {

				// save current RGB to temp texture

				state.activeTexture( gl.TEXTURE0 );
				state.bindTexture( gl.TEXTURE_2D, null );
				state.activeTexture( gl.TEXTURE1 );
				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


				// render pink quad

				gl.uniform1i( uniforms.renderType, 0 );
				gl.uniform2f( uniforms.scale, scale.x, scale.y );
				gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

				state.disable( gl.BLEND );
				state.enable( gl.DEPTH_TEST );

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


				// copy result to occlusionMap

				state.activeTexture( gl.TEXTURE0 );
				state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


				// restore graphics

				gl.uniform1i( uniforms.renderType, 1 );
				state.disable( gl.DEPTH_TEST );

				state.activeTexture( gl.TEXTURE1 );
				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


				// update object positions

				flare.positionScreen.copy( screenPosition );

				if ( flare.customUpdateCallback ) {

					flare.customUpdateCallback( flare );

				} else {

					flare.updateLensFlares();

				}

				// render flares

				gl.uniform1i( uniforms.renderType, 2 );
				state.enable( gl.BLEND );

				for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

					var sprite = flare.lensFlares[ j ];

					if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

						screenPosition.x = sprite.x;
						screenPosition.y = sprite.y;
						screenPosition.z = sprite.z;

						size = sprite.size * sprite.scale / viewport.w;

						scale.x = size * invAspect;
						scale.y = size;

						gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
						gl.uniform2f( uniforms.scale, scale.x, scale.y );
						gl.uniform1f( uniforms.rotation, sprite.rotation );

						gl.uniform1f( uniforms.opacity, sprite.opacity );
						gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

						state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );

						textures.setTexture2D( sprite.texture, 1 );

						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

					}

				}

			}

		}

		// restore gl

		state.enable( gl.CULL_FACE );
		state.enable( gl.DEPTH_TEST );
		state.buffers.depth.setMask( true );

		state.reset();

	};

	function createProgram( shader ) {

		var program = gl.createProgram();

		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
		var vertexShader = gl.createShader( gl.VERTEX_SHADER );

		var prefix = "precision " + capabilities.precision + " float;\n";

		gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
		gl.shaderSource( vertexShader, prefix + shader.vertexShader );

		gl.compileShader( fragmentShader );
		gl.compileShader( vertexShader );

		gl.attachShader( program, fragmentShader );
		gl.attachShader( program, vertexShader );

		gl.linkProgram( program );

		return program;

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.needsUpdate = true;

}

CanvasTexture.prototype = Object.create( Texture.prototype );
CanvasTexture.prototype.constructor = CanvasTexture;

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function WebGLSpriteRenderer( renderer, gl, state, textures, capabilities ) {

	var vertexBuffer, elementBuffer;
	var program, attributes, uniforms;

	var texture;

	// decompose matrixWorld

	var spritePosition = new Vector3();
	var spriteRotation = new Quaternion();
	var spriteScale = new Vector3();

	function init() {

		var vertices = new Float32Array( [
			- 0.5, - 0.5,  0, 0,
			  0.5, - 0.5,  1, 0,
			  0.5,   0.5,  1, 1,
			- 0.5,   0.5,  0, 1
		] );

		var faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		vertexBuffer  = gl.createBuffer();
		elementBuffer = gl.createBuffer();

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

		program = createProgram();

		attributes = {
			position:			gl.getAttribLocation ( program, 'position' ),
			uv:					gl.getAttribLocation ( program, 'uv' )
		};

		uniforms = {
			uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
			uvScale:			gl.getUniformLocation( program, 'uvScale' ),

			rotation:			gl.getUniformLocation( program, 'rotation' ),
			scale:				gl.getUniformLocation( program, 'scale' ),

			color:				gl.getUniformLocation( program, 'color' ),
			map:				gl.getUniformLocation( program, 'map' ),
			opacity:			gl.getUniformLocation( program, 'opacity' ),

			modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
			projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

			fogType:			gl.getUniformLocation( program, 'fogType' ),
			fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
			fogNear:			gl.getUniformLocation( program, 'fogNear' ),
			fogFar:				gl.getUniformLocation( program, 'fogFar' ),
			fogColor:			gl.getUniformLocation( program, 'fogColor' ),

			alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
		};

		var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
		canvas.width = 8;
		canvas.height = 8;

		var context = canvas.getContext( '2d' );
		context.fillStyle = 'white';
		context.fillRect( 0, 0, 8, 8 );

		texture = new CanvasTexture( canvas );

	}

	this.render = function ( sprites, scene, camera ) {

		if ( sprites.length === 0 ) return;

		// setup gl

		if ( program === undefined ) {

			init();

		}

		state.useProgram( program );

		state.initAttributes();
		state.enableAttribute( attributes.position );
		state.enableAttribute( attributes.uv );
		state.disableUnusedAttributes();

		state.disable( gl.CULL_FACE );
		state.enable( gl.BLEND );

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

		state.activeTexture( gl.TEXTURE0 );
		gl.uniform1i( uniforms.map, 0 );

		var oldFogType = 0;
		var sceneFogType = 0;
		var fog = scene.fog;

		if ( fog ) {

			gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

			if ( fog.isFog ) {

				gl.uniform1f( uniforms.fogNear, fog.near );
				gl.uniform1f( uniforms.fogFar, fog.far );

				gl.uniform1i( uniforms.fogType, 1 );
				oldFogType = 1;
				sceneFogType = 1;

			} else if ( fog.isFogExp2 ) {

				gl.uniform1f( uniforms.fogDensity, fog.density );

				gl.uniform1i( uniforms.fogType, 2 );
				oldFogType = 2;
				sceneFogType = 2;

			}

		} else {

			gl.uniform1i( uniforms.fogType, 0 );
			oldFogType = 0;
			sceneFogType = 0;

		}


		// update positions and sort

		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

			var sprite = sprites[ i ];

			sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
			sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

		}

		sprites.sort( painterSortStable );

		// render all sprites

		var scale = [];

		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

			var sprite = sprites[ i ];
			var material = sprite.material;

			if ( material.visible === false ) continue;

			sprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );

			gl.uniform1f( uniforms.alphaTest, material.alphaTest );
			gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

			sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

			scale[ 0 ] = spriteScale.x;
			scale[ 1 ] = spriteScale.y;

			var fogType = 0;

			if ( scene.fog && material.fog ) {

				fogType = sceneFogType;

			}

			if ( oldFogType !== fogType ) {

				gl.uniform1i( uniforms.fogType, fogType );
				oldFogType = fogType;

			}

			if ( material.map !== null ) {

				gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
				gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

			} else {

				gl.uniform2f( uniforms.uvOffset, 0, 0 );
				gl.uniform2f( uniforms.uvScale, 1, 1 );

			}

			gl.uniform1f( uniforms.opacity, material.opacity );
			gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

			gl.uniform1f( uniforms.rotation, material.rotation );
			gl.uniform2fv( uniforms.scale, scale );

			state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
			state.buffers.depth.setTest( material.depthTest );
			state.buffers.depth.setMask( material.depthWrite );

			textures.setTexture2D( material.map || texture, 0 );

			gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

			sprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );

		}

		// restore gl

		state.enable( gl.CULL_FACE );

		state.reset();

	};

	function createProgram() {

		var program = gl.createProgram();

		var vertexShader = gl.createShader( gl.VERTEX_SHADER );
		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

		gl.shaderSource( vertexShader, [

			'precision ' + capabilities.precision + ' float;',

			'#define SHADER_NAME ' + 'SpriteMaterial',

			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform float rotation;',
			'uniform vec2 scale;',
			'uniform vec2 uvOffset;',
			'uniform vec2 uvScale;',

			'attribute vec2 position;',
			'attribute vec2 uv;',

			'varying vec2 vUV;',

			'void main() {',

				'vUV = uvOffset + uv * uvScale;',

				'vec2 alignedPosition = position * scale;',

				'vec2 rotatedPosition;',
				'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
				'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

				'vec4 finalPosition;',

				'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
				'finalPosition.xy += rotatedPosition;',
				'finalPosition = projectionMatrix * finalPosition;',

				'gl_Position = finalPosition;',

			'}'

		].join( '\n' ) );

		gl.shaderSource( fragmentShader, [

			'precision ' + capabilities.precision + ' float;',

			'#define SHADER_NAME ' + 'SpriteMaterial',

			'uniform vec3 color;',
			'uniform sampler2D map;',
			'uniform float opacity;',

			'uniform int fogType;',
			'uniform vec3 fogColor;',
			'uniform float fogDensity;',
			'uniform float fogNear;',
			'uniform float fogFar;',
			'uniform float alphaTest;',

			'varying vec2 vUV;',

			'void main() {',

				'vec4 texture = texture2D( map, vUV );',

				'if ( texture.a < alphaTest ) discard;',

				'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

				'if ( fogType > 0 ) {',

					'float depth = gl_FragCoord.z / gl_FragCoord.w;',
					'float fogFactor = 0.0;',

					'if ( fogType == 1 ) {',

						'fogFactor = smoothstep( fogNear, fogFar, depth );',

					'} else {',

						'const float LOG2 = 1.442695;',
						'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
						'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

					'}',

					'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

				'}',

			'}'

		].join( '\n' ) );

		gl.compileShader( vertexShader );
		gl.compileShader( fragmentShader );

		gl.attachShader( program, vertexShader );
		gl.attachShader( program, fragmentShader );

		gl.linkProgram( program );

		return program;

	}

	function painterSortStable( a, b ) {

		if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return b.id - a.id;

		}

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

var materialId = 0;

function Material() {

	Object.defineProperty( this, 'id', { value: materialId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Material';

	this.fog = true;
	this.lights = true;

	this.blending = NormalBlending;
	this.side = FrontSide;
	this.flatShading = false;
	this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

	this.opacity = 1;
	this.transparent = false;

	this.blendSrc = SrcAlphaFactor;
	this.blendDst = OneMinusSrcAlphaFactor;
	this.blendEquation = AddEquation;
	this.blendSrcAlpha = null;
	this.blendDstAlpha = null;
	this.blendEquationAlpha = null;

	this.depthFunc = LessEqualDepth;
	this.depthTest = true;
	this.depthWrite = true;

	this.clippingPlanes = null;
	this.clipIntersection = false;
	this.clipShadows = false;

	this.colorWrite = true;

	this.precision = null; // override the renderer's default precision for this material

	this.polygonOffset = false;
	this.polygonOffsetFactor = 0;
	this.polygonOffsetUnits = 0;

	this.dithering = false;

	this.alphaTest = 0;
	this.premultipliedAlpha = false;

	this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

	this.visible = true;

	this.userData = {};

	this.needsUpdate = true;

}

Object.assign( Material.prototype, EventDispatcher.prototype, {

	isMaterial: true,

	onBeforeCompile: function () {},

	setValues: function ( values ) {

		if ( values === undefined ) return;

		for ( var key in values ) {

			var newValue = values[ key ];

			if ( newValue === undefined ) {

				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
				continue;

			}

			// for backward compatability if shading is set in the constructor
			if ( key === 'shading' ) {

				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
				this.flatShading = ( newValue === FlatShading ) ? true : false;
				continue;

			}

			var currentValue = this[ key ];

			if ( currentValue === undefined ) {

				console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
				continue;

			}

			if ( currentValue && currentValue.isColor ) {

				currentValue.set( newValue );

			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

				currentValue.copy( newValue );

			} else if ( key === 'overdraw' ) {

				// ensure overdraw is backwards-compatible with legacy boolean type
				this[ key ] = Number( newValue );

			} else {

				this[ key ] = newValue;

			}

		}

	},

	toJSON: function ( meta ) {

		var isRoot = meta === undefined;

		if ( isRoot ) {

			meta = {
				textures: {},
				images: {}
			};

		}

		var data = {
			metadata: {
				version: 4.5,
				type: 'Material',
				generator: 'Material.toJSON'
			}
		};

		// standard Material serialization
		data.uuid = this.uuid;
		data.type = this.type;

		if ( this.name !== '' ) data.name = this.name;

		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

		if ( this.roughness !== undefined ) data.roughness = this.roughness;
		if ( this.metalness !== undefined ) data.metalness = this.metalness;

		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
		if ( this.shininess !== undefined ) data.shininess = this.shininess;
		if ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;
		if ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;

		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
		if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
		if ( this.bumpMap && this.bumpMap.isTexture ) {

			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
			data.bumpScale = this.bumpScale;

		}
		if ( this.normalMap && this.normalMap.isTexture ) {

			data.normalMap = this.normalMap.toJSON( meta ).uuid;
			data.normalScale = this.normalScale.toArray();

		}
		if ( this.displacementMap && this.displacementMap.isTexture ) {

			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
			data.displacementScale = this.displacementScale;
			data.displacementBias = this.displacementBias;

		}
		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

		if ( this.envMap && this.envMap.isTexture ) {

			data.envMap = this.envMap.toJSON( meta ).uuid;
			data.reflectivity = this.reflectivity; // Scale behind envMap

		}

		if ( this.gradientMap && this.gradientMap.isTexture ) {

			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

		}

		if ( this.size !== undefined ) data.size = this.size;
		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

		if ( this.blending !== NormalBlending ) data.blending = this.blending;
		if ( this.flatShading === true ) data.flatShading = this.flatShading;
		if ( this.side !== FrontSide ) data.side = this.side;
		if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

		if ( this.opacity < 1 ) data.opacity = this.opacity;
		if ( this.transparent === true ) data.transparent = this.transparent;

		data.depthFunc = this.depthFunc;
		data.depthTest = this.depthTest;
		data.depthWrite = this.depthWrite;

		if ( this.dithering === true ) data.dithering = true;

		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;

		if ( this.wireframe === true ) data.wireframe = this.wireframe;
		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

		if ( this.morphTargets === true ) data.morphTargets = true;
		if ( this.skinning === true ) data.skinning = true;

		if ( this.visible === false ) data.visible = false;
		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;

		// TODO: Copied from Object3D.toJSON

		function extractFromCache( cache ) {

			var values = [];

			for ( var key in cache ) {

				var data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}

			return values;

		}

		if ( isRoot ) {

			var textures = extractFromCache( meta.textures );
			var images = extractFromCache( meta.images );

			if ( textures.length > 0 ) data.textures = textures;
			if ( images.length > 0 ) data.images = images;

		}

		return data;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.name = source.name;

		this.fog = source.fog;
		this.lights = source.lights;

		this.blending = source.blending;
		this.side = source.side;
		this.flatShading = source.flatShading;
		this.vertexColors = source.vertexColors;

		this.opacity = source.opacity;
		this.transparent = source.transparent;

		this.blendSrc = source.blendSrc;
		this.blendDst = source.blendDst;
		this.blendEquation = source.blendEquation;
		this.blendSrcAlpha = source.blendSrcAlpha;
		this.blendDstAlpha = source.blendDstAlpha;
		this.blendEquationAlpha = source.blendEquationAlpha;

		this.depthFunc = source.depthFunc;
		this.depthTest = source.depthTest;
		this.depthWrite = source.depthWrite;

		this.colorWrite = source.colorWrite;

		this.precision = source.precision;

		this.polygonOffset = source.polygonOffset;
		this.polygonOffsetFactor = source.polygonOffsetFactor;
		this.polygonOffsetUnits = source.polygonOffsetUnits;

		this.dithering = source.dithering;

		this.alphaTest = source.alphaTest;
		this.premultipliedAlpha = source.premultipliedAlpha;

		this.overdraw = source.overdraw;

		this.visible = source.visible;
		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		this.clipShadows = source.clipShadows;
		this.clipIntersection = source.clipIntersection;

		var srcPlanes = source.clippingPlanes,
			dstPlanes = null;

		if ( srcPlanes !== null ) {

			var n = srcPlanes.length;
			dstPlanes = new Array( n );

			for ( var i = 0; i !== n; ++ i )
				dstPlanes[ i ] = srcPlanes[ i ].clone();

		}

		this.clippingPlanes = dstPlanes;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function ShaderMaterial( parameters ) {

	Material.call( this );

	this.type = 'ShaderMaterial';

	this.defines = {};
	this.uniforms = {};

	this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
	this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

	this.linewidth = 1;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false; // set to use scene fog
	this.lights = false; // set to use scene lights
	this.clipping = false; // set to use user-defined clipping planes

	this.skinning = false; // set to use skinning attribute streams
	this.morphTargets = false; // set to use morph targets
	this.morphNormals = false; // set to use morph normals

	this.extensions = {
		derivatives: false, // set to use derivatives
		fragDepth: false, // set to use fragment depth values
		drawBuffers: false, // set to use draw buffers
		shaderTextureLOD: false // set to use shader texture LOD
	};

	// When rendered geometry doesn't include these attributes but the material does,
	// use these default values in WebGL. This avoids errors when buffer data is missing.
	this.defaultAttributeValues = {
		'color': [ 1, 1, 1 ],
		'uv': [ 0, 0 ],
		'uv2': [ 0, 0 ]
	};

	this.index0AttributeName = undefined;

	if ( parameters !== undefined ) {

		if ( parameters.attributes !== undefined ) {

			console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

		}

		this.setValues( parameters );

	}

}

ShaderMaterial.prototype = Object.create( Material.prototype );
ShaderMaterial.prototype.constructor = ShaderMaterial;

ShaderMaterial.prototype.isShaderMaterial = true;

ShaderMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.fragmentShader = source.fragmentShader;
	this.vertexShader = source.vertexShader;

	this.uniforms = UniformsUtils.clone( source.uniforms );

	this.defines = source.defines;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	this.lights = source.lights;
	this.clipping = source.clipping;

	this.skinning = source.skinning;

	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	this.extensions = source.extensions;

	return this;

};

ShaderMaterial.prototype.toJSON = function ( meta ) {

	var data = Material.prototype.toJSON.call( this, meta );

	data.uniforms = this.uniforms;
	data.vertexShader = this.vertexShader;
	data.fragmentShader = this.fragmentShader;

	return data;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / https://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

function MeshDepthMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshDepthMaterial';

	this.depthPacking = BasicDepthPacking;

	this.skinning = false;
	this.morphTargets = false;

	this.map = null;

	this.alphaMap = null;

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

MeshDepthMaterial.prototype = Object.create( Material.prototype );
MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

MeshDepthMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.depthPacking = source.depthPacking;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	this.map = source.map;

	this.alphaMap = source.alphaMap;

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	return this;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */

function MeshDistanceMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshDistanceMaterial';

	this.referencePosition = new Vector3();
	this.nearDistance = 1;
	this.farDistance = 1000;

	this.skinning = false;
	this.morphTargets = false;

	this.map = null;

	this.alphaMap = null;

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

MeshDistanceMaterial.prototype = Object.create( Material.prototype );
MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

MeshDistanceMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.referencePosition.copy( source.referencePosition );
	this.nearDistance = source.nearDistance;
	this.farDistance = source.farDistance;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	this.map = source.map;

	this.alphaMap = source.alphaMap;

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	return this;

};

/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Box3( min, max ) {

	this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
	this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

}

Object.assign( Box3.prototype, {

	isBox3: true,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromArray: function ( array ) {

		var minX = + Infinity;
		var minY = + Infinity;
		var minZ = + Infinity;

		var maxX = - Infinity;
		var maxY = - Infinity;
		var maxZ = - Infinity;

		for ( var i = 0, l = array.length; i < l; i += 3 ) {

			var x = array[ i ];
			var y = array[ i + 1 ];
			var z = array[ i + 2 ];

			if ( x < minX ) minX = x;
			if ( y < minY ) minY = y;
			if ( z < minZ ) minZ = z;

			if ( x > maxX ) maxX = x;
			if ( y > maxY ) maxY = y;
			if ( z > maxZ ) maxZ = z;

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	},

	setFromBufferAttribute: function ( attribute ) {

		var minX = + Infinity;
		var minY = + Infinity;
		var minZ = + Infinity;

		var maxX = - Infinity;
		var maxY = - Infinity;
		var maxZ = - Infinity;

		for ( var i = 0, l = attribute.count; i < l; i ++ ) {

			var x = attribute.getX( i );
			var y = attribute.getY( i );
			var z = attribute.getZ( i );

			if ( x < minX ) minX = x;
			if ( y < minY ) minY = y;
			if ( z < minZ ) minZ = z;

			if ( x > maxX ) maxX = x;
			if ( y > maxY ) maxY = y;
			if ( z > maxZ ) maxZ = z;

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	},

	setFromPoints: function ( points ) {

		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new Vector3();

		return function setFromCenterAndSize( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	setFromObject: function ( object ) {

		this.makeEmpty();

		return this.expandByObject( object );

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = this.min.z = + Infinity;
		this.max.x = this.max.y = this.max.z = - Infinity;

		return this;

	},

	isEmpty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	getSize: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	},

	expandByObject: function () {

		// Computes the world-axis-aligned bounding box of an object (including its children),
		// accounting for both the object's, and children's, world transforms

		var v1 = new Vector3();

		return function expandByObject( object ) {

			var scope = this;

			object.updateMatrixWorld( true );

			object.traverse( function ( node ) {

				var i, l;

				var geometry = node.geometry;

				if ( geometry !== undefined ) {

					if ( geometry.isGeometry ) {

						var vertices = geometry.vertices;

						for ( i = 0, l = vertices.length; i < l; i ++ ) {

							v1.copy( vertices[ i ] );
							v1.applyMatrix4( node.matrixWorld );

							scope.expandByPoint( v1 );

						}

					} else if ( geometry.isBufferGeometry ) {

						var attribute = geometry.attributes.position;

						if ( attribute !== undefined ) {

							for ( i = 0, l = attribute.count; i < l; i ++ ) {

								v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );

								scope.expandByPoint( v1 );

							}

						}

					}

				}

			} );

			return this;

		};

	}(),

	containsPoint: function ( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ||
			point.z < this.min.z || point.z > this.max.z ? false : true;

	},

	containsBox: function ( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y &&
			this.min.z <= box.min.z && box.max.z <= this.max.z;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new Vector3();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
			( point.z - this.min.z ) / ( this.max.z - this.min.z )
		);

	},

	intersectsBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.
		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ||
			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

	},

	intersectsSphere: ( function () {

		var closestPoint = new Vector3();

		return function intersectsSphere( sphere ) {

			// Find the point on the AABB closest to the sphere center.
			this.clampPoint( sphere.center, closestPoint );

			// If that point is inside the sphere, the AABB and sphere intersect.
			return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

		};

	} )(),

	intersectsPlane: function ( plane ) {

		// We compute the minimum and maximum dot product values. If those values
		// are on the same side (back or front) of the plane, then there is no intersection.

		var min, max;

		if ( plane.normal.x > 0 ) {

			min = plane.normal.x * this.min.x;
			max = plane.normal.x * this.max.x;

		} else {

			min = plane.normal.x * this.max.x;
			max = plane.normal.x * this.min.x;

		}

		if ( plane.normal.y > 0 ) {

			min += plane.normal.y * this.min.y;
			max += plane.normal.y * this.max.y;

		} else {

			min += plane.normal.y * this.max.y;
			max += plane.normal.y * this.min.y;

		}

		if ( plane.normal.z > 0 ) {

			min += plane.normal.z * this.min.z;
			max += plane.normal.z * this.max.z;

		} else {

			min += plane.normal.z * this.max.z;
			max += plane.normal.z * this.min.z;

		}

		return ( min <= plane.constant && max >= plane.constant );

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new Vector3();

		return function distanceToPoint( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	getBoundingSphere: function () {

		var v1 = new Vector3();

		return function getBoundingSphere( optionalTarget ) {

			var result = optionalTarget || new Sphere();

			this.getCenter( result.center );

			result.radius = this.getSize( v1 ).length() * 0.5;

			return result;

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
		if( this.isEmpty() ) this.makeEmpty();

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	applyMatrix4: function () {

		var points = [
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3()
		];

		return function applyMatrix4( matrix ) {

			// transform of empty box is an empty box.
			if( this.isEmpty() ) return this;

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

			this.setFromPoints( points );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Sphere( center, radius ) {

	this.center = ( center !== undefined ) ? center : new Vector3();
	this.radius = ( radius !== undefined ) ? radius : 0;

}

Object.assign( Sphere.prototype, {

	set: function ( center, radius ) {

		this.center.copy( center );
		this.radius = radius;

		return this;

	},

	setFromPoints: function () {

		var box = new Box3();

		return function setFromPoints( points, optionalCenter ) {

			var center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				box.setFromPoints( points ).getCenter( center );

			}

			var maxRadiusSq = 0;

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( sphere ) {

		this.center.copy( sphere.center );
		this.radius = sphere.radius;

		return this;

	},

	empty: function () {

		return ( this.radius <= 0 );

	},

	containsPoint: function ( point ) {

		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	},

	distanceToPoint: function ( point ) {

		return ( point.distanceTo( this.center ) - this.radius );

	},

	intersectsSphere: function ( sphere ) {

		var radiusSum = this.radius + sphere.radius;

		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

	},

	intersectsBox: function ( box ) {

		return box.intersectsSphere( this );

	},

	intersectsPlane: function ( plane ) {

		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

	},

	clampPoint: function ( point, optionalTarget ) {

		var deltaLengthSq = this.center.distanceToSquared( point );

		var result = optionalTarget || new Vector3();

		result.copy( point );

		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

			result.sub( this.center ).normalize();
			result.multiplyScalar( this.radius ).add( this.center );

		}

		return result;

	},

	getBoundingBox: function ( optionalTarget ) {

		var box = optionalTarget || new Box3();

		box.set( this.center, this.center );
		box.expandByScalar( this.radius );

		return box;

	},

	applyMatrix4: function ( matrix ) {

		this.center.applyMatrix4( matrix );
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	},

	translate: function ( offset ) {

		this.center.add( offset );

		return this;

	},

	equals: function ( sphere ) {

		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 * @author tschw
 */

function Matrix3() {

	this.elements = [

		1, 0, 0,
		0, 1, 0,
		0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix3.prototype, {

	isMatrix3: true,

	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new this.constructor().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

		return this;

	},

	setFromMatrix4: function ( m ) {

		var me = m.elements;

		this.set(

			me[ 0 ], me[ 4 ], me[  8 ],
			me[ 1 ], me[ 5 ], me[  9 ],
			me[ 2 ], me[ 6 ], me[ 10 ]

		);

		return this;

	},

	applyToBufferAttribute: function () {

		var v1 = new Vector3();

		return function applyToBufferAttribute( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				v1.x = attribute.getX( i );
				v1.y = attribute.getY( i );
				v1.z = attribute.getZ( i );

				v1.applyMatrix3( this );

				attribute.setXYZ( i, v1.x, v1.y, v1.z );

			}

			return attribute;

		};

	}(),

	multiply: function ( m ) {

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
		var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
		var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

		var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
		var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
		var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

		return this;

	},

	determinant: function () {

		var te = this.elements;

		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

	},

	getInverse: function ( matrix, throwOnDegenerate ) {

		if ( matrix && matrix.isMatrix4 ) {

			console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );

		}

		var me = matrix.elements,
			te = this.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

			t11 = n33 * n22 - n32 * n23,
			t12 = n32 * n13 - n33 * n12,
			t13 = n23 * n12 - n22 * n13,

			det = n11 * t11 + n21 * t12 + n31 * t13;

		if ( det === 0 ) {

			var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

		te[ 3 ] = t12 * detInv;
		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

		te[ 6 ] = t13 * detInv;
		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

		return this;

	},

	transpose: function () {

		var tmp, m = this.elements;

		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

		return this;

	},

	getNormalMatrix: function ( matrix4 ) {

		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

	},

	transposeIntoArray: function ( r ) {

		var m = this.elements;

		r[ 0 ] = m[ 0 ];
		r[ 1 ] = m[ 3 ];
		r[ 2 ] = m[ 6 ];
		r[ 3 ] = m[ 1 ];
		r[ 4 ] = m[ 4 ];
		r[ 5 ] = m[ 7 ];
		r[ 6 ] = m[ 2 ];
		r[ 7 ] = m[ 5 ];
		r[ 8 ] = m[ 8 ];

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 9; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		for ( var i = 0; i < 9; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];

		array[ offset + 3 ] = te[ 3 ];
		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];

		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];
		array[ offset + 8 ] = te[ 8 ];

		return array;

	}

} );

/**
 * @author bhouston / http://clara.io
 */

function Plane( normal, constant ) {

	// normal is assumed to be normalized

	this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
	this.constant = ( constant !== undefined ) ? constant : 0;

}

Object.assign( Plane.prototype, {

	set: function ( normal, constant ) {

		this.normal.copy( normal );
		this.constant = constant;

		return this;

	},

	setComponents: function ( x, y, z, w ) {

		this.normal.set( x, y, z );
		this.constant = w;

		return this;

	},

	setFromNormalAndCoplanarPoint: function ( normal, point ) {

		this.normal.copy( normal );
		this.constant = - point.dot( this.normal );

		return this;

	},

	setFromCoplanarPoints: function () {

		var v1 = new Vector3();
		var v2 = new Vector3();

		return function setFromCoplanarPoints( a, b, c ) {

			var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( plane ) {

		this.normal.copy( plane.normal );
		this.constant = plane.constant;

		return this;

	},

	normalize: function () {

		// Note: will lead to a divide by zero if the plane is invalid.

		var inverseNormalLength = 1.0 / this.normal.length();
		this.normal.multiplyScalar( inverseNormalLength );
		this.constant *= inverseNormalLength;

		return this;

	},

	negate: function () {

		this.constant *= - 1;
		this.normal.negate();

		return this;

	},

	distanceToPoint: function ( point ) {

		return this.normal.dot( point ) + this.constant;

	},

	distanceToSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) - sphere.radius;

	},

	projectPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return result.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

	},

	intersectLine: function () {

		var v1 = new Vector3();

		return function intersectLine( line, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			var direction = line.delta( v1 );

			var denominator = this.normal.dot( direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( this.distanceToPoint( line.start ) === 0 ) {

					return result.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return undefined;

			}

			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if ( t < 0 || t > 1 ) {

				return undefined;

			}

			return result.copy( direction ).multiplyScalar( t ).add( line.start );

		};

	}(),

	intersectsLine: function ( line ) {

		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

		var startSign = this.distanceToPoint( line.start );
		var endSign = this.distanceToPoint( line.end );

		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

	},

	intersectsBox: function ( box ) {

		return box.intersectsPlane( this );

	},

	intersectsSphere: function ( sphere ) {

		return sphere.intersectsPlane( this );

	},

	coplanarPoint: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return result.copy( this.normal ).multiplyScalar( - this.constant );

	},

	applyMatrix4: function () {

		var v1 = new Vector3();
		var m1 = new Matrix3();

		return function applyMatrix4( matrix, optionalNormalMatrix ) {

			var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );

			var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

			var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

			this.constant = - referencePoint.dot( normal );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.constant -= offset.dot( this.normal );

		return this;

	},

	equals: function ( plane ) {

		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / http://clara.io
 */

function Frustum( p0, p1, p2, p3, p4, p5 ) {

	this.planes = [

		( p0 !== undefined ) ? p0 : new Plane(),
		( p1 !== undefined ) ? p1 : new Plane(),
		( p2 !== undefined ) ? p2 : new Plane(),
		( p3 !== undefined ) ? p3 : new Plane(),
		( p4 !== undefined ) ? p4 : new Plane(),
		( p5 !== undefined ) ? p5 : new Plane()

	];

}

Object.assign( Frustum.prototype, {

	set: function ( p0, p1, p2, p3, p4, p5 ) {

		var planes = this.planes;

		planes[ 0 ].copy( p0 );
		planes[ 1 ].copy( p1 );
		planes[ 2 ].copy( p2 );
		planes[ 3 ].copy( p3 );
		planes[ 4 ].copy( p4 );
		planes[ 5 ].copy( p5 );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( frustum ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			planes[ i ].copy( frustum.planes[ i ] );

		}

		return this;

	},

	setFromMatrix: function ( m ) {

		var planes = this.planes;
		var me = m.elements;
		var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
		var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
		var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
		var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

		return this;

	},

	intersectsObject: function () {

		var sphere = new Sphere();

		return function intersectsObject( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere )
				.applyMatrix4( object.matrixWorld );

			return this.intersectsSphere( sphere );

		};

	}(),

	intersectsSprite: function () {

		var sphere = new Sphere();

		return function intersectsSprite( sprite ) {

			sphere.center.set( 0, 0, 0 );
			sphere.radius = 0.7071067811865476;
			sphere.applyMatrix4( sprite.matrixWorld );

			return this.intersectsSphere( sphere );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		var planes = this.planes;
		var center = sphere.center;
		var negRadius = - sphere.radius;

		for ( var i = 0; i < 6; i ++ ) {

			var distance = planes[ i ].distanceToPoint( center );

			if ( distance < negRadius ) {

				return false;

			}

		}

		return true;

	},

	intersectsBox: function () {

		var p1 = new Vector3(),
			p2 = new Vector3();

		return function intersectsBox( box ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				var plane = planes[ i ];

				p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
				p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
				p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
				p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				var d1 = plane.distanceToPoint( p1 );
				var d2 = plane.distanceToPoint( p2 );

				// if both outside plane, no intersection

				if ( d1 < 0 && d2 < 0 ) {

					return false;

				}

			}

			return true;

		};

	}(),

	containsPoint: function ( point ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

				return false;

			}

		}

		return true;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

	var _frustum = new Frustum(),
		_projScreenMatrix = new Matrix4(),

		_shadowMapSize = new Vector2(),
		_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),

		_lookTarget = new Vector3(),
		_lightPositionWorld = new Vector3(),

		_MorphingFlag = 1,
		_SkinningFlag = 2,

		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants ),

		_materialCache = {};

	var cubeDirections = [
		new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
		new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
	];

	var cubeUps = [
		new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
		new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
	];

	var cube2DViewPorts = [
		new Vector4(), new Vector4(), new Vector4(),
		new Vector4(), new Vector4(), new Vector4()
	];

	// init

	for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

		var useMorphing = ( i & _MorphingFlag ) !== 0;
		var useSkinning = ( i & _SkinningFlag ) !== 0;

		var depthMaterial = new MeshDepthMaterial( {

			depthPacking: RGBADepthPacking,

			morphTargets: useMorphing,
			skinning: useSkinning

		} );

		_depthMaterials[ i ] = depthMaterial;

		//

		var distanceMaterial = new MeshDistanceMaterial( {

			morphTargets: useMorphing,
			skinning: useSkinning

		} );

		_distanceMaterials[ i ] = distanceMaterial;

	}

	//

	var scope = this;

	this.enabled = false;

	this.autoUpdate = true;
	this.needsUpdate = false;

	this.type = PCFShadowMap;

	this.renderReverseSided = true;
	this.renderSingleSided = true;

	this.render = function ( lights, scene, camera ) {

		if ( scope.enabled === false ) return;
		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

		if ( lights.length === 0 ) return;

		// TODO Clean up (needed in case of contextlost)
		var _gl = _renderer.context;
		var _state = _renderer.state;

		// Set GL state for depth map.
		_state.disable( _gl.BLEND );
		_state.buffers.color.setClear( 1, 1, 1, 1 );
		_state.buffers.depth.setTest( true );
		_state.setScissorTest( false );

		// render depth map

		var faceCount;

		for ( var i = 0, il = lights.length; i < il; i ++ ) {

			var light = lights[ i ];
			var shadow = light.shadow;
			var isPointLight = light && light.isPointLight;

			if ( shadow === undefined ) {

				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
				continue;

			}

			var shadowCamera = shadow.camera;

			_shadowMapSize.copy( shadow.mapSize );
			_shadowMapSize.min( _maxShadowMapSize );

			if ( isPointLight ) {

				var vpWidth = _shadowMapSize.x;
				var vpHeight = _shadowMapSize.y;

				// These viewports map a cube-map onto a 2D texture with the
				// following orientation:
				//
				//  xzXZ
				//   y Y
				//
				// X - Positive x direction
				// x - Negative x direction
				// Y - Positive y direction
				// y - Negative y direction
				// Z - Positive z direction
				// z - Negative z direction

				// positive X
				cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
				// negative X
				cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
				// positive Z
				cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
				// negative Z
				cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
				// positive Y
				cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
				// negative Y
				cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

				_shadowMapSize.x *= 4.0;
				_shadowMapSize.y *= 2.0;

			}

			if ( shadow.map === null ) {

				var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
				shadow.map.texture.name = light.name + ".shadowMap";

				shadowCamera.updateProjectionMatrix();

			}

			if ( shadow.isSpotLightShadow ) {

				shadow.update( light );

			}

			var shadowMap = shadow.map;
			var shadowMatrix = shadow.matrix;

			_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
			shadowCamera.position.copy( _lightPositionWorld );

			if ( isPointLight ) {

				faceCount = 6;

				// for point lights we set the shadow matrix to be a translation-only matrix
				// equal to inverse of the light's position

				shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );

			} else {

				faceCount = 1;

				_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
				shadowCamera.lookAt( _lookTarget );
				shadowCamera.updateMatrixWorld();

				// compute shadow matrix

				shadowMatrix.set(
					0.5, 0.0, 0.0, 0.5,
					0.0, 0.5, 0.0, 0.5,
					0.0, 0.0, 0.5, 0.5,
					0.0, 0.0, 0.0, 1.0
				);

				shadowMatrix.multiply( shadowCamera.projectionMatrix );
				shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

			}

			_renderer.setRenderTarget( shadowMap );
			_renderer.clear();

			// render shadow map for each cube face (if omni-directional) or
			// run a single pass if not

			for ( var face = 0; face < faceCount; face ++ ) {

				if ( isPointLight ) {

					_lookTarget.copy( shadowCamera.position );
					_lookTarget.add( cubeDirections[ face ] );
					shadowCamera.up.copy( cubeUps[ face ] );
					shadowCamera.lookAt( _lookTarget );
					shadowCamera.updateMatrixWorld();

					var vpDimensions = cube2DViewPorts[ face ];
					_state.viewport( vpDimensions );

				}

				// update camera matrices and frustum

				_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
				_frustum.setFromMatrix( _projScreenMatrix );

				// set object matrices & frustum culling

				renderObject( scene, camera, shadowCamera, isPointLight );

			}

		}

		scope.needsUpdate = false;

	};

	function getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {

		var geometry = object.geometry;

		var result = null;

		var materialVariants = _depthMaterials;
		var customMaterial = object.customDepthMaterial;

		if ( isPointLight ) {

			materialVariants = _distanceMaterials;
			customMaterial = object.customDistanceMaterial;

		}

		if ( ! customMaterial ) {

			var useMorphing = false;

			if ( material.morphTargets ) {

				if ( geometry && geometry.isBufferGeometry ) {

					useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

				} else if ( geometry && geometry.isGeometry ) {

					useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

				}

			}

			if ( object.isSkinnedMesh && material.skinning === false ) {

				console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

			}

			var useSkinning = object.isSkinnedMesh && material.skinning;

			var variantIndex = 0;

			if ( useMorphing ) variantIndex |= _MorphingFlag;
			if ( useSkinning ) variantIndex |= _SkinningFlag;

			result = materialVariants[ variantIndex ];

		} else {

			result = customMaterial;

		}

		if ( _renderer.localClippingEnabled &&
				material.clipShadows === true &&
				material.clippingPlanes.length !== 0 ) {

			// in this case we need a unique material instance reflecting the
			// appropriate state

			var keyA = result.uuid, keyB = material.uuid;

			var materialsForVariant = _materialCache[ keyA ];

			if ( materialsForVariant === undefined ) {

				materialsForVariant = {};
				_materialCache[ keyA ] = materialsForVariant;

			}

			var cachedMaterial = materialsForVariant[ keyB ];

			if ( cachedMaterial === undefined ) {

				cachedMaterial = result.clone();
				materialsForVariant[ keyB ] = cachedMaterial;

			}

			result = cachedMaterial;

		}

		result.visible = material.visible;
		result.wireframe = material.wireframe;

		var side = material.side;

		if ( scope.renderSingleSided && side == DoubleSide ) {

			side = FrontSide;

		}

		if ( scope.renderReverseSided ) {

			if ( side === FrontSide ) side = BackSide;
			else if ( side === BackSide ) side = FrontSide;

		}

		result.side = side;

		result.clipShadows = material.clipShadows;
		result.clippingPlanes = material.clippingPlanes;
		result.clipIntersection = material.clipIntersection;

		result.wireframeLinewidth = material.wireframeLinewidth;
		result.linewidth = material.linewidth;

		if ( isPointLight && result.isMeshDistanceMaterial ) {

			result.referencePosition.copy( lightPositionWorld );
			result.nearDistance = shadowCameraNear;
			result.farDistance = shadowCameraFar;

		}

		return result;

	}

	function renderObject( object, camera, shadowCamera, isPointLight ) {

		if ( object.visible === false ) return;

		var visible = object.layers.test( camera.layers );

		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

			if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

				var geometry = _objects.update( object );
				var material = object.material;

				if ( Array.isArray( material ) ) {

					var groups = geometry.groups;

					for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

						var group = groups[ k ];
						var groupMaterial = material[ group.materialIndex ];

						if ( groupMaterial && groupMaterial.visible ) {

							var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

						}

					}

				} else if ( material.visible ) {

					var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

				}

			}

		}

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			renderObject( children[ i ], camera, shadowCamera, isPointLight );

		}

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLAttributes( gl ) {

	var buffers = {};

	function createBuffer( attribute, bufferType ) {

		var array = attribute.array;
		var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

		var buffer = gl.createBuffer();

		gl.bindBuffer( bufferType, buffer );
		gl.bufferData( bufferType, array, usage );

		attribute.onUploadCallback();

		var type = gl.FLOAT;

		if ( array instanceof Float32Array ) {

			type = gl.FLOAT;

		} else if ( array instanceof Float64Array ) {

			console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

		} else if ( array instanceof Uint16Array ) {

			type = gl.UNSIGNED_SHORT;

		} else if ( array instanceof Int16Array ) {

			type = gl.SHORT;

		} else if ( array instanceof Uint32Array ) {

			type = gl.UNSIGNED_INT;

		} else if ( array instanceof Int32Array ) {

			type = gl.INT;

		} else if ( array instanceof Int8Array ) {

			type = gl.BYTE;

		} else if ( array instanceof Uint8Array ) {

			type = gl.UNSIGNED_BYTE;

		}

		return {
			buffer: buffer,
			type: type,
			bytesPerElement: array.BYTES_PER_ELEMENT,
			version: attribute.version
		};

	}

	function updateBuffer( buffer, attribute, bufferType ) {

		var array = attribute.array;
		var updateRange = attribute.updateRange;

		gl.bindBuffer( bufferType, buffer );

		if ( attribute.dynamic === false ) {

			gl.bufferData( bufferType, array, gl.STATIC_DRAW );

		} else if ( updateRange.count === - 1 ) {

			// Not using update ranges

			gl.bufferSubData( bufferType, 0, array );

		} else if ( updateRange.count === 0 ) {

			console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

		} else {

			gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
				array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

			updateRange.count = -1; // reset range

		}

	}

	//

	function get( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		return buffers[ attribute.uuid ];

	}

	function remove( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
		
		var data = buffers[ attribute.uuid ];

		if ( data ) {

			gl.deleteBuffer( data.buffer );

			delete buffers[ attribute.uuid ];

		}

	}

	function update( attribute, bufferType ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		var data = buffers[ attribute.uuid ];

		if ( data === undefined ) {

			buffers[ attribute.uuid ] = createBuffer( attribute, bufferType );

		} else if ( data.version < attribute.version ) {

			updateBuffer( data.buffer, attribute, bufferType );

			data.version = attribute.version;

		}

	}

	return {

		get: get,
		remove: remove,
		update: update

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

function Euler( x, y, z, order ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._order = order || Euler.DefaultOrder;

}

Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

Euler.DefaultOrder = 'XYZ';

Object.defineProperties( Euler.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this.onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this.onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this.onChangeCallback();

		}

	},

	order: {

		get: function () {

			return this._order;

		},

		set: function ( value ) {

			this._order = value;
			this.onChangeCallback();

		}

	}

} );

Object.assign( Euler.prototype, {

	isEuler: true,

	set: function ( x, y, z, order ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order || this._order;

		this.onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._order );

	},

	copy: function ( euler ) {

		this._x = euler._x;
		this._y = euler._y;
		this._z = euler._z;
		this._order = euler._order;

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m, order, update ) {

		var clamp = _Math.clamp;

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements;
		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		order = order || this._order;

		if ( order === 'XYZ' ) {

			this._y = Math.asin( clamp( m13, - 1, 1 ) );

			if ( Math.abs( m13 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m33 );
				this._z = Math.atan2( - m12, m11 );

			} else {

				this._x = Math.atan2( m32, m22 );
				this._z = 0;

			}

		} else if ( order === 'YXZ' ) {

			this._x = Math.asin( - clamp( m23, - 1, 1 ) );

			if ( Math.abs( m23 ) < 0.99999 ) {

				this._y = Math.atan2( m13, m33 );
				this._z = Math.atan2( m21, m22 );

			} else {

				this._y = Math.atan2( - m31, m11 );
				this._z = 0;

			}

		} else if ( order === 'ZXY' ) {

			this._x = Math.asin( clamp( m32, - 1, 1 ) );

			if ( Math.abs( m32 ) < 0.99999 ) {

				this._y = Math.atan2( - m31, m33 );
				this._z = Math.atan2( - m12, m22 );

			} else {

				this._y = 0;
				this._z = Math.atan2( m21, m11 );

			}

		} else if ( order === 'ZYX' ) {

			this._y = Math.asin( - clamp( m31, - 1, 1 ) );

			if ( Math.abs( m31 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m33 );
				this._z = Math.atan2( m21, m11 );

			} else {

				this._x = 0;
				this._z = Math.atan2( - m12, m22 );

			}

		} else if ( order === 'YZX' ) {

			this._z = Math.asin( clamp( m21, - 1, 1 ) );

			if ( Math.abs( m21 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m22 );
				this._y = Math.atan2( - m31, m11 );

			} else {

				this._x = 0;
				this._y = Math.atan2( m13, m33 );

			}

		} else if ( order === 'XZY' ) {

			this._z = Math.asin( - clamp( m12, - 1, 1 ) );

			if ( Math.abs( m12 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m22 );
				this._y = Math.atan2( m13, m11 );

			} else {

				this._x = Math.atan2( - m23, m33 );
				this._y = 0;

			}

		} else {

			console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

		}

		this._order = order;

		if ( update !== false ) this.onChangeCallback();

		return this;

	},

	setFromQuaternion: function () {

		var matrix = new Matrix4();

		return function setFromQuaternion( q, order, update ) {

			matrix.makeRotationFromQuaternion( q );

			return this.setFromRotationMatrix( matrix, order, update );

		};

	}(),

	setFromVector3: function ( v, order ) {

		return this.set( v.x, v.y, v.z, order || this._order );

	},

	reorder: function () {

		// WARNING: this discards revolution information -bhouston

		var q = new Quaternion();

		return function reorder( newOrder ) {

			q.setFromEuler( this );

			return this.setFromQuaternion( q, newOrder );

		};

	}(),

	equals: function ( euler ) {

		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

	},

	fromArray: function ( array ) {

		this._x = array[ 0 ];
		this._y = array[ 1 ];
		this._z = array[ 2 ];
		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

		this.onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._order;

		return array;

	},

	toVector3: function ( optionalResult ) {

		if ( optionalResult ) {

			return optionalResult.set( this._x, this._y, this._z );

		} else {

			return new Vector3( this._x, this._y, this._z );

		}

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Layers() {

	this.mask = 1 | 0;

}

Object.assign( Layers.prototype, {

	set: function ( channel ) {

		this.mask = 1 << channel | 0;

	},

	enable: function ( channel ) {

		this.mask |= 1 << channel | 0;

	},

	toggle: function ( channel ) {

		this.mask ^= 1 << channel | 0;

	},

	disable: function ( channel ) {

		this.mask &= ~ ( 1 << channel | 0 );

	},

	test: function ( layers ) {

		return ( this.mask & layers.mask ) !== 0;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author elephantatwork / www.elephantatwork.ch
 */

var object3DId = 0;

function Object3D() {

	Object.defineProperty( this, 'id', { value: object3DId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Object3D';

	this.parent = null;
	this.children = [];

	this.up = Object3D.DefaultUp.clone();

	var position = new Vector3();
	var rotation = new Euler();
	var quaternion = new Quaternion();
	var scale = new Vector3( 1, 1, 1 );

	function onRotationChange() {

		quaternion.setFromEuler( rotation, false );

	}

	function onQuaternionChange() {

		rotation.setFromQuaternion( quaternion, undefined, false );

	}

	rotation.onChange( onRotationChange );
	quaternion.onChange( onQuaternionChange );

	Object.defineProperties( this, {
		position: {
			enumerable: true,
			value: position
		},
		rotation: {
			enumerable: true,
			value: rotation
		},
		quaternion: {
			enumerable: true,
			value: quaternion
		},
		scale: {
			enumerable: true,
			value: scale
		},
		modelViewMatrix: {
			value: new Matrix4()
		},
		normalMatrix: {
			value: new Matrix3()
		}
	} );

	this.matrix = new Matrix4();
	this.matrixWorld = new Matrix4();

	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
	this.matrixWorldNeedsUpdate = false;

	this.layers = new Layers();
	this.visible = true;

	this.castShadow = false;
	this.receiveShadow = false;

	this.frustumCulled = true;
	this.renderOrder = 0;

	this.userData = {};
}

Object3D.DefaultUp = new Vector3( 0, 1, 0 );
Object3D.DefaultMatrixAutoUpdate = true;

Object.assign( Object3D.prototype, EventDispatcher.prototype, {

	isObject3D: true,

	onBeforeRender: function () {},
	onAfterRender: function () {},

	applyMatrix: function ( matrix ) {

		this.matrix.multiplyMatrices( matrix, this.matrix );

		this.matrix.decompose( this.position, this.quaternion, this.scale );

	},

	applyQuaternion: function ( q ) {

		this.quaternion.premultiply( q );

		return this;

	},

	setRotationFromAxisAngle: function ( axis, angle ) {

		// assumes axis is normalized

		this.quaternion.setFromAxisAngle( axis, angle );

	},

	setRotationFromEuler: function ( euler ) {

		this.quaternion.setFromEuler( euler, true );

	},

	setRotationFromMatrix: function ( m ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		this.quaternion.setFromRotationMatrix( m );

	},

	setRotationFromQuaternion: function ( q ) {

		// assumes q is normalized

		this.quaternion.copy( q );

	},

	rotateOnAxis: function () {

		// rotate object on axis in object space
		// axis is assumed to be normalized

		var q1 = new Quaternion();

		return function rotateOnAxis( axis, angle ) {

			q1.setFromAxisAngle( axis, angle );

			this.quaternion.multiply( q1 );

			return this;

		};

	}(),

	rotateX: function () {

		var v1 = new Vector3( 1, 0, 0 );

		return function rotateX( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateY: function () {

		var v1 = new Vector3( 0, 1, 0 );

		return function rotateY( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateZ: function () {

		var v1 = new Vector3( 0, 0, 1 );

		return function rotateZ( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	translateOnAxis: function () {

		// translate object by distance along axis in object space
		// axis is assumed to be normalized

		var v1 = new Vector3();

		return function translateOnAxis( axis, distance ) {

			v1.copy( axis ).applyQuaternion( this.quaternion );

			this.position.add( v1.multiplyScalar( distance ) );

			return this;

		};

	}(),

	translateX: function () {

		var v1 = new Vector3( 1, 0, 0 );

		return function translateX( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateY: function () {

		var v1 = new Vector3( 0, 1, 0 );

		return function translateY( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateZ: function () {

		var v1 = new Vector3( 0, 0, 1 );

		return function translateZ( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	localToWorld: function ( vector ) {

		return vector.applyMatrix4( this.matrixWorld );

	},

	worldToLocal: function () {

		var m1 = new Matrix4();

		return function worldToLocal( vector ) {

			return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

		};

	}(),

	lookAt: function () {

		// This method does not support objects with rotated and/or translated parent(s)

		var m1 = new Matrix4();

		return function lookAt( vector ) {

			if ( this.isCamera ) {

				m1.lookAt( this.position, vector, this.up );

			} else {

				m1.lookAt( vector, this.position, this.up );

			}

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}(),

	add: function ( object ) {

		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i ++ ) {

				this.add( arguments[ i ] );

			}

			return this;

		}

		if ( object === this ) {

			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
			return this;

		}

		if ( ( object && object.isObject3D ) ) {

			if ( object.parent !== null ) {

				object.parent.remove( object );

			}

			object.parent = this;
			object.dispatchEvent( { type: 'added' } );

			this.children.push( object );

		} else {

			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

		}

		return this;

	},

	remove: function ( object ) {

		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i ++ ) {

				this.remove( arguments[ i ] );

			}

			return this;

		}

		var index = this.children.indexOf( object );

		if ( index !== - 1 ) {

			object.parent = null;

			object.dispatchEvent( { type: 'removed' } );

			this.children.splice( index, 1 );

		}

		return this;

	},

	getObjectById: function ( id ) {

		return this.getObjectByProperty( 'id', id );

	},

	getObjectByName: function ( name ) {

		return this.getObjectByProperty( 'name', name );

	},

	getObjectByProperty: function ( name, value ) {

		if ( this[ name ] === value ) return this;

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this.children[ i ];
			var object = child.getObjectByProperty( name, value );

			if ( object !== undefined ) {

				return object;

			}

		}

		return undefined;

	},

	getWorldPosition: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();

		this.updateMatrixWorld( true );

		return result.setFromMatrixPosition( this.matrixWorld );

	},

	getWorldQuaternion: function () {

		var position = new Vector3();
		var scale = new Vector3();

		return function getWorldQuaternion( optionalTarget ) {

			var result = optionalTarget || new Quaternion();

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( position, result, scale );

			return result;

		};

	}(),

	getWorldRotation: function () {

		var quaternion = new Quaternion();

		return function getWorldRotation( optionalTarget ) {

			var result = optionalTarget || new Euler();

			this.getWorldQuaternion( quaternion );

			return result.setFromQuaternion( quaternion, this.rotation.order, false );

		};

	}(),

	getWorldScale: function () {

		var position = new Vector3();
		var quaternion = new Quaternion();

		return function getWorldScale( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( position, quaternion, result );

			return result;

		};

	}(),

	getWorldDirection: function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

		};

	}(),

	raycast: function () {},

	traverse: function ( callback ) {

		callback( this );

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverse( callback );

		}

	},

	traverseVisible: function ( callback ) {

		if ( this.visible === false ) return;

		callback( this );

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverseVisible( callback );

		}

	},

	traverseAncestors: function ( callback ) {

		var parent = this.parent;

		if ( parent !== null ) {

			callback( parent );

			parent.traverseAncestors( callback );

		}

	},

	updateMatrix: function () {

		this.matrix.compose( this.position, this.quaternion, this.scale );

		this.matrixWorldNeedsUpdate = true;

	},

	updateMatrixWorld: function ( force ) {

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		if ( this.matrixWorldNeedsUpdate || force ) {

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].updateMatrixWorld( force );

		}

	},

	toJSON: function ( meta ) {

		// meta is '' when called from JSON.stringify
		var isRootObject = ( meta === undefined || meta === '' );

		var output = {};

		// meta is a hash used to collect geometries, materials.
		// not providing it implies that this is the root object
		// being serialized.
		if ( isRootObject ) {

			// initialize meta obj
			meta = {
				geometries: {},
				materials: {},
				textures: {},
				images: {}
			};

			output.metadata = {
				version: 4.5,
				type: 'Object',
				generator: 'Object3D.toJSON'
			};

		}

		// standard Object3D serialization

		var object = {};

		object.uuid = this.uuid;
		object.type = this.type;

		if ( this.name !== '' ) object.name = this.name;
		if ( this.castShadow === true ) object.castShadow = true;
		if ( this.receiveShadow === true ) object.receiveShadow = true;
		if ( this.visible === false ) object.visible = false;
		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

		object.matrix = this.matrix.toArray();

		//

		function serialize( library, element ) {

			if ( library[ element.uuid ] === undefined ) {

				library[ element.uuid ] = element.toJSON( meta );

			}

			return element.uuid;

		}

		if ( this.geometry !== undefined ) {

			object.geometry = serialize( meta.geometries, this.geometry );

		}

		if ( this.material !== undefined ) {

			if ( Array.isArray( this.material ) ) {

				var uuids = [];

				for ( var i = 0, l = this.material.length; i < l; i ++ ) {

					uuids.push( serialize( meta.materials, this.material[ i ] ) );

				}

				object.material = uuids;

			} else {

				object.material = serialize( meta.materials, this.material );

			}

		}

		//

		if ( this.children.length > 0 ) {

			object.children = [];

			for ( var i = 0; i < this.children.length; i ++ ) {

				object.children.push( this.children[ i ].toJSON( meta ).object );

			}

		}

		if ( isRootObject ) {

			var geometries = extractFromCache( meta.geometries );
			var materials = extractFromCache( meta.materials );
			var textures = extractFromCache( meta.textures );
			var images = extractFromCache( meta.images );

			if ( geometries.length > 0 ) output.geometries = geometries;
			if ( materials.length > 0 ) output.materials = materials;
			if ( textures.length > 0 ) output.textures = textures;
			if ( images.length > 0 ) output.images = images;

		}

		output.object = object;

		return output;

		// extract data from the cache hash
		// remove metadata on each item
		// and return as array
		function extractFromCache( cache ) {

			var values = [];
			for ( var key in cache ) {

				var data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}
			return values;

		}

	},

	clone: function ( recursive ) {

		return new this.constructor().copy( this, recursive );

	},

	copy: function ( source, recursive ) {

		if ( recursive === undefined ) recursive = true;

		this.name = source.name;

		this.up.copy( source.up );

		this.position.copy( source.position );
		this.quaternion.copy( source.quaternion );
		this.scale.copy( source.scale );

		this.matrix.copy( source.matrix );
		this.matrixWorld.copy( source.matrixWorld );

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

		this.layers.mask = source.layers.mask;
		this.visible = source.visible;

		this.castShadow = source.castShadow;
		this.receiveShadow = source.receiveShadow;

		this.frustumCulled = source.frustumCulled;
		this.renderOrder = source.renderOrder;

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		if ( recursive === true ) {

			for ( var i = 0; i < source.children.length; i ++ ) {

				var child = source.children[ i ];
				this.add( child.clone() );

			}

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author WestLangley / http://github.com/WestLangley
*/

function Camera() {

	Object3D.call( this );

	this.type = 'Camera';

	this.matrixWorldInverse = new Matrix4();
	this.projectionMatrix = new Matrix4();

}

Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Camera,

	isCamera: true,

	copy: function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );

		return this;

	},

	getWorldDirection: function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

		};

	}(),

	updateMatrixWorld: function ( force ) {

		Object3D.prototype.updateMatrixWorld.call( this, force );

		this.matrixWorldInverse.getInverse( this.matrixWorld );

	},

	clone: function () {

		return new this.constructor().copy( this );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author arose / http://github.com/arose
 */

function OrthographicCamera( left, right, top, bottom, near, far ) {

	Camera.call( this );

	this.type = 'OrthographicCamera';

	this.zoom = 1;
	this.view = null;

	this.left = left;
	this.right = right;
	this.top = top;
	this.bottom = bottom;

	this.near = ( near !== undefined ) ? near : 0.1;
	this.far = ( far !== undefined ) ? far : 2000;

	this.updateProjectionMatrix();

}

OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

	constructor: OrthographicCamera,

	isOrthographicCamera: true,

	copy: function ( source, recursive ) {

		Camera.prototype.copy.call( this, source, recursive );

		this.left = source.left;
		this.right = source.right;
		this.top = source.top;
		this.bottom = source.bottom;
		this.near = source.near;
		this.far = source.far;

		this.zoom = source.zoom;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		return this;

	},

	setViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {

		this.view = {
			fullWidth: fullWidth,
			fullHeight: fullHeight,
			offsetX: x,
			offsetY: y,
			width: width,
			height: height
		};

		this.updateProjectionMatrix();

	},

	clearViewOffset: function() {

		this.view = null;
		this.updateProjectionMatrix();

	},

	updateProjectionMatrix: function () {

		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
		var cx = ( this.right + this.left ) / 2;
		var cy = ( this.top + this.bottom ) / 2;

		var left = cx - dx;
		var right = cx + dx;
		var top = cy + dy;
		var bottom = cy - dy;

		if ( this.view !== null ) {

			var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
			var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
			var scaleW = ( this.right - this.left ) / this.view.width;
			var scaleH = ( this.top - this.bottom ) / this.view.height;

			left += scaleW * ( this.view.offsetX / zoomW );
			right = left + scaleW * ( this.view.width / zoomW );
			top -= scaleH * ( this.view.offsetY / zoomH );
			bottom = top - scaleH * ( this.view.height / zoomH );

		}

		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.zoom = this.zoom;
		data.object.left = this.left;
		data.object.right = this.right;
		data.object.top = this.top;
		data.object.bottom = this.bottom;
		data.object.near = this.near;
		data.object.far = this.far;

		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

		return data;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author greggman / http://games.greggman.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author tschw
 */

function PerspectiveCamera( fov, aspect, near, far ) {

	Camera.call( this );

	this.type = 'PerspectiveCamera';

	this.fov = fov !== undefined ? fov : 50;
	this.zoom = 1;

	this.near = near !== undefined ? near : 0.1;
	this.far = far !== undefined ? far : 2000;
	this.focus = 10;

	this.aspect = aspect !== undefined ? aspect : 1;
	this.view = null;

	this.filmGauge = 35;	// width of the film (default in millimeters)
	this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

	this.updateProjectionMatrix();

}

PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

	constructor: PerspectiveCamera,

	isPerspectiveCamera: true,

	copy: function ( source, recursive ) {

		Camera.prototype.copy.call( this, source, recursive );

		this.fov = source.fov;
		this.zoom = source.zoom;

		this.near = source.near;
		this.far = source.far;
		this.focus = source.focus;

		this.aspect = source.aspect;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		this.filmGauge = source.filmGauge;
		this.filmOffset = source.filmOffset;

		return this;

	},

	/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */
	setFocalLength: function ( focalLength ) {

		// see http://www.bobatkins.com/photography/technical/field_of_view.html
		var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

		this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
		this.updateProjectionMatrix();

	},

	/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */
	getFocalLength: function () {

		var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

		return 0.5 * this.getFilmHeight() / vExtentSlope;

	},

	getEffectiveFOV: function () {

		return _Math.RAD2DEG * 2 * Math.atan(
				Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

	},

	getFilmWidth: function () {

		// film not completely covered in portrait format (aspect < 1)
		return this.filmGauge * Math.min( this.aspect, 1 );

	},

	getFilmHeight: function () {

		// film not completely covered in landscape format (aspect > 1)
		return this.filmGauge / Math.max( this.aspect, 1 );

	},

	/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   var w = 1920;
	 *   var h = 1080;
	 *   var fullWidth = w * 3;
	 *   var fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */
	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

		this.aspect = fullWidth / fullHeight;

		this.view = {
			fullWidth: fullWidth,
			fullHeight: fullHeight,
			offsetX: x,
			offsetY: y,
			width: width,
			height: height
		};

		this.updateProjectionMatrix();

	},

	clearViewOffset: function () {

		this.view = null;
		this.updateProjectionMatrix();

	},

	updateProjectionMatrix: function () {

		var near = this.near,
			top = near * Math.tan(
					_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
			height = 2 * top,
			width = this.aspect * height,
			left = - 0.5 * width,
			view = this.view;

		if ( view !== null ) {

			var fullWidth = view.fullWidth,
				fullHeight = view.fullHeight;

			left += view.offsetX * width / fullWidth;
			top -= view.offsetY * height / fullHeight;
			width *= view.width / fullWidth;
			height *= view.height / fullHeight;

		}

		var skew = this.filmOffset;
		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.fov = this.fov;
		data.object.zoom = this.zoom;

		data.object.near = this.near;
		data.object.far = this.far;
		data.object.focus = this.focus;

		data.object.aspect = this.aspect;

		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

		data.object.filmGauge = this.filmGauge;
		data.object.filmOffset = this.filmOffset;

		return data;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Face3( a, b, c, normal, color, materialIndex ) {

	this.a = a;
	this.b = b;
	this.c = c;

	this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
	this.vertexNormals = Array.isArray( normal ) ? normal : [];

	this.color = ( color && color.isColor ) ? color : new Color();
	this.vertexColors = Array.isArray( color ) ? color : [];

	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

}

Object.assign( Face3.prototype, {

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.a = source.a;
		this.b = source.b;
		this.c = source.c;

		this.normal.copy( source.normal );
		this.color.copy( source.color );

		this.materialIndex = source.materialIndex;

		for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

			this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

		}

		for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

			this.vertexColors[ i ] = source.vertexColors[ i ].clone();

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author bhouston / http://clara.io
 */

var count = 0;
function GeometryIdCount() { return count++; }

function Geometry() {

	Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Geometry';

	this.vertices = [];
	this.colors = [];
	this.faces = [];
	this.faceVertexUvs = [[]];

	this.morphTargets = [];
	this.morphNormals = [];

	this.skinWeights = [];
	this.skinIndices = [];

	this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	// update flags

	this.elementsNeedUpdate = false;
	this.verticesNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.lineDistancesNeedUpdate = false;
	this.groupsNeedUpdate = false;

}

Object.assign( Geometry.prototype, EventDispatcher.prototype, {

	isGeometry: true,

	applyMatrix: function ( matrix ) {

		var normalMatrix = new Matrix3().getNormalMatrix( matrix );

		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

			var vertex = this.vertices[ i ];
			vertex.applyMatrix4( matrix );

		}

		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

			var face = this.faces[ i ];
			face.normal.applyMatrix3( normalMatrix ).normalize();

			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

			}

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		this.verticesNeedUpdate = true;
		this.normalsNeedUpdate = true;

		return this;

	},

	rotateX: function () {

		// rotate geometry around world x-axis

		var m1 = new Matrix4();

		return function rotateX( angle ) {

			m1.makeRotationX( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateY: function () {

		// rotate geometry around world y-axis

		var m1 = new Matrix4();

		return function rotateY( angle ) {

			m1.makeRotationY( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateZ: function () {

		// rotate geometry around world z-axis

		var m1 = new Matrix4();

		return function rotateZ( angle ) {

			m1.makeRotationZ( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	translate: function () {

		// translate geometry

		var m1 = new Matrix4();

		return function translate( x, y, z ) {

			m1.makeTranslation( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	scale: function () {

		// scale geometry

		var m1 = new Matrix4();

		return function scale( x, y, z ) {

			m1.makeScale( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	lookAt: function () {

		var obj = new Object3D();

		return function lookAt( vector ) {

			obj.lookAt( vector );

			obj.updateMatrix();

			this.applyMatrix( obj.matrix );

		};

	}(),

	fromBufferGeometry: function ( geometry ) {

		var scope = this;

		var indices = geometry.index !== null ? geometry.index.array : undefined;
		var attributes = geometry.attributes;

		var positions = attributes.position.array;
		var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
		var colors = attributes.color !== undefined ? attributes.color.array : undefined;
		var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
		var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

		if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

		var tempNormals = [];
		var tempUVs = [];
		var tempUVs2 = [];

		for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

			scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

			if ( normals !== undefined ) {

				tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

			}

			if ( colors !== undefined ) {

				scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

			}

			if ( uvs !== undefined ) {

				tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

			}

			if ( uvs2 !== undefined ) {

				tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

			}

		}

		function addFace( a, b, c, materialIndex ) {

			var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
			var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

			var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

			scope.faces.push( face );

			if ( uvs !== undefined ) {

				scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

			}

			if ( uvs2 !== undefined ) {

				scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

			}

		}

		var groups = geometry.groups;

		if ( groups.length > 0 ) {

			for ( var i = 0; i < groups.length; i ++ ) {

				var group = groups[ i ];

				var start = group.start;
				var count = group.count;

				for ( var j = start, jl = start + count; j < jl; j += 3 ) {

					if ( indices !== undefined ) {

						addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

					} else {

						addFace( j, j + 1, j + 2, group.materialIndex );

					}

				}

			}

		} else {

			if ( indices !== undefined ) {

				for ( var i = 0; i < indices.length; i += 3 ) {

					addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

				}

			} else {

				for ( var i = 0; i < positions.length / 3; i += 3 ) {

					addFace( i, i + 1, i + 2 );

				}

			}

		}

		this.computeFaceNormals();

		if ( geometry.boundingBox !== null ) {

			this.boundingBox = geometry.boundingBox.clone();

		}

		if ( geometry.boundingSphere !== null ) {

			this.boundingSphere = geometry.boundingSphere.clone();

		}

		return this;

	},

	center: function () {

		this.computeBoundingBox();

		var offset = this.boundingBox.getCenter().negate();

		this.translate( offset.x, offset.y, offset.z );

		return offset;

	},

	normalize: function () {

		this.computeBoundingSphere();

		var center = this.boundingSphere.center;
		var radius = this.boundingSphere.radius;

		var s = radius === 0 ? 1 : 1.0 / radius;

		var matrix = new Matrix4();
		matrix.set(
			s, 0, 0, - s * center.x,
			0, s, 0, - s * center.y,
			0, 0, s, - s * center.z,
			0, 0, 0, 1
		);

		this.applyMatrix( matrix );

		return this;

	},

	computeFaceNormals: function () {

		var cb = new Vector3(), ab = new Vector3();

		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

			var face = this.faces[ f ];

			var vA = this.vertices[ face.a ];
			var vB = this.vertices[ face.b ];
			var vC = this.vertices[ face.c ];

			cb.subVectors( vC, vB );
			ab.subVectors( vA, vB );
			cb.cross( ab );

			cb.normalize();

			face.normal.copy( cb );

		}

	},

	computeVertexNormals: function ( areaWeighted ) {

		if ( areaWeighted === undefined ) areaWeighted = true;

		var v, vl, f, fl, face, vertices;

		vertices = new Array( this.vertices.length );

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ] = new Vector3();

		}

		if ( areaWeighted ) {

			// vertex normals weighted by triangle areas
			// http://www.iquilezles.org/www/articles/normals/normals.htm

			var vA, vB, vC;
			var cb = new Vector3(), ab = new Vector3();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				vA = this.vertices[ face.a ];
				vB = this.vertices[ face.b ];
				vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				vertices[ face.a ].add( cb );
				vertices[ face.b ].add( cb );
				vertices[ face.c ].add( cb );

			}

		} else {

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				vertices[ face.a ].add( face.normal );
				vertices[ face.b ].add( face.normal );
				vertices[ face.c ].add( face.normal );

			}

		}

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ].normalize();

		}

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				vertexNormals[ 0 ].copy( vertices[ face.a ] );
				vertexNormals[ 1 ].copy( vertices[ face.b ] );
				vertexNormals[ 2 ].copy( vertices[ face.c ] );

			} else {

				vertexNormals[ 0 ] = vertices[ face.a ].clone();
				vertexNormals[ 1 ] = vertices[ face.b ].clone();
				vertexNormals[ 2 ] = vertices[ face.c ].clone();

			}

		}

		if ( this.faces.length > 0 ) {

			this.normalsNeedUpdate = true;

		}

	},

	computeFlatVertexNormals: function () {

		var f, fl, face;

		this.computeFaceNormals();

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				vertexNormals[ 0 ].copy( face.normal );
				vertexNormals[ 1 ].copy( face.normal );
				vertexNormals[ 2 ].copy( face.normal );

			} else {

				vertexNormals[ 0 ] = face.normal.clone();
				vertexNormals[ 1 ] = face.normal.clone();
				vertexNormals[ 2 ] = face.normal.clone();

			}

		}

		if ( this.faces.length > 0 ) {

			this.normalsNeedUpdate = true;

		}

	},

	computeMorphNormals: function () {

		var i, il, f, fl, face;

		// save original normals
		// - create temp variables on first access
		//   otherwise just copy (for faster repeated calls)

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			if ( ! face.__originalFaceNormal ) {

				face.__originalFaceNormal = face.normal.clone();

			} else {

				face.__originalFaceNormal.copy( face.normal );

			}

			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

				if ( ! face.__originalVertexNormals[ i ] ) {

					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

				} else {

					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

				}

			}

		}

		// use temp geometry to compute face and vertex normals for each morph

		var tmpGeo = new Geometry();
		tmpGeo.faces = this.faces;

		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

			// create on first access

			if ( ! this.morphNormals[ i ] ) {

				this.morphNormals[ i ] = {};
				this.morphNormals[ i ].faceNormals = [];
				this.morphNormals[ i ].vertexNormals = [];

				var dstNormalsFace = this.morphNormals[ i ].faceNormals;
				var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					faceNormal = new Vector3();
					vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

					dstNormalsFace.push( faceNormal );
					dstNormalsVertex.push( vertexNormals );

				}

			}

			var morphNormals = this.morphNormals[ i ];

			// set vertices to morph target

			tmpGeo.vertices = this.morphTargets[ i ].vertices;

			// compute morph normals

			tmpGeo.computeFaceNormals();
			tmpGeo.computeVertexNormals();

			// store morph normals

			var faceNormal, vertexNormals;

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				faceNormal = morphNormals.faceNormals[ f ];
				vertexNormals = morphNormals.vertexNormals[ f ];

				faceNormal.copy( face.normal );

				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
				vertexNormals.c.copy( face.vertexNormals[ 2 ] );

			}

		}

		// restore original normals

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			face.normal = face.__originalFaceNormal;
			face.vertexNormals = face.__originalVertexNormals;

		}

	},

	computeLineDistances: function () {

		var d = 0;
		var vertices = this.vertices;

		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

			if ( i > 0 ) {

				d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

			}

			this.lineDistances[ i ] = d;

		}

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		this.boundingBox.setFromPoints( this.vertices );

	},

	computeBoundingSphere: function () {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new Sphere();

		}

		this.boundingSphere.setFromPoints( this.vertices );

	},

	merge: function ( geometry, matrix, materialIndexOffset ) {

		if ( ! ( geometry && geometry.isGeometry ) ) {

			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
			return;

		}

		var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ],
			colors1 = this.colors,
			colors2 = geometry.colors;

		if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

		if ( matrix !== undefined ) {

			normalMatrix = new Matrix3().getNormalMatrix( matrix );

		}

		// vertices

		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

			var vertex = vertices2[ i ];

			var vertexCopy = vertex.clone();

			if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

			vertices1.push( vertexCopy );

		}

		// colors

		for ( var i = 0, il = colors2.length; i < il; i ++ ) {

			colors1.push( colors2[ i ].clone() );

		}

		// faces

		for ( i = 0, il = faces2.length; i < il; i ++ ) {

			var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;

			faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
			faceCopy.normal.copy( face.normal );

			if ( normalMatrix !== undefined ) {

				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

			}

			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

				normal = faceVertexNormals[ j ].clone();

				if ( normalMatrix !== undefined ) {

					normal.applyMatrix3( normalMatrix ).normalize();

				}

				faceCopy.vertexNormals.push( normal );

			}

			faceCopy.color.copy( face.color );

			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

				color = faceVertexColors[ j ];
				faceCopy.vertexColors.push( color.clone() );

			}

			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

			faces1.push( faceCopy );

		}

		// uvs

		for ( i = 0, il = uvs2.length; i < il; i ++ ) {

			var uv = uvs2[ i ], uvCopy = [];

			if ( uv === undefined ) {

				continue;

			}

			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

				uvCopy.push( uv[ j ].clone() );

			}

			uvs1.push( uvCopy );

		}

	},

	mergeMesh: function ( mesh ) {

		if ( ! ( mesh && mesh.isMesh ) ) {

			console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
			return;

		}

		mesh.matrixAutoUpdate && mesh.updateMatrix();

		this.merge( mesh.geometry, mesh.matrix );

	},

	/*
	 * Checks for duplicate vertices with hashmap.
	 * Duplicated vertices are removed
	 * and faces' vertices are updated.
	 */

	mergeVertices: function () {

		var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
		var unique = [], changes = [];

		var v, key;
		var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
		var precision = Math.pow( 10, precisionPoints );
		var i, il, face;
		var indices, j, jl;

		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

			v = this.vertices[ i ];
			key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

			if ( verticesMap[ key ] === undefined ) {

				verticesMap[ key ] = i;
				unique.push( this.vertices[ i ] );
				changes[ i ] = unique.length - 1;

			} else {

				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
				changes[ i ] = changes[ verticesMap[ key ] ];

			}

		}


		// if faces are completely degenerate after merging vertices, we
		// have to remove them from the geometry.
		var faceIndicesToRemove = [];

		for ( i = 0, il = this.faces.length; i < il; i ++ ) {

			face = this.faces[ i ];

			face.a = changes[ face.a ];
			face.b = changes[ face.b ];
			face.c = changes[ face.c ];

			indices = [ face.a, face.b, face.c ];

			// if any duplicate vertices are found in a Face3
			// we have to remove the face as nothing can be saved
			for ( var n = 0; n < 3; n ++ ) {

				if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

					faceIndicesToRemove.push( i );
					break;

				}

			}

		}

		for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

			var idx = faceIndicesToRemove[ i ];

			this.faces.splice( idx, 1 );

			for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

				this.faceVertexUvs[ j ].splice( idx, 1 );

			}

		}

		// Use unique set of vertices

		var diff = this.vertices.length - unique.length;
		this.vertices = unique;
		return diff;

	},

	sortFacesByMaterialIndex: function () {

		var faces = this.faces;
		var length = faces.length;

		// tag faces

		for ( var i = 0; i < length; i ++ ) {

			faces[ i ]._id = i;

		}

		// sort faces

		function materialIndexSort( a, b ) {

			return a.materialIndex - b.materialIndex;

		}

		faces.sort( materialIndexSort );

		// sort uvs

		var uvs1 = this.faceVertexUvs[ 0 ];
		var uvs2 = this.faceVertexUvs[ 1 ];

		var newUvs1, newUvs2;

		if ( uvs1 && uvs1.length === length ) newUvs1 = [];
		if ( uvs2 && uvs2.length === length ) newUvs2 = [];

		for ( var i = 0; i < length; i ++ ) {

			var id = faces[ i ]._id;

			if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
			if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

		}

		if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
		if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

	},

	toJSON: function () {

		var data = {
			metadata: {
				version: 4.5,
				type: 'Geometry',
				generator: 'Geometry.toJSON'
			}
		};

		// standard Geometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if ( this.name !== '' ) data.name = this.name;

		if ( this.parameters !== undefined ) {

			var parameters = this.parameters;

			for ( var key in parameters ) {

				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

			}

			return data;

		}

		var vertices = [];

		for ( var i = 0; i < this.vertices.length; i ++ ) {

			var vertex = this.vertices[ i ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

		var faces = [];
		var normals = [];
		var normalsHash = {};
		var colors = [];
		var colorsHash = {};
		var uvs = [];
		var uvsHash = {};

		for ( var i = 0; i < this.faces.length; i ++ ) {

			var face = this.faces[ i ];

			var hasMaterial = true;
			var hasFaceUv = false; // deprecated
			var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
			var hasFaceNormal = face.normal.length() > 0;
			var hasFaceVertexNormal = face.vertexNormals.length > 0;
			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
			var hasFaceVertexColor = face.vertexColors.length > 0;

			var faceType = 0;

			faceType = setBit( faceType, 0, 0 ); // isQuad
			faceType = setBit( faceType, 1, hasMaterial );
			faceType = setBit( faceType, 2, hasFaceUv );
			faceType = setBit( faceType, 3, hasFaceVertexUv );
			faceType = setBit( faceType, 4, hasFaceNormal );
			faceType = setBit( faceType, 5, hasFaceVertexNormal );
			faceType = setBit( faceType, 6, hasFaceColor );
			faceType = setBit( faceType, 7, hasFaceVertexColor );

			faces.push( faceType );
			faces.push( face.a, face.b, face.c );
			faces.push( face.materialIndex );

			if ( hasFaceVertexUv ) {

				var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

				faces.push(
					getUvIndex( faceVertexUvs[ 0 ] ),
					getUvIndex( faceVertexUvs[ 1 ] ),
					getUvIndex( faceVertexUvs[ 2 ] )
				);

			}

			if ( hasFaceNormal ) {

				faces.push( getNormalIndex( face.normal ) );

			}

			if ( hasFaceVertexNormal ) {

				var vertexNormals = face.vertexNormals;

				faces.push(
					getNormalIndex( vertexNormals[ 0 ] ),
					getNormalIndex( vertexNormals[ 1 ] ),
					getNormalIndex( vertexNormals[ 2 ] )
				);

			}

			if ( hasFaceColor ) {

				faces.push( getColorIndex( face.color ) );

			}

			if ( hasFaceVertexColor ) {

				var vertexColors = face.vertexColors;

				faces.push(
					getColorIndex( vertexColors[ 0 ] ),
					getColorIndex( vertexColors[ 1 ] ),
					getColorIndex( vertexColors[ 2 ] )
				);

			}

		}

		function setBit( value, position, enabled ) {

			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

		}

		function getNormalIndex( normal ) {

			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

			if ( normalsHash[ hash ] !== undefined ) {

				return normalsHash[ hash ];

			}

			normalsHash[ hash ] = normals.length / 3;
			normals.push( normal.x, normal.y, normal.z );

			return normalsHash[ hash ];

		}

		function getColorIndex( color ) {

			var hash = color.r.toString() + color.g.toString() + color.b.toString();

			if ( colorsHash[ hash ] !== undefined ) {

				return colorsHash[ hash ];

			}

			colorsHash[ hash ] = colors.length;
			colors.push( color.getHex() );

			return colorsHash[ hash ];

		}

		function getUvIndex( uv ) {

			var hash = uv.x.toString() + uv.y.toString();

			if ( uvsHash[ hash ] !== undefined ) {

				return uvsHash[ hash ];

			}

			uvsHash[ hash ] = uvs.length / 2;
			uvs.push( uv.x, uv.y );

			return uvsHash[ hash ];

		}

		data.data = {};

		data.data.vertices = vertices;
		data.data.normals = normals;
		if ( colors.length > 0 ) data.data.colors = colors;
		if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
		data.data.faces = faces;

		return data;

	},

	clone: function () {

		/*
		 // Handle primitives

		 var parameters = this.parameters;

		 if ( parameters !== undefined ) {

		 var values = [];

		 for ( var key in parameters ) {

		 values.push( parameters[ key ] );

		 }

		 var geometry = Object.create( this.constructor.prototype );
		 this.constructor.apply( geometry, values );
		 return geometry;

		 }

		 return new this.constructor().copy( this );
		 */

		return new Geometry().copy( this );

	},

	copy: function ( source ) {

		var i, il, j, jl, k, kl;

		// reset

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [[]];
		this.morphTargets = [];
		this.morphNormals = [];
		this.skinWeights = [];
		this.skinIndices = [];
		this.lineDistances = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// name

		this.name = source.name;

		// vertices

		var vertices = source.vertices;

		for ( i = 0, il = vertices.length; i < il; i ++ ) {

			this.vertices.push( vertices[ i ].clone() );

		}

		// colors

		var colors = source.colors;

		for ( i = 0, il = colors.length; i < il; i ++ ) {

			this.colors.push( colors[ i ].clone() );

		}

		// faces

		var faces = source.faces;

		for ( i = 0, il = faces.length; i < il; i ++ ) {

			this.faces.push( faces[ i ].clone() );

		}

		// face vertex uvs

		for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

			var faceVertexUvs = source.faceVertexUvs[ i ];

			if ( this.faceVertexUvs[ i ] === undefined ) {

				this.faceVertexUvs[ i ] = [];

			}

			for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

				var uvs = faceVertexUvs[ j ], uvsCopy = [];

				for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

					var uv = uvs[ k ];

					uvsCopy.push( uv.clone() );

				}

				this.faceVertexUvs[ i ].push( uvsCopy );

			}

		}

		// morph targets

		var morphTargets = source.morphTargets;

		for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

			var morphTarget = {};
			morphTarget.name = morphTargets[ i ].name;

			// vertices

			if ( morphTargets[ i ].vertices !== undefined ) {

				morphTarget.vertices = [];

				for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

					morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

				}

			}

			// normals

			if ( morphTargets[ i ].normals !== undefined ) {

				morphTarget.normals = [];

				for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

					morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

				}

			}

			this.morphTargets.push( morphTarget );

		}

		// morph normals

		var morphNormals = source.morphNormals;

		for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

			var morphNormal = {};

			// vertex normals

			if ( morphNormals[ i ].vertexNormals !== undefined ) {

				morphNormal.vertexNormals = [];

				for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

					var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
					var destVertexNormal = {};

					destVertexNormal.a = srcVertexNormal.a.clone();
					destVertexNormal.b = srcVertexNormal.b.clone();
					destVertexNormal.c = srcVertexNormal.c.clone();

					morphNormal.vertexNormals.push( destVertexNormal );

				}

			}

			// face normals

			if ( morphNormals[ i ].faceNormals !== undefined ) {

				morphNormal.faceNormals = [];

				for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

					morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

				}

			}

			this.morphNormals.push( morphNormal );

		}

		// skin weights

		var skinWeights = source.skinWeights;

		for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

			this.skinWeights.push( skinWeights[ i ].clone() );

		}

		// skin indices

		var skinIndices = source.skinIndices;

		for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

			this.skinIndices.push( skinIndices[ i ].clone() );

		}

		// line distances

		var lineDistances = source.lineDistances;

		for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

			this.lineDistances.push( lineDistances[ i ] );

		}

		// bounding box

		var boundingBox = source.boundingBox;

		if ( boundingBox !== null ) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		var boundingSphere = source.boundingSphere;

		if ( boundingSphere !== null ) {

			this.boundingSphere = boundingSphere.clone();

		}

		// update flags

		this.elementsNeedUpdate = source.elementsNeedUpdate;
		this.verticesNeedUpdate = source.verticesNeedUpdate;
		this.uvsNeedUpdate = source.uvsNeedUpdate;
		this.normalsNeedUpdate = source.normalsNeedUpdate;
		this.colorsNeedUpdate = source.colorsNeedUpdate;
		this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
		this.groupsNeedUpdate = source.groupsNeedUpdate;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function BufferAttribute( array, itemSize, normalized ) {

	if ( Array.isArray( array ) ) {

		throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

	}

	this.uuid = _Math.generateUUID();
	this.name = '';

	this.array = array;
	this.itemSize = itemSize;
	this.count = array !== undefined ? array.length / itemSize : 0;
	this.normalized = normalized === true;

	this.dynamic = false;
	this.updateRange = { offset: 0, count: - 1 };

	this.onUploadCallback = function () {};

	this.version = 0;

}

Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

	set: function ( value ) {

		if ( value === true ) this.version ++;

	}

} );

Object.assign( BufferAttribute.prototype, {

	isBufferAttribute: true,

	setArray: function ( array ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.count = array !== undefined ? array.length / this.itemSize : 0;
		this.array = array;

	},

	setDynamic: function ( value ) {

		this.dynamic = value;

		return this;

	},

	copy: function ( source ) {

		this.array = new source.array.constructor( source.array );
		this.itemSize = source.itemSize;
		this.count = source.count;
		this.normalized = source.normalized;

		this.dynamic = source.dynamic;

		return this;

	},

	copyAt: function ( index1, attribute, index2 ) {

		index1 *= this.itemSize;
		index2 *= attribute.itemSize;

		for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	},

	copyArray: function ( array ) {

		this.array.set( array );

		return this;

	},

	copyColorsArray: function ( colors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = colors.length; i < l; i ++ ) {

			var color = colors[ i ];

			if ( color === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
				color = new Color();

			}

			array[ offset ++ ] = color.r;
			array[ offset ++ ] = color.g;
			array[ offset ++ ] = color.b;

		}

		return this;

	},

	copyIndicesArray: function ( indices ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = indices.length; i < l; i ++ ) {

			var index = indices[ i ];

			array[ offset ++ ] = index.a;
			array[ offset ++ ] = index.b;
			array[ offset ++ ] = index.c;

		}

		return this;

	},

	copyVector2sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
				vector = new Vector2();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;

		}

		return this;

	},

	copyVector3sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
				vector = new Vector3();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;
			array[ offset ++ ] = vector.z;

		}

		return this;

	},

	copyVector4sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
				vector = new Vector4();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;
			array[ offset ++ ] = vector.z;
			array[ offset ++ ] = vector.w;

		}

		return this;

	},

	set: function ( value, offset ) {

		if ( offset === undefined ) offset = 0;

		this.array.set( value, offset );

		return this;

	},

	getX: function ( index ) {

		return this.array[ index * this.itemSize ];

	},

	setX: function ( index, x ) {

		this.array[ index * this.itemSize ] = x;

		return this;

	},

	getY: function ( index ) {

		return this.array[ index * this.itemSize + 1 ];

	},

	setY: function ( index, y ) {

		this.array[ index * this.itemSize + 1 ] = y;

		return this;

	},

	getZ: function ( index ) {

		return this.array[ index * this.itemSize + 2 ];

	},

	setZ: function ( index, z ) {

		this.array[ index * this.itemSize + 2 ] = z;

		return this;

	},

	getW: function ( index ) {

		return this.array[ index * this.itemSize + 3 ];

	},

	setW: function ( index, w ) {

		this.array[ index * this.itemSize + 3 ] = w;

		return this;

	},

	setXY: function ( index, x, y ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;

		return this;

	},

	setXYZ: function ( index, x, y, z ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;

		return this;

	},

	setXYZW: function ( index, x, y, z, w ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;
		this.array[ index + 3 ] = w;

		return this;

	},

	onUpload: function ( callback ) {

		this.onUploadCallback = callback;

		return this;

	},

	clone: function () {

		return new this.constructor( this.array, this.itemSize ).copy( this );

	}

} );

//

function Int8BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Int8Array( array ), itemSize );

}

Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


function Uint8BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Uint8Array( array ), itemSize );

}

Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


function Uint8ClampedBufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize );

}

Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


function Int16BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Int16Array( array ), itemSize );

}

Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


function Uint16BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Uint16Array( array ), itemSize );

}

Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


function Int32BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Int32Array( array ), itemSize );

}

Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


function Uint32BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Uint32Array( array ), itemSize );

}

Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


function Float32BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Float32Array( array ), itemSize );

}

Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


function Float64BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Float64Array( array ), itemSize );

}

Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function DirectGeometry() {

	this.indices = [];
	this.vertices = [];
	this.normals = [];
	this.colors = [];
	this.uvs = [];
	this.uvs2 = [];

	this.groups = [];

	this.morphTargets = {};

	this.skinWeights = [];
	this.skinIndices = [];

	// this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	// update flags

	this.verticesNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.groupsNeedUpdate = false;

}

Object.assign( DirectGeometry.prototype, {

	computeGroups: function ( geometry ) {

		var group;
		var groups = [];
		var materialIndex = undefined;

		var faces = geometry.faces;

		for ( var i = 0; i < faces.length; i ++ ) {

			var face = faces[ i ];

			// materials

			if ( face.materialIndex !== materialIndex ) {

				materialIndex = face.materialIndex;

				if ( group !== undefined ) {

					group.count = ( i * 3 ) - group.start;
					groups.push( group );

				}

				group = {
					start: i * 3,
					materialIndex: materialIndex
				};

			}

		}

		if ( group !== undefined ) {

			group.count = ( i * 3 ) - group.start;
			groups.push( group );

		}

		this.groups = groups;

	},

	fromGeometry: function ( geometry ) {

		var faces = geometry.faces;
		var vertices = geometry.vertices;
		var faceVertexUvs = geometry.faceVertexUvs;

		var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
		var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

		// morphs

		var morphTargets = geometry.morphTargets;
		var morphTargetsLength = morphTargets.length;

		var morphTargetsPosition;

		if ( morphTargetsLength > 0 ) {

			morphTargetsPosition = [];

			for ( var i = 0; i < morphTargetsLength; i ++ ) {

				morphTargetsPosition[ i ] = [];

			}

			this.morphTargets.position = morphTargetsPosition;

		}

		var morphNormals = geometry.morphNormals;
		var morphNormalsLength = morphNormals.length;

		var morphTargetsNormal;

		if ( morphNormalsLength > 0 ) {

			morphTargetsNormal = [];

			for ( var i = 0; i < morphNormalsLength; i ++ ) {

				morphTargetsNormal[ i ] = [];

			}

			this.morphTargets.normal = morphTargetsNormal;

		}

		// skins

		var skinIndices = geometry.skinIndices;
		var skinWeights = geometry.skinWeights;

		var hasSkinIndices = skinIndices.length === vertices.length;
		var hasSkinWeights = skinWeights.length === vertices.length;

		//

		for ( var i = 0; i < faces.length; i ++ ) {

			var face = faces[ i ];

			this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

			} else {

				var normal = face.normal;

				this.normals.push( normal, normal, normal );

			}

			var vertexColors = face.vertexColors;

			if ( vertexColors.length === 3 ) {

				this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

			} else {

				var color = face.color;

				this.colors.push( color, color, color );

			}

			if ( hasFaceVertexUv === true ) {

				var vertexUvs = faceVertexUvs[ 0 ][ i ];

				if ( vertexUvs !== undefined ) {

					this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

				} else {

					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

					this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

				}

			}

			if ( hasFaceVertexUv2 === true ) {

				var vertexUvs = faceVertexUvs[ 1 ][ i ];

				if ( vertexUvs !== undefined ) {

					this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

				} else {

					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

					this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

				}

			}

			// morphs

			for ( var j = 0; j < morphTargetsLength; j ++ ) {

				var morphTarget = morphTargets[ j ].vertices;

				morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

			}

			for ( var j = 0; j < morphNormalsLength; j ++ ) {

				var morphNormal = morphNormals[ j ].vertexNormals[ i ];

				morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

			}

			// skins

			if ( hasSkinIndices ) {

				this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

			}

			if ( hasSkinWeights ) {

				this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

			}

		}

		this.computeGroups( geometry );

		this.verticesNeedUpdate = geometry.verticesNeedUpdate;
		this.normalsNeedUpdate = geometry.normalsNeedUpdate;
		this.colorsNeedUpdate = geometry.colorsNeedUpdate;
		this.uvsNeedUpdate = geometry.uvsNeedUpdate;
		this.groupsNeedUpdate = geometry.groupsNeedUpdate;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function arrayMax( array ) {

	if ( array.length === 0 ) return - Infinity;

	var max = array[ 0 ];

	for ( var i = 1, l = array.length; i < l; ++ i ) {

		if ( array[ i ] > max ) max = array[ i ];

	}

	return max;

}

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function BufferGeometry() {

	Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'BufferGeometry';

	this.index = null;
	this.attributes = {};

	this.morphAttributes = {};

	this.groups = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	this.drawRange = { start: 0, count: Infinity };

}

BufferGeometry.MaxIndex = 65535;

Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {

	isBufferGeometry: true,

	getIndex: function () {

		return this.index;

	},

	setIndex: function ( index ) {

		if ( Array.isArray( index ) ) {

			this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

		} else {

			this.index = index;

		}

	},

	addAttribute: function ( name, attribute ) {

		if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

			this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

			return;

		}

		if ( name === 'index' ) {

			console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
			this.setIndex( attribute );

			return;

		}

		this.attributes[ name ] = attribute;

		return this;

	},

	getAttribute: function ( name ) {

		return this.attributes[ name ];

	},

	removeAttribute: function ( name ) {

		delete this.attributes[ name ];

		return this;

	},

	addGroup: function ( start, count, materialIndex ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex !== undefined ? materialIndex : 0

		} );

	},

	clearGroups: function () {

		this.groups = [];

	},

	setDrawRange: function ( start, count ) {

		this.drawRange.start = start;
		this.drawRange.count = count;

	},

	applyMatrix: function ( matrix ) {

		var position = this.attributes.position;

		if ( position !== undefined ) {

			matrix.applyToBufferAttribute( position );
			position.needsUpdate = true;

		}

		var normal = this.attributes.normal;

		if ( normal !== undefined ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			normalMatrix.applyToBufferAttribute( normal );
			normal.needsUpdate = true;

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		return this;

	},

	rotateX: function () {

		// rotate geometry around world x-axis

		var m1 = new Matrix4();

		return function rotateX( angle ) {

			m1.makeRotationX( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateY: function () {

		// rotate geometry around world y-axis

		var m1 = new Matrix4();

		return function rotateY( angle ) {

			m1.makeRotationY( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateZ: function () {

		// rotate geometry around world z-axis

		var m1 = new Matrix4();

		return function rotateZ( angle ) {

			m1.makeRotationZ( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	translate: function () {

		// translate geometry

		var m1 = new Matrix4();

		return function translate( x, y, z ) {

			m1.makeTranslation( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	scale: function () {

		// scale geometry

		var m1 = new Matrix4();

		return function scale( x, y, z ) {

			m1.makeScale( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	lookAt: function () {

		var obj = new Object3D();

		return function lookAt( vector ) {

			obj.lookAt( vector );

			obj.updateMatrix();

			this.applyMatrix( obj.matrix );

		};

	}(),

	center: function () {

		this.computeBoundingBox();

		var offset = this.boundingBox.getCenter().negate();

		this.translate( offset.x, offset.y, offset.z );

		return offset;

	},

	setFromObject: function ( object ) {

		// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

		var geometry = object.geometry;

		if ( object.isPoints || object.isLine ) {

			var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
			var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

			this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
			this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

			if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

				var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

				this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

		} else if ( object.isMesh ) {

			if ( geometry && geometry.isGeometry ) {

				this.fromGeometry( geometry );

			}

		}

		return this;

	},

	updateFromObject: function ( object ) {

		var geometry = object.geometry;

		if ( object.isMesh ) {

			var direct = geometry.__directGeometry;

			if ( geometry.elementsNeedUpdate === true ) {

				direct = undefined;
				geometry.elementsNeedUpdate = false;

			}

			if ( direct === undefined ) {

				return this.fromGeometry( geometry );

			}

			direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
			direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
			direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
			direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
			direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

			geometry.verticesNeedUpdate = false;
			geometry.normalsNeedUpdate = false;
			geometry.colorsNeedUpdate = false;
			geometry.uvsNeedUpdate = false;
			geometry.groupsNeedUpdate = false;

			geometry = direct;

		}

		var attribute;

		if ( geometry.verticesNeedUpdate === true ) {

			attribute = this.attributes.position;

			if ( attribute !== undefined ) {

				attribute.copyVector3sArray( geometry.vertices );
				attribute.needsUpdate = true;

			}

			geometry.verticesNeedUpdate = false;

		}

		if ( geometry.normalsNeedUpdate === true ) {

			attribute = this.attributes.normal;

			if ( attribute !== undefined ) {

				attribute.copyVector3sArray( geometry.normals );
				attribute.needsUpdate = true;

			}

			geometry.normalsNeedUpdate = false;

		}

		if ( geometry.colorsNeedUpdate === true ) {

			attribute = this.attributes.color;

			if ( attribute !== undefined ) {

				attribute.copyColorsArray( geometry.colors );
				attribute.needsUpdate = true;

			}

			geometry.colorsNeedUpdate = false;

		}

		if ( geometry.uvsNeedUpdate ) {

			attribute = this.attributes.uv;

			if ( attribute !== undefined ) {

				attribute.copyVector2sArray( geometry.uvs );
				attribute.needsUpdate = true;

			}

			geometry.uvsNeedUpdate = false;

		}

		if ( geometry.lineDistancesNeedUpdate ) {

			attribute = this.attributes.lineDistance;

			if ( attribute !== undefined ) {

				attribute.copyArray( geometry.lineDistances );
				attribute.needsUpdate = true;

			}

			geometry.lineDistancesNeedUpdate = false;

		}

		if ( geometry.groupsNeedUpdate ) {

			geometry.computeGroups( object.geometry );
			this.groups = geometry.groups;

			geometry.groupsNeedUpdate = false;

		}

		return this;

	},

	fromGeometry: function ( geometry ) {

		geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

		return this.fromDirectGeometry( geometry.__directGeometry );

	},

	fromDirectGeometry: function ( geometry ) {

		var positions = new Float32Array( geometry.vertices.length * 3 );
		this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

		if ( geometry.normals.length > 0 ) {

			var normals = new Float32Array( geometry.normals.length * 3 );
			this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

		}

		if ( geometry.colors.length > 0 ) {

			var colors = new Float32Array( geometry.colors.length * 3 );
			this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

		}

		if ( geometry.uvs.length > 0 ) {

			var uvs = new Float32Array( geometry.uvs.length * 2 );
			this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

		}

		if ( geometry.uvs2.length > 0 ) {

			var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
			this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

		}

		if ( geometry.indices.length > 0 ) {

			var TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;
			var indices = new TypeArray( geometry.indices.length * 3 );
			this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

		}

		// groups

		this.groups = geometry.groups;

		// morphs

		for ( var name in geometry.morphTargets ) {

			var array = [];
			var morphTargets = geometry.morphTargets[ name ];

			for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

				var morphTarget = morphTargets[ i ];

				var attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );

				array.push( attribute.copyVector3sArray( morphTarget ) );

			}

			this.morphAttributes[ name ] = array;

		}

		// skinning

		if ( geometry.skinIndices.length > 0 ) {

			var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
			this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

		}

		if ( geometry.skinWeights.length > 0 ) {

			var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
			this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

		}

		//

		if ( geometry.boundingSphere !== null ) {

			this.boundingSphere = geometry.boundingSphere.clone();

		}

		if ( geometry.boundingBox !== null ) {

			this.boundingBox = geometry.boundingBox.clone();

		}

		return this;

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		var position = this.attributes.position;

		if ( position !== undefined ) {

			this.boundingBox.setFromBufferAttribute( position );

		} else {

			this.boundingBox.makeEmpty();

		}

		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

			console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

		}

	},

	computeBoundingSphere: function () {

		var box = new Box3();
		var vector = new Vector3();

		return function computeBoundingSphere() {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			var position = this.attributes.position;

			if ( position ) {

				var center = this.boundingSphere.center;

				box.setFromBufferAttribute( position );
				box.getCenter( center );

				// hoping to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

				var maxRadiusSq = 0;

				for ( var i = 0, il = position.count; i < il; i ++ ) {

					vector.x = position.getX( i );
					vector.y = position.getY( i );
					vector.z = position.getZ( i );
					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

				}

				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

				if ( isNaN( this.boundingSphere.radius ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

				}

			}

		};

	}(),

	computeFaceNormals: function () {

		// backwards compatibility

	},

	computeVertexNormals: function () {

		var index = this.index;
		var attributes = this.attributes;
		var groups = this.groups;

		if ( attributes.position ) {

			var positions = attributes.position.array;

			if ( attributes.normal === undefined ) {

				this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

			} else {

				// reset existing normals to zero

				var array = attributes.normal.array;

				for ( var i = 0, il = array.length; i < il; i ++ ) {

					array[ i ] = 0;

				}

			}

			var normals = attributes.normal.array;

			var vA, vB, vC;
			var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
			var cb = new Vector3(), ab = new Vector3();

			// indexed elements

			if ( index ) {

				var indices = index.array;

				if ( groups.length === 0 ) {

					this.addGroup( 0, indices.length );

				}

				for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

					var group = groups[ j ];

					var start = group.start;
					var count = group.count;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						vA = indices[ i + 0 ] * 3;
						vB = indices[ i + 1 ] * 3;
						vC = indices[ i + 2 ] * 3;

						pA.fromArray( positions, vA );
						pB.fromArray( positions, vB );
						pC.fromArray( positions, vC );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ vA ] += cb.x;
						normals[ vA + 1 ] += cb.y;
						normals[ vA + 2 ] += cb.z;

						normals[ vB ] += cb.x;
						normals[ vB + 1 ] += cb.y;
						normals[ vB + 2 ] += cb.z;

						normals[ vC ] += cb.x;
						normals[ vC + 1 ] += cb.y;
						normals[ vC + 2 ] += cb.z;

					}

				}

			} else {

				// non-indexed elements (unconnected triangle soup)

				for ( var i = 0, il = positions.length; i < il; i += 9 ) {

					pA.fromArray( positions, i );
					pB.fromArray( positions, i + 3 );
					pC.fromArray( positions, i + 6 );

					cb.subVectors( pC, pB );
					ab.subVectors( pA, pB );
					cb.cross( ab );

					normals[ i ] = cb.x;
					normals[ i + 1 ] = cb.y;
					normals[ i + 2 ] = cb.z;

					normals[ i + 3 ] = cb.x;
					normals[ i + 4 ] = cb.y;
					normals[ i + 5 ] = cb.z;

					normals[ i + 6 ] = cb.x;
					normals[ i + 7 ] = cb.y;
					normals[ i + 8 ] = cb.z;

				}

			}

			this.normalizeNormals();

			attributes.normal.needsUpdate = true;

		}

	},

	merge: function ( geometry, offset ) {

		if ( ! ( geometry && geometry.isBufferGeometry ) ) {

			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
			return;

		}

		if ( offset === undefined ) offset = 0;

		var attributes = this.attributes;

		for ( var key in attributes ) {

			if ( geometry.attributes[ key ] === undefined ) continue;

			var attribute1 = attributes[ key ];
			var attributeArray1 = attribute1.array;

			var attribute2 = geometry.attributes[ key ];
			var attributeArray2 = attribute2.array;

			var attributeSize = attribute2.itemSize;

			for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

				attributeArray1[ j ] = attributeArray2[ i ];

			}

		}

		return this;

	},

	normalizeNormals: function () {

		var vector = new Vector3();

		return function normalizeNormals() {

			var normals = this.attributes.normal;

			for ( var i = 0, il = normals.count; i < il; i ++ ) {

				vector.x = normals.getX( i );
				vector.y = normals.getY( i );
				vector.z = normals.getZ( i );

				vector.normalize();

				normals.setXYZ( i, vector.x, vector.y, vector.z );

			}

		};

	}(),

	toNonIndexed: function () {

		if ( this.index === null ) {

			console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
			return this;

		}

		var geometry2 = new BufferGeometry();

		var indices = this.index.array;
		var attributes = this.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];

			var array = attribute.array;
			var itemSize = attribute.itemSize;

			var array2 = new array.constructor( indices.length * itemSize );

			var index = 0, index2 = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				index = indices[ i ] * itemSize;

				for ( var j = 0; j < itemSize; j ++ ) {

					array2[ index2 ++ ] = array[ index ++ ];

				}

			}

			geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

		}

		return geometry2;

	},

	toJSON: function () {

		var data = {
			metadata: {
				version: 4.5,
				type: 'BufferGeometry',
				generator: 'BufferGeometry.toJSON'
			}
		};

		// standard BufferGeometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if ( this.name !== '' ) data.name = this.name;

		if ( this.parameters !== undefined ) {

			var parameters = this.parameters;

			for ( var key in parameters ) {

				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

			}

			return data;

		}

		data.data = { attributes: {} };

		var index = this.index;

		if ( index !== null ) {

			var array = Array.prototype.slice.call( index.array );

			data.data.index = {
				type: index.array.constructor.name,
				array: array
			};

		}

		var attributes = this.attributes;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];

			var array = Array.prototype.slice.call( attribute.array );

			data.data.attributes[ key ] = {
				itemSize: attribute.itemSize,
				type: attribute.array.constructor.name,
				array: array,
				normalized: attribute.normalized
			};

		}

		var groups = this.groups;

		if ( groups.length > 0 ) {

			data.data.groups = JSON.parse( JSON.stringify( groups ) );

		}

		var boundingSphere = this.boundingSphere;

		if ( boundingSphere !== null ) {

			data.data.boundingSphere = {
				center: boundingSphere.center.toArray(),
				radius: boundingSphere.radius
			};

		}

		return data;

	},

	clone: function () {

		/*
		 // Handle primitives

		 var parameters = this.parameters;

		 if ( parameters !== undefined ) {

		 var values = [];

		 for ( var key in parameters ) {

		 values.push( parameters[ key ] );

		 }

		 var geometry = Object.create( this.constructor.prototype );
		 this.constructor.apply( geometry, values );
		 return geometry;

		 }

		 return new this.constructor().copy( this );
		 */

		return new BufferGeometry().copy( this );

	},

	copy: function ( source ) {

		var name, i, l;

		// reset

		this.index = null;
		this.attributes = {};
		this.morphAttributes = {};
		this.groups = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// name

		this.name = source.name;

		// index

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		// attributes

		var attributes = source.attributes;

		for ( name in attributes ) {

			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );

		}

		// morph attributes

		var morphAttributes = source.morphAttributes;

		for ( name in morphAttributes ) {

			var array = [];
			var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

			for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

				array.push( morphAttribute[ i ].clone() );

			}

			this.morphAttributes[ name ] = array;

		}

		// groups

		var groups = source.groups;

		for ( i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.materialIndex );

		}

		// bounding box

		var boundingBox = source.boundingBox;

		if ( boundingBox !== null ) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		var boundingSphere = source.boundingSphere;

		if ( boundingSphere !== null ) {

			this.boundingSphere = boundingSphere.clone();

		}

		// draw range

		this.drawRange.start = source.drawRange.start;
		this.drawRange.count = source.drawRange.count;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// BoxGeometry

function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	Geometry.call( this );

	this.type = 'BoxGeometry';

	this.parameters = {
		width: width,
		height: height,
		depth: depth,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		depthSegments: depthSegments
	};

	this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
	this.mergeVertices();

}

BoxGeometry.prototype = Object.create( Geometry.prototype );
BoxGeometry.prototype.constructor = BoxGeometry;

// BoxBufferGeometry

function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	BufferGeometry.call( this );

	this.type = 'BoxBufferGeometry';

	this.parameters = {
		width: width,
		height: height,
		depth: depth,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		depthSegments: depthSegments
	};

	var scope = this;

	// segments

	widthSegments = Math.floor( widthSegments ) || 1;
	heightSegments = Math.floor( heightSegments ) || 1;
	depthSegments = Math.floor( depthSegments ) || 1;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var numberOfVertices = 0;
	var groupStart = 0;

	// build each side of the box geometry

	buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px
	buildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx
	buildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py
	buildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny
	buildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz
	buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

		var segmentWidth = width / gridX;
		var segmentHeight = height / gridY;

		var widthHalf = width / 2;
		var heightHalf = height / 2;
		var depthHalf = depth / 2;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var vertexCounter = 0;
		var groupCount = 0;

		var ix, iy;

		var vector = new Vector3();

		// generate vertices, normals and uvs

		for ( iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segmentHeight - heightHalf;

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segmentWidth - widthHalf;

				// set values to correct vector component

				vector[ u ] = x * udir;
				vector[ v ] = y * vdir;
				vector[ w ] = depthHalf;

				// now apply vector to vertex buffer

				vertices.push( vector.x, vector.y, vector.z );

				// set values to correct vector component

				vector[ u ] = 0;
				vector[ v ] = 0;
				vector[ w ] = depth > 0 ? 1 : - 1;

				// now apply vector to normal buffer

				normals.push( vector.x, vector.y, vector.z );

				// uvs

				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );

				// counters

				vertexCounter += 1;

			}

		}

		// indices

		// 1. you need three indices to draw a single face
		// 2. a single segment consists of two faces
		// 3. so we need to generate six (2*3) indices per segment

		for ( iy = 0; iy < gridY; iy ++ ) {

			for ( ix = 0; ix < gridX; ix ++ ) {

				var a = numberOfVertices + ix + gridX1 * iy;
				var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
				var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

				// increase counter

				groupCount += 6;

			}

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, materialIndex );

		// calculate new start value for groups

		groupStart += groupCount;

		// update total number of vertices

		numberOfVertices += vertexCounter;

	}

}

BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// PlaneGeometry

function PlaneGeometry( width, height, widthSegments, heightSegments ) {

	Geometry.call( this );

	this.type = 'PlaneGeometry';

	this.parameters = {
		width: width,
		height: height,
		widthSegments: widthSegments,
		heightSegments: heightSegments
	};

	this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
	this.mergeVertices();

}

PlaneGeometry.prototype = Object.create( Geometry.prototype );
PlaneGeometry.prototype.constructor = PlaneGeometry;

// PlaneBufferGeometry

function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

	BufferGeometry.call( this );

	this.type = 'PlaneBufferGeometry';

	this.parameters = {
		width: width,
		height: height,
		widthSegments: widthSegments,
		heightSegments: heightSegments
	};

	var width_half = width / 2;
	var height_half = height / 2;

	var gridX = Math.floor( widthSegments ) || 1;
	var gridY = Math.floor( heightSegments ) || 1;

	var gridX1 = gridX + 1;
	var gridY1 = gridY + 1;

	var segment_width = width / gridX;
	var segment_height = height / gridY;

	var ix, iy;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// generate vertices, normals and uvs

	for ( iy = 0; iy < gridY1; iy ++ ) {

		var y = iy * segment_height - height_half;

		for ( ix = 0; ix < gridX1; ix ++ ) {

			var x = ix * segment_width - width_half;

			vertices.push( x, - y, 0 );

			normals.push( 0, 0, 1 );

			uvs.push( ix / gridX );
			uvs.push( 1 - ( iy / gridY ) );

		}

	}

	// indices

	for ( iy = 0; iy < gridY; iy ++ ) {

		for ( ix = 0; ix < gridX; ix ++ ) {

			var a = ix + gridX1 * iy;
			var b = ix + gridX1 * ( iy + 1 );
			var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
			var d = ( ix + 1 ) + gridX1 * iy;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>
 * }
 */

function MeshBasicMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshBasicMaterial';

	this.color = new Color( 0xffffff ); // emissive

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;

	this.lights = false;

	this.setValues( parameters );

}

MeshBasicMaterial.prototype = Object.create( Material.prototype );
MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

MeshBasicMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	return this;

};

/**
 * @author bhouston / http://clara.io
 */

function Ray( origin, direction ) {

	this.origin = ( origin !== undefined ) ? origin : new Vector3();
	this.direction = ( direction !== undefined ) ? direction : new Vector3();

}

Object.assign( Ray.prototype, {

	set: function ( origin, direction ) {

		this.origin.copy( origin );
		this.direction.copy( direction );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( ray ) {

		this.origin.copy( ray.origin );
		this.direction.copy( ray.direction );

		return this;

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

	},

	lookAt: function ( v ) {

		this.direction.copy( v ).sub( this.origin ).normalize();

		return this;

	},

	recast: function () {

		var v1 = new Vector3();

		return function recast( t ) {

			this.origin.copy( this.at( t, v1 ) );

			return this;

		};

	}(),

	closestPointToPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();
		result.subVectors( point, this.origin );
		var directionDistance = result.dot( this.direction );

		if ( directionDistance < 0 ) {

			return result.copy( this.origin );

		}

		return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

	},

	distanceToPoint: function ( point ) {

		return Math.sqrt( this.distanceSqToPoint( point ) );

	},

	distanceSqToPoint: function () {

		var v1 = new Vector3();

		return function distanceSqToPoint( point ) {

			var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceToSquared( point );

			}

			v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			return v1.distanceToSquared( point );

		};

	}(),

	distanceSqToSegment: function () {

		var segCenter = new Vector3();
		var segDir = new Vector3();
		var diff = new Vector3();

		return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment

			segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
			segDir.copy( v1 ).sub( v0 ).normalize();
			diff.copy( this.origin ).sub( segCenter );

			var segExtent = v0.distanceTo( v1 ) * 0.5;
			var a01 = - this.direction.dot( segDir );
			var b0 = diff.dot( this.direction );
			var b1 = - diff.dot( segDir );
			var c = diff.lengthSq();
			var det = Math.abs( 1 - a01 * a01 );
			var s0, s1, sqrDist, extDet;

			if ( det > 0 ) {

				// The ray and segment are not parallel.

				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if ( s0 >= 0 ) {

					if ( s1 >= - extDet ) {

						if ( s1 <= extDet ) {

							// region 0
							// Minimum at interior points of ray and segment.

							var invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

						} else {

							// region 1

							s1 = segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						// region 5

						s1 = - segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					if ( s1 <= - extDet ) {

						// region 4

						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					} else if ( s1 <= extDet ) {

						// region 3

						s0 = 0;
						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

					} else {

						// region 2

						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				}

			} else {

				// Ray and segment are parallel.

				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

			}

			if ( optionalPointOnRay ) {

				optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

			}

			if ( optionalPointOnSegment ) {

				optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

			}

			return sqrDist;

		};

	}(),

	intersectSphere: function () {

		var v1 = new Vector3();

		return function intersectSphere( sphere, optionalTarget ) {

			v1.subVectors( sphere.center, this.origin );
			var tca = v1.dot( this.direction );
			var d2 = v1.dot( v1 ) - tca * tca;
			var radius2 = sphere.radius * sphere.radius;

			if ( d2 > radius2 ) return null;

			var thc = Math.sqrt( radius2 - d2 );

			// t0 = first intersect point - entrance on front of sphere
			var t0 = tca - thc;

			// t1 = second intersect point - exit point on back of sphere
			var t1 = tca + thc;

			// test to see if both t0 and t1 are behind the ray - if so, return null
			if ( t0 < 0 && t1 < 0 ) return null;

			// test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.
			if ( t0 < 0 ) return this.at( t1, optionalTarget );

			// else t0 is in front of the ray, so return the first collision point scaled by t0
			return this.at( t0, optionalTarget );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) <= sphere.radius;

	},

	distanceToPlane: function ( plane ) {

		var denominator = plane.normal.dot( this.direction );

		if ( denominator === 0 ) {

			// line is coplanar, return origin
			if ( plane.distanceToPoint( this.origin ) === 0 ) {

				return 0;

			}

			// Null is preferable to undefined since undefined means.... it is undefined

			return null;

		}

		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

		// Return if the ray never intersects the plane

		return t >= 0 ? t :  null;

	},

	intersectPlane: function ( plane, optionalTarget ) {

		var t = this.distanceToPlane( plane );

		if ( t === null ) {

			return null;

		}

		return this.at( t, optionalTarget );

	},

	intersectsPlane: function ( plane ) {

		// check if the ray lies on the plane first

		var distToPoint = plane.distanceToPoint( this.origin );

		if ( distToPoint === 0 ) {

			return true;

		}

		var denominator = plane.normal.dot( this.direction );

		if ( denominator * distToPoint < 0 ) {

			return true;

		}

		// ray origin is behind the plane (and is pointing behind it)

		return false;

	},

	intersectBox: function ( box, optionalTarget ) {

		var tmin, tmax, tymin, tymax, tzmin, tzmax;

		var invdirx = 1 / this.direction.x,
			invdiry = 1 / this.direction.y,
			invdirz = 1 / this.direction.z;

		var origin = this.origin;

		if ( invdirx >= 0 ) {

			tmin = ( box.min.x - origin.x ) * invdirx;
			tmax = ( box.max.x - origin.x ) * invdirx;

		} else {

			tmin = ( box.max.x - origin.x ) * invdirx;
			tmax = ( box.min.x - origin.x ) * invdirx;

		}

		if ( invdiry >= 0 ) {

			tymin = ( box.min.y - origin.y ) * invdiry;
			tymax = ( box.max.y - origin.y ) * invdiry;

		} else {

			tymin = ( box.max.y - origin.y ) * invdiry;
			tymax = ( box.min.y - origin.y ) * invdiry;

		}

		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

		// These lines also handle the case where tmin or tmax is NaN
		// (result of 0 * Infinity). x !== x returns true if x is NaN

		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

		if ( invdirz >= 0 ) {

			tzmin = ( box.min.z - origin.z ) * invdirz;
			tzmax = ( box.max.z - origin.z ) * invdirz;

		} else {

			tzmin = ( box.max.z - origin.z ) * invdirz;
			tzmax = ( box.min.z - origin.z ) * invdirz;

		}

		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

		//return point closest to the ray (positive side)

		if ( tmax < 0 ) return null;

		return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

	},

	intersectsBox: ( function () {

		var v = new Vector3();

		return function intersectsBox( box ) {

			return this.intersectBox( box, v ) !== null;

		};

	} )(),

	intersectTriangle: function () {

		// Compute the offset origin, edges, and normal.
		var diff = new Vector3();
		var edge1 = new Vector3();
		var edge2 = new Vector3();
		var normal = new Vector3();

		return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

			edge1.subVectors( b, a );
			edge2.subVectors( c, a );
			normal.crossVectors( edge1, edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			var DdN = this.direction.dot( normal );
			var sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) return null;
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			diff.subVectors( this.origin, a );
			var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			var QdN = - sign * diff.dot( normal );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, optionalTarget );

		};

	}(),

	applyMatrix4: function ( matrix4 ) {

		this.origin.applyMatrix4( matrix4 );
		this.direction.transformDirection( matrix4 );

		return this;

	},

	equals: function ( ray ) {

		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	}

} );

/**
 * @author bhouston / http://clara.io
 */

function Line3( start, end ) {

	this.start = ( start !== undefined ) ? start : new Vector3();
	this.end = ( end !== undefined ) ? end : new Vector3();

}

Object.assign( Line3.prototype, {

	set: function ( start, end ) {

		this.start.copy( start );
		this.end.copy( end );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( line ) {

		this.start.copy( line.start );
		this.end.copy( line.end );

		return this;

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

	},

	delta: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.subVectors( this.end, this.start );

	},

	distanceSq: function () {

		return this.start.distanceToSquared( this.end );

	},

	distance: function () {

		return this.start.distanceTo( this.end );

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	closestPointToPointParameter: function () {

		var startP = new Vector3();
		var startEnd = new Vector3();

		return function closestPointToPointParameter( point, clampToLine ) {

			startP.subVectors( point, this.start );
			startEnd.subVectors( this.end, this.start );

			var startEnd2 = startEnd.dot( startEnd );
			var startEnd_startP = startEnd.dot( startP );

			var t = startEnd_startP / startEnd2;

			if ( clampToLine ) {

				t = _Math.clamp( t, 0, 1 );

			}

			return t;

		};

	}(),

	closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

		var t = this.closestPointToPointParameter( point, clampToLine );

		var result = optionalTarget || new Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	applyMatrix4: function ( matrix ) {

		this.start.applyMatrix4( matrix );
		this.end.applyMatrix4( matrix );

		return this;

	},

	equals: function ( line ) {

		return line.start.equals( this.start ) && line.end.equals( this.end );

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Triangle( a, b, c ) {

	this.a = ( a !== undefined ) ? a : new Vector3();
	this.b = ( b !== undefined ) ? b : new Vector3();
	this.c = ( c !== undefined ) ? c : new Vector3();

}

Object.assign( Triangle, {

	normal: function () {

		var v0 = new Vector3();

		return function normal( a, b, c, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );

			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {

				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

			}

			return result.set( 0, 0, 0 );

		};

	}(),

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	barycoordFromPoint: function () {

		var v0 = new Vector3();
		var v1 = new Vector3();
		var v2 = new Vector3();

		return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			var result = optionalTarget || new Vector3();

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );

		};

	}(),

	containsPoint: function () {

		var v1 = new Vector3();

		return function containsPoint( point, a, b, c ) {

			var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );

			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

		};

	}()

} );

Object.assign( Triangle.prototype, {

	set: function ( a, b, c ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

		return this;

	},

	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

		this.a.copy( points[ i0 ] );
		this.b.copy( points[ i1 ] );
		this.c.copy( points[ i2 ] );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( triangle ) {

		this.a.copy( triangle.a );
		this.b.copy( triangle.b );
		this.c.copy( triangle.c );

		return this;

	},

	area: function () {

		var v0 = new Vector3();
		var v1 = new Vector3();

		return function area() {

			v0.subVectors( this.c, this.b );
			v1.subVectors( this.a, this.b );

			return v0.cross( v1 ).length() * 0.5;

		};

	}(),

	midpoint: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

	},

	normal: function ( optionalTarget ) {

		return Triangle.normal( this.a, this.b, this.c, optionalTarget );

	},

	plane: function ( optionalTarget ) {

		var result = optionalTarget || new Plane();

		return result.setFromCoplanarPoints( this.a, this.b, this.c );

	},

	barycoordFromPoint: function ( point, optionalTarget ) {

		return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

	},

	containsPoint: function ( point ) {

		return Triangle.containsPoint( point, this.a, this.b, this.c );

	},

	closestPointToPoint: function () {

		var plane = new Plane();
		var edgeList = [ new Line3(), new Line3(), new Line3() ];
		var projectedPoint = new Vector3();
		var closestPoint = new Vector3();

		return function closestPointToPoint( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			var minDistance = Infinity;

			// project the point onto the plane of the triangle

			plane.setFromCoplanarPoints( this.a, this.b, this.c );
			plane.projectPoint( point, projectedPoint );

			// check if the projection lies within the triangle

			if( this.containsPoint( projectedPoint ) === true ) {

				// if so, this is the closest point

				result.copy( projectedPoint );

			} else {

				// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

				edgeList[ 0 ].set( this.a, this.b );
				edgeList[ 1 ].set( this.b, this.c );
				edgeList[ 2 ].set( this.c, this.a );

				for( var i = 0; i < edgeList.length; i ++ ) {

					edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

					var distance = projectedPoint.distanceToSquared( closestPoint );

					if( distance < minDistance ) {

						minDistance = distance;

						result.copy( closestPoint );

					}

				}

			}

			return result;

		};

	}(),

	equals: function ( triangle ) {

		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author jonobr1 / http://jonobr1.com/
 */

function Mesh( geometry, material ) {

	Object3D.call( this );

	this.type = 'Mesh';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

	this.drawMode = TrianglesDrawMode;

	this.updateMorphTargets();

}

Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Mesh,

	isMesh: true,

	setDrawMode: function ( value ) {

		this.drawMode = value;

	},

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.drawMode = source.drawMode;

		return this;

	},

	updateMorphTargets: function () {

		var geometry = this.geometry;
		var m, ml, name;

		if ( geometry.isBufferGeometry ) {

			var morphAttributes = geometry.morphAttributes;
			var keys = Object.keys( morphAttributes );

			if ( keys.length > 0 ) {

				var morphAttribute = morphAttributes[ keys[ 0 ] ];

				if ( morphAttribute !== undefined ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

						name = morphAttribute[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		} else {

			var morphTargets = geometry.morphTargets;

			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {

					name = morphTargets[ m ].name || String( m );

					this.morphTargetInfluences.push( 0 );
					this.morphTargetDictionary[ name ] = m;

				}

			}

		}

	},

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		var vA = new Vector3();
		var vB = new Vector3();
		var vC = new Vector3();

		var tempA = new Vector3();
		var tempB = new Vector3();
		var tempC = new Vector3();

		var uvA = new Vector2();
		var uvB = new Vector2();
		var uvC = new Vector2();

		var barycoord = new Vector3();

		var intersectionPoint = new Vector3();
		var intersectionPointWorld = new Vector3();

		function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

			Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

			uv1.multiplyScalar( barycoord.x );
			uv2.multiplyScalar( barycoord.y );
			uv3.multiplyScalar( barycoord.z );

			uv1.add( uv2 ).add( uv3 );

			return uv1.clone();

		}

		function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

			var intersect;

			if ( material.side === BackSide ) {

				intersect = ray.intersectTriangle( pC, pB, pA, true, point );

			} else {

				intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

			}

			if ( intersect === null ) return null;

			intersectionPointWorld.copy( point );
			intersectionPointWorld.applyMatrix4( object.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

			if ( distance < raycaster.near || distance > raycaster.far ) return null;

			return {
				distance: distance,
				point: intersectionPointWorld.clone(),
				object: object
			};

		}

		function checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {

			vA.fromBufferAttribute( position, a );
			vB.fromBufferAttribute( position, b );
			vC.fromBufferAttribute( position, c );

			var intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );

			if ( intersection ) {

				if ( uv ) {

					uvA.fromBufferAttribute( uv, a );
					uvB.fromBufferAttribute( uv, b );
					uvC.fromBufferAttribute( uv, c );

					intersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );

				}

				intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
				intersection.faceIndex = a;

			}

			return intersection;

		}

		return function raycast( raycaster, intersects ) {

			var geometry = this.geometry;
			var material = this.material;
			var matrixWorld = this.matrixWorld;

			if ( material === undefined ) return;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			// Check boundingBox before continuing

			if ( geometry.boundingBox !== null ) {

				if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

			}

			var intersection;

			if ( geometry.isBufferGeometry ) {

				var a, b, c;
				var index = geometry.index;
				var position = geometry.attributes.position;
				var uv = geometry.attributes.uv;
				var i, l;

				if ( index !== null ) {

					// indexed buffer geometry

					for ( i = 0, l = index.count; i < l; i += 3 ) {

						a = index.getX( i );
						b = index.getX( i + 1 );
						c = index.getX( i + 2 );

						intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
							intersects.push( intersection );

						}

					}

				} else {

					// non-indexed buffer geometry

					for ( i = 0, l = position.count; i < l; i += 3 ) {

						a = i;
						b = i + 1;
						c = i + 2;

						intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );

						if ( intersection ) {

							intersection.index = a; // triangle number in positions buffer semantics
							intersects.push( intersection );

						}

					}

				}

			} else if ( geometry.isGeometry ) {

				var fvA, fvB, fvC;
				var isMultiMaterial = Array.isArray( material );

				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var uvs;

				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
				if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

					var face = faces[ f ];
					var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

					if ( faceMaterial === undefined ) continue;

					fvA = vertices[ face.a ];
					fvB = vertices[ face.b ];
					fvC = vertices[ face.c ];

					if ( faceMaterial.morphTargets === true ) {

						var morphTargets = geometry.morphTargets;
						var morphInfluences = this.morphTargetInfluences;

						vA.set( 0, 0, 0 );
						vB.set( 0, 0, 0 );
						vC.set( 0, 0, 0 );

						for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

							var influence = morphInfluences[ t ];

							if ( influence === 0 ) continue;

							var targets = morphTargets[ t ].vertices;

							vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
							vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
							vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

						}

						vA.add( fvA );
						vB.add( fvB );
						vC.add( fvC );

						fvA = vA;
						fvB = vB;
						fvC = vC;

					}

					intersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

					if ( intersection ) {

						if ( uvs && uvs[ f ] ) {

							var uvs_f = uvs[ f ];
							uvA.copy( uvs_f[ 0 ] );
							uvB.copy( uvs_f[ 1 ] );
							uvC.copy( uvs_f[ 2 ] );

							intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

						}

						intersection.face = face;
						intersection.faceIndex = f;
						intersects.push( intersection );

					}

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLBackground( renderer, state, geometries, premultipliedAlpha ) {

	var clearColor = new Color( 0x000000 );
	var clearAlpha = 0;

	var planeCamera, planeMesh;
	var boxMesh;

	function render( renderList, scene, camera, forceClear ) {

		var background = scene.background;

		if ( background === null ) {

			setClear( clearColor, clearAlpha );

		} else if ( background && background.isColor ) {

			setClear( background, 1 );
			forceClear = true;

		}

		if ( renderer.autoClear || forceClear ) {

			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

		}

		if ( background && background.isCubeTexture ) {

			if ( boxMesh === undefined ) {

				boxMesh = new Mesh(
					new BoxBufferGeometry( 1, 1, 1 ),
					new ShaderMaterial( {
						uniforms: ShaderLib.cube.uniforms,
						vertexShader: ShaderLib.cube.vertexShader,
						fragmentShader: ShaderLib.cube.fragmentShader,
						side: BackSide,
						depthTest: true,
						depthWrite: false,
						polygonOffset: true,
						fog: false
					} )
				);

				boxMesh.geometry.removeAttribute( 'normal' );
				boxMesh.geometry.removeAttribute( 'uv' );

				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

					var scale = camera.far;

					this.matrixWorld.makeScale( scale, scale, scale );
					this.matrixWorld.copyPosition( camera.matrixWorld );

					this.material.polygonOffsetUnits = scale * 10;

				};

				geometries.update( boxMesh.geometry );

			}

			boxMesh.material.uniforms.tCube.value = background;

			renderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );

		} else if ( background && background.isTexture ) {

			if ( planeCamera === undefined ) {

				planeCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );

				planeMesh = new Mesh(
					new PlaneBufferGeometry( 2, 2 ),
					new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
				);

				geometries.update( planeMesh.geometry );

			}

			planeMesh.material.map = background;

			// TODO Push this to renderList

			renderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );

		}

	}

	function setClear( color, alpha ) {

		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

	}

	return {

		getClearColor: function () {

			return clearColor;

		},
		setClearColor: function ( color, alpha ) {

			clearColor.set( color );
			clearAlpha = alpha !== undefined ? alpha : 1;
			setClear( clearColor, clearAlpha );

		},
		getClearAlpha: function () {

			return clearAlpha;

		},
		setClearAlpha: function ( alpha ) {

			clearAlpha = alpha;
			setClear( clearColor, clearAlpha );

		},
		render: render

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function painterSortStable( a, b ) {

	if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} else if ( a.program && b.program && a.program !== b.program ) {

		return a.program.id - b.program.id;

	} else if ( a.material.id !== b.material.id ) {

		return a.material.id - b.material.id;

	} else if ( a.z !== b.z ) {

		return a.z - b.z;

	} else {

		return a.id - b.id;

	}

}

function reversePainterSortStable( a, b ) {

	if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} if ( a.z !== b.z ) {

		return b.z - a.z;

	} else {

		return a.id - b.id;

	}

}

function WebGLRenderList() {

	var renderItems = [];
	var renderItemsIndex = 0;

	var opaque = [];
	var transparent = [];

	function init() {

		renderItemsIndex = 0;

		opaque.length = 0;
		transparent.length = 0;

	}

	function push( object, geometry, material, z, group ) {

		var renderItem = renderItems[ renderItemsIndex ];

		if ( renderItem === undefined ) {

			renderItem = {
				id: object.id,
				object: object,
				geometry: geometry,
				material: material,
				program: material.program,
				renderOrder: object.renderOrder,
				z: z,
				group: group
			};

			renderItems[ renderItemsIndex ] = renderItem;

		} else {

			renderItem.id = object.id;
			renderItem.object = object;
			renderItem.geometry = geometry;
			renderItem.material = material;
			renderItem.program = material.program;
			renderItem.renderOrder = object.renderOrder;
			renderItem.z = z;
			renderItem.group = group;

		}

		( material.transparent === true ? transparent : opaque ).push( renderItem );

		renderItemsIndex ++;

	}

	function sort() {

		if ( opaque.length > 1 ) opaque.sort( painterSortStable );
		if ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );

	}

	return {
		opaque: opaque,
		transparent: transparent,

		init: init,
		push: push,

		sort: sort
	};

}

function WebGLRenderLists() {

	var lists = {};

	function get( scene, camera ) {

		var hash = scene.id + ',' + camera.id;
		var list = lists[ hash ];

		if ( list === undefined ) {

			// console.log( 'THREE.WebGLRenderLists:', hash );

			list = new WebGLRenderList();
			lists[ hash ] = list;

		}

		return list;

	}

	function dispose() {

		lists = {};

	}

	return {
		get: get,
		dispose: dispose
	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function absNumericalSort( a, b ) {

	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

}

function WebGLMorphtargets( gl ) {

	var influencesList = {};
	var morphInfluences = new Float32Array( 8 );

	function update( object, geometry, material, program ) {

		var objectInfluences = object.morphTargetInfluences;

		var length = objectInfluences.length;

		var influences = influencesList[ geometry.id ];

		if ( influences === undefined ) {

			// initialise list

			influences = [];

			for ( var i = 0; i < length; i ++ ) {

				influences[ i ] = [ i, 0 ];

			}

			influencesList[ geometry.id ] = influences;

		}

		var morphTargets = material.morphTargets && geometry.morphAttributes.position;
		var morphNormals = material.morphNormals && geometry.morphAttributes.normal;

		// Remove current morphAttributes

		for ( var i = 0; i < length; i ++ ) {

			var influence = influences[ i ];

			if ( influence[ 1 ] !== 0 ) {

				if ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );
				if ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );

			}

		}

		// Collect influences

		for ( var i = 0; i < length; i ++ ) {

			var influence = influences[ i ];

			influence[ 0 ] = i;
			influence[ 1 ] = objectInfluences[ i ];

		}

		influences.sort( absNumericalSort );

		// Add morphAttributes

		for ( var i = 0; i < 8; i ++ ) {

			var influence = influences[ i ];

			if ( influence ) {

				var index = influence[ 0 ];
				var value = influence[ 1 ];

				if ( value ) {

					if ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );
					if ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );

					morphInfluences[ i ] = value;
					continue;

				}

			}

			morphInfluences[ i ] = 0;

		}

		program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

	}

	return {

		update: update

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {

	var mode;

	function setMode( value ) {

		mode = value;

	}

	var type, bytesPerElement;

	function setIndex( value ) {

		type = value.type;
		bytesPerElement = value.bytesPerElement;

	}

	function render( start, count ) {

		gl.drawElements( mode, count, type, start * bytesPerElement );

		infoRender.calls ++;
		infoRender.vertices += count;

		if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += count;

	}

	function renderInstances( geometry, start, count ) {

		var extension = extensions.get( 'ANGLE_instanced_arrays' );

		if ( extension === null ) {

			console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
			return;

		}

		extension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );

		infoRender.calls ++;
		infoRender.vertices += count * geometry.maxInstancedCount;

		if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;

	}

	//

	this.setMode = setMode;
	this.setIndex = setIndex;
	this.render = render;
	this.renderInstances = renderInstances;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLBufferRenderer( gl, extensions, infoRender ) {

	var mode;

	function setMode( value ) {

		mode = value;

	}

	function render( start, count ) {

		gl.drawArrays( mode, start, count );

		infoRender.calls ++;
		infoRender.vertices += count;

		if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += count;

	}

	function renderInstances( geometry, start, count ) {

		var extension = extensions.get( 'ANGLE_instanced_arrays' );

		if ( extension === null ) {

			console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
			return;

		}

		var position = geometry.attributes.position;

		if ( position.isInterleavedBufferAttribute ) {

			count = position.data.count;

			extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

		} else {

			extension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );

		}

		infoRender.calls ++;
		infoRender.vertices += count * geometry.maxInstancedCount;

		if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;

	}

	//

	this.setMode = setMode;
	this.render = render;
	this.renderInstances = renderInstances;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLGeometries( gl, attributes, infoMemory ) {

	var geometries = {};
	var wireframeAttributes = {};

	function onGeometryDispose( event ) {

		var geometry = event.target;
		var buffergeometry = geometries[ geometry.id ];

		if ( buffergeometry.index !== null ) {

			attributes.remove( buffergeometry.index );

		}

		for ( var name in buffergeometry.attributes ) {

			attributes.remove( buffergeometry.attributes[ name ] );

		}

		geometry.removeEventListener( 'dispose', onGeometryDispose );

		delete geometries[ geometry.id ];

		// TODO Remove duplicate code

		var attribute = wireframeAttributes[ geometry.id ];

		if ( attribute ) {

			attributes.remove( attribute );
			delete wireframeAttributes[ geometry.id ];

		}

		attribute = wireframeAttributes[ buffergeometry.id ];

		if ( attribute ) {

			attributes.remove( attribute );
			delete wireframeAttributes[ buffergeometry.id ];

		}

		//

		infoMemory.geometries --;

	}

	function get( object, geometry ) {

		var buffergeometry = geometries[ geometry.id ];

		if ( buffergeometry ) return buffergeometry;

		geometry.addEventListener( 'dispose', onGeometryDispose );

		if ( geometry.isBufferGeometry ) {

			buffergeometry = geometry;

		} else if ( geometry.isGeometry ) {

			if ( geometry._bufferGeometry === undefined ) {

				geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

			}

			buffergeometry = geometry._bufferGeometry;

		}

		geometries[ geometry.id ] = buffergeometry;

		infoMemory.geometries ++;

		return buffergeometry;

	}

	function update( geometry ) {

		var index = geometry.index;
		var geometryAttributes = geometry.attributes;

		if ( index !== null ) {

			attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

		}

		for ( var name in geometryAttributes ) {

			attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

		}

		// morph targets

		var morphAttributes = geometry.morphAttributes;

		for ( var name in morphAttributes ) {

			var array = morphAttributes[ name ];

			for ( var i = 0, l = array.length; i < l; i ++ ) {

				attributes.update( array[ i ], gl.ARRAY_BUFFER );

			}

		}

	}

	function getWireframeAttribute( geometry ) {

		var attribute = wireframeAttributes[ geometry.id ];

		if ( attribute ) return attribute;

		var indices = [];

		var geometryIndex = geometry.index;
		var geometryAttributes = geometry.attributes;

		// console.time( 'wireframe' );

		if ( geometryIndex !== null ) {

			var array = geometryIndex.array;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var a = array[ i + 0 ];
				var b = array[ i + 1 ];
				var c = array[ i + 2 ];

				indices.push( a, b, b, c, c, a );

			}

		} else {

			var array = geometryAttributes.position.array;

			for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

				var a = i + 0;
				var b = i + 1;
				var c = i + 2;

				indices.push( a, b, b, c, c, a );

			}

		}

		// console.timeEnd( 'wireframe' );

		attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );

		attributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );

		wireframeAttributes[ geometry.id ] = attribute;

		return attribute;

	}

	return {

		get: get,
		update: update,

		getWireframeAttribute: getWireframeAttribute

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function UniformsCache() {

	var lights = {};

	return {

		get: function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			var uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						direction: new Vector3(),
						color: new Color(),

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'SpotLight':
					uniforms = {
						position: new Vector3(),
						direction: new Vector3(),
						color: new Color(),
						distance: 0,
						coneCos: 0,
						penumbraCos: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'PointLight':
					uniforms = {
						position: new Vector3(),
						color: new Color(),
						distance: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2(),
						shadowCameraNear: 1,
						shadowCameraFar: 1000
					};
					break;

				case 'HemisphereLight':
					uniforms = {
						direction: new Vector3(),
						skyColor: new Color(),
						groundColor: new Color()
					};
					break;

				case 'RectAreaLight':
					uniforms = {
						color: new Color(),
						position: new Vector3(),
						halfWidth: new Vector3(),
						halfHeight: new Vector3()
						// TODO (abelnation): set RectAreaLight shadow uniforms
					};
					break;

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		}

	};

}

function WebGLLights() {

	var cache = new UniformsCache();

	var state = {

		hash: '',

		ambient: [ 0, 0, 0 ],
		directional: [],
		directionalShadowMap: [],
		directionalShadowMatrix: [],
		spot: [],
		spotShadowMap: [],
		spotShadowMatrix: [],
		rectArea: [],
		point: [],
		pointShadowMap: [],
		pointShadowMatrix: [],
		hemi: []

	};

	var vector3 = new Vector3();
	var matrix4 = new Matrix4();
	var matrix42 = new Matrix4();

	function setup( lights, shadows, camera ) {

		var r = 0, g = 0, b = 0;

		var directionalLength = 0;
		var pointLength = 0;
		var spotLength = 0;
		var rectAreaLength = 0;
		var hemiLength = 0;

		var viewMatrix = camera.matrixWorldInverse;

		for ( var i = 0, l = lights.length; i < l; i ++ ) {

			var light = lights[ i ];

			var color = light.color;
			var intensity = light.intensity;
			var distance = light.distance;

			var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

			if ( light.isAmbientLight ) {

				r += color.r * intensity;
				g += color.g * intensity;
				b += color.b * intensity;

			} else if ( light.isDirectionalLight ) {

				var uniforms = cache.get( light );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					var shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;

				}

				state.directionalShadowMap[ directionalLength ] = shadowMap;
				state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
				state.directional[ directionalLength ] = uniforms;

				directionalLength ++;

			} else if ( light.isSpotLight ) {

				var uniforms = cache.get( light );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				uniforms.color.copy( color ).multiplyScalar( intensity );
				uniforms.distance = distance;

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				uniforms.coneCos = Math.cos( light.angle );
				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
				uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					var shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;

				}

				state.spotShadowMap[ spotLength ] = shadowMap;
				state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
				state.spot[ spotLength ] = uniforms;

				spotLength ++;

			} else if ( light.isRectAreaLight ) {

				var uniforms = cache.get( light );

				// (a) intensity controls irradiance of entire light
				uniforms.color
					.copy( color )
					.multiplyScalar( intensity / ( light.width * light.height ) );

				// (b) intensity controls the radiance per light area
				// uniforms.color.copy( color ).multiplyScalar( intensity );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				// extract local rotation of light to derive width/height half vectors
				matrix42.identity();
				matrix4.copy( light.matrixWorld );
				matrix4.premultiply( viewMatrix );
				matrix42.extractRotation( matrix4 );

				uniforms.halfWidth.set( light.width * 0.5,                0.0, 0.0 );
				uniforms.halfHeight.set(              0.0, light.height * 0.5, 0.0 );

				uniforms.halfWidth.applyMatrix4( matrix42 );
				uniforms.halfHeight.applyMatrix4( matrix42 );

				// TODO (abelnation): RectAreaLight distance?
				// uniforms.distance = distance;

				state.rectArea[ rectAreaLength ] = uniforms;

				rectAreaLength ++;

			} else if ( light.isPointLight ) {

				var uniforms = cache.get( light );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
				uniforms.distance = light.distance;
				uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					var shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;
					uniforms.shadowCameraNear = shadow.camera.near;
					uniforms.shadowCameraFar = shadow.camera.far;

				}

				state.pointShadowMap[ pointLength ] = shadowMap;
				state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
				state.point[ pointLength ] = uniforms;

				pointLength ++;

			} else if ( light.isHemisphereLight ) {

				var uniforms = cache.get( light );

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				uniforms.direction.transformDirection( viewMatrix );
				uniforms.direction.normalize();

				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

				state.hemi[ hemiLength ] = uniforms;

				hemiLength ++;

			}

		}

		state.ambient[ 0 ] = r;
		state.ambient[ 1 ] = g;
		state.ambient[ 2 ] = b;

		state.directional.length = directionalLength;
		state.spot.length = spotLength;
		state.rectArea.length = rectAreaLength;
		state.point.length = pointLength;
		state.hemi.length = hemiLength;

		// TODO (sam-g-steel) why aren't we using join
		state.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;

	}

	return {
		setup: setup,
		state: state
	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLObjects( geometries, infoRender ) {

	var updateList = {};

	function update( object ) {

		var frame = infoRender.frame;

		var geometry = object.geometry;
		var buffergeometry = geometries.get( object, geometry );

		// Update once per frame

		if ( updateList[ buffergeometry.id ] !== frame ) {

			if ( geometry.isGeometry ) {

				buffergeometry.updateFromObject( object );

			}

			geometries.update( buffergeometry );

			updateList[ buffergeometry.id ] = frame;

		}

		return buffergeometry;

	}

	function clear() {

		updateList = {};

	}

	return {

		update: update,
		clear: clear

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function addLineNumbers( string ) {

	var lines = string.split( '\n' );

	for ( var i = 0; i < lines.length; i ++ ) {

		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

	}

	return lines.join( '\n' );

}

function WebGLShader( gl, type, string ) {

	var shader = gl.createShader( type );

	gl.shaderSource( shader, string );
	gl.compileShader( shader );

	if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

		console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

	}

	if ( gl.getShaderInfoLog( shader ) !== '' ) {

		console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

	}

	// --enable-privileged-webgl-extension
	// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

	return shader;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

var programIdCount = 0;

function getEncodingComponents( encoding ) {

	switch ( encoding ) {

		case LinearEncoding:
			return [ 'Linear','( value )' ];
		case sRGBEncoding:
			return [ 'sRGB','( value )' ];
		case RGBEEncoding:
			return [ 'RGBE','( value )' ];
		case RGBM7Encoding:
			return [ 'RGBM','( value, 7.0 )' ];
		case RGBM16Encoding:
			return [ 'RGBM','( value, 16.0 )' ];
		case RGBDEncoding:
			return [ 'RGBD','( value, 256.0 )' ];
		case GammaEncoding:
			return [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];
		default:
			throw new Error( 'unsupported encoding: ' + encoding );

	}

}

function getTexelDecodingFunction( functionName, encoding ) {

	var components = getEncodingComponents( encoding );
	return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";

}

function getTexelEncodingFunction( functionName, encoding ) {

	var components = getEncodingComponents( encoding );
	return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";

}

function getToneMappingFunction( functionName, toneMapping ) {

	var toneMappingName;

	switch ( toneMapping ) {

		case LinearToneMapping:
			toneMappingName = "Linear";
			break;

		case ReinhardToneMapping:
			toneMappingName = "Reinhard";
			break;

		case Uncharted2ToneMapping:
			toneMappingName = "Uncharted2";
			break;

		case CineonToneMapping:
			toneMappingName = "OptimizedCineon";
			break;

		default:
			throw new Error( 'unsupported toneMapping: ' + toneMapping );

	}

	return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

}

function generateExtensions( extensions, parameters, rendererExtensions ) {

	extensions = extensions || {};

	var chunks = [
		( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
		( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
		( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
		( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
	];

	return chunks.filter( filterEmptyLine ).join( '\n' );

}

function generateDefines( defines ) {

	var chunks = [];

	for ( var name in defines ) {

		var value = defines[ name ];

		if ( value === false ) continue;

		chunks.push( '#define ' + name + ' ' + value );

	}

	return chunks.join( '\n' );

}

function fetchAttributeLocations( gl, program, identifiers ) {

	var attributes = {};

	var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

	for ( var i = 0; i < n; i ++ ) {

		var info = gl.getActiveAttrib( program, i );
		var name = info.name;

		// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

		attributes[ name ] = gl.getAttribLocation( program, name );

	}

	return attributes;

}

function filterEmptyLine( string ) {

	return string !== '';

}

function replaceLightNums( string, parameters ) {

	return string
		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

}

function parseIncludes( string ) {

	var pattern = /^[ \t]*#include +<([\w\d.]+)>/gm;

	function replace( match, include ) {

		var replace = ShaderChunk[ include ];

		if ( replace === undefined ) {

			throw new Error( 'Can not resolve #include <' + include + '>' );

		}

		return parseIncludes( replace );

	}

	return string.replace( pattern, replace );

}

function unrollLoops( string ) {

	var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

	function replace( match, start, end, snippet ) {

		var unroll = '';

		for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

			unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

		}

		return unroll;

	}

	return string.replace( pattern, replace );

}

function WebGLProgram( renderer, extensions, code, material, shader, parameters ) {

	var gl = renderer.context;

	var defines = material.defines;

	var vertexShader = shader.vertexShader;
	var fragmentShader = shader.fragmentShader;

	var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

	if ( parameters.shadowMapType === PCFShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

	}

	var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
	var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
	var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

	if ( parameters.envMap ) {

		switch ( material.envMap.mapping ) {

			case CubeReflectionMapping:
			case CubeRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
				break;

			case CubeUVReflectionMapping:
			case CubeUVRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
				break;

			case EquirectangularReflectionMapping:
			case EquirectangularRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
				break;

			case SphericalReflectionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
				break;

		}

		switch ( material.envMap.mapping ) {

			case CubeRefractionMapping:
			case EquirectangularRefractionMapping:
				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
				break;

		}

		switch ( material.combine ) {

			case MultiplyOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
				break;

			case MixOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
				break;

			case AddOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
				break;

		}

	}

	var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

	// console.log( 'building new program ' );

	//

	var customExtensions = generateExtensions( material.extensions, parameters, extensions );

	var customDefines = generateDefines( defines );

	//

	var program = gl.createProgram();

	var prefixVertex, prefixFragment;

	if ( material.isRawShaderMaterial ) {

		prefixVertex = [

			customDefines,

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

		prefixFragment = [

			customExtensions,
			customDefines,

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

	} else {

		prefixVertex = [

			'precision ' + parameters.precision + ' float;',
			'precision ' + parameters.precision + ' int;',

			'#define SHADER_NAME ' + shader.name,

			customDefines,

			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

			'#define GAMMA_FACTOR ' + gammaFactorDefine,

			'#define MAX_BONES ' + parameters.maxBones,
			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.skinning ? '#define USE_SKINNING' : '',
			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			parameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			'uniform mat4 modelMatrix;',
			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform mat4 viewMatrix;',
			'uniform mat3 normalMatrix;',
			'uniform vec3 cameraPosition;',

			'attribute vec3 position;',
			'attribute vec3 normal;',
			'attribute vec2 uv;',

			'#ifdef USE_COLOR',

			'	attribute vec3 color;',

			'#endif',

			'#ifdef USE_MORPHTARGETS',

			'	attribute vec3 morphTarget0;',
			'	attribute vec3 morphTarget1;',
			'	attribute vec3 morphTarget2;',
			'	attribute vec3 morphTarget3;',

			'	#ifdef USE_MORPHNORMALS',

			'		attribute vec3 morphNormal0;',
			'		attribute vec3 morphNormal1;',
			'		attribute vec3 morphNormal2;',
			'		attribute vec3 morphNormal3;',

			'	#else',

			'		attribute vec3 morphTarget4;',
			'		attribute vec3 morphTarget5;',
			'		attribute vec3 morphTarget6;',
			'		attribute vec3 morphTarget7;',

			'	#endif',

			'#endif',

			'#ifdef USE_SKINNING',

			'	attribute vec4 skinIndex;',
			'	attribute vec4 skinWeight;',

			'#endif',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

		prefixFragment = [

			customExtensions,

			'precision ' + parameters.precision + ' float;',
			'precision ' + parameters.precision + ' int;',

			'#define SHADER_NAME ' + shader.name,

			customDefines,

			parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

			'#define GAMMA_FACTOR ' + gammaFactorDefine,

			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapTypeDefine : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',

			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
			'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

			parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			parameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			parameters.envMap && extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

			'uniform mat4 viewMatrix;',
			'uniform vec3 cameraPosition;',

			( parameters.toneMapping !== NoToneMapping ) ? "#define TONE_MAPPING" : '',
			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below
			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',

			parameters.dithering ? '#define DITHERING' : '',

			( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
			parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
			parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
			parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
			parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',

			parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

	}

	vertexShader = parseIncludes( vertexShader );
	vertexShader = replaceLightNums( vertexShader, parameters );

	fragmentShader = parseIncludes( fragmentShader );
	fragmentShader = replaceLightNums( fragmentShader, parameters );

	if ( ! material.isShaderMaterial ) {

		vertexShader = unrollLoops( vertexShader );
		fragmentShader = unrollLoops( fragmentShader );

	}

	var vertexGlsl = prefixVertex + vertexShader;
	var fragmentGlsl = prefixFragment + fragmentShader;

	// console.log( '*VERTEX*', vertexGlsl );
	// console.log( '*FRAGMENT*', fragmentGlsl );

	var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
	var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

	gl.attachShader( program, glVertexShader );
	gl.attachShader( program, glFragmentShader );

	// Force a particular attribute to index 0.

	if ( material.index0AttributeName !== undefined ) {

		gl.bindAttribLocation( program, 0, material.index0AttributeName );

	} else if ( parameters.morphTargets === true ) {

		// programs with morphTargets displace position out of attribute 0
		gl.bindAttribLocation( program, 0, 'position' );

	}

	gl.linkProgram( program );

	var programLog = gl.getProgramInfoLog( program );
	var vertexLog = gl.getShaderInfoLog( glVertexShader );
	var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

	var runnable = true;
	var haveDiagnostics = true;

	// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
	// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

	if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

		runnable = false;

		console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

	} else if ( programLog !== '' ) {

		console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

	} else if ( vertexLog === '' || fragmentLog === '' ) {

		haveDiagnostics = false;

	}

	if ( haveDiagnostics ) {

		this.diagnostics = {

			runnable: runnable,
			material: material,

			programLog: programLog,

			vertexShader: {

				log: vertexLog,
				prefix: prefixVertex

			},

			fragmentShader: {

				log: fragmentLog,
				prefix: prefixFragment

			}

		};

	}

	// clean up

	gl.deleteShader( glVertexShader );
	gl.deleteShader( glFragmentShader );

	// set up caching for uniform locations

	var cachedUniforms;

	this.getUniforms = function () {

		if ( cachedUniforms === undefined ) {

			cachedUniforms = new WebGLUniforms( gl, program, renderer );

		}

		return cachedUniforms;

	};

	// set up caching for attribute locations

	var cachedAttributes;

	this.getAttributes = function () {

		if ( cachedAttributes === undefined ) {

			cachedAttributes = fetchAttributeLocations( gl, program );

		}

		return cachedAttributes;

	};

	// free resource

	this.destroy = function() {

		gl.deleteProgram( program );
		this.program = undefined;

	};

	// DEPRECATED

	Object.defineProperties( this, {

		uniforms: {
			get: function() {

				console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
				return this.getUniforms();

			}
		},

		attributes: {
			get: function() {

				console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
				return this.getAttributes();

			}
		}

	} );


	//

	this.id = programIdCount ++;
	this.code = code;
	this.usedTimes = 1;
	this.program = program;
	this.vertexShader = glVertexShader;
	this.fragmentShader = glFragmentShader;

	return this;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLPrograms( renderer, extensions, capabilities ) {

	var programs = [];

	var shaderIDs = {
		MeshDepthMaterial: 'depth',
		MeshDistanceMaterial: 'distanceRGBA',
		MeshNormalMaterial: 'normal',
		MeshBasicMaterial: 'basic',
		MeshLambertMaterial: 'lambert',
		MeshPhongMaterial: 'phong',
		MeshToonMaterial: 'phong',
		MeshStandardMaterial: 'physical',
		MeshPhysicalMaterial: 'physical',
		LineBasicMaterial: 'basic',
		LineDashedMaterial: 'dashed',
		PointsMaterial: 'points',
		ShadowMaterial: 'shadow'
	};

	var parameterNames = [
		"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
		"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
		"roughnessMap", "metalnessMap", "gradientMap",
		"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
		"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
		"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
		"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
		"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
		"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
		"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
	];


	function allocateBones( object ) {

		var skeleton = object.skeleton;
		var bones = skeleton.bones;

		if ( capabilities.floatVertexTextures ) {

			return 1024;

		} else {

			// default for when object is not specified
			// ( for example when prebuilding shader to be used with multiple objects )
			//
			//  - leave some extra space for other uniforms
			//  - limit here is ANGLE's 254 max uniform vectors
			//    (up to 54 should be safe)

			var nVertexUniforms = capabilities.maxVertexUniforms;
			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

			var maxBones = Math.min( nVertexMatrices, bones.length );

			if ( maxBones < bones.length ) {

				console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
				return 0;

			}

			return maxBones;

		}

	}

	function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

		var encoding;

		if ( ! map ) {

			encoding = LinearEncoding;

		} else if ( map.isTexture ) {

			encoding = map.encoding;

		} else if ( map.isWebGLRenderTarget ) {

			console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
			encoding = map.texture.encoding;

		}

		// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
		if ( encoding === LinearEncoding && gammaOverrideLinear ) {

			encoding = GammaEncoding;

		}

		return encoding;

	}

	this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {

		var shaderID = shaderIDs[ material.type ];

		// heuristics to create shader parameters according to lights in the scene
		// (not to blow over maxLights budget)

		var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
		var precision = capabilities.precision;

		if ( material.precision !== null ) {

			precision = capabilities.getMaxPrecision( material.precision );

			if ( precision !== material.precision ) {

				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

			}

		}

		var currentRenderTarget = renderer.getRenderTarget();

		var parameters = {

			shaderID: shaderID,

			precision: precision,
			supportsVertexTextures: capabilities.vertexTextures,
			outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
			map: !! material.map,
			mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
			envMap: !! material.envMap,
			envMapMode: material.envMap && material.envMap.mapping,
			envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
			envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
			lightMap: !! material.lightMap,
			aoMap: !! material.aoMap,
			emissiveMap: !! material.emissiveMap,
			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
			bumpMap: !! material.bumpMap,
			normalMap: !! material.normalMap,
			displacementMap: !! material.displacementMap,
			roughnessMap: !! material.roughnessMap,
			metalnessMap: !! material.metalnessMap,
			specularMap: !! material.specularMap,
			alphaMap: !! material.alphaMap,

			gradientMap: !! material.gradientMap,

			combine: material.combine,

			vertexColors: material.vertexColors,

			fog: !! fog,
			useFog: material.fog,
			fogExp: ( fog && fog.isFogExp2 ),

			flatShading: material.flatShading,

			sizeAttenuation: material.sizeAttenuation,
			logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

			skinning: material.skinning && maxBones > 0,
			maxBones: maxBones,
			useVertexTexture: capabilities.floatVertexTextures,

			morphTargets: material.morphTargets,
			morphNormals: material.morphNormals,
			maxMorphTargets: renderer.maxMorphTargets,
			maxMorphNormals: renderer.maxMorphNormals,

			numDirLights: lights.directional.length,
			numPointLights: lights.point.length,
			numSpotLights: lights.spot.length,
			numRectAreaLights: lights.rectArea.length,
			numHemiLights: lights.hemi.length,

			numClippingPlanes: nClipPlanes,
			numClipIntersection: nClipIntersection,

			dithering: material.dithering,

			shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
			shadowMapType: renderer.shadowMap.type,

			toneMapping: renderer.toneMapping,
			physicallyCorrectLights: renderer.physicallyCorrectLights,

			premultipliedAlpha: material.premultipliedAlpha,

			alphaTest: material.alphaTest,
			doubleSided: material.side === DoubleSide,
			flipSided: material.side === BackSide,

			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

		};

		return parameters;

	};

	this.getProgramCode = function ( material, parameters ) {

		var array = [];

		if ( parameters.shaderID ) {

			array.push( parameters.shaderID );

		} else {

			array.push( material.fragmentShader );
			array.push( material.vertexShader );

		}

		if ( material.defines !== undefined ) {

			for ( var name in material.defines ) {

				array.push( name );
				array.push( material.defines[ name ] );

			}

		}

		for ( var i = 0; i < parameterNames.length; i ++ ) {

			array.push( parameters[ parameterNames[ i ] ] );

		}

		array.push( material.onBeforeCompile.toString() );

		array.push( renderer.gammaOutput );

		return array.join();

	};

	this.acquireProgram = function ( material, shader, parameters, code ) {

		var program;

		// Check if code has been already compiled
		for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

			var programInfo = programs[ p ];

			if ( programInfo.code === code ) {

				program = programInfo;
				++ program.usedTimes;

				break;

			}

		}

		if ( program === undefined ) {

			program = new WebGLProgram( renderer, extensions, code, material, shader, parameters );
			programs.push( program );

		}

		return program;

	};

	this.releaseProgram = function ( program ) {

		if ( -- program.usedTimes === 0 ) {

			// Remove from unordered set
			var i = programs.indexOf( program );
			programs[ i ] = programs[ programs.length - 1 ];
			programs.pop();

			// Free WebGL resources
			program.destroy();

		}

	};

	// Exposed for resource monitoring & error feedback via renderer.info:
	this.programs = programs;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, infoMemory ) {

	var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );

	//

	function clampToMaxSize( image, maxSize ) {

		if ( image.width > maxSize || image.height > maxSize ) {

			// Warning: Scaling through the canvas will only work with images that use
			// premultiplied alpha.

			var scale = maxSize / Math.max( image.width, image.height );

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = Math.floor( image.width * scale );
			canvas.height = Math.floor( image.height * scale );

			var context = canvas.getContext( '2d' );
			context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

			console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

			return canvas;

		}

		return image;

	}

	function isPowerOfTwo( image ) {

		return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

	}

	function makePowerOfTwo( image ) {

		if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = _Math.nearestPowerOfTwo( image.width );
			canvas.height = _Math.nearestPowerOfTwo( image.height );

			var context = canvas.getContext( '2d' );
			context.drawImage( image, 0, 0, canvas.width, canvas.height );

			console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

			return canvas;

		}

		return image;

	}

	function textureNeedsPowerOfTwo( texture ) {

		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

	}

	function textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {

		return texture.generateMipmaps && isPowerOfTwo &&
			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

	}

	// Fallback filters for non-power-of-2 textures

	function filterFallback( f ) {

		if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

			return _gl.NEAREST;

		}

		return _gl.LINEAR;

	}

	//

	function onTextureDispose( event ) {

		var texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		deallocateTexture( texture );

		infoMemory.textures --;


	}

	function onRenderTargetDispose( event ) {

		var renderTarget = event.target;

		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

		deallocateRenderTarget( renderTarget );

		infoMemory.textures --;

	}

	//

	function deallocateTexture( texture ) {

		var textureProperties = properties.get( texture );

		if ( texture.image && textureProperties.__image__webglTextureCube ) {

			// cube texture

			_gl.deleteTexture( textureProperties.__image__webglTextureCube );

		} else {

			// 2D texture

			if ( textureProperties.__webglInit === undefined ) return;

			_gl.deleteTexture( textureProperties.__webglTexture );

		}

		// remove all webgl properties
		properties.remove( texture );

	}

	function deallocateRenderTarget( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );
		var textureProperties = properties.get( renderTarget.texture );

		if ( ! renderTarget ) return;

		if ( textureProperties.__webglTexture !== undefined ) {

			_gl.deleteTexture( textureProperties.__webglTexture );

		}

		if ( renderTarget.depthTexture ) {

			renderTarget.depthTexture.dispose();

		}

		if ( renderTarget.isWebGLRenderTargetCube ) {

			for ( var i = 0; i < 6; i ++ ) {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

			}

		} else {

			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

		}

		properties.remove( renderTarget.texture );
		properties.remove( renderTarget );

	}

	//



	function setTexture2D( texture, slot ) {

		var textureProperties = properties.get( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			var image = texture.image;

			if ( image === undefined ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

			} else if ( image.complete === false ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

			} else {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

		}

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

	}

	function setTextureCube( texture, slot ) {

		var textureProperties = properties.get( texture );

		if ( texture.image.length === 6 ) {

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				if ( ! textureProperties.__image__webglTextureCube ) {

					texture.addEventListener( 'dispose', onTextureDispose );

					textureProperties.__image__webglTextureCube = _gl.createTexture();

					infoMemory.textures ++;

				}

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

				var isCompressed = ( texture && texture.isCompressedTexture );
				var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

				var cubeImage = [];

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed && ! isDataTexture ) {

						cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

					} else {

						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

					}

				}

				var image = cubeImage[ 0 ],
				isPowerOfTwoImage = isPowerOfTwo( image ),
				glFormat = utils.convert( texture.format ),
				glType = utils.convert( texture.type );

				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed ) {

						if ( isDataTexture ) {

							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

						} else {

							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

						}

					} else {

						var mipmap, mipmaps = cubeImage[ i ].mipmaps;

						for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

							mipmap = mipmaps[ j ];

							if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

								if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

									state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

								}

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {

					_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				textureProperties.__version = texture.version;

				if ( texture.onUpdate ) texture.onUpdate( texture );

			} else {

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

			}

		}

	}

	function setTextureCubeDynamic( texture, slot ) {

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

	}

	function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

		var extension;

		if ( isPowerOfTwoImage ) {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );

		} else {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

			}

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

			}

		}

		extension = extensions.get( 'EXT_texture_filter_anisotropic' );

		if ( extension ) {

			if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
			if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

			}

		}

	}

	function uploadTexture( textureProperties, texture, slot ) {

		if ( textureProperties.__webglInit === undefined ) {

			textureProperties.__webglInit = true;

			texture.addEventListener( 'dispose', onTextureDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			infoMemory.textures ++;

		}

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
		_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
		_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

		var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

		if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

			image = makePowerOfTwo( image );

		}

		var isPowerOfTwoImage = isPowerOfTwo( image ),
		glFormat = utils.convert( texture.format ),
		glType = utils.convert( texture.type );

		setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

		var mipmap, mipmaps = texture.mipmaps;

		if ( texture.isDepthTexture ) {

			// populate depth texture with dummy data

			var internalFormat = _gl.DEPTH_COMPONENT;

			if ( texture.type === FloatType ) {

				if ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');
				internalFormat = _gl.DEPTH_COMPONENT32F;

			} else if ( _isWebGL2 ) {

				// WebGL 2.0 requires signed internalformat for glTexImage2D
				internalFormat = _gl.DEPTH_COMPONENT16;

			}

			if ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {

				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
				// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

				        console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

					texture.type = UnsignedShortType;
					glType = utils.convert( texture.type );

				}

			}

			// Depth stencil textures need the DEPTH_STENCIL internal format
			// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
			if ( texture.format === DepthStencilFormat ) {

				internalFormat = _gl.DEPTH_STENCIL;

				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
				// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.type !== UnsignedInt248Type ) {

					console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

					texture.type = UnsignedInt248Type;
					glType = utils.convert( texture.type );

				}

			}

			state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

		} else if ( texture.isDataTexture ) {

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

				texture.generateMipmaps = false;

			} else {

				state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

			}

		} else if ( texture.isCompressedTexture ) {

			for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

				mipmap = mipmaps[ i ];

				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

					if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

						state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

					} else {

						console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

					}

				} else {

					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

			}

		} else {

			// regular Texture (image, video, canvas)

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

				}

				texture.generateMipmaps = false;

			} else {

				state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

			}

		}

		if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );

		textureProperties.__version = texture.version;

		if ( texture.onUpdate ) texture.onUpdate( texture );

	}

	// Render targets

	// Setup storage for target texture and bind it to correct framebuffer
	function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

		var glFormat = utils.convert( renderTarget.texture.format );
		var glType = utils.convert( renderTarget.texture.type );
		state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
		_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

	}

	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
	function setupRenderBufferStorage( renderbuffer, renderTarget ) {

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else {

			// FIXME: We don't support !depth !stencil
			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

		}

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

	}

	// Setup resources for a Depth Texture for a FBO (needs an extension)
	function setupDepthTexture( framebuffer, renderTarget ) {

		var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

		if ( !( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

		}

		// upload an empty depth texture with framebuffer size
		if ( !properties.get( renderTarget.depthTexture ).__webglTexture ||
				renderTarget.depthTexture.image.width !== renderTarget.width ||
				renderTarget.depthTexture.image.height !== renderTarget.height ) {
			renderTarget.depthTexture.image.width = renderTarget.width;
			renderTarget.depthTexture.image.height = renderTarget.height;
			renderTarget.depthTexture.needsUpdate = true;
		}

		setTexture2D( renderTarget.depthTexture, 0 );

		var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

		if ( renderTarget.depthTexture.format === DepthFormat ) {

			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

		} else {

			throw new Error( 'Unknown depthTexture format' );

		}

	}

	// Setup GL resources for a non-texture depth buffer
	function setupDepthRenderbuffer( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );

		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );

		if ( renderTarget.depthTexture ) {

			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

		} else {

			if ( isCube ) {

				renderTargetProperties.__webglDepthbuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

				}

			} else {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

			}

		}

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

	}

	// Set up GL resources for the render target
	function setupRenderTarget( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );
		var textureProperties = properties.get( renderTarget.texture );

		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

		textureProperties.__webglTexture = _gl.createTexture();

		infoMemory.textures ++;

		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
		var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

		// Setup framebuffer

		if ( isCube ) {

			renderTargetProperties.__webglFramebuffer = [];

			for ( var i = 0; i < 6; i ++ ) {

				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

			}

		} else {

			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

		}

		// Setup color buffer

		if ( isCube ) {

			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
			setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

			for ( var i = 0; i < 6; i ++ ) {

				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

			}

			if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

		} else {

			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
			setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

			if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );
			state.bindTexture( _gl.TEXTURE_2D, null );

		}

		// Setup depth and stencil buffers

		if ( renderTarget.depthBuffer ) {

			setupDepthRenderbuffer( renderTarget );

		}

	}

	function updateRenderTargetMipmap( renderTarget ) {

		var texture = renderTarget.texture;
		var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

		if ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {

			var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
			var webglTexture = properties.get( texture ).__webglTexture;

			state.bindTexture( target, webglTexture );
			_gl.generateMipmap( target );
			state.bindTexture( target, null );

		}

	}

	this.setTexture2D = setTexture2D;
	this.setTextureCube = setTextureCube;
	this.setTextureCubeDynamic = setTextureCubeDynamic;
	this.setupRenderTarget = setupRenderTarget;
	this.updateRenderTargetMipmap = updateRenderTargetMipmap;

}

/**
 * @author fordacious / fordacious.github.io
 */

function WebGLProperties() {

	var properties = {};

	function get( object ) {

		var uuid = object.uuid;
		var map = properties[ uuid ];

		if ( map === undefined ) {

			map = {};
			properties[ uuid ] = map;

		}

		return map;

	}

	function remove( object ) {

		delete properties[ object.uuid ];

	}

	function clear() {

		properties = {};

	}

	return {
		get: get,
		remove: remove,
		clear: clear
	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLState( gl, extensions, utils ) {

	function ColorBuffer() {

		var locked = false;

		var color = new Vector4();
		var currentColorMask = null;
		var currentColorClear = new Vector4( 0, 0, 0, 0 );

		return {

			setMask: function ( colorMask ) {

				if ( currentColorMask !== colorMask && ! locked ) {

					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
					currentColorMask = colorMask;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( r, g, b, a, premultipliedAlpha ) {

				if ( premultipliedAlpha === true ) {

					r *= a; g *= a; b *= a;

				}

				color.set( r, g, b, a );

				if ( currentColorClear.equals( color ) === false ) {

					gl.clearColor( r, g, b, a );
					currentColorClear.copy( color );

				}

			},

			reset: function () {

				locked = false;

				currentColorMask = null;
				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

			}

		};

	}

	function DepthBuffer() {

		var locked = false;

		var currentDepthMask = null;
		var currentDepthFunc = null;
		var currentDepthClear = null;

		return {

			setTest: function ( depthTest ) {

				if ( depthTest ) {

					enable( gl.DEPTH_TEST );

				} else {

					disable( gl.DEPTH_TEST );

				}

			},

			setMask: function ( depthMask ) {

				if ( currentDepthMask !== depthMask && ! locked ) {

					gl.depthMask( depthMask );
					currentDepthMask = depthMask;

				}

			},

			setFunc: function ( depthFunc ) {

				if ( currentDepthFunc !== depthFunc ) {

					if ( depthFunc ) {

						switch ( depthFunc ) {

							case NeverDepth:

								gl.depthFunc( gl.NEVER );
								break;

							case AlwaysDepth:

								gl.depthFunc( gl.ALWAYS );
								break;

							case LessDepth:

								gl.depthFunc( gl.LESS );
								break;

							case LessEqualDepth:

								gl.depthFunc( gl.LEQUAL );
								break;

							case EqualDepth:

								gl.depthFunc( gl.EQUAL );
								break;

							case GreaterEqualDepth:

								gl.depthFunc( gl.GEQUAL );
								break;

							case GreaterDepth:

								gl.depthFunc( gl.GREATER );
								break;

							case NotEqualDepth:

								gl.depthFunc( gl.NOTEQUAL );
								break;

							default:

								gl.depthFunc( gl.LEQUAL );

						}

					} else {

						gl.depthFunc( gl.LEQUAL );

					}

					currentDepthFunc = depthFunc;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( depth ) {

				if ( currentDepthClear !== depth ) {

					gl.clearDepth( depth );
					currentDepthClear = depth;

				}

			},

			reset: function () {

				locked = false;

				currentDepthMask = null;
				currentDepthFunc = null;
				currentDepthClear = null;

			}

		};

	}

	function StencilBuffer() {

		var locked = false;

		var currentStencilMask = null;
		var currentStencilFunc = null;
		var currentStencilRef = null;
		var currentStencilFuncMask = null;
		var currentStencilFail = null;
		var currentStencilZFail = null;
		var currentStencilZPass = null;
		var currentStencilClear = null;

		return {

			setTest: function ( stencilTest ) {

				if ( stencilTest ) {

					enable( gl.STENCIL_TEST );

				} else {

					disable( gl.STENCIL_TEST );

				}

			},

			setMask: function ( stencilMask ) {

				if ( currentStencilMask !== stencilMask && ! locked ) {

					gl.stencilMask( stencilMask );
					currentStencilMask = stencilMask;

				}

			},

			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

				if ( currentStencilFunc !== stencilFunc ||
				     currentStencilRef 	!== stencilRef 	||
				     currentStencilFuncMask !== stencilMask ) {

					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

					currentStencilFunc = stencilFunc;
					currentStencilRef = stencilRef;
					currentStencilFuncMask = stencilMask;

				}

			},

			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

				if ( currentStencilFail	 !== stencilFail 	||
				     currentStencilZFail !== stencilZFail ||
				     currentStencilZPass !== stencilZPass ) {

					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

					currentStencilFail = stencilFail;
					currentStencilZFail = stencilZFail;
					currentStencilZPass = stencilZPass;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( stencil ) {

				if ( currentStencilClear !== stencil ) {

					gl.clearStencil( stencil );
					currentStencilClear = stencil;

				}

			},

			reset: function () {

				locked = false;

				currentStencilMask = null;
				currentStencilFunc = null;
				currentStencilRef = null;
				currentStencilFuncMask = null;
				currentStencilFail = null;
				currentStencilZFail = null;
				currentStencilZPass = null;
				currentStencilClear = null;

			}

		};

	}

	//

	var colorBuffer = new ColorBuffer();
	var depthBuffer = new DepthBuffer();
	var stencilBuffer = new StencilBuffer();

	var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	var newAttributes = new Uint8Array( maxVertexAttributes );
	var enabledAttributes = new Uint8Array( maxVertexAttributes );
	var attributeDivisors = new Uint8Array( maxVertexAttributes );

	var capabilities = {};

	var compressedTextureFormats = null;

	var currentProgram = null;

	var currentBlending = null;
	var currentBlendEquation = null;
	var currentBlendSrc = null;
	var currentBlendDst = null;
	var currentBlendEquationAlpha = null;
	var currentBlendSrcAlpha = null;
	var currentBlendDstAlpha = null;
	var currentPremultipledAlpha = false;

	var currentFlipSided = null;
	var currentCullFace = null;

	var currentLineWidth = null;

	var currentPolygonOffsetFactor = null;
	var currentPolygonOffsetUnits = null;

	var maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

	var version = parseFloat( /^WebGL\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );
	var lineWidthAvailable = parseFloat( version ) >= 1.0;

	var currentTextureSlot = null;
	var currentBoundTextures = {};

	var currentScissor = new Vector4();
	var currentViewport = new Vector4();

	function createTexture( type, target, count ) {

		var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
		var texture = gl.createTexture();

		gl.bindTexture( type, texture );
		gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
		gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

		for ( var i = 0; i < count; i ++ ) {

			gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

		}

		return texture;

	}

	var emptyTextures = {};
	emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
	emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

	// init

	colorBuffer.setClear( 0, 0, 0, 1 );
	depthBuffer.setClear( 1 );
	stencilBuffer.setClear( 0 );

	enable( gl.DEPTH_TEST );
	depthBuffer.setFunc( LessEqualDepth );

	setFlipSided( false );
	setCullFace( CullFaceBack );
	enable( gl.CULL_FACE );

	enable( gl.BLEND );
	setBlending( NormalBlending );

	//

	function initAttributes() {

		for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

			newAttributes[ i ] = 0;

		}

	}

	function enableAttribute( attribute ) {

		newAttributes[ attribute ] = 1;

		if ( enabledAttributes[ attribute ] === 0 ) {

			gl.enableVertexAttribArray( attribute );
			enabledAttributes[ attribute ] = 1;

		}

		if ( attributeDivisors[ attribute ] !== 0 ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			extension.vertexAttribDivisorANGLE( attribute, 0 );
			attributeDivisors[ attribute ] = 0;

		}

	}

	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

		newAttributes[ attribute ] = 1;

		if ( enabledAttributes[ attribute ] === 0 ) {

			gl.enableVertexAttribArray( attribute );
			enabledAttributes[ attribute ] = 1;

		}

		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
			attributeDivisors[ attribute ] = meshPerAttribute;

		}

	}

	function disableUnusedAttributes() {

		for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

				gl.disableVertexAttribArray( i );
				enabledAttributes[ i ] = 0;

			}

		}

	}

	function enable( id ) {

		if ( capabilities[ id ] !== true ) {

			gl.enable( id );
			capabilities[ id ] = true;

		}

	}

	function disable( id ) {

		if ( capabilities[ id ] !== false ) {

			gl.disable( id );
			capabilities[ id ] = false;

		}

	}

	function getCompressedTextureFormats() {

		if ( compressedTextureFormats === null ) {

			compressedTextureFormats = [];

			if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
			     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
			     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

				var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

				for ( var i = 0; i < formats.length; i ++ ) {

					compressedTextureFormats.push( formats[ i ] );

				}

			}

		}

		return compressedTextureFormats;

	}

	function useProgram( program ) {

		if ( currentProgram !== program ) {

			gl.useProgram( program );

			currentProgram = program;

			return true;

		}

		return false;

	}

	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

		if ( blending !== NoBlending ) {

			enable( gl.BLEND );

		} else {

			disable( gl.BLEND );

		}

		if ( blending !== CustomBlending ) {

			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

				switch ( blending ) {

					case AdditiveBlending:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

						}
						break;

					case SubtractiveBlending:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

						}
						break;

					case MultiplyBlending:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

						}
						break;

					default:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

						} else {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

						}

				}

			}

			currentBlendEquation = null;
			currentBlendSrc = null;
			currentBlendDst = null;
			currentBlendEquationAlpha = null;
			currentBlendSrcAlpha = null;
			currentBlendDstAlpha = null;

		} else {

			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;

			if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

				gl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );

				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;

			}

			if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

				gl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );

				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;

			}

		}

		currentBlending = blending;
		currentPremultipledAlpha = premultipliedAlpha;

	}

	function setMaterial( material ) {

		material.side === DoubleSide
			? disable( gl.CULL_FACE )
			: enable( gl.CULL_FACE );

		setFlipSided( material.side === BackSide );

		material.transparent === true
			? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
			: setBlending( NoBlending );

		depthBuffer.setFunc( material.depthFunc );
		depthBuffer.setTest( material.depthTest );
		depthBuffer.setMask( material.depthWrite );
		colorBuffer.setMask( material.colorWrite );

		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

	}

	//

	function setFlipSided( flipSided ) {

		if ( currentFlipSided !== flipSided ) {

			if ( flipSided ) {

				gl.frontFace( gl.CW );

			} else {

				gl.frontFace( gl.CCW );

			}

			currentFlipSided = flipSided;

		}

	}

	function setCullFace( cullFace ) {

		if ( cullFace !== CullFaceNone ) {

			enable( gl.CULL_FACE );

			if ( cullFace !== currentCullFace ) {

				if ( cullFace === CullFaceBack ) {

					gl.cullFace( gl.BACK );

				} else if ( cullFace === CullFaceFront ) {

					gl.cullFace( gl.FRONT );

				} else {

					gl.cullFace( gl.FRONT_AND_BACK );

				}

			}

		} else {

			disable( gl.CULL_FACE );

		}

		currentCullFace = cullFace;

	}

	function setLineWidth( width ) {

		if ( width !== currentLineWidth ) {

			if ( lineWidthAvailable ) gl.lineWidth( width );

			currentLineWidth = width;

		}

	}

	function setPolygonOffset( polygonOffset, factor, units ) {

		if ( polygonOffset ) {

			enable( gl.POLYGON_OFFSET_FILL );

			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

				gl.polygonOffset( factor, units );

				currentPolygonOffsetFactor = factor;
				currentPolygonOffsetUnits = units;

			}

		} else {

			disable( gl.POLYGON_OFFSET_FILL );

		}

	}

	function setScissorTest( scissorTest ) {

		if ( scissorTest ) {

			enable( gl.SCISSOR_TEST );

		} else {

			disable( gl.SCISSOR_TEST );

		}

	}

	// texture

	function activeTexture( webglSlot ) {

		if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

		if ( currentTextureSlot !== webglSlot ) {

			gl.activeTexture( webglSlot );
			currentTextureSlot = webglSlot;

		}

	}

	function bindTexture( webglType, webglTexture ) {

		if ( currentTextureSlot === null ) {

			activeTexture();

		}

		var boundTexture = currentBoundTextures[ currentTextureSlot ];

		if ( boundTexture === undefined ) {

			boundTexture = { type: undefined, texture: undefined };
			currentBoundTextures[ currentTextureSlot ] = boundTexture;

		}

		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

			boundTexture.type = webglType;
			boundTexture.texture = webglTexture;

		}

	}

	function compressedTexImage2D() {

		try {

			gl.compressedTexImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texImage2D() {

		try {

			gl.texImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	//

	function scissor( scissor ) {

		if ( currentScissor.equals( scissor ) === false ) {

			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
			currentScissor.copy( scissor );

		}

	}

	function viewport( viewport ) {

		if ( currentViewport.equals( viewport ) === false ) {

			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
			currentViewport.copy( viewport );

		}

	}

	//

	function reset() {

		for ( var i = 0; i < enabledAttributes.length; i ++ ) {

			if ( enabledAttributes[ i ] === 1 ) {

				gl.disableVertexAttribArray( i );
				enabledAttributes[ i ] = 0;

			}

		}

		capabilities = {};

		compressedTextureFormats = null;

		currentTextureSlot = null;
		currentBoundTextures = {};

		currentProgram = null;

		currentBlending = null;

		currentFlipSided = null;
		currentCullFace = null;

		colorBuffer.reset();
		depthBuffer.reset();
		stencilBuffer.reset();

	}

	return {

		buffers: {
			color: colorBuffer,
			depth: depthBuffer,
			stencil: stencilBuffer
		},

		initAttributes: initAttributes,
		enableAttribute: enableAttribute,
		enableAttributeAndDivisor: enableAttributeAndDivisor,
		disableUnusedAttributes: disableUnusedAttributes,
		enable: enable,
		disable: disable,
		getCompressedTextureFormats: getCompressedTextureFormats,

		useProgram: useProgram,

		setBlending: setBlending,
		setMaterial: setMaterial,

		setFlipSided: setFlipSided,
		setCullFace: setCullFace,

		setLineWidth: setLineWidth,
		setPolygonOffset: setPolygonOffset,

		setScissorTest: setScissorTest,

		activeTexture: activeTexture,
		bindTexture: bindTexture,
		compressedTexImage2D: compressedTexImage2D,
		texImage2D: texImage2D,

		scissor: scissor,
		viewport: viewport,

		reset: reset

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLCapabilities( gl, extensions, parameters ) {

	var maxAnisotropy;

	function getMaxAnisotropy() {

		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

		if ( extension !== null ) {

			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

		} else {

			maxAnisotropy = 0;

		}

		return maxAnisotropy;

	}

	function getMaxPrecision( precision ) {

		if ( precision === 'highp' ) {

			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
			     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

				return 'highp';

			}

			precision = 'mediump';

		}

		if ( precision === 'mediump' ) {

			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
			     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

				return 'mediump';

			}

		}

		return 'lowp';

	}

	var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
	var maxPrecision = getMaxPrecision( precision );

	if ( maxPrecision !== precision ) {

		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
		precision = maxPrecision;

	}

	var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );

	var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
	var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
	var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
	var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

	var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
	var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
	var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

	var vertexTextures = maxVertexTextures > 0;
	var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
	var floatVertexTextures = vertexTextures && floatFragmentTextures;

	return {

		getMaxAnisotropy: getMaxAnisotropy,
		getMaxPrecision: getMaxPrecision,

		precision: precision,
		logarithmicDepthBuffer: logarithmicDepthBuffer,

		maxTextures: maxTextures,
		maxVertexTextures: maxVertexTextures,
		maxTextureSize: maxTextureSize,
		maxCubemapSize: maxCubemapSize,

		maxAttributes: maxAttributes,
		maxVertexUniforms: maxVertexUniforms,
		maxVaryings: maxVaryings,
		maxFragmentUniforms: maxFragmentUniforms,

		vertexTextures: vertexTextures,
		floatFragmentTextures: floatFragmentTextures,
		floatVertexTextures: floatVertexTextures

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ArrayCamera( array ) {

	PerspectiveCamera.call( this );

	this.cameras = array || [];

}

ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

	constructor: ArrayCamera,

	isArrayCamera: true

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebVRManager( renderer ) {

	var scope = this;

	var device = null;
	var frameData = null;

	if ( 'VRFrameData' in window ) {

		frameData = new window.VRFrameData();

	}

	var matrixWorldInverse = new Matrix4();

	var standingMatrix = new Matrix4();
	var standingMatrixInverse = new Matrix4();

	var cameraL = new PerspectiveCamera();
	cameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );
	cameraL.layers.enable( 1 );

	var cameraR = new PerspectiveCamera();
	cameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );
	cameraR.layers.enable( 2 );

	var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
	cameraVR.layers.enable( 1 );
	cameraVR.layers.enable( 2 );

	//

	var currentSize, currentPixelRatio;

	function onVRDisplayPresentChange() {

		if ( device !== null && device.isPresenting ) {

			var eyeParameters = device.getEyeParameters( 'left' );
			var renderWidth = eyeParameters.renderWidth;
			var renderHeight = eyeParameters.renderHeight;

			currentPixelRatio = renderer.getPixelRatio();
			currentSize = renderer.getSize();

			renderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );

		} else if ( scope.enabled ) {

			renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );

		}

	}

	window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );

	//

	this.enabled = false;
	this.standing = false;

	this.getDevice = function () {

		return device;

	};

	this.setDevice = function ( value ) {

		if ( value !== undefined ) device = value;

	};

	this.getCamera = function ( camera ) {

		if ( device === null ) return camera;

		device.depthNear = camera.near;
		device.depthFar = camera.far;

		device.getFrameData( frameData );

		//

		var pose = frameData.pose;

		if ( pose.position !== null ) {

			camera.position.fromArray( pose.position );

		} else {

			camera.position.set( 0, 0, 0 );

		}

		if ( pose.orientation !== null ) {

			camera.quaternion.fromArray( pose.orientation );

		}

		camera.updateMatrixWorld();

		var stageParameters = device.stageParameters;

		if ( this.standing && stageParameters ) {

			standingMatrix.fromArray( stageParameters.sittingToStandingTransform );
			standingMatrixInverse.getInverse( standingMatrix );

			camera.matrixWorld.multiply( standingMatrix );
			camera.matrixWorldInverse.multiply( standingMatrixInverse );

		}

		if ( device.isPresenting === false ) return camera;

		//

		cameraL.near = camera.near;
		cameraR.near = camera.near;

		cameraL.far = camera.far;
		cameraR.far = camera.far;

		cameraVR.matrixWorld.copy( camera.matrixWorld );
		cameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );

		cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
		cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );

		if ( this.standing && stageParameters ) {

			cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
			cameraR.matrixWorldInverse.multiply( standingMatrixInverse );

		}

		var parent = camera.parent;

		if ( parent !== null ) {

			matrixWorldInverse.getInverse( parent.matrixWorld );

			cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
			cameraR.matrixWorldInverse.multiply( matrixWorldInverse );

		}

		// envMap and Mirror needs camera.matrixWorld

		cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
		cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );

		cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
		cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );

		// HACK @mrdoob
		// https://github.com/w3c/webvr/issues/203

		cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

		//

		var layers = device.getLayers();

		if ( layers.length ) {

			var layer = layers[ 0 ];

			if ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {

				cameraL.bounds.fromArray( layer.leftBounds );

			}

			if ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {

				cameraR.bounds.fromArray( layer.rightBounds );

			}

		}

		return cameraVR;

	};

	this.getStandingMatrix = function () {

		return standingMatrix;

	};

	this.submitFrame = function () {

		if ( device && device.isPresenting ) device.submitFrame();

	};

	this.dispose = function() {

		window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLExtensions( gl ) {

	var extensions = {};

	return {

		get: function ( name ) {

			if ( extensions[ name ] !== undefined ) {

				return extensions[ name ];

			}

			var extension;

			switch ( name ) {

				case 'WEBGL_depth_texture':
					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
					break;

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
					break;

				case 'WEBGL_compressed_texture_etc1':
					extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
					break;

				default:
					extension = gl.getExtension( name );

			}

			if ( extension === null ) {

				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

			}

			extensions[ name ] = extension;

			return extension;

		}

	};

}

/**
 * @author tschw
 */

function WebGLClipping() {

	var scope = this,

		globalState = null,
		numGlobalPlanes = 0,
		localClippingEnabled = false,
		renderingShadows = false,

		plane = new Plane(),
		viewNormalMatrix = new Matrix3(),

		uniform = { value: null, needsUpdate: false };

	this.uniform = uniform;
	this.numPlanes = 0;
	this.numIntersection = 0;

	this.init = function( planes, enableLocalClipping, camera ) {

		var enabled =
			planes.length !== 0 ||
			enableLocalClipping ||
			// enable state of previous frame - the clipping code has to
			// run another frame in order to reset the state:
			numGlobalPlanes !== 0 ||
			localClippingEnabled;

		localClippingEnabled = enableLocalClipping;

		globalState = projectPlanes( planes, camera, 0 );
		numGlobalPlanes = planes.length;

		return enabled;

	};

	this.beginShadows = function() {

		renderingShadows = true;
		projectPlanes( null );

	};

	this.endShadows = function() {

		renderingShadows = false;
		resetGlobalState();

	};

	this.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

		if ( ! localClippingEnabled ||
				planes === null || planes.length === 0 ||
				renderingShadows && ! clipShadows ) {
			// there's no local clipping

			if ( renderingShadows ) {
				// there's no global clipping

				projectPlanes( null );

			} else {

				resetGlobalState();
			}

		} else {

			var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
				lGlobal = nGlobal * 4,

				dstArray = cache.clippingState || null;

			uniform.value = dstArray; // ensure unique state

			dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

			for ( var i = 0; i !== lGlobal; ++ i ) {

				dstArray[ i ] = globalState[ i ];

			}

			cache.clippingState = dstArray;
			this.numIntersection = clipIntersection ? this.numPlanes : 0;
			this.numPlanes += nGlobal;

		}


	};

	function resetGlobalState() {

		if ( uniform.value !== globalState ) {

			uniform.value = globalState;
			uniform.needsUpdate = numGlobalPlanes > 0;

		}

		scope.numPlanes = numGlobalPlanes;
		scope.numIntersection = 0;

	}

	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

		var nPlanes = planes !== null ? planes.length : 0,
			dstArray = null;

		if ( nPlanes !== 0 ) {

			dstArray = uniform.value;

			if ( skipTransform !== true || dstArray === null ) {

				var flatSize = dstOffset + nPlanes * 4,
					viewMatrix = camera.matrixWorldInverse;

				viewNormalMatrix.getNormalMatrix( viewMatrix );

				if ( dstArray === null || dstArray.length < flatSize ) {

					dstArray = new Float32Array( flatSize );

				}

				for ( var i = 0, i4 = dstOffset;
									i !== nPlanes; ++ i, i4 += 4 ) {

					plane.copy( planes[ i ] ).
							applyMatrix4( viewMatrix, viewNormalMatrix );

					plane.normal.toArray( dstArray, i4 );
					dstArray[ i4 + 3 ] = plane.constant;

				}

			}

			uniform.value = dstArray;
			uniform.needsUpdate = true;

		}

		scope.numPlanes = nPlanes;
		
		return dstArray;

	}

}

/**
 * @author thespite / http://www.twitter.com/thespite
 */

function WebGLUtils ( gl, extensions ) {

	function convert ( p ) {

		var extension;

		if ( p === RepeatWrapping ) return gl.REPEAT;
		if ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;
		if ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;

		if ( p === NearestFilter ) return gl.NEAREST;
		if ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;
		if ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;

		if ( p === LinearFilter ) return gl.LINEAR;
		if ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;
		if ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;

		if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
		if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
		if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;
		if ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;

		if ( p === ByteType ) return gl.BYTE;
		if ( p === ShortType ) return gl.SHORT;
		if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
		if ( p === IntType ) return gl.INT;
		if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
		if ( p === FloatType ) return gl.FLOAT;

		if ( p === HalfFloatType ) {

			extension = extensions.get( 'OES_texture_half_float' );

			if ( extension !== null ) return extension.HALF_FLOAT_OES;

		}

		if ( p === AlphaFormat ) return gl.ALPHA;
		if ( p === RGBFormat ) return gl.RGB;
		if ( p === RGBAFormat ) return gl.RGBA;
		if ( p === LuminanceFormat ) return gl.LUMINANCE;
		if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
		if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
		if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;

		if ( p === AddEquation ) return gl.FUNC_ADD;
		if ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;
		if ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;

		if ( p === ZeroFactor ) return gl.ZERO;
		if ( p === OneFactor ) return gl.ONE;
		if ( p === SrcColorFactor ) return gl.SRC_COLOR;
		if ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;
		if ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;
		if ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;
		if ( p === DstAlphaFactor ) return gl.DST_ALPHA;
		if ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;

		if ( p === DstColorFactor ) return gl.DST_COLOR;
		if ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;
		if ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;

		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
			p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

			if ( extension !== null ) {

				if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
				if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
				if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
				if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

			}

		}

		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
			p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

			if ( extension !== null ) {

				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

			}

		}

		if ( p === RGB_ETC1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

			if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

		}

		if ( p === MinEquation || p === MaxEquation ) {

			extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				if ( p === MinEquation ) return extension.MIN_EXT;
				if ( p === MaxEquation ) return extension.MAX_EXT;

			}

		}

		if ( p === UnsignedInt248Type ) {

			extension = extensions.get( 'WEBGL_depth_texture' );

			if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;

		}

		return 0;

	}

	return { convert: convert }

}

// import { Sphere } from '../math/Sphere';
/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 * @author tschw
 */

function WebGLRenderer( parameters ) {

	console.log( 'THREE.WebGLRenderer', REVISION );

	parameters = parameters || {};

	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

	var lightsArray = [];
	var shadowsArray = [];

	var currentRenderList = null;

	var spritesArray = [];
	var flaresArray = [];

	// public properties

	this.domElement = _canvas;
	this.context = null;

	// clearing

	this.autoClear = true;
	this.autoClearColor = true;
	this.autoClearDepth = true;
	this.autoClearStencil = true;

	// scene graph

	this.sortObjects = true;

	// user-defined clipping

	this.clippingPlanes = [];
	this.localClippingEnabled = false;

	// physically based shading

	this.gammaFactor = 2.0;	// for backwards compatibility
	this.gammaInput = false;
	this.gammaOutput = false;

	// physical lights

	this.physicallyCorrectLights = false;

	// tone mapping

	this.toneMapping = LinearToneMapping;
	this.toneMappingExposure = 1.0;
	this.toneMappingWhitePoint = 1.0;

	// morphs

	this.maxMorphTargets = 8;
	this.maxMorphNormals = 4;

	// internal properties

	var _this = this,

		_isContextLost = false,

		// internal state cache

		_currentRenderTarget = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',

		_currentCamera = null,
		_currentArrayCamera = null,

		_currentViewport = new Vector4(),
		_currentScissor = new Vector4(),
		_currentScissorTest = null,

		//

		_usedTextureUnits = 0,

		//

		_width = _canvas.width,
		_height = _canvas.height,

		_pixelRatio = 1,

		_viewport = new Vector4( 0, 0, _width, _height ),
		_scissor = new Vector4( 0, 0, _width, _height ),
		_scissorTest = false,

		// frustum

		_frustum = new Frustum(),

		// clipping

		_clipping = new WebGLClipping(),
		_clippingEnabled = false,
		_localClippingEnabled = false,

		// camera matrices cache

		_projScreenMatrix = new Matrix4(),

		_vector3 = new Vector3(),

		// info

		_infoMemory = {
			geometries: 0,
			textures: 0
		},

		_infoRender = {

			frame: 0,
			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		};

	this.info = {

		render: _infoRender,
		memory: _infoMemory,
		programs: null

	};

	function getTargetPixelRatio() {

		return _currentRenderTarget === null ? _pixelRatio : 1;

	}

	// initialize

	var _gl;

	try {

		var contextAttributes = {
			alpha: _alpha,
			depth: _depth,
			stencil: _stencil,
			antialias: _antialias,
			premultipliedAlpha: _premultipliedAlpha,
			preserveDrawingBuffer: _preserveDrawingBuffer
		};

		_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

		if ( _gl === null ) {

			if ( _canvas.getContext( 'webgl' ) !== null ) {

				throw 'Error creating WebGL context with your selected attributes.';

			} else {

				throw 'Error creating WebGL context.';

			}

		}

		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

		if ( _gl.getShaderPrecisionFormat === undefined ) {

			_gl.getShaderPrecisionFormat = function () {

				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

			};

		}

		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

	} catch ( error ) {

		console.error( 'THREE.WebGLRenderer: ' + error );

	}

	var extensions, capabilities, state;
	var properties, textures, attributes, geometries, objects, lights;
	var programCache, renderLists;

	var background, morphtargets, bufferRenderer, indexedBufferRenderer;
	var flareRenderer, spriteRenderer;

	var utils;

	function initGLContext() {

		extensions = new WebGLExtensions( _gl );
		extensions.get( 'WEBGL_depth_texture' );
		extensions.get( 'OES_texture_float' );
		extensions.get( 'OES_texture_float_linear' );
		extensions.get( 'OES_texture_half_float' );
		extensions.get( 'OES_texture_half_float_linear' );
		extensions.get( 'OES_standard_derivatives' );
		extensions.get( 'ANGLE_instanced_arrays' );

		if ( extensions.get( 'OES_element_index_uint' ) ) {

			BufferGeometry.MaxIndex = 4294967296;

		}

		utils = new WebGLUtils( _gl, extensions );

		capabilities = new WebGLCapabilities( _gl, extensions, parameters );

		state = new WebGLState( _gl, extensions, utils );
		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

		properties = new WebGLProperties();
		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, _infoMemory );
		attributes = new WebGLAttributes( _gl );
		geometries = new WebGLGeometries( _gl, attributes, _infoMemory );
		objects = new WebGLObjects( geometries, _infoRender );
		morphtargets = new WebGLMorphtargets( _gl );
		programCache = new WebGLPrograms( _this, extensions, capabilities );
		lights = new WebGLLights();
		renderLists = new WebGLRenderLists();

		background = new WebGLBackground( _this, state, geometries, _premultipliedAlpha );

		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

		flareRenderer = new WebGLFlareRenderer( _this, _gl, state, textures, capabilities );
		spriteRenderer = new WebGLSpriteRenderer( _this, _gl, state, textures, capabilities );

		_this.info.programs = programCache.programs;

		_this.context = _gl;
		_this.capabilities = capabilities;
		_this.extensions = extensions;
		_this.properties = properties;
		_this.renderLists = renderLists;
		_this.state = state;

	}

	initGLContext();

	// vr

	var vr = new WebVRManager( _this );

	this.vr = vr;

	// shadow map

	var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

	this.shadowMap = shadowMap;

	// API

	this.getContext = function () {

		return _gl;

	};

	this.getContextAttributes = function () {

		return _gl.getContextAttributes();

	};

	this.forceContextLoss = function () {

		var extension = extensions.get( 'WEBGL_lose_context' );
		if ( extension ) extension.loseContext();

	};

	this.forceContextRestore = function () {

		var extension = extensions.get( 'WEBGL_lose_context' );
		if ( extension ) extension.restoreContext();

	};

	this.getPixelRatio = function () {

		return _pixelRatio;

	};

	this.setPixelRatio = function ( value ) {

		if ( value === undefined ) return;

		_pixelRatio = value;

		this.setSize( _width, _height, false );

	};

	this.getSize = function () {

		return {
			width: _width,
			height: _height
		};

	};

	this.setSize = function ( width, height, updateStyle ) {

		var device = vr.getDevice();

		if ( device && device.isPresenting ) {

			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
			return;

		}

		_width = width;
		_height = height;

		_canvas.width = width * _pixelRatio;
		_canvas.height = height * _pixelRatio;

		if ( updateStyle !== false ) {

			_canvas.style.width = width + 'px';
			_canvas.style.height = height + 'px';

		}

		this.setViewport( 0, 0, width, height );

	};

	this.getDrawingBufferSize = function () {

		return {
			width: _width * _pixelRatio,
			height: _height * _pixelRatio
		};

	};

	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

		_width = width;
		_height = height;

		_pixelRatio = pixelRatio;

		_canvas.width = width * pixelRatio;
		_canvas.height = height * pixelRatio;

		this.setViewport( 0, 0, width, height );

	};

	this.setViewport = function ( x, y, width, height ) {

		_viewport.set( x, _height - y - height, width, height );
		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

	};

	this.setScissor = function ( x, y, width, height ) {

		_scissor.set( x, _height - y - height, width, height );
		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );

	};

	this.setScissorTest = function ( boolean ) {

		state.setScissorTest( _scissorTest = boolean );

	};

	// Clearing

	this.getClearColor = background.getClearColor;
	this.setClearColor = background.setClearColor;
	this.getClearAlpha = background.getClearAlpha;
	this.setClearAlpha = background.setClearAlpha;

	this.clear = function ( color, depth, stencil ) {

		var bits = 0;

		if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
		if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
		if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

		_gl.clear( bits );

	};

	this.clearColor = function () {

		this.clear( true, false, false );

	};

	this.clearDepth = function () {

		this.clear( false, true, false );

	};

	this.clearStencil = function () {

		this.clear( false, false, true );

	};

	this.clearTarget = function ( renderTarget, color, depth, stencil ) {

		this.setRenderTarget( renderTarget );
		this.clear( color, depth, stencil );

	};

	//

	this.dispose = function () {

		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

		renderLists.dispose();

		vr.dispose();

	};

	// Events

	function onContextLost( event ) {

		event.preventDefault();

		console.log( 'THREE.WebGLRenderer: Context Lost.' );

		_isContextLost = true;

	}

	function onContextRestore( event ) {

		console.log( 'THREE.WebGLRenderer: Context Restored.' );

		_isContextLost = false;

		initGLContext();

	}

	function onMaterialDispose( event ) {

		var material = event.target;

		material.removeEventListener( 'dispose', onMaterialDispose );

		deallocateMaterial( material );

	}

	// Buffer deallocation

	function deallocateMaterial( material ) {

		releaseMaterialProgramReference( material );

		properties.remove( material );

	}


	function releaseMaterialProgramReference( material ) {

		var programInfo = properties.get( material ).program;

		material.program = undefined;

		if ( programInfo !== undefined ) {

			programCache.releaseProgram( programInfo );

		}

	}

	// Buffer rendering

	function renderObjectImmediate( object, program, material ) {

		object.render( function ( object ) {

			_this.renderBufferImmediate( object, program, material );

		} );

	}

	this.renderBufferImmediate = function ( object, program, material ) {

		state.initAttributes();

		var buffers = properties.get( object );

		if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
		if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
		if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
		if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

		var programAttributes = program.getAttributes();

		if ( object.hasPositions ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.position );
			_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasNormals ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

			if ( ! material.isMeshPhongMaterial &&
				! material.isMeshStandardMaterial &&
				! material.isMeshNormalMaterial &&
				material.flatShading === true ) {

				for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

					var array = object.normalArray;

					var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
					var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
					var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

					array[ i + 0 ] = nx;
					array[ i + 1 ] = ny;
					array[ i + 2 ] = nz;

					array[ i + 3 ] = nx;
					array[ i + 4 ] = ny;
					array[ i + 5 ] = nz;

					array[ i + 6 ] = nx;
					array[ i + 7 ] = ny;
					array[ i + 8 ] = nz;

				}

			}

			_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.normal );

			_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasUvs && material.map ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.uv );

			_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasColors && material.vertexColors !== NoColors ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.color );

			_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );

		}

		state.disableUnusedAttributes();

		_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

		object.count = 0;

	};

	this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

		state.setMaterial( material );

		var program = setProgram( camera, fog, material, object );
		var geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );

		var updateBuffers = false;

		if ( geometryProgram !== _currentGeometryProgram ) {

			_currentGeometryProgram = geometryProgram;
			updateBuffers = true;

		}

		if ( object.morphTargetInfluences ) {

			morphtargets.update( object, geometry, material, program );

			updateBuffers = true;

		}

		//

		var index = geometry.index;
		var position = geometry.attributes.position;
		var rangeFactor = 1;

		if ( material.wireframe === true ) {

			index = geometries.getWireframeAttribute( geometry );
			rangeFactor = 2;

		}

		var attribute;
		var renderer = bufferRenderer;

		if ( index !== null ) {

			attribute = attributes.get( index );

			renderer = indexedBufferRenderer;
			renderer.setIndex( attribute );

		}

		if ( updateBuffers ) {

			setupVertexAttributes( material, program, geometry );

			if ( index !== null ) {

				_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );

			}

		}

		//

		var dataCount = 0;

		if ( index !== null ) {

			dataCount = index.count;

		} else if ( position !== undefined ) {

			dataCount = position.count;

		}

		var rangeStart = geometry.drawRange.start * rangeFactor;
		var rangeCount = geometry.drawRange.count * rangeFactor;

		var groupStart = group !== null ? group.start * rangeFactor : 0;
		var groupCount = group !== null ? group.count * rangeFactor : Infinity;

		var drawStart = Math.max( rangeStart, groupStart );
		var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

		var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

		if ( drawCount === 0 ) return;

		//

		if ( object.isMesh ) {

			if ( material.wireframe === true ) {

				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
				renderer.setMode( _gl.LINES );

			} else {

				switch ( object.drawMode ) {

					case TrianglesDrawMode:
						renderer.setMode( _gl.TRIANGLES );
						break;

					case TriangleStripDrawMode:
						renderer.setMode( _gl.TRIANGLE_STRIP );
						break;

					case TriangleFanDrawMode:
						renderer.setMode( _gl.TRIANGLE_FAN );
						break;

				}

			}


		} else if ( object.isLine ) {

			var lineWidth = material.linewidth;

			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

			state.setLineWidth( lineWidth * getTargetPixelRatio() );

			if ( object.isLineSegments ) {

				renderer.setMode( _gl.LINES );

			} else if ( object.isLineLoop ) {

				renderer.setMode( _gl.LINE_LOOP );

			} else {

				renderer.setMode( _gl.LINE_STRIP );

			}

		} else if ( object.isPoints ) {

			renderer.setMode( _gl.POINTS );

		}

		if ( geometry && geometry.isInstancedBufferGeometry ) {

			if ( geometry.maxInstancedCount > 0 ) {

				renderer.renderInstances( geometry, drawStart, drawCount );

			}

		} else {

			renderer.render( drawStart, drawCount );

		}

	};

	function setupVertexAttributes( material, program, geometry, startIndex ) {

		if ( geometry && geometry.isInstancedBufferGeometry ) {

			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {

				console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

		}

		if ( startIndex === undefined ) startIndex = 0;

		state.initAttributes();

		var geometryAttributes = geometry.attributes;

		var programAttributes = program.getAttributes();

		var materialDefaultAttributeValues = material.defaultAttributeValues;

		for ( var name in programAttributes ) {

			var programAttribute = programAttributes[ name ];

			if ( programAttribute >= 0 ) {

				var geometryAttribute = geometryAttributes[ name ];

				if ( geometryAttribute !== undefined ) {

					var normalized = geometryAttribute.normalized;
					var size = geometryAttribute.itemSize;

					var attribute = attributes.get( geometryAttribute );

					// TODO Attribute may not be available on context restore

					if ( attribute === undefined ) continue;

					var buffer = attribute.buffer;
					var type = attribute.type;
					var bytesPerElement = attribute.bytesPerElement;

					if ( geometryAttribute.isInterleavedBufferAttribute ) {

						var data = geometryAttribute.data;
						var stride = data.stride;
						var offset = geometryAttribute.offset;

						if ( data && data.isInstancedInterleavedBuffer ) {

							state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

							if ( geometry.maxInstancedCount === undefined ) {

								geometry.maxInstancedCount = data.meshPerAttribute * data.count;

							}

						} else {

							state.enableAttribute( programAttribute );

						}

						_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
						_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );

					} else {

						if ( geometryAttribute.isInstancedBufferAttribute ) {

							state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

							if ( geometry.maxInstancedCount === undefined ) {

								geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

							}

						} else {

							state.enableAttribute( programAttribute );

						}

						_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
						_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );

					}

				} else if ( materialDefaultAttributeValues !== undefined ) {

					var value = materialDefaultAttributeValues[ name ];

					if ( value !== undefined ) {

						switch ( value.length ) {

							case 2:
								_gl.vertexAttrib2fv( programAttribute, value );
								break;

							case 3:
								_gl.vertexAttrib3fv( programAttribute, value );
								break;

							case 4:
								_gl.vertexAttrib4fv( programAttribute, value );
								break;

							default:
								_gl.vertexAttrib1fv( programAttribute, value );

						}

					}

				}

			}

		}

		state.disableUnusedAttributes();

	}

	// Compile

	this.compile = function ( scene, camera ) {

		lightsArray.length = 0;
		shadowsArray.length = 0;

		scene.traverse( function ( object ) {

			if ( object.isLight ) {

				lightsArray.push( object );

				if ( object.castShadow ) {

					shadowsArray.push( object );

				}

			}

		} );

		lights.setup( lightsArray, shadowsArray, camera );

		scene.traverse( function ( object ) {

			if ( object.material ) {

				if ( Array.isArray( object.material ) ) {

					for ( var i = 0; i < object.material.length; i ++ ) {

						initMaterial( object.material[ i ], scene.fog, object );

					}

				} else {

					initMaterial( object.material, scene.fog, object );

				}

			}

		} );

	};

	// Animation Loop

	var isAnimating = false;
	var onAnimationFrame = null;

	function start() {

		if ( isAnimating ) return;
		( vr.getDevice() || window ).requestAnimationFrame( loop );
		isAnimating = true;

	}

	function loop( time ) {

		if ( onAnimationFrame !== null ) onAnimationFrame( time );
		( vr.getDevice() || window ).requestAnimationFrame( loop );

	}

	this.animate = function ( callback ) {

		onAnimationFrame = callback;
		start();

	};

	// Rendering

	this.render = function ( scene, camera, renderTarget, forceClear ) {

		if ( ! ( camera && camera.isCamera ) ) {

			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
			return;

		}

		if ( _isContextLost ) return;

		// reset caching for this frame

		_currentGeometryProgram = '';
		_currentMaterialId = - 1;
		_currentCamera = null;

		// update scene graph

		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

		// update camera matrices and frustum

		if ( camera.parent === null ) camera.updateMatrixWorld();

		if ( vr.enabled ) {

			camera = vr.getCamera( camera );

		}

		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
		_frustum.setFromMatrix( _projScreenMatrix );

		lightsArray.length = 0;
		shadowsArray.length = 0;

		spritesArray.length = 0;
		flaresArray.length = 0;

		_localClippingEnabled = this.localClippingEnabled;
		_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

		currentRenderList = renderLists.get( scene, camera );
		currentRenderList.init();

		projectObject( scene, camera, _this.sortObjects );

		if ( _this.sortObjects === true ) {

			currentRenderList.sort();

		}

		//

		if ( _clippingEnabled ) _clipping.beginShadows();

		shadowMap.render( shadowsArray, scene, camera );

		lights.setup( lightsArray, shadowsArray, camera );

		if ( _clippingEnabled ) _clipping.endShadows();

		//

		_infoRender.frame ++;
		_infoRender.calls = 0;
		_infoRender.vertices = 0;
		_infoRender.faces = 0;
		_infoRender.points = 0;

		if ( renderTarget === undefined ) {

			renderTarget = null;

		}

		this.setRenderTarget( renderTarget );

		//

		background.render( currentRenderList, scene, camera, forceClear );

		// render scene

		var opaqueObjects = currentRenderList.opaque;
		var transparentObjects = currentRenderList.transparent;

		if ( scene.overrideMaterial ) {

			var overrideMaterial = scene.overrideMaterial;

			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );

		} else {

			// opaque pass (front-to-back order)

			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );

			// transparent pass (back-to-front order)

			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );

		}

		// custom renderers

		spriteRenderer.render( spritesArray, scene, camera );
		flareRenderer.render( flaresArray, scene, camera, _currentViewport );

		// Generate mipmap if we're using any kind of mipmap filtering

		if ( renderTarget ) {

			textures.updateRenderTargetMipmap( renderTarget );

		}

		// Ensure depth buffer writing is enabled so it can be cleared on next render

		state.buffers.depth.setTest( true );
		state.buffers.depth.setMask( true );
		state.buffers.color.setMask( true );

		state.setPolygonOffset( false );

		if ( vr.enabled ) {

			vr.submitFrame();

		}

		// _gl.finish();

	};

	/*
	// TODO Duplicated code (Frustum)

	var _sphere = new Sphere();

	function isObjectViewable( object ) {

		var geometry = object.geometry;

		if ( geometry.boundingSphere === null )
			geometry.computeBoundingSphere();

		_sphere.copy( geometry.boundingSphere ).
		applyMatrix4( object.matrixWorld );

		return isSphereViewable( _sphere );

	}

	function isSpriteViewable( sprite ) {

		_sphere.center.set( 0, 0, 0 );
		_sphere.radius = 0.7071067811865476;
		_sphere.applyMatrix4( sprite.matrixWorld );

		return isSphereViewable( _sphere );

	}

	function isSphereViewable( sphere ) {

		if ( ! _frustum.intersectsSphere( sphere ) ) return false;

		var numPlanes = _clipping.numPlanes;

		if ( numPlanes === 0 ) return true;

		var planes = _this.clippingPlanes,

			center = sphere.center,
			negRad = - sphere.radius,
			i = 0;

		do {

			// out when deeper than radius in the negative halfspace
			if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

		} while ( ++ i !== numPlanes );

		return true;

	}
	*/

	function projectObject( object, camera, sortObjects ) {

		if ( ! object.visible ) return;

		var visible = object.layers.test( camera.layers );

		if ( visible ) {

			if ( object.isLight ) {

				lightsArray.push( object );

				if ( object.castShadow ) {

					shadowsArray.push( object );

				}

			} else if ( object.isSprite ) {

				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

					spritesArray.push( object );

				}

			} else if ( object.isLensFlare ) {

				flaresArray.push( object );

			} else if ( object.isImmediateRenderObject ) {

				if ( sortObjects ) {

					_vector3.setFromMatrixPosition( object.matrixWorld )
						.applyMatrix4( _projScreenMatrix );

				}

				currentRenderList.push( object, null, object.material, _vector3.z, null );

			} else if ( object.isMesh || object.isLine || object.isPoints ) {

				if ( object.isSkinnedMesh ) {

					object.skeleton.update();

				}

				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

					if ( sortObjects ) {

						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );

					}

					var geometry = objects.update( object );
					var material = object.material;

					if ( Array.isArray( material ) ) {

						var groups = geometry.groups;

						for ( var i = 0, l = groups.length; i < l; i ++ ) {

							var group = groups[ i ];
							var groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								currentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );

							}

						}

					} else if ( material.visible ) {

						currentRenderList.push( object, geometry, material, _vector3.z, null );

					}

				}

			}

		}

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			projectObject( children[ i ], camera, sortObjects );

		}

	}

	function renderObjects( renderList, scene, camera, overrideMaterial ) {

		for ( var i = 0, l = renderList.length; i < l; i ++ ) {

			var renderItem = renderList[ i ];

			var object = renderItem.object;
			var geometry = renderItem.geometry;
			var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
			var group = renderItem.group;

			if ( camera.isArrayCamera ) {

				_currentArrayCamera = camera;

				var cameras = camera.cameras;

				for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

					var camera2 = cameras[ j ];

					if ( object.layers.test( camera2.layers ) ) {

						var bounds = camera2.bounds;

						var x = bounds.x * _width;
						var y = bounds.y * _height;
						var width = bounds.z * _width;
						var height = bounds.w * _height;

						state.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );

						renderObject( object, scene, camera2, geometry, material, group );

					}

				}

			} else {

				_currentArrayCamera = null;

				renderObject( object, scene, camera, geometry, material, group );

			}

		}

	}

	function renderObject( object, scene, camera, geometry, material, group ) {

		object.onBeforeRender( _this, scene, camera, geometry, material, group );

		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

		if ( object.isImmediateRenderObject ) {

			state.setMaterial( material );

			var program = setProgram( camera, scene.fog, material, object );

			_currentGeometryProgram = '';

			renderObjectImmediate( object, program, material );

		} else {

			_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

		}

		object.onAfterRender( _this, scene, camera, geometry, material, group );

	}

	function initMaterial( material, fog, object ) {

		var materialProperties = properties.get( material );

		var parameters = programCache.getParameters(
			material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );

		var code = programCache.getProgramCode( material, parameters );

		var program = materialProperties.program;
		var programChange = true;

		if ( program === undefined ) {

			// new material
			material.addEventListener( 'dispose', onMaterialDispose );

		} else if ( program.code !== code ) {

			// changed glsl or parameters
			releaseMaterialProgramReference( material );

		} else if ( parameters.shaderID !== undefined ) {

			// same glsl and uniform list
			return;

		} else {

			// only rebuild uniform list
			programChange = false;

		}

		if ( programChange ) {

			if ( parameters.shaderID ) {

				var shader = ShaderLib[ parameters.shaderID ];

				materialProperties.shader = {
					name: material.type,
					uniforms: UniformsUtils.clone( shader.uniforms ),
					vertexShader: shader.vertexShader,
					fragmentShader: shader.fragmentShader
				};

			} else {

				materialProperties.shader = {
					name: material.type,
					uniforms: material.uniforms,
					vertexShader: material.vertexShader,
					fragmentShader: material.fragmentShader
				};

			}

			material.onBeforeCompile( materialProperties.shader );

			program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );

			materialProperties.program = program;
			material.program = program;

		}

		var programAttributes = program.getAttributes();

		if ( material.morphTargets ) {

			material.numSupportedMorphTargets = 0;

			for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

				if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

					material.numSupportedMorphTargets ++;

				}

			}

		}

		if ( material.morphNormals ) {

			material.numSupportedMorphNormals = 0;

			for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

				if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

					material.numSupportedMorphNormals ++;

				}

			}

		}

		var uniforms = materialProperties.shader.uniforms;

		if ( ! material.isShaderMaterial &&
			! material.isRawShaderMaterial ||
			material.clipping === true ) {

			materialProperties.numClippingPlanes = _clipping.numPlanes;
			materialProperties.numIntersection = _clipping.numIntersection;
			uniforms.clippingPlanes = _clipping.uniform;

		}

		materialProperties.fog = fog;

		// store the light setup it was created for

		materialProperties.lightsHash = lights.state.hash;

		if ( material.lights ) {

			// wire up the material to this renderer's lighting state

			uniforms.ambientLightColor.value = lights.state.ambient;
			uniforms.directionalLights.value = lights.state.directional;
			uniforms.spotLights.value = lights.state.spot;
			uniforms.rectAreaLights.value = lights.state.rectArea;
			uniforms.pointLights.value = lights.state.point;
			uniforms.hemisphereLights.value = lights.state.hemi;

			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
			// TODO (abelnation): add area lights shadow info to uniforms

		}

		var progUniforms = materialProperties.program.getUniforms(),
			uniformsList =
				WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

		materialProperties.uniformsList = uniformsList;

	}

	function setProgram( camera, fog, material, object ) {

		_usedTextureUnits = 0;

		var materialProperties = properties.get( material );

		if ( _clippingEnabled ) {

			if ( _localClippingEnabled || camera !== _currentCamera ) {

				var useCache =
					camera === _currentCamera &&
					material.id === _currentMaterialId;

				// we might want to call this function with some ClippingGroup
				// object instead of the material, once it becomes feasible
				// (#8465, #8379)
				_clipping.setState(
					material.clippingPlanes, material.clipIntersection, material.clipShadows,
					camera, materialProperties, useCache );

			}

		}

		if ( material.needsUpdate === false ) {

			if ( materialProperties.program === undefined ) {

				material.needsUpdate = true;

			} else if ( material.fog && materialProperties.fog !== fog ) {

				material.needsUpdate = true;

			} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {

				material.needsUpdate = true;

			} else if ( materialProperties.numClippingPlanes !== undefined &&
				( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
				materialProperties.numIntersection !== _clipping.numIntersection ) ) {

				material.needsUpdate = true;

			}

		}

		if ( material.needsUpdate ) {

			initMaterial( material, fog, object );
			material.needsUpdate = false;

		}

		var refreshProgram = false;
		var refreshMaterial = false;
		var refreshLights = false;

		var program = materialProperties.program,
			p_uniforms = program.getUniforms(),
			m_uniforms = materialProperties.shader.uniforms;

		if ( state.useProgram( program.program ) ) {

			refreshProgram = true;
			refreshMaterial = true;
			refreshLights = true;

		}

		if ( material.id !== _currentMaterialId ) {

			_currentMaterialId = material.id;

			refreshMaterial = true;

		}

		if ( refreshProgram || camera !== _currentCamera ) {

			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

			if ( capabilities.logarithmicDepthBuffer ) {

				p_uniforms.setValue( _gl, 'logDepthBufFC',
					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

			}

			// Avoid unneeded uniform updates per ArrayCamera's sub-camera

			if ( _currentCamera !== ( _currentArrayCamera || camera ) ) {

				_currentCamera = ( _currentArrayCamera || camera );

				// lighting uniforms depend on the camera so enforce an update
				// now, in case this material supports lights - or later, when
				// the next material that does gets activated:

				refreshMaterial = true;		// set to true on material change
				refreshLights = true;		// remains set until update done

			}

			// load material specific uniforms
			// (shader material also gets them for the sake of genericity)

			if ( material.isShaderMaterial ||
				material.isMeshPhongMaterial ||
				material.isMeshStandardMaterial ||
				material.envMap ) {

				var uCamPos = p_uniforms.map.cameraPosition;

				if ( uCamPos !== undefined ) {

					uCamPos.setValue( _gl,
						_vector3.setFromMatrixPosition( camera.matrixWorld ) );

				}

			}

			if ( material.isMeshPhongMaterial ||
				material.isMeshLambertMaterial ||
				material.isMeshBasicMaterial ||
				material.isMeshStandardMaterial ||
				material.isShaderMaterial ||
				material.skinning ) {

				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

			}

		}

		// skinning uniforms must be set even if material didn't change
		// auto-setting of texture unit for bone texture must go before other textures
		// not sure why, but otherwise weird things happen

		if ( material.skinning ) {

			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

			var skeleton = object.skeleton;

			if ( skeleton ) {

				var bones = skeleton.bones;

				if ( capabilities.floatVertexTextures ) {

					if ( skeleton.boneTexture === undefined ) {

						// layout (1 matrix = 4 pixels)
						//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
						//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
						//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
						//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
						//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


						var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
						size = _Math.nextPowerOfTwo( Math.ceil( size ) );
						size = Math.max( size, 4 );

						var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
						boneMatrices.set( skeleton.boneMatrices ); // copy current values

						var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

						skeleton.boneMatrices = boneMatrices;
						skeleton.boneTexture = boneTexture;
						skeleton.boneTextureSize = size;

					}

					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );
					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

				} else {

					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

				}

			}

		}

		if ( refreshMaterial ) {

			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
			p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

			if ( material.lights ) {

				// the current material requires lighting info

				// note: all lighting uniforms are always set correctly
				// they simply reference the renderer's state for their
				// values
				//
				// use the current material's .needsUpdate flags to set
				// the GL state when required

				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

			}

			// refresh uniforms common to several materials

			if ( fog && material.fog ) {

				refreshUniformsFog( m_uniforms, fog );

			}

			if ( material.isMeshBasicMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

			} else if ( material.isMeshLambertMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsLambert( m_uniforms, material );

			} else if ( material.isMeshPhongMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

				if ( material.isMeshToonMaterial ) {

					refreshUniformsToon( m_uniforms, material );

				} else {

					refreshUniformsPhong( m_uniforms, material );

				}

			} else if ( material.isMeshStandardMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

				if ( material.isMeshPhysicalMaterial ) {

					refreshUniformsPhysical( m_uniforms, material );

				} else {

					refreshUniformsStandard( m_uniforms, material );

				}

			} else if ( material.isMeshDepthMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsDepth( m_uniforms, material );

			} else if ( material.isMeshDistanceMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsDistance( m_uniforms, material );

			} else if ( material.isMeshNormalMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsNormal( m_uniforms, material );

			} else if ( material.isLineBasicMaterial ) {

				refreshUniformsLine( m_uniforms, material );

				if ( material.isLineDashedMaterial ) {

					refreshUniformsDash( m_uniforms, material );

				}

			} else if ( material.isPointsMaterial ) {

				refreshUniformsPoints( m_uniforms, material );

			} else if ( material.isShadowMaterial ) {

				m_uniforms.color.value = material.color;
				m_uniforms.opacity.value = material.opacity;

			}

			// RectAreaLight Texture
			// TODO (mrdoob): Find a nicer implementation

			if ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;
			if ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;

			WebGLUniforms.upload(
				_gl, materialProperties.uniformsList, m_uniforms, _this );

		}


		// common matrices

		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

		return program;

	}

	// Uniforms (refresh uniforms objects)

	function refreshUniformsCommon( uniforms, material ) {

		uniforms.opacity.value = material.opacity;

		if ( material.color ) {

			uniforms.diffuse.value = material.color;

		}

		if ( material.emissive ) {

			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

		}

		if ( material.map ) {

			uniforms.map.value = material.map;

		}

		if ( material.alphaMap ) {

			uniforms.alphaMap.value = material.alphaMap;

		}

		if ( material.specularMap ) {

			uniforms.specularMap.value = material.specularMap;

		}

		if ( material.envMap ) {

			uniforms.envMap.value = material.envMap;

			// don't flip CubeTexture envMaps, flip everything else:
			//  WebGLRenderTargetCube will be flipped for backwards compatibility
			//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
			// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
			uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		if ( material.lightMap ) {

			uniforms.lightMap.value = material.lightMap;
			uniforms.lightMapIntensity.value = material.lightMapIntensity;

		}

		if ( material.aoMap ) {

			uniforms.aoMap.value = material.aoMap;
			uniforms.aoMapIntensity.value = material.aoMapIntensity;

		}

		// uv repeat and offset setting priorities
		// 1. color map
		// 2. specular map
		// 3. normal map
		// 4. bump map
		// 5. alpha map
		// 6. emissive map

		var uvScaleMap;

		if ( material.map ) {

			uvScaleMap = material.map;

		} else if ( material.specularMap ) {

			uvScaleMap = material.specularMap;

		} else if ( material.displacementMap ) {

			uvScaleMap = material.displacementMap;

		} else if ( material.normalMap ) {

			uvScaleMap = material.normalMap;

		} else if ( material.bumpMap ) {

			uvScaleMap = material.bumpMap;

		} else if ( material.roughnessMap ) {

			uvScaleMap = material.roughnessMap;

		} else if ( material.metalnessMap ) {

			uvScaleMap = material.metalnessMap;

		} else if ( material.alphaMap ) {

			uvScaleMap = material.alphaMap;

		} else if ( material.emissiveMap ) {

			uvScaleMap = material.emissiveMap;

		}

		if ( uvScaleMap !== undefined ) {

			// backwards compatibility
			if ( uvScaleMap.isWebGLRenderTarget ) {

				uvScaleMap = uvScaleMap.texture;

			}

			var offset = uvScaleMap.offset;
			var repeat = uvScaleMap.repeat;

			uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

		}

	}

	function refreshUniformsLine( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;

	}

	function refreshUniformsDash( uniforms, material ) {

		uniforms.dashSize.value = material.dashSize;
		uniforms.totalSize.value = material.dashSize + material.gapSize;
		uniforms.scale.value = material.scale;

	}

	function refreshUniformsPoints( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;
		uniforms.size.value = material.size * _pixelRatio;
		uniforms.scale.value = _height * 0.5;

		uniforms.map.value = material.map;

		if ( material.map !== null ) {

			var offset = material.map.offset;
			var repeat = material.map.repeat;

			uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

		}

	}

	function refreshUniformsFog( uniforms, fog ) {

		uniforms.fogColor.value = fog.color;

		if ( fog.isFog ) {

			uniforms.fogNear.value = fog.near;
			uniforms.fogFar.value = fog.far;

		} else if ( fog.isFogExp2 ) {

			uniforms.fogDensity.value = fog.density;

		}

	}

	function refreshUniformsLambert( uniforms, material ) {

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

	}

	function refreshUniformsPhong( uniforms, material ) {

		uniforms.specular.value = material.specular;
		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsToon( uniforms, material ) {

		refreshUniformsPhong( uniforms, material );

		if ( material.gradientMap ) {

			uniforms.gradientMap.value = material.gradientMap;

		}

	}

	function refreshUniformsStandard( uniforms, material ) {

		uniforms.roughness.value = material.roughness;
		uniforms.metalness.value = material.metalness;

		if ( material.roughnessMap ) {

			uniforms.roughnessMap.value = material.roughnessMap;

		}

		if ( material.metalnessMap ) {

			uniforms.metalnessMap.value = material.metalnessMap;

		}

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		if ( material.envMap ) {

			//uniforms.envMap.value = material.envMap; // part of uniforms common
			uniforms.envMapIntensity.value = material.envMapIntensity;

		}

	}

	function refreshUniformsPhysical( uniforms, material ) {

		uniforms.clearCoat.value = material.clearCoat;
		uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

		refreshUniformsStandard( uniforms, material );

	}

	function refreshUniformsDepth( uniforms, material ) {

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsDistance( uniforms, material ) {

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		uniforms.referencePosition.value.copy( material.referencePosition );
		uniforms.nearDistance.value = material.nearDistance;
		uniforms.farDistance.value = material.farDistance;

	}

	function refreshUniformsNormal( uniforms, material ) {

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

	function markUniformsLightsNeedsUpdate( uniforms, value ) {

		uniforms.ambientLightColor.needsUpdate = value;

		uniforms.directionalLights.needsUpdate = value;
		uniforms.pointLights.needsUpdate = value;
		uniforms.spotLights.needsUpdate = value;
		uniforms.rectAreaLights.needsUpdate = value;
		uniforms.hemisphereLights.needsUpdate = value;

	}

	// GL state setting

	this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

		state.setCullFace( cullFace );
		state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );

	};

	// Textures

	function allocTextureUnit() {

		var textureUnit = _usedTextureUnits;

		if ( textureUnit >= capabilities.maxTextures ) {

			console.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

		}

		_usedTextureUnits += 1;

		return textureUnit;

	}

	this.allocTextureUnit = allocTextureUnit;

	// this.setTexture2D = setTexture2D;
	this.setTexture2D = ( function () {

		var warned = false;

		// backwards compatibility: peel texture.texture
		return function setTexture2D( texture, slot ) {

			if ( texture && texture.isWebGLRenderTarget ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
					warned = true;

				}

				texture = texture.texture;

			}

			textures.setTexture2D( texture, slot );

		};

	}() );

	this.setTexture = ( function () {

		var warned = false;

		return function setTexture( texture, slot ) {

			if ( ! warned ) {

				console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
				warned = true;

			}

			textures.setTexture2D( texture, slot );

		};

	}() );

	this.setTextureCube = ( function () {

		var warned = false;

		return function setTextureCube( texture, slot ) {

			// backwards compatibility: peel texture.texture
			if ( texture && texture.isWebGLRenderTargetCube ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
					warned = true;

				}

				texture = texture.texture;

			}

			// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
			// TODO: unify these code paths
			if ( ( texture && texture.isCubeTexture ) ||
				( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

				// CompressedTexture can have Array in image :/

				// this function alone should take care of cube textures
				textures.setTextureCube( texture, slot );

			} else {

				// assumed: texture property of THREE.WebGLRenderTargetCube

				textures.setTextureCubeDynamic( texture, slot );

			}

		};

	}() );

	this.getRenderTarget = function () {

		return _currentRenderTarget;

	};

	this.setRenderTarget = function ( renderTarget ) {

		_currentRenderTarget = renderTarget;

		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

			textures.setupRenderTarget( renderTarget );

		}

		var framebuffer = null;
		var isCube = false;

		if ( renderTarget ) {

			var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( renderTarget.isWebGLRenderTargetCube ) {

				framebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];
				isCube = true;

			} else {

				framebuffer = __webglFramebuffer;

			}

			_currentViewport.copy( renderTarget.viewport );
			_currentScissor.copy( renderTarget.scissor );
			_currentScissorTest = renderTarget.scissorTest;

		} else {

			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );
			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
			_currentScissorTest = _scissorTest;

		}

		if ( _currentFramebuffer !== framebuffer ) {

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_currentFramebuffer = framebuffer;

		}

		state.viewport( _currentViewport );
		state.scissor( _currentScissor );
		state.setScissorTest( _currentScissorTest );

		if ( isCube ) {

			var textureProperties = properties.get( renderTarget.texture );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

		}

	};

	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
			return;

		}

		var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

		if ( framebuffer ) {

			var restore = false;

			if ( framebuffer !== _currentFramebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

				restore = true;

			}

			try {

				var texture = renderTarget.texture;
				var textureFormat = texture.format;
				var textureType = texture.type;

				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
					return;

				}

				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
					! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
					! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
					return;

				}

				if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

					}

				} else {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

				}

			} finally {

				if ( restore ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

				}

			}

		}

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function FogExp2 ( color, density ) {

	this.name = '';

	this.color = new Color( color );
	this.density = ( density !== undefined ) ? density : 0.00025;

}

FogExp2.prototype.isFogExp2 = true;

FogExp2.prototype.clone = function () {

	return new FogExp2( this.color.getHex(), this.density );

};

FogExp2.prototype.toJSON = function ( meta ) {

	return {
		type: 'FogExp2',
		color: this.color.getHex(),
		density: this.density
	};

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Fog ( color, near, far ) {

	this.name = '';

	this.color = new Color( color );

	this.near = ( near !== undefined ) ? near : 1;
	this.far = ( far !== undefined ) ? far : 1000;

}

Fog.prototype.isFog = true;

Fog.prototype.clone = function () {

	return new Fog( this.color.getHex(), this.near, this.far );

};

Fog.prototype.toJSON = function ( meta ) {

	return {
		type: 'Fog',
		color: this.color.getHex(),
		near: this.near,
		far: this.far
	};

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Scene () {

	Object3D.call( this );

	this.type = 'Scene';

	this.background = null;
	this.fog = null;
	this.overrideMaterial = null;

	this.autoUpdate = true; // checked by the renderer

}

Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Scene,

	copy: function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		if ( source.background !== null ) this.background = source.background.clone();
		if ( source.fog !== null ) this.fog = source.fog.clone();
		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

		return data;

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function LensFlare( texture, size, distance, blending, color ) {

	Object3D.call( this );

	this.lensFlares = [];

	this.positionScreen = new Vector3();
	this.customUpdateCallback = undefined;

	if ( texture !== undefined ) {

		this.add( texture, size, distance, blending, color );

	}

}

LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: LensFlare,

	isLensFlare: true,

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.positionScreen.copy( source.positionScreen );
		this.customUpdateCallback = source.customUpdateCallback;

		for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

			this.lensFlares.push( source.lensFlares[ i ] );

		}

		return this;

	},

	add: function ( texture, size, distance, blending, color, opacity ) {

		if ( size === undefined ) size = - 1;
		if ( distance === undefined ) distance = 0;
		if ( opacity === undefined ) opacity = 1;
		if ( color === undefined ) color = new Color( 0xffffff );
		if ( blending === undefined ) blending = NormalBlending;

		distance = Math.min( distance, Math.max( 0, distance ) );

		this.lensFlares.push( {
			texture: texture,	// THREE.Texture
			size: size, 		// size in pixels (-1 = use texture.width)
			distance: distance, 	// distance (0-1) from light source (0=at light source)
			x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
			scale: 1, 		// scale
			rotation: 0, 		// rotation
			opacity: opacity,	// opacity
			color: color,		// color
			blending: blending	// blending
		} );

	},

	/*
	 * Update lens flares update positions on all flares based on the screen position
	 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
	 */

	updateLensFlares: function () {

		var f, fl = this.lensFlares.length;
		var flare;
		var vecX = - this.positionScreen.x * 2;
		var vecY = - this.positionScreen.y * 2;

		for ( f = 0; f < fl; f ++ ) {

			flare = this.lensFlares[ f ];

			flare.x = this.positionScreen.x + vecX * flare.distance;
			flare.y = this.positionScreen.y + vecY * flare.distance;

			flare.wantedRotation = flare.x * Math.PI * 0.25;
			flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

		}

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *	uvOffset: new THREE.Vector2(),
 *	uvScale: new THREE.Vector2()
 * }
 */

function SpriteMaterial( parameters ) {

	Material.call( this );

	this.type = 'SpriteMaterial';

	this.color = new Color( 0xffffff );
	this.map = null;

	this.rotation = 0;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

SpriteMaterial.prototype = Object.create( Material.prototype );
SpriteMaterial.prototype.constructor = SpriteMaterial;
SpriteMaterial.prototype.isSpriteMaterial = true;

SpriteMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );
	this.map = source.map;

	this.rotation = source.rotation;

	return this;

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function Sprite( material ) {

	Object3D.call( this );

	this.type = 'Sprite';

	this.material = ( material !== undefined ) ? material : new SpriteMaterial();

}

Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Sprite,

	isSprite: true,

	raycast: ( function () {

		var intersectPoint = new Vector3();
		var worldPosition = new Vector3();
		var worldScale = new Vector3();

		return function raycast( raycaster, intersects ) {

			worldPosition.setFromMatrixPosition( this.matrixWorld );
			raycaster.ray.closestPointToPoint( worldPosition, intersectPoint );

			worldScale.setFromMatrixScale( this.matrixWorld );
			var guessSizeSq = worldScale.x * worldScale.y / 4;

			if ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;

			var distance = raycaster.ray.origin.distanceTo( intersectPoint );

			if ( distance < raycaster.near || distance > raycaster.far ) return;

			intersects.push( {

				distance: distance,
				point: intersectPoint.clone(),
				face: null,
				object: this

			} );

		};

	}() ),

	clone: function () {

		return new this.constructor( this.material ).copy( this );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function LOD() {

	Object3D.call( this );

	this.type = 'LOD';

	Object.defineProperties( this, {
		levels: {
			enumerable: true,
			value: []
		}
	} );

}

LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: LOD,

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source, false );

		var levels = source.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			this.addLevel( level.object.clone(), level.distance );

		}

		return this;

	},

	addLevel: function ( object, distance ) {

		if ( distance === undefined ) distance = 0;

		distance = Math.abs( distance );

		var levels = this.levels;

		for ( var l = 0; l < levels.length; l ++ ) {

			if ( distance < levels[ l ].distance ) {

				break;

			}

		}

		levels.splice( l, 0, { distance: distance, object: object } );

		this.add( object );

	},

	getObjectForDistance: function ( distance ) {

		var levels = this.levels;

		for ( var i = 1, l = levels.length; i < l; i ++ ) {

			if ( distance < levels[ i ].distance ) {

				break;

			}

		}

		return levels[ i - 1 ].object;

	},

	raycast: ( function () {

		var matrixPosition = new Vector3();

		return function raycast( raycaster, intersects ) {

			matrixPosition.setFromMatrixPosition( this.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( matrixPosition );

			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

		};

	}() ),

	update: function () {

		var v1 = new Vector3();
		var v2 = new Vector3();

		return function update( camera ) {

			var levels = this.levels;

			if ( levels.length > 1 ) {

				v1.setFromMatrixPosition( camera.matrixWorld );
				v2.setFromMatrixPosition( this.matrixWorld );

				var distance = v1.distanceTo( v2 );

				levels[ 0 ].object.visible = true;

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance >= levels[ i ].distance ) {

						levels[ i - 1 ].object.visible = false;
						levels[ i ].object.visible = true;

					} else {

						break;

					}

				}

				for ( ; i < l; i ++ ) {

					levels[ i ].object.visible = false;

				}

			}

		};

	}(),

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.levels = [];

		var levels = this.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			data.object.levels.push( {
				object: level.object.uuid,
				distance: level.distance
			} );

		}

		return data;

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author michael guerrero / http://realitymeltdown.com
 * @author ikerr / http://verold.com
 */

function Skeleton( bones, boneInverses ) {

	// copy the bone array

	bones = bones || [];

	this.bones = bones.slice( 0 );
	this.boneMatrices = new Float32Array( this.bones.length * 16 );

	// use the supplied bone inverses or calculate the inverses

	if ( boneInverses === undefined ) {

		this.calculateInverses();

	} else {

		if ( this.bones.length === boneInverses.length ) {

			this.boneInverses = boneInverses.slice( 0 );

		} else {

			console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

			this.boneInverses = [];

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				this.boneInverses.push( new Matrix4() );

			}

		}

	}

}

Object.assign( Skeleton.prototype, {

	calculateInverses: function () {

		this.boneInverses = [];

		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

			var inverse = new Matrix4();

			if ( this.bones[ i ] ) {

				inverse.getInverse( this.bones[ i ].matrixWorld );

			}

			this.boneInverses.push( inverse );

		}

	},

	pose: function () {

		var bone, i, il;

		// recover the bind-time world matrices

		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

			bone = this.bones[ i ];

			if ( bone ) {

				bone.matrixWorld.getInverse( this.boneInverses[ i ] );

			}

		}

		// compute the local matrices, positions, rotations and scales

		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

			bone = this.bones[ i ];

			if ( bone ) {

				if ( bone.parent && bone.parent.isBone ) {

					bone.matrix.getInverse( bone.parent.matrixWorld );
					bone.matrix.multiply( bone.matrixWorld );

				} else {

					bone.matrix.copy( bone.matrixWorld );

				}

				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

			}

		}

	},

	update: ( function () {

		var offsetMatrix = new Matrix4();
		var identityMatrix = new Matrix4();

		return function update() {

			var bones = this.bones;
			var boneInverses = this.boneInverses;
			var boneMatrices = this.boneMatrices;
			var boneTexture = this.boneTexture;

			// flatten bone matrices to array

			for ( var i = 0, il = bones.length; i < il; i ++ ) {

				// compute the offset between the current and the original transform

				var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;

				offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
				offsetMatrix.toArray( boneMatrices, i * 16 );

			}

			if ( boneTexture !== undefined ) {

				boneTexture.needsUpdate = true;

			}

		};

	} )(),

	clone: function () {

		return new Skeleton( this.bones, this.boneInverses );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

function Bone() {

	Object3D.call( this );

	this.type = 'Bone';

}

Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Bone,

	isBone: true

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

function SkinnedMesh( geometry, material ) {

	Mesh.call( this, geometry, material );

	this.type = 'SkinnedMesh';

	this.bindMode = 'attached';
	this.bindMatrix = new Matrix4();
	this.bindMatrixInverse = new Matrix4();

	var bones = this.initBones();
	var skeleton = new Skeleton( bones );

	this.bind( skeleton, this.matrixWorld );

	this.normalizeSkinWeights();

}

SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

	constructor: SkinnedMesh,

	isSkinnedMesh: true,

	initBones: function () {

		var bones = [], bone, gbone;
		var i, il;

		if ( this.geometry && this.geometry.bones !== undefined ) {

			// first, create array of 'Bone' objects from geometry data

			for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

				gbone = this.geometry.bones[ i ];

				// create new 'Bone' object

				bone = new Bone();
				bones.push( bone );

				// apply values

				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

			}

			// second, create bone hierarchy

			for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

				gbone = this.geometry.bones[ i ];

				if ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {

					// subsequent bones in the hierarchy

					bones[ gbone.parent ].add( bones[ i ] );

				} else {

					// topmost bone, immediate child of the skinned mesh

					this.add( bones[ i ] );

				}

			}

		}

		// now the bones are part of the scene graph and children of the skinned mesh.
		// let's update the corresponding matrices

		this.updateMatrixWorld( true );

		return bones;

	},

	bind: function ( skeleton, bindMatrix ) {

		this.skeleton = skeleton;

		if ( bindMatrix === undefined ) {

			this.updateMatrixWorld( true );

			this.skeleton.calculateInverses();

			bindMatrix = this.matrixWorld;

		}

		this.bindMatrix.copy( bindMatrix );
		this.bindMatrixInverse.getInverse( bindMatrix );

	},

	pose: function () {

		this.skeleton.pose();

	},

	normalizeSkinWeights: function () {

		var scale, i;

		if ( this.geometry && this.geometry.isGeometry ) {

			for ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {

				var sw = this.geometry.skinWeights[ i ];

				scale = 1.0 / sw.lengthManhattan();

				if ( scale !== Infinity ) {

					sw.multiplyScalar( scale );

				} else {

					sw.set( 1, 0, 0, 0 ); // do something reasonable

				}

			}

		} else if ( this.geometry && this.geometry.isBufferGeometry ) {

			var vec = new Vector4();

			var skinWeight = this.geometry.attributes.skinWeight;

			for ( i = 0; i < skinWeight.count; i ++ ) {

				vec.x = skinWeight.getX( i );
				vec.y = skinWeight.getY( i );
				vec.z = skinWeight.getZ( i );
				vec.w = skinWeight.getW( i );

				scale = 1.0 / vec.lengthManhattan();

				if ( scale !== Infinity ) {

					vec.multiplyScalar( scale );

				} else {

					vec.set( 1, 0, 0, 0 ); // do something reasonable

				}

				skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

			}

		}

	},

	updateMatrixWorld: function ( force ) {

		Mesh.prototype.updateMatrixWorld.call( this, force );

		if ( this.bindMode === 'attached' ) {

			this.bindMatrixInverse.getInverse( this.matrixWorld );

		} else if ( this.bindMode === 'detached' ) {

			this.bindMatrixInverse.getInverse( this.bindMatrix );

		} else {

			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

		}

	},

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */

function LineBasicMaterial( parameters ) {

	Material.call( this );

	this.type = 'LineBasicMaterial';

	this.color = new Color( 0xffffff );

	this.linewidth = 1;
	this.linecap = 'round';
	this.linejoin = 'round';

	this.lights = false;

	this.setValues( parameters );

}

LineBasicMaterial.prototype = Object.create( Material.prototype );
LineBasicMaterial.prototype.constructor = LineBasicMaterial;

LineBasicMaterial.prototype.isLineBasicMaterial = true;

LineBasicMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.linewidth = source.linewidth;
	this.linecap = source.linecap;
	this.linejoin = source.linejoin;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Line( geometry, material, mode ) {

	if ( mode === 1 ) {

		console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
		return new LineSegments( geometry, material );

	}

	Object3D.call( this );

	this.type = 'Line';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

}

Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Line,

	isLine: true,

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		return function raycast( raycaster, intersects ) {

			var precision = raycaster.linePrecision;
			var precisionSq = precision * precision;

			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var vStart = new Vector3();
			var vEnd = new Vector3();
			var interSegment = new Vector3();
			var interRay = new Vector3();
			var step = (this && this.isLineSegments) ? 2 : 1;

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

						var a = indices[ i ];
						var b = indices[ i + 1 ];

						vStart.fromArray( positions, a * 3 );
						vEnd.fromArray( positions, b * 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				} else {

					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

						vStart.fromArray( positions, 3 * i );
						vEnd.fromArray( positions, 3 * i + 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			} else if ( geometry.isGeometry ) {

				var vertices = geometry.vertices;
				var nbVertices = vertices.length;

				for ( var i = 0; i < nbVertices - 1; i += step ) {

					var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

					if ( distSq > precisionSq ) continue;

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					var distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LineSegments( geometry, material ) {

	Line.call( this, geometry, material );

	this.type = 'LineSegments';

}

LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

	constructor: LineSegments,

	isLineSegments: true

} );

/**
 * @author mgreter / http://github.com/mgreter
 */

function LineLoop( geometry, material ) {

	Line.call( this, geometry, material );

	this.type = 'LineLoop';

}

LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

	constructor: LineLoop,

	isLineLoop: true,

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 * }
 */

function PointsMaterial( parameters ) {

	Material.call( this );

	this.type = 'PointsMaterial';

	this.color = new Color( 0xffffff );

	this.map = null;

	this.size = 1;
	this.sizeAttenuation = true;

	this.lights = false;

	this.setValues( parameters );

}

PointsMaterial.prototype = Object.create( Material.prototype );
PointsMaterial.prototype.constructor = PointsMaterial;

PointsMaterial.prototype.isPointsMaterial = true;

PointsMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.size = source.size;
	this.sizeAttenuation = source.sizeAttenuation;

	return this;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Points( geometry, material ) {

	Object3D.call( this );

	this.type = 'Points';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

}

Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Points,

	isPoints: true,

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		return function raycast( raycaster, intersects ) {

			var object = this;
			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;
			var threshold = raycaster.params.Points.threshold;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );
			sphere.radius += threshold;

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localThresholdSq = localThreshold * localThreshold;
			var position = new Vector3();

			function testPoint( point, index ) {

				var rayPointDistanceSq = ray.distanceSqToPoint( point );

				if ( rayPointDistanceSq < localThresholdSq ) {

					var intersectPoint = ray.closestPointToPoint( point );
					intersectPoint.applyMatrix4( matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( intersectPoint );

					if ( distance < raycaster.near || distance > raycaster.far ) return;

					intersects.push( {

						distance: distance,
						distanceToRay: Math.sqrt( rayPointDistanceSq ),
						point: intersectPoint.clone(),
						index: index,
						face: null,
						object: object

					} );

				}

			}

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, il = indices.length; i < il; i ++ ) {

						var a = indices[ i ];

						position.fromArray( positions, a * 3 );

						testPoint( position, a );

					}

				} else {

					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

						position.fromArray( positions, i * 3 );

						testPoint( position, i );

					}

				}

			} else {

				var vertices = geometry.vertices;

				for ( var i = 0, l = vertices.length; i < l; i ++ ) {

					testPoint( vertices[ i ], i );

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Group() {

	Object3D.call( this );

	this.type = 'Group';

}

Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Group

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.generateMipmaps = false;

	var scope = this;

	function update() {

		requestAnimationFrame( update );

		if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

			scope.needsUpdate = true;

		}

	}

	update();

}

VideoTexture.prototype = Object.create( Texture.prototype );
VideoTexture.prototype.constructor = VideoTexture;

/**
 * @author alteredq / http://alteredqualia.com/
 */

function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.image = { width: width, height: height };
	this.mipmaps = mipmaps;

	// no flipping for cube textures
	// (also flipping doesn't work for compressed textures )

	this.flipY = false;

	// can't generate mipmaps for compressed textures
	// mips must be embedded in DDS files

	this.generateMipmaps = false;

}

CompressedTexture.prototype = Object.create( Texture.prototype );
CompressedTexture.prototype.constructor = CompressedTexture;

CompressedTexture.prototype.isCompressedTexture = true;

/**
 * @author Matt DesLauriers / @mattdesl
 * @author atix / arthursilber.de
 */

function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

	format = format !== undefined ? format : DepthFormat;

	if ( format !== DepthFormat && format !== DepthStencilFormat ) {

		throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

	}

	if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
	if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.image = { width: width, height: height };

	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

	this.flipY = false;
	this.generateMipmaps	= false;

}

DepthTexture.prototype = Object.create( Texture.prototype );
DepthTexture.prototype.constructor = DepthTexture;
DepthTexture.prototype.isDepthTexture = true;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

function WireframeGeometry( geometry ) {

	BufferGeometry.call( this );

	this.type = 'WireframeGeometry';

	// buffer

	var vertices = [];

	// helper variables

	var i, j, l, o, ol;
	var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
	var key, keys = [ 'a', 'b', 'c' ];
	var vertex;

	// different logic for Geometry and BufferGeometry

	if ( geometry && geometry.isGeometry ) {

		// create a data structure that contains all edges without duplicates

		var faces = geometry.faces;

		for ( i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( j = 0; j < 3; j ++ ) {

				edge1 = face[ keys[ j ] ];
				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
				edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
				edge[ 1 ] = Math.max( edge1, edge2 );

				key = edge[ 0 ] + ',' + edge[ 1 ];

				if ( edges[ key ] === undefined ) {

					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

				}

			}

		}

		// generate vertices

		for ( key in edges ) {

			e = edges[ key ];

			vertex = geometry.vertices[ e.index1 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

			vertex = geometry.vertices[ e.index2 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	} else if ( geometry && geometry.isBufferGeometry ) {

		var position, indices, groups;
		var group, start, count;
		var index1, index2;

		vertex = new Vector3();

		if ( geometry.index !== null ) {

			// indexed BufferGeometry

			position = geometry.attributes.position;
			indices = geometry.index;
			groups = geometry.groups;

			if ( groups.length === 0 ) {

				groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

			}

			// create a data structure that contains all eges without duplicates

			for ( o = 0, ol = groups.length; o < ol; ++ o ) {

				group = groups[ o ];

				start = group.start;
				count = group.count;

				for ( i = start, l = ( start + count ); i < l; i += 3 ) {

					for ( j = 0; j < 3; j ++ ) {

						edge1 = indices.getX( i + j );
						edge2 = indices.getX( i + ( j + 1 ) % 3 );
						edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
						edge[ 1 ] = Math.max( edge1, edge2 );

						key = edge[ 0 ] + ',' + edge[ 1 ];

						if ( edges[ key ] === undefined ) {

							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

						}

					}

				}

			}

			// generate vertices

			for ( key in edges ) {

				e = edges[ key ];

				vertex.fromBufferAttribute( position, e.index1 );
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex.fromBufferAttribute( position, e.index2 );
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		} else {

			// non-indexed BufferGeometry

			position = geometry.attributes.position;

			for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

				for ( j = 0; j < 3; j ++ ) {

					// three edges per triangle, an edge is represented as (index1, index2)
					// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

					index1 = 3 * i + j;
					vertex.fromBufferAttribute( position, index1 );
					vertices.push( vertex.x, vertex.y, vertex.z );

					index2 = 3 * i + ( ( j + 1 ) % 3 );
					vertex.fromBufferAttribute( position, index2 );
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			}

		}

	}

	// build geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

}

WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
WireframeGeometry.prototype.constructor = WireframeGeometry;

/**
 * @author zz85 / https://github.com/zz85
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
 */

// ParametricGeometry

function ParametricGeometry( func, slices, stacks ) {

	Geometry.call( this );

	this.type = 'ParametricGeometry';

	this.parameters = {
		func: func,
		slices: slices,
		stacks: stacks
	};

	this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
	this.mergeVertices();

}

ParametricGeometry.prototype = Object.create( Geometry.prototype );
ParametricGeometry.prototype.constructor = ParametricGeometry;

// ParametricBufferGeometry

function ParametricBufferGeometry( func, slices, stacks ) {

	BufferGeometry.call( this );

	this.type = 'ParametricBufferGeometry';

	this.parameters = {
		func: func,
		slices: slices,
		stacks: stacks
	};

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	var EPS = 0.00001;

	var normal = new Vector3();

	var p0 = new Vector3(), p1 = new Vector3();
	var pu = new Vector3(), pv = new Vector3();

	var i, j;

	// generate vertices, normals and uvs

	var sliceCount = slices + 1;

	for ( i = 0; i <= stacks; i ++ ) {

		var v = i / stacks;

		for ( j = 0; j <= slices; j ++ ) {

			var u = j / slices;

			// vertex

			p0 = func( u, v, p0 );
			vertices.push( p0.x, p0.y, p0.z );

			// normal

			// approximate tangent vectors via finite differences

			if ( u - EPS >= 0 ) {

				p1 = func( u - EPS, v, p1 );
				pu.subVectors( p0, p1 );

			} else {

				p1 = func( u + EPS, v, p1 );
				pu.subVectors( p1, p0 );

			}

			if ( v - EPS >= 0 ) {

				p1 = func( u, v - EPS, p1 );
				pv.subVectors( p0, p1 );

			} else {

				p1 = func( u, v + EPS, p1 );
				pv.subVectors( p1, p0 );

			}

			// cross product of tangent vectors returns surface normal

			normal.crossVectors( pu, pv ).normalize();
			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( u, v );

		}

	}

	// generate indices

	for ( i = 0; i < stacks; i ++ ) {

		for ( j = 0; j < slices; j ++ ) {

			var a = i * sliceCount + j;
			var b = i * sliceCount + j + 1;
			var c = ( i + 1 ) * sliceCount + j + 1;
			var d = ( i + 1 ) * sliceCount + j;

			// faces one and two

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

/**
 * @author clockworkgeek / https://github.com/clockworkgeek
 * @author timothypratley / https://github.com/timothypratley
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */

// PolyhedronGeometry

function PolyhedronGeometry( vertices, indices, radius, detail ) {

	Geometry.call( this );

	this.type = 'PolyhedronGeometry';

	this.parameters = {
		vertices: vertices,
		indices: indices,
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
	this.mergeVertices();

}

PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

// PolyhedronBufferGeometry

function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

	BufferGeometry.call( this );

	this.type = 'PolyhedronBufferGeometry';

	this.parameters = {
		vertices: vertices,
		indices: indices,
		radius: radius,
		detail: detail
	};

	radius = radius || 1;
	detail = detail || 0;

	// default buffer data

	var vertexBuffer = [];
	var uvBuffer = [];

	// the subdivision creates the vertex buffer data

	subdivide( detail );

	// all vertices should lie on a conceptual sphere with a given radius

	appplyRadius( radius );

	// finally, create the uv data

	generateUVs();

	// build non-indexed geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

	if ( detail === 0 ) {

		this.computeVertexNormals(); // flat normals

	} else {

		this.normalizeNormals(); // smooth normals

	}

	// helper functions

	function subdivide( detail ) {

		var a = new Vector3();
		var b = new Vector3();
		var c = new Vector3();

		// iterate over all faces and apply a subdivison with the given detail value

		for ( var i = 0; i < indices.length; i += 3 ) {

			// get the vertices of the face

			getVertexByIndex( indices[ i + 0 ], a );
			getVertexByIndex( indices[ i + 1 ], b );
			getVertexByIndex( indices[ i + 2 ], c );

			// perform subdivision

			subdivideFace( a, b, c, detail );

		}

	}

	function subdivideFace( a, b, c, detail ) {

		var cols = Math.pow( 2, detail );

		// we use this multidimensional array as a data structure for creating the subdivision

		var v = [];

		var i, j;

		// construct all of the vertices for this subdivision

		for ( i = 0; i <= cols; i ++ ) {

			v[ i ] = [];

			var aj = a.clone().lerp( c, i / cols );
			var bj = b.clone().lerp( c, i / cols );

			var rows = cols - i;

			for ( j = 0; j <= rows; j ++ ) {

				if ( j === 0 && i === cols ) {

					v[ i ][ j ] = aj;

				} else {

					v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

				}

			}

		}

		// construct all of the faces

		for ( i = 0; i < cols; i ++ ) {

			for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

				var k = Math.floor( j / 2 );

				if ( j % 2 === 0 ) {

					pushVertex( v[ i ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k ] );
					pushVertex( v[ i ][ k ] );

				} else {

					pushVertex( v[ i ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k ] );

				}

			}

		}

	}

	function appplyRadius( radius ) {

		var vertex = new Vector3();

		// iterate over the entire buffer and apply the radius to each vertex

		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

			vertex.x = vertexBuffer[ i + 0 ];
			vertex.y = vertexBuffer[ i + 1 ];
			vertex.z = vertexBuffer[ i + 2 ];

			vertex.normalize().multiplyScalar( radius );

			vertexBuffer[ i + 0 ] = vertex.x;
			vertexBuffer[ i + 1 ] = vertex.y;
			vertexBuffer[ i + 2 ] = vertex.z;

		}

	}

	function generateUVs() {

		var vertex = new Vector3();

		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

			vertex.x = vertexBuffer[ i + 0 ];
			vertex.y = vertexBuffer[ i + 1 ];
			vertex.z = vertexBuffer[ i + 2 ];

			var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
			var v = inclination( vertex ) / Math.PI + 0.5;
			uvBuffer.push( u, 1 - v );

		}

		correctUVs();

		correctSeam();

	}

	function correctSeam() {

		// handle case when face straddles the seam, see #3269

		for ( var i = 0; i < uvBuffer.length; i += 6 ) {

			// uv data of a single face

			var x0 = uvBuffer[ i + 0 ];
			var x1 = uvBuffer[ i + 2 ];
			var x2 = uvBuffer[ i + 4 ];

			var max = Math.max( x0, x1, x2 );
			var min = Math.min( x0, x1, x2 );

			// 0.9 is somewhat arbitrary

			if ( max > 0.9 && min < 0.1 ) {

				if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
				if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
				if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

			}

		}

	}

	function pushVertex( vertex ) {

		vertexBuffer.push( vertex.x, vertex.y, vertex.z );

	}

	function getVertexByIndex( index, vertex ) {

		var stride = index * 3;

		vertex.x = vertices[ stride + 0 ];
		vertex.y = vertices[ stride + 1 ];
		vertex.z = vertices[ stride + 2 ];

	}

	function correctUVs() {

		var a = new Vector3();
		var b = new Vector3();
		var c = new Vector3();

		var centroid = new Vector3();

		var uvA = new Vector2();
		var uvB = new Vector2();
		var uvC = new Vector2();

		for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

			a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
			b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
			c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

			uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
			uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
			uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

			centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

			var azi = azimuth( centroid );

			correctUV( uvA, j + 0, a, azi );
			correctUV( uvB, j + 2, b, azi );
			correctUV( uvC, j + 4, c, azi );

		}

	}

	function correctUV( uv, stride, vector, azimuth ) {

		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

			uvBuffer[ stride ] = uv.x - 1;

		}

		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

			uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

		}

	}

	// Angle around the Y axis, counter-clockwise when looking from above.

	function azimuth( vector ) {

		return Math.atan2( vector.z, - vector.x );

	}


	// Angle above the XZ plane.

	function inclination( vector ) {

		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

	}

}

PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// TetrahedronGeometry

function TetrahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'TetrahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

// TetrahedronBufferGeometry

function TetrahedronBufferGeometry( radius, detail ) {

	var vertices = [
		1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
	];

	var indices = [
		2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'TetrahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// OctahedronGeometry

function OctahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'OctahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

OctahedronGeometry.prototype = Object.create( Geometry.prototype );
OctahedronGeometry.prototype.constructor = OctahedronGeometry;

// OctahedronBufferGeometry

function OctahedronBufferGeometry( radius, detail ) {

	var vertices = [
		1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
	];

	var indices = [
		0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'OctahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// IcosahedronGeometry

function IcosahedronGeometry( radius, detail ) {

 	Geometry.call( this );

	this.type = 'IcosahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

// IcosahedronBufferGeometry

function IcosahedronBufferGeometry( radius, detail ) {

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

	var vertices = [
		- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
		 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
		 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
	];

	var indices = [
		 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
		 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
		 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
		 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'IcosahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

/**
 * @author Abe Pazos / https://hamoid.com
 * @author Mugen87 / https://github.com/Mugen87
 */

// DodecahedronGeometry

function DodecahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'DodecahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

// DodecahedronBufferGeometry

function DodecahedronBufferGeometry( radius, detail ) {

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
	var r = 1 / t;

	var vertices = [

		// (±1, ±1, ±1)
		- 1, - 1, - 1,    - 1, - 1,  1,
		- 1,  1, - 1,    - 1,  1,  1,
		  1, - 1, - 1,     1, - 1,  1,
		  1,  1, - 1,     1,  1,  1,

		// (0, ±1/φ, ±φ)
		 0, - r, - t,     0, - r,  t,
		 0,  r, - t,     0,  r,  t,

		// (±1/φ, ±φ, 0)
		- r, - t,  0,    - r,  t,  0,
		 r, - t,  0,     r,  t,  0,

		// (±φ, 0, ±1/φ)
		- t,  0, - r,     t,  0, - r,
		- t,  0,  r,     t,  0,  r
	];

	var indices = [
		 3, 11,  7,      3,  7, 15,      3, 15, 13,
		 7, 19, 17,      7, 17,  6,      7,  6, 15,
		17,  4,  8,     17,  8, 10,     17, 10,  6,
		 8,  0, 16,      8, 16,  2,      8,  2, 10,
		 0, 12,  1,      0,  1, 18,      0, 18, 16,
		 6, 10,  2,      6,  2, 13,      6, 13, 15,
		 2, 16, 18,      2, 18,  3,      2,  3, 13,
		18,  1,  9,     18,  9, 11,     18, 11,  3,
		 4, 14, 12,      4, 12,  0,      4,  0,  8,
		11,  9,  5,     11,  5, 19,     11, 19,  7,
		19,  5, 14,     19, 14,  4,     19,  4, 17,
		 1, 12, 14,      1, 14,  5,      1,  5,  9
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'DodecahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

/**
 * @author oosmoxiecode / https://github.com/oosmoxiecode
 * @author WestLangley / https://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 * @author miningold / https://github.com/miningold
 * @author jonobr1 / https://github.com/jonobr1
 * @author Mugen87 / https://github.com/Mugen87
 *
 */

// TubeGeometry

function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

	Geometry.call( this );

	this.type = 'TubeGeometry';

	this.parameters = {
		path: path,
		tubularSegments: tubularSegments,
		radius: radius,
		radialSegments: radialSegments,
		closed: closed
	};

	if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

	var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

	// expose internals

	this.tangents = bufferGeometry.tangents;
	this.normals = bufferGeometry.normals;
	this.binormals = bufferGeometry.binormals;

	// create geometry

	this.fromBufferGeometry( bufferGeometry );
	this.mergeVertices();

}

TubeGeometry.prototype = Object.create( Geometry.prototype );
TubeGeometry.prototype.constructor = TubeGeometry;

// TubeBufferGeometry

function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

	BufferGeometry.call( this );

	this.type = 'TubeBufferGeometry';

	this.parameters = {
		path: path,
		tubularSegments: tubularSegments,
		radius: radius,
		radialSegments: radialSegments,
		closed: closed
	};

	tubularSegments = tubularSegments || 64;
	radius = radius || 1;
	radialSegments = radialSegments || 8;
	closed = closed || false;

	var frames = path.computeFrenetFrames( tubularSegments, closed );

	// expose internals

	this.tangents = frames.tangents;
	this.normals = frames.normals;
	this.binormals = frames.binormals;

	// helper variables

	var vertex = new Vector3();
	var normal = new Vector3();
	var uv = new Vector2();

	var i, j;

	// buffer

	var vertices = [];
	var normals = [];
	var uvs = [];
	var indices = [];

	// create buffer data

	generateBufferData();

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// functions

	function generateBufferData() {

		for ( i = 0; i < tubularSegments; i ++ ) {

			generateSegment( i );

		}

		// if the geometry is not closed, generate the last row of vertices and normals
		// at the regular position on the given path
		//
		// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

		generateSegment( ( closed === false ) ? tubularSegments : 0 );

		// uvs are generated in a separate function.
		// this makes it easy compute correct values for closed geometries

		generateUVs();

		// finally create faces

		generateIndices();

	}

	function generateSegment( i ) {

		// we use getPointAt to sample evenly distributed points from the given path

		var P = path.getPointAt( i / tubularSegments );

		// retrieve corresponding normal and binormal

		var N = frames.normals[ i ];
		var B = frames.binormals[ i ];

		// generate normals and vertices for the current segment

		for ( j = 0; j <= radialSegments; j ++ ) {

			var v = j / radialSegments * Math.PI * 2;

			var sin =   Math.sin( v );
			var cos = - Math.cos( v );

			// normal

			normal.x = ( cos * N.x + sin * B.x );
			normal.y = ( cos * N.y + sin * B.y );
			normal.z = ( cos * N.z + sin * B.z );
			normal.normalize();

			normals.push( normal.x, normal.y, normal.z );

			// vertex

			vertex.x = P.x + radius * normal.x;
			vertex.y = P.y + radius * normal.y;
			vertex.z = P.z + radius * normal.z;

			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	}

	function generateIndices() {

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

	}

	function generateUVs() {

		for ( i = 0; i <= tubularSegments; i ++ ) {

			for ( j = 0; j <= radialSegments; j ++ ) {

				uv.x = i / tubularSegments;
				uv.y = j / radialSegments;

				uvs.push( uv.x, uv.y );

			}

		}

	}

}

TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

/**
 * @author oosmoxiecode
 * @author Mugen87 / https://github.com/Mugen87
 *
 * based on http://www.blackpawn.com/texts/pqtorus/
 */

// TorusKnotGeometry

function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

	Geometry.call( this );

	this.type = 'TorusKnotGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		tubularSegments: tubularSegments,
		radialSegments: radialSegments,
		p: p,
		q: q
	};

	if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

	this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
	this.mergeVertices();

}

TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

// TorusKnotBufferGeometry

function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

	BufferGeometry.call( this );

	this.type = 'TorusKnotBufferGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		tubularSegments: tubularSegments,
		radialSegments: radialSegments,
		p: p,
		q: q
	};

	radius = radius || 100;
	tube = tube || 40;
	tubularSegments = Math.floor( tubularSegments ) || 64;
	radialSegments = Math.floor( radialSegments ) || 8;
	p = p || 2;
	q = q || 3;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var i, j;

	var vertex = new Vector3();
	var normal = new Vector3();

	var P1 = new Vector3();
	var P2 = new Vector3();

	var B = new Vector3();
	var T = new Vector3();
	var N = new Vector3();

	// generate vertices, normals and uvs

	for ( i = 0; i <= tubularSegments; ++ i ) {

		// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

		var u = i / tubularSegments * p * Math.PI * 2;

		// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
		// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

		calculatePositionOnCurve( u, p, q, radius, P1 );
		calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

		// calculate orthonormal basis

		T.subVectors( P2, P1 );
		N.addVectors( P2, P1 );
		B.crossVectors( T, N );
		N.crossVectors( B, T );

		// normalize B, N. T can be ignored, we don't use it

		B.normalize();
		N.normalize();

		for ( j = 0; j <= radialSegments; ++ j ) {

			// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
			// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

			var v = j / radialSegments * Math.PI * 2;
			var cx = - tube * Math.cos( v );
			var cy = tube * Math.sin( v );

			// now calculate the final vertex position.
			// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

			vertex.x = P1.x + ( cx * N.x + cy * B.x );
			vertex.y = P1.y + ( cx * N.y + cy * B.y );
			vertex.z = P1.z + ( cx * N.z + cy * B.z );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

			normal.subVectors( vertex, P1 ).normalize();

			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( i / tubularSegments );
			uvs.push( j / radialSegments );

		}

	}

	// generate indices

	for ( j = 1; j <= tubularSegments; j ++ ) {

		for ( i = 1; i <= radialSegments; i ++ ) {

			// indices

			var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
			var b = ( radialSegments + 1 ) * j + ( i - 1 );
			var c = ( radialSegments + 1 ) * j + i;
			var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// this function calculates the current position on the torus curve

	function calculatePositionOnCurve( u, p, q, radius, position ) {

		var cu = Math.cos( u );
		var su = Math.sin( u );
		var quOverP = q / p * u;
		var cs = Math.cos( quOverP );

		position.x = radius * ( 2 + cs ) * 0.5 * cu;
		position.y = radius * ( 2 + cs ) * su * 0.5;
		position.z = radius * Math.sin( quOverP ) * 0.5;

	}

}

TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

/**
 * @author oosmoxiecode
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// TorusGeometry

function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

	Geometry.call( this );

	this.type = 'TorusGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		radialSegments: radialSegments,
		tubularSegments: tubularSegments,
		arc: arc
	};

	this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
	this.mergeVertices();

}

TorusGeometry.prototype = Object.create( Geometry.prototype );
TorusGeometry.prototype.constructor = TorusGeometry;

// TorusBufferGeometry

function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

	BufferGeometry.call( this );

	this.type = 'TorusBufferGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		radialSegments: radialSegments,
		tubularSegments: tubularSegments,
		arc: arc
	};

	radius = radius || 100;
	tube = tube || 40;
	radialSegments = Math.floor( radialSegments ) || 8;
	tubularSegments = Math.floor( tubularSegments ) || 6;
	arc = arc || Math.PI * 2;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var center = new Vector3();
	var vertex = new Vector3();
	var normal = new Vector3();

	var j, i;

	// generate vertices, normals and uvs

	for ( j = 0; j <= radialSegments; j ++ ) {

		for ( i = 0; i <= tubularSegments; i ++ ) {

			var u = i / tubularSegments * arc;
			var v = j / radialSegments * Math.PI * 2;

			// vertex

			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
			vertex.z = tube * Math.sin( v );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			center.x = radius * Math.cos( u );
			center.y = radius * Math.sin( u );
			normal.subVectors( vertex, center ).normalize();

			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( i / tubularSegments );
			uvs.push( j / radialSegments );

		}

	}

	// generate indices

	for ( j = 1; j <= radialSegments; j ++ ) {

		for ( i = 1; i <= tubularSegments; i ++ ) {

			// indices

			var a = ( tubularSegments + 1 ) * j + i - 1;
			var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
			var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
			var d = ( tubularSegments + 1 ) * j + i;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

var ShapeUtils = {

	// calculate area of the contour polygon

	area: function ( contour ) {

		var n = contour.length;
		var a = 0.0;

		for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

		}

		return a * 0.5;

	},

	triangulate: ( function () {

		/**
		 * This code is a quick port of code written in C++ which was submitted to
		 * flipcode.com by John W. Ratcliff  // July 22, 2000
		 * See original code and more information here:
		 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
		 *
		 * ported to actionscript by Zevan Rosser
		 * www.actionsnippet.com
		 *
		 * ported to javascript by Joshua Koo
		 * http://www.lab4games.net/zz85/blog
		 *
		 */

		function snip( contour, u, v, w, n, verts ) {

			var p;
			var ax, ay, bx, by;
			var cx, cy, px, py;

			ax = contour[ verts[ u ] ].x;
			ay = contour[ verts[ u ] ].y;

			bx = contour[ verts[ v ] ].x;
			by = contour[ verts[ v ] ].y;

			cx = contour[ verts[ w ] ].x;
			cy = contour[ verts[ w ] ].y;

			if ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;

			var aX, aY, bX, bY, cX, cY;
			var apx, apy, bpx, bpy, cpx, cpy;
			var cCROSSap, bCROSScp, aCROSSbp;

			aX = cx - bx;  aY = cy - by;
			bX = ax - cx;  bY = ay - cy;
			cX = bx - ax;  cY = by - ay;

			for ( p = 0; p < n; p ++ ) {

				px = contour[ verts[ p ] ].x;
				py = contour[ verts[ p ] ].y;

				if ( ( ( px === ax ) && ( py === ay ) ) ||
					 ( ( px === bx ) && ( py === by ) ) ||
					 ( ( px === cx ) && ( py === cy ) ) )	continue;

				apx = px - ax;  apy = py - ay;
				bpx = px - bx;  bpy = py - by;
				cpx = px - cx;  cpy = py - cy;

				// see if p is inside triangle abc

				aCROSSbp = aX * bpy - aY * bpx;
				cCROSSap = cX * apy - cY * apx;
				bCROSScp = bX * cpy - bY * cpx;

				if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

			}

			return true;

		}

		// takes in an contour array and returns

		return function triangulate( contour, indices ) {

			var n = contour.length;

			if ( n < 3 ) return null;

			var result = [],
				verts = [],
				vertIndices = [];

			/* we want a counter-clockwise polygon in verts */

			var u, v, w;

			if ( ShapeUtils.area( contour ) > 0.0 ) {

				for ( v = 0; v < n; v ++ ) verts[ v ] = v;

			} else {

				for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

			}

			var nv = n;

			/*  remove nv - 2 vertices, creating 1 triangle every time */

			var count = 2 * nv;   /* error detection */

			for ( v = nv - 1; nv > 2; ) {

				/* if we loop, it is probably a non-simple polygon */

				if ( ( count -- ) <= 0 ) {

					//** Triangulate: ERROR - probable bad polygon!

					//throw ( "Warning, unable to triangulate polygon!" );
					//return null;
					// Sometimes warning is fine, especially polygons are triangulated in reverse.
					console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

					if ( indices ) return vertIndices;
					return result;

				}

				/* three consecutive vertices in current polygon, <u,v,w> */

				u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
				v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
				w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

				if ( snip( contour, u, v, w, nv, verts ) ) {

					var a, b, c, s, t;

					/* true names of the vertices */

					a = verts[ u ];
					b = verts[ v ];
					c = verts[ w ];

					/* output Triangle */

					result.push( [ contour[ a ],
						contour[ b ],
						contour[ c ] ] );


					vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

					/* remove v from the remaining polygon */

					for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

						verts[ s ] = verts[ t ];

					}

					nv --;

					/* reset error detection counter */

					count = 2 * nv;

				}

			}

			if ( indices ) return vertIndices;
			return result;

		};

	} )(),

	triangulateShape: function ( contour, holes ) {

		function removeDupEndPts(points) {

			var l = points.length;

			if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

				points.pop();

			}

		}

		removeDupEndPts( contour );
		holes.forEach( removeDupEndPts );

		function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

			// inOtherPt needs to be collinear to the inSegment
			if ( inSegPt1.x !== inSegPt2.x ) {

				if ( inSegPt1.x < inSegPt2.x ) {

					return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

				} else {

					return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

				}

			} else {

				if ( inSegPt1.y < inSegPt2.y ) {

					return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

				} else {

					return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

				}

			}

		}

		function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

			var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
			var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

			var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
			var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

			var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
			var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

			if ( Math.abs( limit ) > Number.EPSILON ) {

				// not parallel

				var perpSeg2;
				if ( limit > 0 ) {

					if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
					perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
					if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

				} else {

					if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
					perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
					if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

				}

				// i.e. to reduce rounding errors
				// intersection at endpoint of segment#1?
				if ( perpSeg2 === 0 ) {

					if ( ( inExcludeAdjacentSegs ) &&
						 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
					return [ inSeg1Pt1 ];

				}
				if ( perpSeg2 === limit ) {

					if ( ( inExcludeAdjacentSegs ) &&
						 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
					return [ inSeg1Pt2 ];

				}
				// intersection at endpoint of segment#2?
				if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
				if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

				// return real intersection point
				var factorSeg1 = perpSeg2 / limit;
				return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
							y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

			} else {

				// parallel or collinear
				if ( ( perpSeg1 !== 0 ) ||
					 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

				// they are collinear or degenerate
				var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
				var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
				// both segments are points
				if ( seg1Pt && seg2Pt ) {

					if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
						 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
					return [ inSeg1Pt1 ];                 						// they are the same point

				}
				// segment#1  is a single point
				if ( seg1Pt ) {

					if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
					return [ inSeg1Pt1 ];

				}
				// segment#2  is a single point
				if ( seg2Pt ) {

					if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
					return [ inSeg2Pt1 ];

				}

				// they are collinear segments, which might overlap
				var seg1min, seg1max, seg1minVal, seg1maxVal;
				var seg2min, seg2max, seg2minVal, seg2maxVal;
				if ( seg1dx !== 0 ) {

					// the segments are NOT on a vertical line
					if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

						seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
						seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

					} else {

						seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
						seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

					}
					if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

						seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
						seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

					} else {

						seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
						seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

					}

				} else {

					// the segments are on a vertical line
					if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

						seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
						seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

					} else {

						seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
						seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

					}
					if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

						seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
						seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

					} else {

						seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
						seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

					}

				}
				if ( seg1minVal <= seg2minVal ) {

					if ( seg1maxVal <  seg2minVal )	return [];
					if ( seg1maxVal === seg2minVal )	{

						if ( inExcludeAdjacentSegs )		return [];
						return [ seg2min ];

					}
					if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
					return	[ seg2min, seg2max ];

				} else {

					if ( seg1minVal >  seg2maxVal )	return [];
					if ( seg1minVal === seg2maxVal )	{

						if ( inExcludeAdjacentSegs )		return [];
						return [ seg1min ];

					}
					if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
					return	[ seg1min, seg2max ];

				}

			}

		}

		function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

			// The order of legs is important

			// translation of all points, so that Vertex is at (0,0)
			var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
			var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
			var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

			// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
			var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
			var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

			if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

				// angle != 180 deg.

				var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
				// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

				if ( from2toAngle > 0 ) {

					// main angle < 180 deg.
					return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

				} else {

					// main angle > 180 deg.
					return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

				}

			} else {

				// angle == 180 deg.
				// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
				return	( from2otherAngle > 0 );

			}

		}


		function removeHoles( contour, holes ) {

			var shape = contour.concat(); // work on this shape
			var hole;

			function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

				// Check if hole point lies within angle around shape point
				var lastShapeIdx = shape.length - 1;

				var prevShapeIdx = inShapeIdx - 1;
				if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

				var nextShapeIdx = inShapeIdx + 1;
				if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

				var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
				if ( ! insideAngle ) {

					// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
					return	false;

				}

				// Check if shape point lies within angle around hole point
				var lastHoleIdx = hole.length - 1;

				var prevHoleIdx = inHoleIdx - 1;
				if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

				var nextHoleIdx = inHoleIdx + 1;
				if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

				insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
				if ( ! insideAngle ) {

					// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
					return	false;

				}

				return	true;

			}

			function intersectsShapeEdge( inShapePt, inHolePt ) {

				// checks for intersections with shape edges
				var sIdx, nextIdx, intersection;
				for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

					nextIdx = sIdx + 1; nextIdx %= shape.length;
					intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
					if ( intersection.length > 0 )		return	true;

				}

				return	false;

			}

			var indepHoles = [];

			function intersectsHoleEdge( inShapePt, inHolePt ) {

				// checks for intersections with hole edges
				var ihIdx, chkHole,
					hIdx, nextIdx, intersection;
				for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

					chkHole = holes[ indepHoles[ ihIdx ] ];
					for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

						nextIdx = hIdx + 1; nextIdx %= chkHole.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
						if ( intersection.length > 0 )		return	true;

					}

				}
				return	false;

			}

			var holeIndex, shapeIndex,
				shapePt, holePt,
				holeIdx, cutKey, failedCuts = [],
				tmpShape1, tmpShape2,
				tmpHole1, tmpHole2;

			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

				indepHoles.push( h );

			}

			var minShapeIndex = 0;
			var counter = indepHoles.length * 2;
			while ( indepHoles.length > 0 ) {

				counter --;
				if ( counter < 0 ) {

					console.log( 'THREE.ShapeUtils: Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!' );
					break;

				}

				// search for shape-vertex and hole-vertex,
				// which can be connected without intersections
				for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

					shapePt = shape[ shapeIndex ];
					holeIndex	= - 1;

					// search for hole which can be reached without intersections
					for ( var h = 0; h < indepHoles.length; h ++ ) {

						holeIdx = indepHoles[ h ];

						// prevent multiple checks
						cutKey = shapePt.x + ':' + shapePt.y + ':' + holeIdx;
						if ( failedCuts[ cutKey ] !== undefined )			continue;

						hole = holes[ holeIdx ];
						for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

							holePt = hole[ h2 ];
							if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
							if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
							if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

							holeIndex = h2;
							indepHoles.splice( h, 1 );

							tmpShape1 = shape.slice( 0, shapeIndex + 1 );
							tmpShape2 = shape.slice( shapeIndex );
							tmpHole1 = hole.slice( holeIndex );
							tmpHole2 = hole.slice( 0, holeIndex + 1 );

							shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

							minShapeIndex = shapeIndex;

							// Debug only, to show the selected cuts
							// glob_CutLines.push( [ shapePt, holePt ] );

							break;

						}
						if ( holeIndex >= 0 )	break;		// hole-vertex found

						failedCuts[ cutKey ] = true;			// remember failure

					}
					if ( holeIndex >= 0 )	break;		// hole-vertex found

				}

			}

			return shape; 			/* shape with no holes */

		}


		var i, il, f, face,
			key, index,
			allPointsMap = {};

		// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

		var allpoints = contour.concat();

		for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

			Array.prototype.push.apply( allpoints, holes[ h ] );

		}

		//console.log( "allpoints",allpoints, allpoints.length );

		// prepare all points map

		for ( i = 0, il = allpoints.length; i < il; i ++ ) {

			key = allpoints[ i ].x + ':' + allpoints[ i ].y;

			if ( allPointsMap[ key ] !== undefined ) {

				console.warn( 'THREE.ShapeUtils: Duplicate point', key, i );

			}

			allPointsMap[ key ] = i;

		}

		// remove holes by cutting paths to holes and adding them to the shape
		var shapeWithoutHoles = removeHoles( contour, holes );

		var triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
		//console.log( "triangles",triangles, triangles.length );

		// check all face vertices against all points map

		for ( i = 0, il = triangles.length; i < il; i ++ ) {

			face = triangles[ i ];

			for ( f = 0; f < 3; f ++ ) {

				key = face[ f ].x + ':' + face[ f ].y;

				index = allPointsMap[ key ];

				if ( index !== undefined ) {

					face[ f ] = index;

				}

			}

		}

		return triangles.concat();

	},

	isClockWise: function ( pts ) {

		return ShapeUtils.area( pts ) < 0;

	}

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  amount: <int>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline is bevel
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *  frames: <Object> // containing arrays of tangents, normals, binormals
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */

// ExtrudeGeometry

function ExtrudeGeometry( shapes, options ) {

	Geometry.call( this );

	this.type = 'ExtrudeGeometry';

	this.parameters = {
		shapes: shapes,
		options: options
	};

	this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
	this.mergeVertices();

}

ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

// ExtrudeBufferGeometry

function ExtrudeBufferGeometry( shapes, options ) {

	if ( typeof ( shapes ) === "undefined" ) {

		return;

	}

	BufferGeometry.call( this );

	this.type = 'ExtrudeBufferGeometry';

	shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

	this.addShapeList( shapes, options );

	this.computeVertexNormals();

	// can't really use automatic vertex normals
	// as then front and back sides get smoothed too
	// should do separate smoothing just for sides

	//this.computeVertexNormals();

	//console.log( "took", ( Date.now() - startTime ) );

}

ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

ExtrudeBufferGeometry.prototype.getArrays = function () {

	var positionAttribute = this.getAttribute( "position" );
	var verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];

	var uvAttribute = this.getAttribute( "uv" );
	var uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];

	var IndexAttribute = this.index;
	var indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];

	return {
		position: verticesArray,
		uv: uvArray,
		index: indicesArray
	};

};

ExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {

	var sl = shapes.length;
	options.arrays = this.getArrays();

	for ( var s = 0; s < sl; s ++ ) {

		var shape = shapes[ s ];
		this.addShape( shape, options );

	}

	this.setIndex( options.arrays.index );
	this.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );

};

ExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {

	var arrays = options.arrays ? options.arrays : this.getArrays();
	var verticesArray = arrays.position;
	var indicesArray = arrays.index;
	var uvArray = arrays.uv;

	var placeholder = [];


	var amount = options.amount !== undefined ? options.amount : 100;

	var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
	var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
	var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

	var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	var steps = options.steps !== undefined ? options.steps : 1;

	var extrudePath = options.extrudePath;
	var extrudePts, extrudeByPath = false;

	// Use default WorldUVGenerator if no UV generators are specified.
	var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

	var splineTube, binormal, normal, position2;
	if ( extrudePath ) {

		extrudePts = extrudePath.getSpacedPoints( steps );

		extrudeByPath = true;
		bevelEnabled = false; // bevels not supported for path extrusion

		// SETUP TNB variables

		// TODO1 - have a .isClosed in spline?

		splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );

		// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

		binormal = new Vector3();
		normal = new Vector3();
		position2 = new Vector3();

	}

	// Safeguards if bevels are not enabled

	if ( ! bevelEnabled ) {

		bevelSegments = 0;
		bevelThickness = 0;
		bevelSize = 0;

	}

	// Variables initialization

	var ahole, h, hl; // looping of holes
	var scope = this;

	var shapePoints = shape.extractPoints( curveSegments );

	var vertices = shapePoints.shape;
	var holes = shapePoints.holes;

	var reverse = ! ShapeUtils.isClockWise( vertices );

	if ( reverse ) {

		vertices = vertices.reverse();

		// Maybe we should also check if holes are in the opposite direction, just to be safe ...

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			if ( ShapeUtils.isClockWise( ahole ) ) {

				holes[ h ] = ahole.reverse();

			}

		}

	}


	var faces = ShapeUtils.triangulateShape( vertices, holes );

	/* Vertices */

	var contour = vertices; // vertices has all points but contour has only points of circumference

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		vertices = vertices.concat( ahole );

	}


	function scalePt2( pt, vec, size ) {

		if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

		return vec.clone().multiplyScalar( size ).add( pt );

	}

	var b, bs, t, z,
		vert, vlen = vertices.length,
		face, flen = faces.length;


	// Find directions for point movement


	function getBevelVec( inPt, inPrev, inNext ) {

		// computes for inPt the corresponding point inPt' on a new contour
		//   shifted by 1 unit (length of normalized vector) to the left
		// if we walk along contour clockwise, this new contour is outside the old one
		//
		// inPt' is the intersection of the two lines parallel to the two
		//  adjacent edges of inPt at a distance of 1 unit on the left side.

		var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

		// good reading for geometry algorithms (here: line-line intersection)
		// http://geomalgorithms.com/a05-_intersect-1.html

		var v_prev_x = inPt.x - inPrev.x,
			v_prev_y = inPt.y - inPrev.y;
		var v_next_x = inNext.x - inPt.x,
			v_next_y = inNext.y - inPt.y;

		var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

		// check for collinear edges
		var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

		if ( Math.abs( collinear0 ) > Number.EPSILON ) {

			// not collinear

			// length of vectors for normalizing

			var v_prev_len = Math.sqrt( v_prev_lensq );
			var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

			// shift adjacent points by unit vectors to the left

			var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
			var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

			var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
			var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

			// scaling factor for v_prev to intersection point

			var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
					( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
				( v_prev_x * v_next_y - v_prev_y * v_next_x );

			// vector from inPt to intersection point

			v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
			v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

			// Don't normalize!, otherwise sharp corners become ugly
			//  but prevent crazy spikes
			var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
			if ( v_trans_lensq <= 2 ) {

				return new Vector2( v_trans_x, v_trans_y );

			} else {

				shrink_by = Math.sqrt( v_trans_lensq / 2 );

			}

		} else {

			// handle special case of collinear edges

			var direction_eq = false; // assumes: opposite
			if ( v_prev_x > Number.EPSILON ) {

				if ( v_next_x > Number.EPSILON ) {

					direction_eq = true;

				}

			} else {

				if ( v_prev_x < - Number.EPSILON ) {

					if ( v_next_x < - Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

						direction_eq = true;

					}

				}

			}

			if ( direction_eq ) {

				// console.log("Warning: lines are a straight sequence");
				v_trans_x = - v_prev_y;
				v_trans_y = v_prev_x;
				shrink_by = Math.sqrt( v_prev_lensq );

			} else {

				// console.log("Warning: lines are a straight spike");
				v_trans_x = v_prev_x;
				v_trans_y = v_prev_y;
				shrink_by = Math.sqrt( v_prev_lensq / 2 );

			}

		}

		return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

	}


	var contourMovements = [];

	for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

		if ( j === il ) j = 0;
		if ( k === il ) k = 0;

		//  (j)---(i)---(k)
		// console.log('i,j,k', i, j , k)

		contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

	}

	var holesMovements = [],
		oneHoleMovements, verticesMovements = contourMovements.concat();

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		oneHoleMovements = [];

		for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

		}

		holesMovements.push( oneHoleMovements );
		verticesMovements = verticesMovements.concat( oneHoleMovements );

	}


	// Loop bevelSegments, 1 for the front, 1 for the back

	for ( b = 0; b < bevelSegments; b ++ ) {

		//for ( b = bevelSegments; b > 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * Math.cos( t * Math.PI / 2 );
		bs = bevelSize * Math.sin( t * Math.PI / 2 );

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

			v( vert.x, vert.y, - z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				v( vert.x, vert.y, - z );

			}

		}

	}

	bs = bevelSize;

	// Back facing vertices

	for ( i = 0; i < vlen; i ++ ) {

		vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

		if ( ! extrudeByPath ) {

			v( vert.x, vert.y, 0 );

		} else {

			// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

			normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
			binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

			position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

			v( position2.x, position2.y, position2.z );

		}

	}

	// Add stepped vertices...
	// Including front facing vertices

	var s;

	for ( s = 1; s <= steps; s ++ ) {

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, amount / steps * s );

			} else {

				// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

				normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

	}


	// Add bevel segments planes

	//for ( b = 1; b <= bevelSegments; b ++ ) {
	for ( b = bevelSegments - 1; b >= 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * Math.cos( t * Math.PI / 2 );
		bs = bevelSize * Math.sin( t * Math.PI / 2 );

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
			v( vert.x, vert.y, amount + z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount + z );

				} else {

					v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

				}

			}

		}

	}

	/* Faces */

	// Top and bottom faces

	buildLidFaces();

	// Sides faces

	buildSideFaces();


	/////  Internal functions

	function buildLidFaces() {

		var start = verticesArray.length/3;

		if ( bevelEnabled ) {

			var layer = 0; // steps + 1
			var offset = vlen * layer;

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

			}

			layer = steps + bevelSegments * 2;
			offset = vlen * layer;

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

			}

		} else {

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ], face[ 1 ], face[ 0 ] );

			}

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

			}

		}

		scope.addGroup( start, verticesArray.length/3 -start, options.material !== undefined ? options.material : 0);

	}

	// Create faces for the z-sides of the shape

	function buildSideFaces() {

		var start = verticesArray.length/3;
		var layeroffset = 0;
		sidewalls( contour, layeroffset );
		layeroffset += contour.length;

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			sidewalls( ahole, layeroffset );

			//, true
			layeroffset += ahole.length;

		}


		scope.addGroup( start, verticesArray.length/3 -start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1);


	}

	function sidewalls( contour, layeroffset ) {

		var j, k;
		i = contour.length;

		while ( -- i >= 0 ) {

			j = i;
			k = i - 1;
			if ( k < 0 ) k = contour.length - 1;

			//console.log('b', i,j, i-1, k,vertices.length);

			var s = 0,
				sl = steps + bevelSegments * 2;

			for ( s = 0; s < sl; s ++ ) {

				var slen1 = vlen * s;
				var slen2 = vlen * ( s + 1 );

				var a = layeroffset + j + slen1,
					b = layeroffset + k + slen1,
					c = layeroffset + k + slen2,
					d = layeroffset + j + slen2;

				f4( a, b, c, d, contour, s, sl, j, k );

			}

		}

	}

	function v( x, y, z ) {

		placeholder.push( x );
		placeholder.push( y );
		placeholder.push( z );

	}


	function f3( a, b, c ) {

		addVertex( a );
		addVertex( b );
		addVertex( c );

		var nextIndex = verticesArray.length / 3;
		var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

		addUV( uvs[ 0 ] );
		addUV( uvs[ 1 ] );
		addUV( uvs[ 2 ] );

	}

	function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

		addVertex( a );
		addVertex( b );
		addVertex( d );

		addVertex( b );
		addVertex( c );
		addVertex( d );


		var nextIndex = verticesArray.length / 3;
		var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

		addUV( uvs[ 0 ] );
		addUV( uvs[ 1 ] );
		addUV( uvs[ 3 ] );

		addUV( uvs[ 1 ] );
		addUV( uvs[ 2 ] );
		addUV( uvs[ 3 ] );

	}

	function addVertex( index ) {

		indicesArray.push( verticesArray.length / 3 );
		verticesArray.push( placeholder[ index * 3 + 0 ] );
		verticesArray.push( placeholder[ index * 3 + 1 ] );
		verticesArray.push( placeholder[ index * 3 + 2 ] );

	}


	function addUV( vector2 ) {

		uvArray.push( vector2.x );
		uvArray.push( vector2.y );

	}

	if ( ! options.arrays ) {

		this.setIndex( indicesArray );
		this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );

	}

};

ExtrudeGeometry.WorldUVGenerator = {

	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

		var a_x = vertices[ indexA * 3 ];
		var a_y = vertices[ indexA * 3 + 1 ];
		var b_x = vertices[ indexB * 3 ];
		var b_y = vertices[ indexB * 3 + 1 ];
		var c_x = vertices[ indexC * 3 ];
		var c_y = vertices[ indexC * 3 + 1 ];

		return [
			new Vector2( a_x, a_y ),
			new Vector2( b_x, b_y ),
			new Vector2( c_x, c_y )
		];

	},

	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

		var a_x = vertices[ indexA * 3 ];
		var a_y = vertices[ indexA * 3 + 1 ];
		var a_z = vertices[ indexA * 3 + 2 ];
		var b_x = vertices[ indexB * 3 ];
		var b_y = vertices[ indexB * 3 + 1 ];
		var b_z = vertices[ indexB * 3 + 2 ];
		var c_x = vertices[ indexC * 3 ];
		var c_y = vertices[ indexC * 3 + 1 ];
		var c_z = vertices[ indexC * 3 + 2 ];
		var d_x = vertices[ indexD * 3 ];
		var d_y = vertices[ indexD * 3 + 1 ];
		var d_z = vertices[ indexD * 3 + 2 ];

		if ( Math.abs( a_y - b_y ) < 0.01 ) {

			return [
				new Vector2( a_x, 1 - a_z ),
				new Vector2( b_x, 1 - b_z ),
				new Vector2( c_x, 1 - c_z ),
				new Vector2( d_x, 1 - d_z )
			];

		} else {

			return [
				new Vector2( a_y, 1 - a_z ),
				new Vector2( b_y, 1 - b_z ),
				new Vector2( c_y, 1 - c_z ),
				new Vector2( d_y, 1 - d_z )
			];

		}

	}
};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * Text = 3D Text
 *
 * parameters = {
 *  font: <THREE.Font>, // font
 *
 *  size: <float>, // size of the text
 *  height: <float>, // thickness to extrude text
 *  curveSegments: <int>, // number of points on the curves
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into text bevel goes
 *  bevelSize: <float> // how far from text outline is bevel
 * }
 */

// TextGeometry

function TextGeometry(  text, parameters ) {

	Geometry.call( this );

	this.type = 'TextGeometry';

	this.parameters = {
		text: text,
		parameters: parameters
	};

	this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
	this.mergeVertices();

}

TextGeometry.prototype = Object.create( Geometry.prototype );
TextGeometry.prototype.constructor = TextGeometry;

// TextBufferGeometry

function TextBufferGeometry( text, parameters ) {

	parameters = parameters || {};

	var font = parameters.font;

	if ( ! ( font && font.isFont ) ) {

		console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
		return new Geometry();

	}

	var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

	// translate parameters to ExtrudeGeometry API

	parameters.amount = parameters.height !== undefined ? parameters.height : 50;

	// defaults

	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

	ExtrudeBufferGeometry.call( this, shapes, parameters );

	this.type = 'TextBufferGeometry';

}

TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
TextBufferGeometry.prototype.constructor = TextBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 */

// SphereGeometry

function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'SphereGeometry';

	this.parameters = {
		radius: radius,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		phiStart: phiStart,
		phiLength: phiLength,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
	this.mergeVertices();

}

SphereGeometry.prototype = Object.create( Geometry.prototype );
SphereGeometry.prototype.constructor = SphereGeometry;

// SphereBufferGeometry

function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'SphereBufferGeometry';

	this.parameters = {
		radius: radius,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		phiStart: phiStart,
		phiLength: phiLength,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	radius = radius || 50;

	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

	phiStart = phiStart !== undefined ? phiStart : 0;
	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

	var thetaEnd = thetaStart + thetaLength;

	var ix, iy;

	var index = 0;
	var grid = [];

	var vertex = new Vector3();
	var normal = new Vector3();

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// generate vertices, normals and uvs

	for ( iy = 0; iy <= heightSegments; iy ++ ) {

		var verticesRow = [];

		var v = iy / heightSegments;

		for ( ix = 0; ix <= widthSegments; ix ++ ) {

			var u = ix / widthSegments;

			// vertex

			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normal.set( vertex.x, vertex.y, vertex.z ).normalize();
			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( u, 1 - v );

			verticesRow.push( index ++ );

		}

		grid.push( verticesRow );

	}

	// indices

	for ( iy = 0; iy < heightSegments; iy ++ ) {

		for ( ix = 0; ix < widthSegments; ix ++ ) {

			var a = grid[ iy ][ ix + 1 ];
			var b = grid[ iy ][ ix ];
			var c = grid[ iy + 1 ][ ix ];
			var d = grid[ iy + 1 ][ ix + 1 ];

			if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
			if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

/**
 * @author Kaleb Murphy
 * @author Mugen87 / https://github.com/Mugen87
 */

// RingGeometry

function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'RingGeometry';

	this.parameters = {
		innerRadius: innerRadius,
		outerRadius: outerRadius,
		thetaSegments: thetaSegments,
		phiSegments: phiSegments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
	this.mergeVertices();

}

RingGeometry.prototype = Object.create( Geometry.prototype );
RingGeometry.prototype.constructor = RingGeometry;

// RingBufferGeometry

function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'RingBufferGeometry';

	this.parameters = {
		innerRadius: innerRadius,
		outerRadius: outerRadius,
		thetaSegments: thetaSegments,
		phiSegments: phiSegments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	innerRadius = innerRadius || 20;
	outerRadius = outerRadius || 50;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// some helper variables

	var segment;
	var radius = innerRadius;
	var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
	var vertex = new Vector3();
	var uv = new Vector2();
	var j, i;

	// generate vertices, normals and uvs

	for ( j = 0; j <= phiSegments; j ++ ) {

		for ( i = 0; i <= thetaSegments; i ++ ) {

			// values are generate from the inside of the ring to the outside

			segment = thetaStart + i / thetaSegments * thetaLength;

			// vertex

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, 0, 1 );

			// uv

			uv.x = ( vertex.x / outerRadius + 1 ) / 2;
			uv.y = ( vertex.y / outerRadius + 1 ) / 2;

			uvs.push( uv.x, uv.y );

		}

		// increase the radius for next row of vertices

		radius += radiusStep;

	}

	// indices

	for ( j = 0; j < phiSegments; j ++ ) {

		var thetaSegmentLevel = j * ( thetaSegments + 1 );

		for ( i = 0; i < thetaSegments; i ++ ) {

			segment = i + thetaSegmentLevel;

			var a = segment;
			var b = segment + thetaSegments + 1;
			var c = segment + thetaSegments + 2;
			var d = segment + 1;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
RingBufferGeometry.prototype.constructor = RingBufferGeometry;

/**
 * @author astrodud / http://astrodud.isgreat.org/
 * @author zz85 / https://github.com/zz85
 * @author bhouston / http://clara.io
 * @author Mugen87 / https://github.com/Mugen87
 */

// LatheGeometry

function LatheGeometry( points, segments, phiStart, phiLength ) {

	Geometry.call( this );

	this.type = 'LatheGeometry';

	this.parameters = {
		points: points,
		segments: segments,
		phiStart: phiStart,
		phiLength: phiLength
	};

	this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
	this.mergeVertices();

}

LatheGeometry.prototype = Object.create( Geometry.prototype );
LatheGeometry.prototype.constructor = LatheGeometry;

// LatheBufferGeometry

function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

	BufferGeometry.call( this );

	this.type = 'LatheBufferGeometry';

	this.parameters = {
		points: points,
		segments: segments,
		phiStart: phiStart,
		phiLength: phiLength
	};

	segments = Math.floor( segments ) || 12;
	phiStart = phiStart || 0;
	phiLength = phiLength || Math.PI * 2;

	// clamp phiLength so it's in range of [ 0, 2PI ]

	phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );


	// buffers

	var indices = [];
	var vertices = [];
	var uvs = [];

	// helper variables

	var base;
	var inverseSegments = 1.0 / segments;
	var vertex = new Vector3();
	var uv = new Vector2();
	var i, j;

	// generate vertices and uvs

	for ( i = 0; i <= segments; i ++ ) {

		var phi = phiStart + i * inverseSegments * phiLength;

		var sin = Math.sin( phi );
		var cos = Math.cos( phi );

		for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

			// vertex

			vertex.x = points[ j ].x * sin;
			vertex.y = points[ j ].y;
			vertex.z = points[ j ].x * cos;

			vertices.push( vertex.x, vertex.y, vertex.z );

			// uv

			uv.x = i / segments;
			uv.y = j / ( points.length - 1 );

			uvs.push( uv.x, uv.y );


		}

	}

	// indices

	for ( i = 0; i < segments; i ++ ) {

		for ( j = 0; j < ( points.length - 1 ); j ++ ) {

			base = j + i * points.length;

			var a = base;
			var b = base + points.length;
			var c = base + points.length + 1;
			var d = base + 1;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// generate normals

	this.computeVertexNormals();

	// if the geometry is closed, we need to average the normals along the seam.
	// because the corresponding vertices are identical (but still have different UVs).

	if ( phiLength === Math.PI * 2 ) {

		var normals = this.attributes.normal.array;
		var n1 = new Vector3();
		var n2 = new Vector3();
		var n = new Vector3();

		// this is the buffer offset for the last line of vertices

		base = segments * points.length * 3;

		for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

			// select the normal of the vertex in the first line

			n1.x = normals[ j + 0 ];
			n1.y = normals[ j + 1 ];
			n1.z = normals[ j + 2 ];

			// select the normal of the vertex in the last line

			n2.x = normals[ base + j + 0 ];
			n2.y = normals[ base + j + 1 ];
			n2.z = normals[ base + j + 2 ];

			// average normals

			n.addVectors( n1, n2 ).normalize();

			// assign the new values to both normals

			normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
			normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
			normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

		}

	}

}

LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

/**
 * @author jonobr1 / http://jonobr1.com
 * @author Mugen87 / https://github.com/Mugen87
 */

// ShapeGeometry

function ShapeGeometry( shapes, curveSegments ) {

	Geometry.call( this );

	this.type = 'ShapeGeometry';

	if ( typeof curveSegments === 'object' ) {

		console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

		curveSegments = curveSegments.curveSegments;

	}

	this.parameters = {
		shapes: shapes,
		curveSegments: curveSegments
	};

	this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
	this.mergeVertices();

}

ShapeGeometry.prototype = Object.create( Geometry.prototype );
ShapeGeometry.prototype.constructor = ShapeGeometry;

// ShapeBufferGeometry

function ShapeBufferGeometry( shapes, curveSegments ) {

	BufferGeometry.call( this );

	this.type = 'ShapeBufferGeometry';

	this.parameters = {
		shapes: shapes,
		curveSegments: curveSegments
	};

	curveSegments = curveSegments || 12;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var groupStart = 0;
	var groupCount = 0;

	// allow single and array values for "shapes" parameter

	if ( Array.isArray( shapes ) === false ) {

		addShape( shapes );

	} else {

		for ( var i = 0; i < shapes.length; i ++ ) {

			addShape( shapes[ i ] );

			this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

			groupStart += groupCount;
			groupCount = 0;

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


	// helper functions

	function addShape( shape ) {

		var i, l, shapeHole;

		var indexOffset = vertices.length / 3;
		var points = shape.extractPoints( curveSegments );

		var shapeVertices = points.shape;
		var shapeHoles = points.holes;

		// check direction of vertices

		if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

			shapeVertices = shapeVertices.reverse();

			// also check if holes are in the opposite direction

			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

				shapeHole = shapeHoles[ i ];

				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

					shapeHoles[ i ] = shapeHole.reverse();

				}

			}

		}

		var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

		// join vertices of inner and outer paths to a single array

		for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

			shapeHole = shapeHoles[ i ];
			shapeVertices = shapeVertices.concat( shapeHole );

		}

		// vertices, normals, uvs

		for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

			var vertex = shapeVertices[ i ];

			vertices.push( vertex.x, vertex.y, 0 );
			normals.push( 0, 0, 1 );
			uvs.push( vertex.x, vertex.y ); // world uvs

		}

		// incides

		for ( i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			var a = face[ 0 ] + indexOffset;
			var b = face[ 1 ] + indexOffset;
			var c = face[ 2 ] + indexOffset;

			indices.push( a, b, c );
			groupCount += 3;

		}

	}

}

ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

/**
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */

function EdgesGeometry( geometry, thresholdAngle ) {

	BufferGeometry.call( this );

	this.type = 'EdgesGeometry';

	this.parameters = {
		thresholdAngle: thresholdAngle
	};

	thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

	// buffer

	var vertices = [];

	// helper variables

	var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
	var edge = [ 0, 0 ], edges = {}, edge1, edge2;
	var key, keys = [ 'a', 'b', 'c' ];

	// prepare source geometry

	var geometry2;

	if ( geometry.isBufferGeometry ) {

		geometry2 = new Geometry();
		geometry2.fromBufferGeometry( geometry );

	} else {

		geometry2 = geometry.clone();

	}

	geometry2.mergeVertices();
	geometry2.computeFaceNormals();

	var sourceVertices = geometry2.vertices;
	var faces = geometry2.faces;

	// now create a data structure where each entry represents an edge with its adjoining faces

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var face = faces[ i ];

		for ( var j = 0; j < 3; j ++ ) {

			edge1 = face[ keys[ j ] ];
			edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
			edge[ 0 ] = Math.min( edge1, edge2 );
			edge[ 1 ] = Math.max( edge1, edge2 );

			key = edge[ 0 ] + ',' + edge[ 1 ];

			if ( edges[ key ] === undefined ) {

				edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

			} else {

				edges[ key ].face2 = i;

			}

		}

	}

	// generate vertices

	for ( key in edges ) {

		var e = edges[ key ];

		// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

		if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

			var vertex = sourceVertices[ e.index1 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

			vertex = sourceVertices[ e.index2 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	}

	// build geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

}

EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
EdgesGeometry.prototype.constructor = EdgesGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// CylinderGeometry

function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'CylinderGeometry';

	this.parameters = {
		radiusTop: radiusTop,
		radiusBottom: radiusBottom,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
	this.mergeVertices();

}

CylinderGeometry.prototype = Object.create( Geometry.prototype );
CylinderGeometry.prototype.constructor = CylinderGeometry;

// CylinderBufferGeometry

function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'CylinderBufferGeometry';

	this.parameters = {
		radiusTop: radiusTop,
		radiusBottom: radiusBottom,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	var scope = this;

	radiusTop = radiusTop !== undefined ? radiusTop : 20;
	radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
	height = height !== undefined ? height : 100;

	radialSegments = Math.floor( radialSegments ) || 8;
	heightSegments = Math.floor( heightSegments ) || 1;

	openEnded = openEnded !== undefined ? openEnded : false;
	thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
	thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var index = 0;
	var indexArray = [];
	var halfHeight = height / 2;
	var groupStart = 0;

	// generate geometry

	generateTorso();

	if ( openEnded === false ) {

		if ( radiusTop > 0 ) generateCap( true );
		if ( radiusBottom > 0 ) generateCap( false );

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	function generateTorso() {

		var x, y;
		var normal = new Vector3();
		var vertex = new Vector3();

		var groupCount = 0;

		// this will be used to calculate the normal
		var slope = ( radiusBottom - radiusTop ) / height;

		// generate vertices, normals and uvs

		for ( y = 0; y <= heightSegments; y ++ ) {

			var indexRow = [];

			var v = y / heightSegments;

			// calculate the radius of the current row

			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;

				var theta = u * thetaLength + thetaStart;

				var sinTheta = Math.sin( theta );
				var cosTheta = Math.cos( theta );

				// vertex

				vertex.x = radius * sinTheta;
				vertex.y = - v * height + halfHeight;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normal.set( sinTheta, slope, cosTheta ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u, 1 - v );

				// save index of vertex in respective row

				indexRow.push( index ++ );

			}

			// now save vertices of the row in our index array

			indexArray.push( indexRow );

		}

		// generate indices

		for ( x = 0; x < radialSegments; x ++ ) {

			for ( y = 0; y < heightSegments; y ++ ) {

				// we use the index array to access the correct indices

				var a = indexArray[ y ][ x ];
				var b = indexArray[ y + 1 ][ x ];
				var c = indexArray[ y + 1 ][ x + 1 ];
				var d = indexArray[ y ][ x + 1 ];

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

				// update group counter

				groupCount += 6;

			}

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, 0 );

		// calculate new start value for groups

		groupStart += groupCount;

	}

	function generateCap( top ) {

		var x, centerIndexStart, centerIndexEnd;

		var uv = new Vector2();
		var vertex = new Vector3();

		var groupCount = 0;

		var radius = ( top === true ) ? radiusTop : radiusBottom;
		var sign = ( top === true ) ? 1 : - 1;

		// save the index of the first center vertex
		centerIndexStart = index;

		// first we generate the center vertex data of the cap.
		// because the geometry needs one set of uvs per face,
		// we must generate a center vertex per face/segment

		for ( x = 1; x <= radialSegments; x ++ ) {

			// vertex

			vertices.push( 0, halfHeight * sign, 0 );

			// normal

			normals.push( 0, sign, 0 );

			// uv

			uvs.push( 0.5, 0.5 );

			// increase index

			index ++;

		}

		// save the index of the last center vertex

		centerIndexEnd = index;

		// now we generate the surrounding vertices, normals and uvs

		for ( x = 0; x <= radialSegments; x ++ ) {

			var u = x / radialSegments;
			var theta = u * thetaLength + thetaStart;

			var cosTheta = Math.cos( theta );
			var sinTheta = Math.sin( theta );

			// vertex

			vertex.x = radius * sinTheta;
			vertex.y = halfHeight * sign;
			vertex.z = radius * cosTheta;
			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, sign, 0 );

			// uv

			uv.x = ( cosTheta * 0.5 ) + 0.5;
			uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
			uvs.push( uv.x, uv.y );

			// increase index

			index ++;

		}

		// generate indices

		for ( x = 0; x < radialSegments; x ++ ) {

			var c = centerIndexStart + x;
			var i = centerIndexEnd + x;

			if ( top === true ) {

				// face top

				indices.push( i, i + 1, c );

			} else {

				// face bottom

				indices.push( i + 1, i, c );

			}

			groupCount += 3;

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

		// calculate new start value for groups

		groupStart += groupCount;

	}

}

CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

/**
 * @author abelnation / http://github.com/abelnation
 */

// ConeGeometry

function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

	this.type = 'ConeGeometry';

	this.parameters = {
		radius: radius,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

}

ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
ConeGeometry.prototype.constructor = ConeGeometry;

// ConeBufferGeometry

function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

	this.type = 'ConeBufferGeometry';

	this.parameters = {
		radius: radius,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

}

ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 * @author hughes
 */

// CircleGeometry

function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'CircleGeometry';

	this.parameters = {
		radius: radius,
		segments: segments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
	this.mergeVertices();

}

CircleGeometry.prototype = Object.create( Geometry.prototype );
CircleGeometry.prototype.constructor = CircleGeometry;

// CircleBufferGeometry

function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'CircleBufferGeometry';

	this.parameters = {
		radius: radius,
		segments: segments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	radius = radius || 50;
	segments = segments !== undefined ? Math.max( 3, segments ) : 8;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var i, s;
	var vertex = new Vector3();
	var uv = new Vector2();

	// center point

	vertices.push( 0, 0, 0 );
	normals.push( 0, 0, 1 );
	uvs.push( 0.5, 0.5 );

	for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

		var segment = thetaStart + s / segments * thetaLength;

		// vertex

		vertex.x = radius * Math.cos( segment );
		vertex.y = radius * Math.sin( segment );

		vertices.push( vertex.x, vertex.y, vertex.z );

		// normal

		normals.push( 0, 0, 1 );

		// uvs

		uv.x = ( vertices[ i ] / radius + 1 ) / 2;
		uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

		uvs.push( uv.x, uv.y );

	}

	// indices

	for ( i = 1; i <= segments; i ++ ) {

		indices.push( i, i + 1, 0 );

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



var Geometries = Object.freeze({
	WireframeGeometry: WireframeGeometry,
	ParametricGeometry: ParametricGeometry,
	ParametricBufferGeometry: ParametricBufferGeometry,
	TetrahedronGeometry: TetrahedronGeometry,
	TetrahedronBufferGeometry: TetrahedronBufferGeometry,
	OctahedronGeometry: OctahedronGeometry,
	OctahedronBufferGeometry: OctahedronBufferGeometry,
	IcosahedronGeometry: IcosahedronGeometry,
	IcosahedronBufferGeometry: IcosahedronBufferGeometry,
	DodecahedronGeometry: DodecahedronGeometry,
	DodecahedronBufferGeometry: DodecahedronBufferGeometry,
	PolyhedronGeometry: PolyhedronGeometry,
	PolyhedronBufferGeometry: PolyhedronBufferGeometry,
	TubeGeometry: TubeGeometry,
	TubeBufferGeometry: TubeBufferGeometry,
	TorusKnotGeometry: TorusKnotGeometry,
	TorusKnotBufferGeometry: TorusKnotBufferGeometry,
	TorusGeometry: TorusGeometry,
	TorusBufferGeometry: TorusBufferGeometry,
	TextGeometry: TextGeometry,
	TextBufferGeometry: TextBufferGeometry,
	SphereGeometry: SphereGeometry,
	SphereBufferGeometry: SphereBufferGeometry,
	RingGeometry: RingGeometry,
	RingBufferGeometry: RingBufferGeometry,
	PlaneGeometry: PlaneGeometry,
	PlaneBufferGeometry: PlaneBufferGeometry,
	LatheGeometry: LatheGeometry,
	LatheBufferGeometry: LatheBufferGeometry,
	ShapeGeometry: ShapeGeometry,
	ShapeBufferGeometry: ShapeBufferGeometry,
	ExtrudeGeometry: ExtrudeGeometry,
	ExtrudeBufferGeometry: ExtrudeBufferGeometry,
	EdgesGeometry: EdgesGeometry,
	ConeGeometry: ConeGeometry,
	ConeBufferGeometry: ConeBufferGeometry,
	CylinderGeometry: CylinderGeometry,
	CylinderBufferGeometry: CylinderBufferGeometry,
	CircleGeometry: CircleGeometry,
	CircleBufferGeometry: CircleBufferGeometry,
	BoxGeometry: BoxGeometry,
	BoxBufferGeometry: BoxBufferGeometry
});

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  color: <THREE.Color>,
 *  opacity: <float>
 * }
 */

function ShadowMaterial( parameters ) {

	Material.call( this );

	this.type = 'ShadowMaterial';

	this.color = new Color( 0x000000 );
	this.opacity = 1.0;

	this.lights = true;
	this.transparent = true;

	this.setValues( parameters );

}

ShadowMaterial.prototype = Object.create( Material.prototype );
ShadowMaterial.prototype.constructor = ShadowMaterial;

ShadowMaterial.prototype.isShadowMaterial = true;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function RawShaderMaterial( parameters ) {

	ShaderMaterial.call( this, parameters );

	this.type = 'RawShaderMaterial';

}

RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
RawShaderMaterial.prototype.constructor = RawShaderMaterial;

RawShaderMaterial.prototype.isRawShaderMaterial = true;

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshStandardMaterial( parameters ) {

	Material.call( this );

	this.defines = { 'STANDARD': '' };

	this.type = 'MeshStandardMaterial';

	this.color = new Color( 0xffffff ); // diffuse
	this.roughness = 0.5;
	this.metalness = 0.5;

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.roughnessMap = null;

	this.metalnessMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.envMapIntensity = 1.0;

	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshStandardMaterial.prototype = Object.create( Material.prototype );
MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

MeshStandardMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.defines = { 'STANDARD': '' };

	this.color.copy( source.color );
	this.roughness = source.roughness;
	this.metalness = source.metalness;

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.roughnessMap = source.roughnessMap;

	this.metalnessMap = source.metalnessMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.envMapIntensity = source.envMapIntensity;

	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  reflectivity: <float>
 * }
 */

function MeshPhysicalMaterial( parameters ) {

	MeshStandardMaterial.call( this );

	this.defines = { 'PHYSICAL': '' };

	this.type = 'MeshPhysicalMaterial';

	this.reflectivity = 0.5; // maps to F0 = 0.04

	this.clearCoat = 0.0;
	this.clearCoatRoughness = 0.0;

	this.setValues( parameters );

}

MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

MeshPhysicalMaterial.prototype.copy = function ( source ) {

	MeshStandardMaterial.prototype.copy.call( this, source );

	this.defines = { 'PHYSICAL': '' };

	this.reflectivity = source.reflectivity;

	this.clearCoat = source.clearCoat;
	this.clearCoatRoughness = source.clearCoatRoughness;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshPhongMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshPhongMaterial';

	this.color = new Color( 0xffffff ); // diffuse
	this.specular = new Color( 0x111111 );
	this.shininess = 30;

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshPhongMaterial.prototype = Object.create( Material.prototype );
MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

MeshPhongMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );
	this.specular.copy( source.specular );
	this.shininess = source.shininess;

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author takahirox / http://github.com/takahirox
 *
 * parameters = {
 *  gradientMap: new THREE.Texture( <Image> )
 * }
 */

function MeshToonMaterial( parameters ) {

	MeshPhongMaterial.call( this );

	this.defines = { 'TOON': '' };

	this.type = 'MeshToonMaterial';

	this.gradientMap = null;

	this.setValues( parameters );

}

MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
MeshToonMaterial.prototype.constructor = MeshToonMaterial;

MeshToonMaterial.prototype.isMeshToonMaterial = true;

MeshToonMaterial.prototype.copy = function ( source ) {

	MeshPhongMaterial.prototype.copy.call( this, source );

	this.gradientMap = source.gradientMap;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshNormalMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshNormalMaterial';

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false;
	this.lights = false;

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshNormalMaterial.prototype = Object.create( Material.prototype );
MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

MeshNormalMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshLambertMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshLambertMaterial';

	this.color = new Color( 0xffffff ); // diffuse

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshLambertMaterial.prototype = Object.create( Material.prototype );
MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

MeshLambertMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */

function LineDashedMaterial( parameters ) {

	LineBasicMaterial.call( this );

	this.type = 'LineDashedMaterial';

	this.scale = 1;
	this.dashSize = 3;
	this.gapSize = 1;

	this.setValues( parameters );

}

LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
LineDashedMaterial.prototype.constructor = LineDashedMaterial;

LineDashedMaterial.prototype.isLineDashedMaterial = true;

LineDashedMaterial.prototype.copy = function ( source ) {

	LineBasicMaterial.prototype.copy.call( this, source );

	this.scale = source.scale;
	this.dashSize = source.dashSize;
	this.gapSize = source.gapSize;

	return this;

};



var Materials = Object.freeze({
	ShadowMaterial: ShadowMaterial,
	SpriteMaterial: SpriteMaterial,
	RawShaderMaterial: RawShaderMaterial,
	ShaderMaterial: ShaderMaterial,
	PointsMaterial: PointsMaterial,
	MeshPhysicalMaterial: MeshPhysicalMaterial,
	MeshStandardMaterial: MeshStandardMaterial,
	MeshPhongMaterial: MeshPhongMaterial,
	MeshToonMaterial: MeshToonMaterial,
	MeshNormalMaterial: MeshNormalMaterial,
	MeshLambertMaterial: MeshLambertMaterial,
	MeshDepthMaterial: MeshDepthMaterial,
	MeshDistanceMaterial: MeshDistanceMaterial,
	MeshBasicMaterial: MeshBasicMaterial,
	LineDashedMaterial: LineDashedMaterial,
	LineBasicMaterial: LineBasicMaterial,
	Material: Material
});

/**
 * @author mrdoob / http://mrdoob.com/
 */

var Cache = {

	enabled: false,

	files: {},

	add: function ( key, file ) {

		if ( this.enabled === false ) return;

		// console.log( 'THREE.Cache', 'Adding key:', key );

		this.files[ key ] = file;

	},

	get: function ( key ) {

		if ( this.enabled === false ) return;

		// console.log( 'THREE.Cache', 'Checking key:', key );

		return this.files[ key ];

	},

	remove: function ( key ) {

		delete this.files[ key ];

	},

	clear: function () {

		this.files = {};

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LoadingManager( onLoad, onProgress, onError ) {

	var scope = this;

	var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

	this.onStart = undefined;
	this.onLoad = onLoad;
	this.onProgress = onProgress;
	this.onError = onError;

	this.itemStart = function ( url ) {

		itemsTotal ++;

		if ( isLoading === false ) {

			if ( scope.onStart !== undefined ) {

				scope.onStart( url, itemsLoaded, itemsTotal );

			}

		}

		isLoading = true;

	};

	this.itemEnd = function ( url ) {

		itemsLoaded ++;

		if ( scope.onProgress !== undefined ) {

			scope.onProgress( url, itemsLoaded, itemsTotal );

		}

		if ( itemsLoaded === itemsTotal ) {

			isLoading = false;

			if ( scope.onLoad !== undefined ) {

				scope.onLoad();

			}

		}

	};

	this.itemError = function ( url ) {

		if ( scope.onError !== undefined ) {

			scope.onError( url );

		}

	};

}

var DefaultLoadingManager = new LoadingManager();

/**
 * @author mrdoob / http://mrdoob.com/
 */

function FileLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( FileLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) url = '';

		if ( this.path !== undefined ) url = this.path + url;

		var scope = this;

		var cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) onLoad( cached );

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		// Check for data: URI
		var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
		var dataUriRegexResult = url.match( dataUriRegex );

		// Safari can not handle Data URIs through XMLHttpRequest so process manually
		if ( dataUriRegexResult ) {

			var mimeType = dataUriRegexResult[ 1 ];
			var isBase64 = !! dataUriRegexResult[ 2 ];
			var data = dataUriRegexResult[ 3 ];

			data = window.decodeURIComponent( data );

			if ( isBase64 ) data = window.atob( data );

			try {

				var response;
				var responseType = ( this.responseType || '' ).toLowerCase();

				switch ( responseType ) {

					case 'arraybuffer':
					case 'blob':

					 	response = new ArrayBuffer( data.length );

						var view = new Uint8Array( response );

						for ( var i = 0; i < data.length; i ++ ) {

							view[ i ] = data.charCodeAt( i );

						}

						if ( responseType === 'blob' ) {

							response = new Blob( [ response ], { type: mimeType } );

						}

						break;

					case 'document':

						var parser = new DOMParser();
						response = parser.parseFromString( data, mimeType );

						break;

					case 'json':

						response = JSON.parse( data );

						break;

					default: // 'text' or other

						response = data;

						break;

				}

				// Wait for next browser tick
				window.setTimeout( function () {

					if ( onLoad ) onLoad( response );

					scope.manager.itemEnd( url );

				}, 0 );

			} catch ( error ) {

				// Wait for next browser tick
				window.setTimeout( function () {

					if ( onError ) onError( error );

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}, 0 );

			}

		} else {

			var request = new XMLHttpRequest();
			request.open( 'GET', url, true );

			request.addEventListener( 'load', function ( event ) {

				var response = event.target.response;

				Cache.add( url, response );

				if ( this.status === 200 ) {

					if ( onLoad ) onLoad( response );

					scope.manager.itemEnd( url );

				} else if ( this.status === 0 ) {

					// Some browsers return HTTP Status 0 when using non-http protocol
					// e.g. 'file://' or 'data://'. Handle as success.

					console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

					if ( onLoad ) onLoad( response );

					scope.manager.itemEnd( url );

				} else {

					if ( onError ) onError( event );

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}

			}, false );

			if ( onProgress !== undefined ) {

				request.addEventListener( 'progress', function ( event ) {

					onProgress( event );

				}, false );

			}

			request.addEventListener( 'error', function ( event ) {

				if ( onError ) onError( event );

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			}, false );

			if ( this.responseType !== undefined ) request.responseType = this.responseType;
			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

			if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );

			for ( var header in this.requestHeader ) {

				request.setRequestHeader( header, this.requestHeader[ header ] );

			}

			request.send( null );

		}

		scope.manager.itemStart( url );

		return request;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	},

	setResponseType: function ( value ) {

		this.responseType = value;
		return this;

	},

	setWithCredentials: function ( value ) {

		this.withCredentials = value;
		return this;

	},

	setMimeType: function ( value ) {

		this.mimeType = value;
		return this;

	},

	setRequestHeader: function ( value ) {

		this.requestHeader = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 */

function CompressedTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	// override in sub classes
	this._parser = null;

}

Object.assign( CompressedTextureLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var images = [];

		var texture = new CompressedTexture();
		texture.image = images;

		var loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.setResponseType( 'arraybuffer' );

		function loadTexture( i ) {

			loader.load( url[ i ], function ( buffer ) {

				var texDatas = scope._parser( buffer, true );

				images[ i ] = {
					width: texDatas.width,
					height: texDatas.height,
					format: texDatas.format,
					mipmaps: texDatas.mipmaps
				};

				loaded += 1;

				if ( loaded === 6 ) {

					if ( texDatas.mipmapCount === 1 )
						texture.minFilter = LinearFilter;

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}

			}, onProgress, onError );

		}

		if ( Array.isArray( url ) ) {

			var loaded = 0;

			for ( var i = 0, il = url.length; i < il; ++ i ) {

				loadTexture( i );

			}

		} else {

			// compressed cubemap texture stored in a single DDS file

			loader.load( url, function ( buffer ) {

				var texDatas = scope._parser( buffer, true );

				if ( texDatas.isCubemap ) {

					var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

					for ( var f = 0; f < faces; f ++ ) {

						images[ f ] = { mipmaps : [] };

						for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
							images[ f ].format = texDatas.format;
							images[ f ].width = texDatas.width;
							images[ f ].height = texDatas.height;

						}

					}

				} else {

					texture.image.width = texDatas.width;
					texture.image.height = texDatas.height;
					texture.mipmaps = texDatas.mipmaps;

				}

				if ( texDatas.mipmapCount === 1 ) {

					texture.minFilter = LinearFilter;

				}

				texture.format = texDatas.format;
				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture );

			}, onProgress, onError );

		}

		return texture;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author Nikos M. / https://github.com/foo123/
 *
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 */

function DataTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	// override in sub classes
	this._parser = null;

}

Object.assign( DataTextureLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var texture = new DataTexture();

		var loader = new FileLoader( this.manager );
		loader.setResponseType( 'arraybuffer' );

		loader.load( url, function ( buffer ) {

			var texData = scope._parser( buffer );

			if ( ! texData ) return;

			if ( undefined !== texData.image ) {

				texture.image = texData.image;

			} else if ( undefined !== texData.data ) {

				texture.image.width = texData.width;
				texture.image.height = texData.height;
				texture.image.data = texData.data;

			}

			texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
			texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

			texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
			texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

			texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

			if ( undefined !== texData.format ) {

				texture.format = texData.format;

			}
			if ( undefined !== texData.type ) {

				texture.type = texData.type;

			}

			if ( undefined !== texData.mipmaps ) {

				texture.mipmaps = texData.mipmaps;

			}

			if ( 1 === texData.mipmapCount ) {

				texture.minFilter = LinearFilter;

			}

			texture.needsUpdate = true;

			if ( onLoad ) onLoad( texture, texData );

		}, onProgress, onError );


		return texture;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ImageLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( ImageLoader.prototype, {

	crossOrigin: 'Anonymous',

	load: function ( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) url = '';

		if ( this.path !== undefined ) url = this.path + url;

		var scope = this;

		var cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) onLoad( cached );

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

		image.addEventListener( 'load', function () {

			Cache.add( url, this );

			if ( onLoad ) onLoad( this );

			scope.manager.itemEnd( url );

		}, false );

		/*
		image.addEventListener( 'progress', function ( event ) {

			if ( onProgress ) onProgress( event );

		}, false );
		*/

		image.addEventListener( 'error', function ( event ) {

			if ( onError ) onError( event );

			scope.manager.itemEnd( url );
			scope.manager.itemError( url );

		}, false );

		if ( url.substr( 0, 5 ) !== 'data:' ) {

			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

		}

		scope.manager.itemStart( url );

		image.src = url;

		return image;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CubeTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( CubeTextureLoader.prototype, {

	crossOrigin: 'Anonymous',

	load: function ( urls, onLoad, onProgress, onError ) {

		var texture = new CubeTexture();

		var loader = new ImageLoader( this.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.setPath( this.path );

		var loaded = 0;

		function loadTexture( i ) {

			loader.load( urls[ i ], function ( image ) {

				texture.images[ i ] = image;

				loaded ++;

				if ( loaded === 6 ) {

					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}

			}, undefined, onError );

		}

		for ( var i = 0; i < urls.length; ++ i ) {

			loadTexture( i );

		}

		return texture;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function TextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( TextureLoader.prototype, {

	crossOrigin: 'Anonymous',

	load: function ( url, onLoad, onProgress, onError ) {

		var loader = new ImageLoader( this.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.setPath( this.path );

		var texture = new Texture();
		texture.image = loader.load( url, function () {

			// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
			var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

			texture.format = isJPEG ? RGBFormat : RGBAFormat;
			texture.needsUpdate = true;

			if ( onLoad !== undefined ) {

				onLoad( texture );

			}

		}, onProgress, onError );

		return texture;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Light( color, intensity ) {

	Object3D.call( this );

	this.type = 'Light';

	this.color = new Color( color );
	this.intensity = intensity !== undefined ? intensity : 1;

	this.receiveShadow = undefined;

}

Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Light,

	isLight: true,

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.intensity = source.intensity;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.color = this.color.getHex();
		data.object.intensity = this.intensity;

		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

		if ( this.distance !== undefined ) data.object.distance = this.distance;
		if ( this.angle !== undefined ) data.object.angle = this.angle;
		if ( this.decay !== undefined ) data.object.decay = this.decay;
		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

		return data;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function HemisphereLight( skyColor, groundColor, intensity ) {

	Light.call( this, skyColor, intensity );

	this.type = 'HemisphereLight';

	this.castShadow = undefined;

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.groundColor = new Color( groundColor );

}

HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: HemisphereLight,

	isHemisphereLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.groundColor.copy( source.groundColor );

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LightShadow( camera ) {

	this.camera = camera;

	this.bias = 0;
	this.radius = 1;

	this.mapSize = new Vector2( 512, 512 );

	this.map = null;
	this.matrix = new Matrix4();

}

Object.assign( LightShadow.prototype, {

	copy: function ( source ) {

		this.camera = source.camera.clone();

		this.bias = source.bias;
		this.radius = source.radius;

		this.mapSize.copy( source.mapSize );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	toJSON: function () {

		var object = {};

		if ( this.bias !== 0 ) object.bias = this.bias;
		if ( this.radius !== 1 ) object.radius = this.radius;
		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

		object.camera = this.camera.toJSON( false ).object;
		delete object.camera.matrix;

		return object;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function SpotLightShadow() {

	LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

}

SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

	constructor: SpotLightShadow,

	isSpotLightShadow: true,

	update: function ( light ) {

		var camera = this.camera;

		var fov = _Math.RAD2DEG * 2 * light.angle;
		var aspect = this.mapSize.width / this.mapSize.height;
		var far = light.distance || camera.far;

		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

			camera.fov = fov;
			camera.aspect = aspect;
			camera.far = far;
			camera.updateProjectionMatrix();

		}

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

	Light.call( this, color, intensity );

	this.type = 'SpotLight';

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.target = new Object3D();

	Object.defineProperty( this, 'power', {
		get: function () {
			// intensity = power per solid angle.
			// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			return this.intensity * Math.PI;
		},
		set: function ( power ) {
			// intensity = power per solid angle.
			// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			this.intensity = power / Math.PI;
		}
	} );

	this.distance = ( distance !== undefined ) ? distance : 0;
	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
	this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

	this.shadow = new SpotLightShadow();

}

SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: SpotLight,

	isSpotLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.angle = source.angle;
		this.penumbra = source.penumbra;
		this.decay = source.decay;

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */


function PointLight( color, intensity, distance, decay ) {

	Light.call( this, color, intensity );

	this.type = 'PointLight';

	Object.defineProperty( this, 'power', {
		get: function () {
			// intensity = power per solid angle.
			// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			return this.intensity * 4 * Math.PI;

		},
		set: function ( power ) {
			// intensity = power per solid angle.
			// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			this.intensity = power / ( 4 * Math.PI );
		}
	} );

	this.distance = ( distance !== undefined ) ? distance : 0;
	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

	this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

}

PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: PointLight,

	isPointLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.decay = source.decay;

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function DirectionalLightShadow( ) {

	LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

}

DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

	constructor: DirectionalLightShadow

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function DirectionalLight( color, intensity ) {

	Light.call( this, color, intensity );

	this.type = 'DirectionalLight';

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.target = new Object3D();

	this.shadow = new DirectionalLightShadow();

}

DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: DirectionalLight,

	isDirectionalLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AmbientLight( color, intensity ) {

	Light.call( this, color, intensity );

	this.type = 'AmbientLight';

	this.castShadow = undefined;

}

AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: AmbientLight,

	isAmbientLight: true

} );

/**
 * @author abelnation / http://github.com/abelnation
 */

function RectAreaLight( color, intensity, width, height ) {

	Light.call( this, color, intensity );

	this.type = 'RectAreaLight';

	this.position.set( 0, 1, 0 );
	this.updateMatrix();

	this.width = ( width !== undefined ) ? width : 10;
	this.height = ( height !== undefined ) ? height : 10;

	// TODO (abelnation): distance/decay

	// TODO (abelnation): update method for RectAreaLight to update transform to lookat target

	// TODO (abelnation): shadows

}

// TODO (abelnation): RectAreaLight update when light shape is changed
RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: RectAreaLight,

	isRectAreaLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.width = source.width;
		this.height = source.height;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Light.prototype.toJSON.call( this, meta );

		data.object.width = this.width;
		data.object.height = this.height;

		return data;

	}

} );

/**
 * @author tschw
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */

var AnimationUtils = {

	// same as Array.prototype.slice, but also works on typed arrays
	arraySlice: function ( array, from, to ) {

		if ( AnimationUtils.isTypedArray( array ) ) {

			// in ios9 array.subarray(from, undefined) will return empty array
			// but array.subarray(from) or array.subarray(from, len) is correct
			return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

		}

		return array.slice( from, to );

	},

	// converts an array to a specific type
	convertArray: function ( array, type, forceClone ) {

		if ( ! array || // let 'undefined' and 'null' pass
				! forceClone && array.constructor === type ) return array;

		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

			return new type( array ); // create typed array

		}

		return Array.prototype.slice.call( array ); // create Array

	},

	isTypedArray: function ( object ) {

		return ArrayBuffer.isView( object ) &&
				! ( object instanceof DataView );

	},

	// returns an array by which times and values can be sorted
	getKeyframeOrder: function ( times ) {

		function compareTime( i, j ) {

			return times[ i ] - times[ j ];

		}

		var n = times.length;
		var result = new Array( n );
		for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

		result.sort( compareTime );

		return result;

	},

	// uses the array previously returned by 'getKeyframeOrder' to sort data
	sortedArray: function ( values, stride, order ) {

		var nValues = values.length;
		var result = new values.constructor( nValues );

		for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

			var srcOffset = order[ i ] * stride;

			for ( var j = 0; j !== stride; ++ j ) {

				result[ dstOffset ++ ] = values[ srcOffset + j ];

			}

		}

		return result;

	},

	// function for parsing AOS keyframe formats
	flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

		var i = 1, key = jsonKeys[ 0 ];

		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

			key = jsonKeys[ i ++ ];

		}

		if ( key === undefined ) return; // no data

		var value = key[ valuePropertyName ];
		if ( value === undefined ) return; // no data

		if ( Array.isArray( value ) ) {

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					values.push.apply( values, value ); // push all elements

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		} else if ( value.toArray !== undefined ) {

			// ...assume THREE.Math-ish

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					value.toArray( values, values.length );

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		} else {

			// otherwise push as-is

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					values.push( value );

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		}

	}

};

/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 * @author tschw
 */

function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	this.parameterPositions = parameterPositions;
	this._cachedIndex = 0;

	this.resultBuffer = resultBuffer !== undefined ?
			resultBuffer : new sampleValues.constructor( sampleSize );
	this.sampleValues = sampleValues;
	this.valueSize = sampleSize;

}

Object.assign( Interpolant.prototype, {

	evaluate: function( t ) {

		var pp = this.parameterPositions,
			i1 = this._cachedIndex,

			t1 = pp[   i1   ],
			t0 = pp[ i1 - 1 ];

		validate_interval: {

			seek: {

				var right;

				linear_scan: {
					//- See http://jsperf.com/comparison-to-undefined/3
					//- slower code:
					//-
					//- 				if ( t >= t1 || t1 === undefined ) {
					forward_scan: if ( ! ( t < t1 ) ) {

						for ( var giveUpAt = i1 + 2; ;) {

							if ( t1 === undefined ) {

								if ( t < t0 ) break forward_scan;

								// after end

								i1 = pp.length;
								this._cachedIndex = i1;
								return this.afterEnd_( i1 - 1, t, t0 );

							}

							if ( i1 === giveUpAt ) break; // this loop

							t0 = t1;
							t1 = pp[ ++ i1 ];

							if ( t < t1 ) {

								// we have arrived at the sought interval
								break seek;

							}

						}

						// prepare binary search on the right side of the index
						right = pp.length;
						break linear_scan;

					}

					//- slower code:
					//-					if ( t < t0 || t0 === undefined ) {
					if ( ! ( t >= t0 ) ) {

						// looping?

						var t1global = pp[ 1 ];

						if ( t < t1global ) {

							i1 = 2; // + 1, using the scan for the details
							t0 = t1global;

						}

						// linear reverse scan

						for ( var giveUpAt = i1 - 2; ;) {

							if ( t0 === undefined ) {

								// before start

								this._cachedIndex = 0;
								return this.beforeStart_( 0, t, t1 );

							}

							if ( i1 === giveUpAt ) break; // this loop

							t1 = t0;
							t0 = pp[ -- i1 - 1 ];

							if ( t >= t0 ) {

								// we have arrived at the sought interval
								break seek;

							}

						}

						// prepare binary search on the left side of the index
						right = i1;
						i1 = 0;
						break linear_scan;

					}

					// the interval is valid

					break validate_interval;

				} // linear scan

				// binary search

				while ( i1 < right ) {

					var mid = ( i1 + right ) >>> 1;

					if ( t < pp[ mid ] ) {

						right = mid;

					} else {

						i1 = mid + 1;

					}

				}

				t1 = pp[   i1   ];
				t0 = pp[ i1 - 1 ];

				// check boundary cases, again

				if ( t0 === undefined ) {

					this._cachedIndex = 0;
					return this.beforeStart_( 0, t, t1 );

				}

				if ( t1 === undefined ) {

					i1 = pp.length;
					this._cachedIndex = i1;
					return this.afterEnd_( i1 - 1, t0, t );

				}

			} // seek

			this._cachedIndex = i1;

			this.intervalChanged_( i1, t0, t1 );

		} // validate_interval

		return this.interpolate_( i1, t0, t, t1 );

	},

	settings: null, // optional, subclass-specific settings structure
	// Note: The indirection allows central control of many interpolants.

	// --- Protected interface

	DefaultSettings_: {},

	getSettings_: function() {

		return this.settings || this.DefaultSettings_;

	},

	copySampleValue_: function( index ) {

		// copies a sample value to the result buffer

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,
			offset = index * stride;

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] = values[ offset + i ];

		}

		return result;

	},

	// Template methods for derived classes:

	interpolate_: function( i1, t0, t, t1 ) {

		throw new Error( "call to abstract method" );
		// implementations shall return this.resultBuffer

	},

	intervalChanged_: function( i1, t0, t1 ) {

		// empty

	}

} );

//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign( Interpolant.prototype, {

	//( 0, t, t0 ), returns this.resultBuffer
	beforeStart_: Interpolant.prototype.copySampleValue_,

	//( N-1, tN-1, t ), returns this.resultBuffer
	afterEnd_: Interpolant.prototype.copySampleValue_,

} );

/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 *
 * @author tschw
 */

function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call(
			this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	this._weightPrev = -0;
	this._offsetPrev = -0;
	this._weightNext = -0;
	this._offsetNext = -0;

}

CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: CubicInterpolant,

	DefaultSettings_: {

		endingStart: 	ZeroCurvatureEnding,
		endingEnd:		ZeroCurvatureEnding

	},

	intervalChanged_: function( i1, t0, t1 ) {

		var pp = this.parameterPositions,
			iPrev = i1 - 2,
			iNext = i1 + 1,

			tPrev = pp[ iPrev ],
			tNext = pp[ iNext ];

		if ( tPrev === undefined ) {

			switch ( this.getSettings_().endingStart ) {

				case ZeroSlopeEnding:

					// f'(t0) = 0
					iPrev = i1;
					tPrev = 2 * t0 - t1;

					break;

				case WrapAroundEnding:

					// use the other end of the curve
					iPrev = pp.length - 2;
					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

					break;

				default: // ZeroCurvatureEnding

					// f''(t0) = 0 a.k.a. Natural Spline
					iPrev = i1;
					tPrev = t1;

			}

		}

		if ( tNext === undefined ) {

			switch ( this.getSettings_().endingEnd ) {

				case ZeroSlopeEnding:

					// f'(tN) = 0
					iNext = i1;
					tNext = 2 * t1 - t0;

					break;

				case WrapAroundEnding:

					// use the other end of the curve
					iNext = 1;
					tNext = t1 + pp[ 1 ] - pp[ 0 ];

					break;

				default: // ZeroCurvatureEnding

					// f''(tN) = 0, a.k.a. Natural Spline
					iNext = i1 - 1;
					tNext = t0;

			}

		}

		var halfDt = ( t1 - t0 ) * 0.5,
			stride = this.valueSize;

		this._weightPrev = halfDt / ( t0 - tPrev );
		this._weightNext = halfDt / ( tNext - t1 );
		this._offsetPrev = iPrev * stride;
		this._offsetNext = iNext * stride;

	},

	interpolate_: function( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			o1 = i1 * stride,		o0 = o1 - stride,
			oP = this._offsetPrev, 	oN = this._offsetNext,
			wP = this._weightPrev,	wN = this._weightNext,

			p = ( t - t0 ) / ( t1 - t0 ),
			pp = p * p,
			ppp = pp * p;

		// evaluate polynomials

		var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
		var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
		var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
		var sN =       wN   * ppp   -           wN      * pp;

		// combine data linearly

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] =
					sP * values[ oP + i ] +
					s0 * values[ o0 + i ] +
					s1 * values[ o1 + i ] +
					sN * values[ oN + i ];

		}

		return result;

	}

} );

/**
 * @author tschw
 */

function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: LinearInterpolant,

	interpolate_: function( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			offset1 = i1 * stride,
			offset0 = offset1 - stride,

			weight1 = ( t - t0 ) / ( t1 - t0 ),
			weight0 = 1 - weight1;

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] =
					values[ offset0 + i ] * weight0 +
					values[ offset1 + i ] * weight1;

		}

		return result;

	}

} );

/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 *
 * @author tschw
 */

function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: DiscreteInterpolant,

	interpolate_: function( i1, t0, t, t1 ) {

		return this.copySampleValue_( i1 - 1 );

	}

} );

var KeyframeTrackPrototype;

KeyframeTrackPrototype = {

	TimeBufferType: Float32Array,
	ValueBufferType: Float32Array,

	DefaultInterpolation: InterpolateLinear,

	InterpolantFactoryMethodDiscrete: function ( result ) {

		return new DiscreteInterpolant(
				this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodLinear: function ( result ) {

		return new LinearInterpolant(
				this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodSmooth: function ( result ) {

		return new CubicInterpolant(
				this.times, this.values, this.getValueSize(), result );

	},

	setInterpolation: function ( interpolation ) {

		var factoryMethod;

		switch ( interpolation ) {

			case InterpolateDiscrete:

				factoryMethod = this.InterpolantFactoryMethodDiscrete;

				break;

			case InterpolateLinear:

				factoryMethod = this.InterpolantFactoryMethodLinear;

				break;

			case InterpolateSmooth:

				factoryMethod = this.InterpolantFactoryMethodSmooth;

				break;

		}

		if ( factoryMethod === undefined ) {

			var message = "unsupported interpolation for " +
					this.ValueTypeName + " keyframe track named " + this.name;

			if ( this.createInterpolant === undefined ) {

				// fall back to default, unless the default itself is messed up
				if ( interpolation !== this.DefaultInterpolation ) {

					this.setInterpolation( this.DefaultInterpolation );

				} else {

					throw new Error( message ); // fatal, in this case

				}

			}

			console.warn( 'THREE.KeyframeTrackPrototype:', message );
			return;

		}

		this.createInterpolant = factoryMethod;

	},

	getInterpolation: function () {

		switch ( this.createInterpolant ) {

			case this.InterpolantFactoryMethodDiscrete:

				return InterpolateDiscrete;

			case this.InterpolantFactoryMethodLinear:

				return InterpolateLinear;

			case this.InterpolantFactoryMethodSmooth:

				return InterpolateSmooth;

		}

	},

	getValueSize: function () {

		return this.values.length / this.times.length;

	},

	// move all keyframes either forwards or backwards in time
	shift: function ( timeOffset ) {

		if ( timeOffset !== 0.0 ) {

			var times = this.times;

			for ( var i = 0, n = times.length; i !== n; ++ i ) {

				times[ i ] += timeOffset;

			}

		}

		return this;

	},

	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
	scale: function ( timeScale ) {

		if ( timeScale !== 1.0 ) {

			var times = this.times;

			for ( var i = 0, n = times.length; i !== n; ++ i ) {

				times[ i ] *= timeScale;

			}

		}

		return this;

	},

	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
	trim: function ( startTime, endTime ) {

		var times = this.times,
			nKeys = times.length,
			from = 0,
			to = nKeys - 1;

		while ( from !== nKeys && times[ from ] < startTime ) ++ from;
		while ( to !== - 1 && times[ to ] > endTime ) -- to;

		++ to; // inclusive -> exclusive bound

		if ( from !== 0 || to !== nKeys ) {

			// empty tracks are forbidden, so keep at least one keyframe
			if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;

			var stride = this.getValueSize();
			this.times = AnimationUtils.arraySlice( times, from, to );
			this.values = AnimationUtils.
					arraySlice( this.values, from * stride, to * stride );

		}

		return this;

	},

	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
	validate: function () {

		var valid = true;

		var valueSize = this.getValueSize();
		if ( valueSize - Math.floor( valueSize ) !== 0 ) {

			console.error( 'THREE.KeyframeTrackPrototype: Invalid value size in track.', this );
			valid = false;

		}

		var times = this.times,
			values = this.values,

			nKeys = times.length;

		if ( nKeys === 0 ) {

			console.error( 'THREE.KeyframeTrackPrototype: Track is empty.', this );
			valid = false;

		}

		var prevTime = null;

		for ( var i = 0; i !== nKeys; i ++ ) {

			var currTime = times[ i ];

			if ( typeof currTime === 'number' && isNaN( currTime ) ) {

				console.error( 'THREE.KeyframeTrackPrototype: Time is not a valid number.', this, i, currTime );
				valid = false;
				break;

			}

			if ( prevTime !== null && prevTime > currTime ) {

				console.error( 'THREE.KeyframeTrackPrototype: Out of order keys.', this, i, currTime, prevTime );
				valid = false;
				break;

			}

			prevTime = currTime;

		}

		if ( values !== undefined ) {

			if ( AnimationUtils.isTypedArray( values ) ) {

				for ( var i = 0, n = values.length; i !== n; ++ i ) {

					var value = values[ i ];

					if ( isNaN( value ) ) {

						console.error( 'THREE.KeyframeTrackPrototype: Value is not a valid number.', this, i, value );
						valid = false;
						break;

					}

				}

			}

		}

		return valid;

	},

	// removes equivalent sequential keys as common in morph target sequences
	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
	optimize: function () {

		var times = this.times,
			values = this.values,
			stride = this.getValueSize(),

			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

			writeIndex = 1,
			lastIndex = times.length - 1;

		for ( var i = 1; i < lastIndex; ++ i ) {

			var keep = false;

			var time = times[ i ];
			var timeNext = times[ i + 1 ];

			// remove adjacent keyframes scheduled at the same time

			if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

				if ( ! smoothInterpolation ) {

					// remove unnecessary keyframes same as their neighbors

					var offset = i * stride,
						offsetP = offset - stride,
						offsetN = offset + stride;

					for ( var j = 0; j !== stride; ++ j ) {

						var value = values[ offset + j ];

						if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {

							keep = true;
							break;

						}

					}

				} else keep = true;

			}

			// in-place compaction

			if ( keep ) {

				if ( i !== writeIndex ) {

					times[ writeIndex ] = times[ i ];

					var readOffset = i * stride,
						writeOffset = writeIndex * stride;

					for ( var j = 0; j !== stride; ++ j )

						values[ writeOffset + j ] = values[ readOffset + j ];

				}

				++ writeIndex;

			}

		}

		// flush last keyframe (compaction looks ahead)

		if ( lastIndex > 0 ) {

			times[ writeIndex ] = times[ lastIndex ];

			for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )

				values[ writeOffset + j ] = values[ readOffset + j ];

			++ writeIndex;

		}

		if ( writeIndex !== times.length ) {

			this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
			this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

		}

		return this;

	}

};

function KeyframeTrackConstructor( name, times, values, interpolation ) {

	if ( name === undefined ) throw new Error( "track name is undefined" );

	if ( times === undefined || times.length === 0 ) {

		throw new Error( "no keyframes in track named " + name );

	}

	this.name = name;

	this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
	this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

	this.setInterpolation( interpolation || this.DefaultInterpolation );

	this.validate();
	this.optimize();

}

/**
 *
 * A Track of vectored keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function VectorKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

VectorKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: VectorKeyframeTrack,

	ValueTypeName: 'vector'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited

} );

/**
 * Spherical linear unit quaternion interpolant.
 *
 * @author tschw
 */

function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: QuaternionLinearInterpolant,

	interpolate_: function( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			offset = i1 * stride,

			alpha = ( t - t0 ) / ( t1 - t0 );

		for ( var end = offset + stride; offset !== end; offset += 4 ) {

			Quaternion.slerpFlat( result, 0,
					values, offset - stride, values, offset, alpha );

		}

		return result;

	}

} );

/**
 *
 * A Track of quaternion keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function QuaternionKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

QuaternionKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: QuaternionKeyframeTrack,

	ValueTypeName: 'quaternion',

	// ValueBufferType is inherited

	DefaultInterpolation: InterpolateLinear,

	InterpolantFactoryMethodLinear: function( result ) {

		return new QuaternionLinearInterpolant(
				this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodSmooth: undefined // not yet implemented

} );

/**
 *
 * A Track of numeric keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function NumberKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

NumberKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: NumberKeyframeTrack,

	ValueTypeName: 'number'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited

} );

/**
 *
 * A Track that interpolates Strings
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function StringKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

StringKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: StringKeyframeTrack,

	ValueTypeName: 'string',
	ValueBufferType: Array,

	DefaultInterpolation: InterpolateDiscrete,

	InterpolantFactoryMethodLinear: undefined,

	InterpolantFactoryMethodSmooth: undefined

} );

/**
 *
 * A Track of Boolean keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function BooleanKeyframeTrack( name, times, values ) {

	KeyframeTrackConstructor.call( this, name, times, values );

}

BooleanKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: BooleanKeyframeTrack,

	ValueTypeName: 'bool',
	ValueBufferType: Array,

	DefaultInterpolation: InterpolateDiscrete,

	InterpolantFactoryMethodLinear: undefined,
	InterpolantFactoryMethodSmooth: undefined

	// Note: Actually this track could have a optimized / compressed
	// representation of a single value and a custom interpolant that
	// computes "firstValue ^ isOdd( index )".

} );

/**
 *
 * A Track of keyframe values that represent color.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function ColorKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

ColorKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: ColorKeyframeTrack,

	ValueTypeName: 'color'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited


	// Note: Very basic implementation and nothing special yet.
	// However, this is the place for color space parameterization.

} );

/**
 *
 * A timed sequence of keyframes for a specific property.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function KeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.apply( this, arguments );

}

KeyframeTrack.prototype = KeyframeTrackPrototype;
KeyframeTrackPrototype.constructor = KeyframeTrack;

// Static methods:

Object.assign( KeyframeTrack, {

	// Serialization (in static context, because of constructor invocation
	// and automatic invocation of .toJSON):

	parse: function( json ) {

		if( json.type === undefined ) {

			throw new Error( "track type undefined, can not parse" );

		}

		var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );

		if ( json.times === undefined ) {

			var times = [], values = [];

			AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

			json.times = times;
			json.values = values;

		}

		// derived classes can define a static parse method
		if ( trackType.parse !== undefined ) {

			return trackType.parse( json );

		} else {

			// by default, we assume a constructor compatible with the base
			return new trackType(
					json.name, json.times, json.values, json.interpolation );

		}

	},

	toJSON: function( track ) {

		var trackType = track.constructor;

		var json;

		// derived classes can define a static toJSON method
		if ( trackType.toJSON !== undefined ) {

			json = trackType.toJSON( track );

		} else {

			// by default, we assume the data can be serialized as-is
			json = {

				'name': track.name,
				'times': AnimationUtils.convertArray( track.times, Array ),
				'values': AnimationUtils.convertArray( track.values, Array )

			};

			var interpolation = track.getInterpolation();

			if ( interpolation !== track.DefaultInterpolation ) {

				json.interpolation = interpolation;

			}

		}

		json.type = track.ValueTypeName; // mandatory

		return json;

	},

	_getTrackTypeForValueTypeName: function( typeName ) {

		switch( typeName.toLowerCase() ) {

			case "scalar":
			case "double":
			case "float":
			case "number":
			case "integer":

				return NumberKeyframeTrack;

			case "vector":
			case "vector2":
			case "vector3":
			case "vector4":

				return VectorKeyframeTrack;

			case "color":

				return ColorKeyframeTrack;

			case "quaternion":

				return QuaternionKeyframeTrack;

			case "bool":
			case "boolean":

				return BooleanKeyframeTrack;

			case "string":

				return StringKeyframeTrack;

		}

		throw new Error( "Unsupported typeName: " + typeName );

	}

} );

/**
 *
 * Reusable set of Tracks that represent an animation.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */

function AnimationClip( name, duration, tracks ) {

	this.name = name;
	this.tracks = tracks;
	this.duration = ( duration !== undefined ) ? duration : - 1;

	this.uuid = _Math.generateUUID();

	// this means it should figure out its duration by scanning the tracks
	if ( this.duration < 0 ) {

		this.resetDuration();

	}

	this.optimize();

}

Object.assign( AnimationClip, {

	parse: function ( json ) {

		var tracks = [],
			jsonTracks = json.tracks,
			frameTime = 1.0 / ( json.fps || 1.0 );

		for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

			tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

		}

		return new AnimationClip( json.name, json.duration, tracks );

	},

	toJSON: function ( clip ) {

		var tracks = [],
			clipTracks = clip.tracks;

		var json = {

			'name': clip.name,
			'duration': clip.duration,
			'tracks': tracks

		};

		for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

		}

		return json;

	},

	CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

		var numMorphTargets = morphTargetSequence.length;
		var tracks = [];

		for ( var i = 0; i < numMorphTargets; i ++ ) {

			var times = [];
			var values = [];

			times.push(
					( i + numMorphTargets - 1 ) % numMorphTargets,
					i,
					( i + 1 ) % numMorphTargets );

			values.push( 0, 1, 0 );

			var order = AnimationUtils.getKeyframeOrder( times );
			times = AnimationUtils.sortedArray( times, 1, order );
			values = AnimationUtils.sortedArray( values, 1, order );

			// if there is a key at the first frame, duplicate it as the
			// last frame as well for perfect loop.
			if ( ! noLoop && times[ 0 ] === 0 ) {

				times.push( numMorphTargets );
				values.push( values[ 0 ] );

			}

			tracks.push(
					new NumberKeyframeTrack(
						'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
						times, values
					).scale( 1.0 / fps ) );

		}

		return new AnimationClip( name, - 1, tracks );

	},

	findByName: function ( objectOrClipArray, name ) {

		var clipArray = objectOrClipArray;

		if ( ! Array.isArray( objectOrClipArray ) ) {

			var o = objectOrClipArray;
			clipArray = o.geometry && o.geometry.animations || o.animations;

		}

		for ( var i = 0; i < clipArray.length; i ++ ) {

			if ( clipArray[ i ].name === name ) {

				return clipArray[ i ];

			}

		}

		return null;

	},

	CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

		var animationToMorphTargets = {};

		// tested with https://regex101.com/ on trick sequences
		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
		var pattern = /^([\w-]*?)([\d]+)$/;

		// sort morph target names into animation groups based
		// patterns like Walk_001, Walk_002, Run_001, Run_002
		for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

			var morphTarget = morphTargets[ i ];
			var parts = morphTarget.name.match( pattern );

			if ( parts && parts.length > 1 ) {

				var name = parts[ 1 ];

				var animationMorphTargets = animationToMorphTargets[ name ];
				if ( ! animationMorphTargets ) {

					animationToMorphTargets[ name ] = animationMorphTargets = [];

				}

				animationMorphTargets.push( morphTarget );

			}

		}

		var clips = [];

		for ( var name in animationToMorphTargets ) {

			clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

		}

		return clips;

	},

	// parse the animation.hierarchy format
	parseAnimation: function ( animation, bones ) {

		if ( ! animation ) {

			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
			return null;

		}

		var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

			// only return track if there are actually keys.
			if ( animationKeys.length !== 0 ) {

				var times = [];
				var values = [];

				AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

				// empty keys are filtered out, so check again
				if ( times.length !== 0 ) {

					destTracks.push( new trackType( trackName, times, values ) );

				}

			}

		};

		var tracks = [];

		var clipName = animation.name || 'default';
		// automatic length determination in AnimationClip.
		var duration = animation.length || - 1;
		var fps = animation.fps || 30;

		var hierarchyTracks = animation.hierarchy || [];

		for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

			var animationKeys = hierarchyTracks[ h ].keys;

			// skip empty tracks
			if ( ! animationKeys || animationKeys.length === 0 ) continue;

			// process morph targets
			if ( animationKeys[ 0 ].morphTargets ) {

				// figure out all morph targets used in this track
				var morphTargetNames = {};

				for ( var k = 0; k < animationKeys.length; k ++ ) {

					if ( animationKeys[ k ].morphTargets ) {

						for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

						}

					}

				}

				// create a track for each morph target with all zero
				// morphTargetInfluences except for the keys in which
				// the morphTarget is named.
				for ( var morphTargetName in morphTargetNames ) {

					var times = [];
					var values = [];

					for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

						var animationKey = animationKeys[ k ];

						times.push( animationKey.time );
						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

					}

					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

				}

				duration = morphTargetNames.length * ( fps || 1.0 );

			} else {

				// ...assume skeletal animation

				var boneName = '.bones[' + bones[ h ].name + ']';

				addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.position',
						animationKeys, 'pos', tracks );

				addNonemptyTrack(
						QuaternionKeyframeTrack, boneName + '.quaternion',
						animationKeys, 'rot', tracks );

				addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.scale',
						animationKeys, 'scl', tracks );

			}

		}

		if ( tracks.length === 0 ) {

			return null;

		}

		var clip = new AnimationClip( clipName, duration, tracks );

		return clip;

	}

} );

Object.assign( AnimationClip.prototype, {

	resetDuration: function () {

		var tracks = this.tracks, duration = 0;

		for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

			var track = this.tracks[ i ];

			duration = Math.max( duration, track.times[ track.times.length - 1 ] );

		}

		this.duration = duration;

	},

	trim: function () {

		for ( var i = 0; i < this.tracks.length; i ++ ) {

			this.tracks[ i ].trim( 0, this.duration );

		}

		return this;

	},

	optimize: function () {

		for ( var i = 0; i < this.tracks.length; i ++ ) {

			this.tracks[ i ].optimize();

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function MaterialLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	this.textures = {};

}

Object.assign( MaterialLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	setTextures: function ( value ) {

		this.textures = value;

	},

	parse: function ( json ) {

		var textures = this.textures;

		function getTexture( name ) {

			if ( textures[ name ] === undefined ) {

				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

			}

			return textures[ name ];

		}

		var material = new Materials[ json.type ]();

		if ( json.uuid !== undefined ) material.uuid = json.uuid;
		if ( json.name !== undefined ) material.name = json.name;
		if ( json.color !== undefined ) material.color.setHex( json.color );
		if ( json.roughness !== undefined ) material.roughness = json.roughness;
		if ( json.metalness !== undefined ) material.metalness = json.metalness;
		if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
		if ( json.specular !== undefined ) material.specular.setHex( json.specular );
		if ( json.shininess !== undefined ) material.shininess = json.shininess;
		if ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;
		if ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;
		if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
		if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
		if ( json.fog !== undefined ) material.fog = json.fog;
		if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
		if ( json.blending !== undefined ) material.blending = json.blending;
		if ( json.side !== undefined ) material.side = json.side;
		if ( json.opacity !== undefined ) material.opacity = json.opacity;
		if ( json.transparent !== undefined ) material.transparent = json.transparent;
		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;

		if ( json.skinning !== undefined ) material.skinning = json.skinning;
		if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
		if ( json.dithering !== undefined ) material.dithering = json.dithering;

		if ( json.visible !== undefined ) material.visible = json.visible;
		if ( json.userData !== undefined ) material.userData = json.userData;

		// Deprecated

		if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading

		// for PointsMaterial

		if ( json.size !== undefined ) material.size = json.size;
		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

		// maps

		if ( json.map !== undefined ) material.map = getTexture( json.map );

		if ( json.alphaMap !== undefined ) {

			material.alphaMap = getTexture( json.alphaMap );
			material.transparent = true;

		}

		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
		if ( json.normalScale !== undefined ) {

			var normalScale = json.normalScale;

			if ( Array.isArray( normalScale ) === false ) {

				// Blender exporter used to export a scalar. See #7459

				normalScale = [ normalScale, normalScale ];

			}

			material.normalScale = new Vector2().fromArray( normalScale );

		}

		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );

		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

		if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );

		return material;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function BufferGeometryLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( BufferGeometryLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	parse: function ( json ) {

		var geometry = new BufferGeometry();

		var index = json.data.index;

		if ( index !== undefined ) {

			var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

		}

		var attributes = json.data.attributes;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];
			var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

			geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

		}

		var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

		if ( groups !== undefined ) {

			for ( var i = 0, n = groups.length; i !== n; ++ i ) {

				var group = groups[ i ];

				geometry.addGroup( group.start, group.count, group.materialIndex );

			}

		}

		var boundingSphere = json.data.boundingSphere;

		if ( boundingSphere !== undefined ) {

			var center = new Vector3();

			if ( boundingSphere.center !== undefined ) {

				center.fromArray( boundingSphere.center );

			}

			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

		}

		return geometry;

	}

} );

var TYPED_ARRAYS = {
	Int8Array: Int8Array,
	Uint8Array: Uint8Array,
	// Workaround for IE11 pre KB2929437. See #11440
	Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
	Int16Array: Int16Array,
	Uint16Array: Uint16Array,
	Int32Array: Int32Array,
	Uint32Array: Uint32Array,
	Float32Array: Float32Array,
	Float64Array: Float64Array
};

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Loader() {

	this.onLoadStart = function () {};
	this.onLoadProgress = function () {};
	this.onLoadComplete = function () {};

}

Loader.Handlers = {

	handlers: [],

	add: function ( regex, loader ) {

		this.handlers.push( regex, loader );

	},

	get: function ( file ) {

		var handlers = this.handlers;

		for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

			var regex = handlers[ i ];
			var loader = handlers[ i + 1 ];

			if ( regex.test( file ) ) {

				return loader;

			}

		}

		return null;

	}

};

Object.assign( Loader.prototype, {

	crossOrigin: undefined,

	extractUrlBase: function ( url ) {

		var parts = url.split( '/' );

		if ( parts.length === 1 ) return './';

		parts.pop();

		return parts.join( '/' ) + '/';

	},

	initMaterials: function ( materials, texturePath, crossOrigin ) {

		var array = [];

		for ( var i = 0; i < materials.length; ++ i ) {

			array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

		}

		return array;

	},

	createMaterial: ( function () {

		var BlendingMode = {
			NoBlending: NoBlending,
			NormalBlending: NormalBlending,
			AdditiveBlending: AdditiveBlending,
			SubtractiveBlending: SubtractiveBlending,
			MultiplyBlending: MultiplyBlending,
			CustomBlending: CustomBlending
		};

		var color = new Color();
		var textureLoader = new TextureLoader();
		var materialLoader = new MaterialLoader();

		return function createMaterial( m, texturePath, crossOrigin ) {

			// convert from old material format

			var textures = {};

			function loadTexture( path, repeat, offset, wrap, anisotropy ) {

				var fullPath = texturePath + path;
				var loader = Loader.Handlers.get( fullPath );

				var texture;

				if ( loader !== null ) {

					texture = loader.load( fullPath );

				} else {

					textureLoader.setCrossOrigin( crossOrigin );
					texture = textureLoader.load( fullPath );

				}

				if ( repeat !== undefined ) {

					texture.repeat.fromArray( repeat );

					if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
					if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

				}

				if ( offset !== undefined ) {

					texture.offset.fromArray( offset );

				}

				if ( wrap !== undefined ) {

					if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
					if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

					if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
					if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

				}

				if ( anisotropy !== undefined ) {

					texture.anisotropy = anisotropy;

				}

				var uuid = _Math.generateUUID();

				textures[ uuid ] = texture;

				return uuid;

			}

			//

			var json = {
				uuid: _Math.generateUUID(),
				type: 'MeshLambertMaterial'
			};

			for ( var name in m ) {

				var value = m[ name ];

				switch ( name ) {

					case 'DbgColor':
					case 'DbgIndex':
					case 'opticalDensity':
					case 'illumination':
						break;
					case 'DbgName':
						json.name = value;
						break;
					case 'blending':
						json.blending = BlendingMode[ value ];
						break;
					case 'colorAmbient':
					case 'mapAmbient':
						console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
						break;
					case 'colorDiffuse':
						json.color = color.fromArray( value ).getHex();
						break;
					case 'colorSpecular':
						json.specular = color.fromArray( value ).getHex();
						break;
					case 'colorEmissive':
						json.emissive = color.fromArray( value ).getHex();
						break;
					case 'specularCoef':
						json.shininess = value;
						break;
					case 'shading':
						if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
						if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
						if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
						break;
					case 'mapDiffuse':
						json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
						break;
					case 'mapDiffuseRepeat':
					case 'mapDiffuseOffset':
					case 'mapDiffuseWrap':
					case 'mapDiffuseAnisotropy':
						break;
					case 'mapEmissive':
						json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
						break;
					case 'mapEmissiveRepeat':
					case 'mapEmissiveOffset':
					case 'mapEmissiveWrap':
					case 'mapEmissiveAnisotropy':
						break;
					case 'mapLight':
						json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
						break;
					case 'mapLightRepeat':
					case 'mapLightOffset':
					case 'mapLightWrap':
					case 'mapLightAnisotropy':
						break;
					case 'mapAO':
						json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
						break;
					case 'mapAORepeat':
					case 'mapAOOffset':
					case 'mapAOWrap':
					case 'mapAOAnisotropy':
						break;
					case 'mapBump':
						json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
						break;
					case 'mapBumpScale':
						json.bumpScale = value;
						break;
					case 'mapBumpRepeat':
					case 'mapBumpOffset':
					case 'mapBumpWrap':
					case 'mapBumpAnisotropy':
						break;
					case 'mapNormal':
						json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
						break;
					case 'mapNormalFactor':
						json.normalScale = [ value, value ];
						break;
					case 'mapNormalRepeat':
					case 'mapNormalOffset':
					case 'mapNormalWrap':
					case 'mapNormalAnisotropy':
						break;
					case 'mapSpecular':
						json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
						break;
					case 'mapSpecularRepeat':
					case 'mapSpecularOffset':
					case 'mapSpecularWrap':
					case 'mapSpecularAnisotropy':
						break;
					case 'mapMetalness':
						json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
						break;
					case 'mapMetalnessRepeat':
					case 'mapMetalnessOffset':
					case 'mapMetalnessWrap':
					case 'mapMetalnessAnisotropy':
						break;
					case 'mapRoughness':
						json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
						break;
					case 'mapRoughnessRepeat':
					case 'mapRoughnessOffset':
					case 'mapRoughnessWrap':
					case 'mapRoughnessAnisotropy':
						break;
					case 'mapAlpha':
						json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
						break;
					case 'mapAlphaRepeat':
					case 'mapAlphaOffset':
					case 'mapAlphaWrap':
					case 'mapAlphaAnisotropy':
						break;
					case 'flipSided':
						json.side = BackSide;
						break;
					case 'doubleSided':
						json.side = DoubleSide;
						break;
					case 'transparency':
						console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
						json.opacity = value;
						break;
					case 'depthTest':
					case 'depthWrite':
					case 'colorWrite':
					case 'opacity':
					case 'reflectivity':
					case 'transparent':
					case 'visible':
					case 'wireframe':
						json[ name ] = value;
						break;
					case 'vertexColors':
						if ( value === true ) json.vertexColors = VertexColors;
						if ( value === 'face' ) json.vertexColors = FaceColors;
						break;
					default:
						console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
						break;

				}

			}

			if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
			if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

			if ( json.opacity < 1 ) json.transparent = true;

			materialLoader.setTextures( textures );

			return materialLoader.parse( json );

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function JSONLoader( manager ) {

	if ( typeof manager === 'boolean' ) {

		console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
		manager = undefined;

	}

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	this.withCredentials = false;

}

Object.assign( JSONLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );

		var loader = new FileLoader( this.manager );
		loader.setWithCredentials( this.withCredentials );
		loader.load( url, function ( text ) {

			var json = JSON.parse( text );
			var metadata = json.metadata;

			if ( metadata !== undefined ) {

				var type = metadata.type;

				if ( type !== undefined ) {

					if ( type.toLowerCase() === 'object' ) {

						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
						return;

					}

					if ( type.toLowerCase() === 'scene' ) {

						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
						return;

					}

				}

			}

			var object = scope.parse( json, texturePath );
			onLoad( object.geometry, object.materials );

		}, onProgress, onError );

	},

	setTexturePath: function ( value ) {

		this.texturePath = value;

	},

	parse: ( function () {

		function parseModel( json, geometry ) {

			function isBitSet( value, position ) {

				return value & ( 1 << position );

			}

			var i, j, fi,

				offset, zLength,

				colorIndex, normalIndex, uvIndex, materialIndex,

				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,

				vertex, face, faceA, faceB, hex, normal,

				uvLayer, uv, u, v,

				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,

				scale = json.scale,

				nUvLayers = 0;


			if ( json.uvs !== undefined ) {

				// disregard empty arrays

				for ( i = 0; i < json.uvs.length; i ++ ) {

					if ( json.uvs[ i ].length ) nUvLayers ++;

				}

				for ( i = 0; i < nUvLayers; i ++ ) {

					geometry.faceVertexUvs[ i ] = [];

				}

			}

			offset = 0;
			zLength = vertices.length;

			while ( offset < zLength ) {

				vertex = new Vector3();

				vertex.x = vertices[ offset ++ ] * scale;
				vertex.y = vertices[ offset ++ ] * scale;
				vertex.z = vertices[ offset ++ ] * scale;

				geometry.vertices.push( vertex );

			}

			offset = 0;
			zLength = faces.length;

			while ( offset < zLength ) {

				type = faces[ offset ++ ];

				isQuad = isBitSet( type, 0 );
				hasMaterial = isBitSet( type, 1 );
				hasFaceVertexUv = isBitSet( type, 3 );
				hasFaceNormal = isBitSet( type, 4 );
				hasFaceVertexNormal = isBitSet( type, 5 );
				hasFaceColor = isBitSet( type, 6 );
				hasFaceVertexColor = isBitSet( type, 7 );

				// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

				if ( isQuad ) {

					faceA = new Face3();
					faceA.a = faces[ offset ];
					faceA.b = faces[ offset + 1 ];
					faceA.c = faces[ offset + 3 ];

					faceB = new Face3();
					faceB.a = faces[ offset + 1 ];
					faceB.b = faces[ offset + 2 ];
					faceB.c = faces[ offset + 3 ];

					offset += 4;

					if ( hasMaterial ) {

						materialIndex = faces[ offset ++ ];
						faceA.materialIndex = materialIndex;
						faceB.materialIndex = materialIndex;

					}

					// to get face <=> uv index correspondence

					fi = geometry.faces.length;

					if ( hasFaceVertexUv ) {

						for ( i = 0; i < nUvLayers; i ++ ) {

							uvLayer = json.uvs[ i ];

							geometry.faceVertexUvs[ i ][ fi ] = [];
							geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

							for ( j = 0; j < 4; j ++ ) {

								uvIndex = faces[ offset ++ ];

								u = uvLayer[ uvIndex * 2 ];
								v = uvLayer[ uvIndex * 2 + 1 ];

								uv = new Vector2( u, v );

								if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
								if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

							}

						}

					}

					if ( hasFaceNormal ) {

						normalIndex = faces[ offset ++ ] * 3;

						faceA.normal.set(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);

						faceB.normal.copy( faceA.normal );

					}

					if ( hasFaceVertexNormal ) {

						for ( i = 0; i < 4; i ++ ) {

							normalIndex = faces[ offset ++ ] * 3;

							normal = new Vector3(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);


							if ( i !== 2 ) faceA.vertexNormals.push( normal );
							if ( i !== 0 ) faceB.vertexNormals.push( normal );

						}

					}


					if ( hasFaceColor ) {

						colorIndex = faces[ offset ++ ];
						hex = colors[ colorIndex ];

						faceA.color.setHex( hex );
						faceB.color.setHex( hex );

					}


					if ( hasFaceVertexColor ) {

						for ( i = 0; i < 4; i ++ ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
							if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );

						}

					}

					geometry.faces.push( faceA );
					geometry.faces.push( faceB );

				} else {

					face = new Face3();
					face.a = faces[ offset ++ ];
					face.b = faces[ offset ++ ];
					face.c = faces[ offset ++ ];

					if ( hasMaterial ) {

						materialIndex = faces[ offset ++ ];
						face.materialIndex = materialIndex;

					}

					// to get face <=> uv index correspondence

					fi = geometry.faces.length;

					if ( hasFaceVertexUv ) {

						for ( i = 0; i < nUvLayers; i ++ ) {

							uvLayer = json.uvs[ i ];

							geometry.faceVertexUvs[ i ][ fi ] = [];

							for ( j = 0; j < 3; j ++ ) {

								uvIndex = faces[ offset ++ ];

								u = uvLayer[ uvIndex * 2 ];
								v = uvLayer[ uvIndex * 2 + 1 ];

								uv = new Vector2( u, v );

								geometry.faceVertexUvs[ i ][ fi ].push( uv );

							}

						}

					}

					if ( hasFaceNormal ) {

						normalIndex = faces[ offset ++ ] * 3;

						face.normal.set(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);

					}

					if ( hasFaceVertexNormal ) {

						for ( i = 0; i < 3; i ++ ) {

							normalIndex = faces[ offset ++ ] * 3;

							normal = new Vector3(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							face.vertexNormals.push( normal );

						}

					}


					if ( hasFaceColor ) {

						colorIndex = faces[ offset ++ ];
						face.color.setHex( colors[ colorIndex ] );

					}


					if ( hasFaceVertexColor ) {

						for ( i = 0; i < 3; i ++ ) {

							colorIndex = faces[ offset ++ ];
							face.vertexColors.push( new Color( colors[ colorIndex ] ) );

						}

					}

					geometry.faces.push( face );

				}

			}

		}

		function parseSkin( json, geometry ) {

			var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

			if ( json.skinWeights ) {

				for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

					var x = json.skinWeights[ i ];
					var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
					var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
					var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

					geometry.skinWeights.push( new Vector4( x, y, z, w ) );

				}

			}

			if ( json.skinIndices ) {

				for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

					var a = json.skinIndices[ i ];
					var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
					var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
					var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

					geometry.skinIndices.push( new Vector4( a, b, c, d ) );

				}

			}

			geometry.bones = json.bones;

			if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

				console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
					geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

			}

		}

		function parseMorphing( json, geometry ) {

			var scale = json.scale;

			if ( json.morphTargets !== undefined ) {

				for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

					geometry.morphTargets[ i ] = {};
					geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
					geometry.morphTargets[ i ].vertices = [];

					var dstVertices = geometry.morphTargets[ i ].vertices;
					var srcVertices = json.morphTargets[ i ].vertices;

					for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

						var vertex = new Vector3();
						vertex.x = srcVertices[ v ] * scale;
						vertex.y = srcVertices[ v + 1 ] * scale;
						vertex.z = srcVertices[ v + 2 ] * scale;

						dstVertices.push( vertex );

					}

				}

			}

			if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

				console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

				var faces = geometry.faces;
				var morphColors = json.morphColors[ 0 ].colors;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					faces[ i ].color.fromArray( morphColors, i * 3 );

				}

			}

		}

		function parseAnimations( json, geometry ) {

			var outputAnimations = [];

			// parse old style Bone/Hierarchy animations
			var animations = [];

			if ( json.animation !== undefined ) {

				animations.push( json.animation );

			}

			if ( json.animations !== undefined ) {

				if ( json.animations.length ) {

					animations = animations.concat( json.animations );

				} else {

					animations.push( json.animations );

				}

			}

			for ( var i = 0; i < animations.length; i ++ ) {

				var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
				if ( clip ) outputAnimations.push( clip );

			}

			// parse implicit morph animations
			if ( geometry.morphTargets ) {

				// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
				var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
				outputAnimations = outputAnimations.concat( morphAnimationClips );

			}

			if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

		}

		return function ( json, texturePath ) {

			if ( json.data !== undefined ) {

				// Geometry 4.0 spec
				json = json.data;

			}

			if ( json.scale !== undefined ) {

				json.scale = 1.0 / json.scale;

			} else {

				json.scale = 1.0;

			}

			var geometry = new Geometry();

			parseModel( json, geometry );
			parseSkin( json, geometry );
			parseMorphing( json, geometry );
			parseAnimations( json, geometry );

			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();

			if ( json.materials === undefined || json.materials.length === 0 ) {

				return { geometry: geometry };

			} else {

				var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

				return { geometry: geometry, materials: materials };

			}

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ObjectLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	this.texturePath = '';

}

Object.assign( ObjectLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		if ( this.texturePath === '' ) {

			this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

		}

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			var json = null;

			try {

				json = JSON.parse( text );

			} catch ( error ) {

				if ( onError !== undefined ) onError( error );

				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

				return;

			}

			var metadata = json.metadata;

			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

				console.error( 'THREE.ObjectLoader: Can\'t load ' + url + '. Use THREE.JSONLoader instead.' );
				return;

			}

			scope.parse( json, onLoad );

		}, onProgress, onError );

	},

	setTexturePath: function ( value ) {

		this.texturePath = value;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json, onLoad ) {

		var geometries = this.parseGeometries( json.geometries );

		var images = this.parseImages( json.images, function () {

			if ( onLoad !== undefined ) onLoad( object );

		} );

		var textures = this.parseTextures( json.textures, images );
		var materials = this.parseMaterials( json.materials, textures );

		var object = this.parseObject( json.object, geometries, materials );

		if ( json.animations ) {

			object.animations = this.parseAnimations( json.animations );

		}

		if ( json.images === undefined || json.images.length === 0 ) {

			if ( onLoad !== undefined ) onLoad( object );

		}

		return object;

	},

	parseGeometries: function ( json ) {

		var geometries = {};

		if ( json !== undefined ) {

			var geometryLoader = new JSONLoader();
			var bufferGeometryLoader = new BufferGeometryLoader();

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var geometry;
				var data = json[ i ];

				switch ( data.type ) {

					case 'PlaneGeometry':
					case 'PlaneBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.width,
							data.height,
							data.widthSegments,
							data.heightSegments
						);

						break;

					case 'BoxGeometry':
					case 'BoxBufferGeometry':
					case 'CubeGeometry': // backwards compatible

						geometry = new Geometries[ data.type ](
							data.width,
							data.height,
							data.depth,
							data.widthSegments,
							data.heightSegments,
							data.depthSegments
						);

						break;

					case 'CircleGeometry':
					case 'CircleBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.segments,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'CylinderGeometry':
					case 'CylinderBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radiusTop,
							data.radiusBottom,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'ConeGeometry':
					case 'ConeBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'SphereGeometry':
					case 'SphereBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.widthSegments,
							data.heightSegments,
							data.phiStart,
							data.phiLength,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'DodecahedronGeometry':
					case 'IcosahedronGeometry':
					case 'OctahedronGeometry':
					case 'TetrahedronGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.detail
						);

						break;

					case 'RingGeometry':
					case 'RingBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.innerRadius,
							data.outerRadius,
							data.thetaSegments,
							data.phiSegments,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'TorusGeometry':
					case 'TorusBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.tube,
							data.radialSegments,
							data.tubularSegments,
							data.arc
						);

						break;

					case 'TorusKnotGeometry':
					case 'TorusKnotBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.tube,
							data.tubularSegments,
							data.radialSegments,
							data.p,
							data.q
						);

						break;

					case 'LatheGeometry':
					case 'LatheBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.points,
							data.segments,
							data.phiStart,
							data.phiLength
						);

						break;

					case 'BufferGeometry':

						geometry = bufferGeometryLoader.parse( data );

						break;

					case 'Geometry':

						geometry = geometryLoader.parse( data, this.texturePath ).geometry;

						break;

					default:

						console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

						continue;

				}

				geometry.uuid = data.uuid;

				if ( data.name !== undefined ) geometry.name = data.name;

				geometries[ data.uuid ] = geometry;

			}

		}

		return geometries;

	},

	parseMaterials: function ( json, textures ) {

		var materials = {};

		if ( json !== undefined ) {

			var loader = new MaterialLoader();
			loader.setTextures( textures );

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];

				if ( data.type === 'MultiMaterial' ) {

					// Deprecated

					var array = [];

					for ( var j = 0; j < data.materials.length; j ++ ) {

						array.push( loader.parse( data.materials[ j ] ) );

					}

					materials[ data.uuid ] = array;

				} else {

					materials[ data.uuid ] = loader.parse( data );

				}

			}

		}

		return materials;

	},

	parseAnimations: function ( json ) {

		var animations = [];

		for ( var i = 0; i < json.length; i ++ ) {

			var clip = AnimationClip.parse( json[ i ] );

			animations.push( clip );

		}

		return animations;

	},

	parseImages: function ( json, onLoad ) {

		var scope = this;
		var images = {};

		function loadImage( url ) {

			scope.manager.itemStart( url );

			return loader.load( url, function () {

				scope.manager.itemEnd( url );

			}, undefined, function () {

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			} );

		}

		if ( json !== undefined && json.length > 0 ) {

			var manager = new LoadingManager( onLoad );

			var loader = new ImageLoader( manager );
			loader.setCrossOrigin( this.crossOrigin );

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var image = json[ i ];
				var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

				images[ image.uuid ] = loadImage( path );

			}

		}

		return images;

	},

	parseTextures: function ( json, images ) {

		function parseConstant( value, type ) {

			if ( typeof( value ) === 'number' ) return value;

			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

			return type[ value ];

		}

		var textures = {};

		if ( json !== undefined ) {

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];

				if ( data.image === undefined ) {

					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

				}

				if ( images[ data.image ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

				}

				var texture = new Texture( images[ data.image ] );
				texture.needsUpdate = true;

				texture.uuid = data.uuid;

				if ( data.name !== undefined ) texture.name = data.name;

				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );

				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
				if ( data.wrap !== undefined ) {

					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

				}

				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

				if ( data.flipY !== undefined ) texture.flipY = data.flipY;

				textures[ data.uuid ] = texture;

			}

		}

		return textures;

	},

	parseObject: function () {

		var matrix = new Matrix4();

		return function parseObject( data, geometries, materials ) {

			var object;

			function getGeometry( name ) {

				if ( geometries[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

				}

				return geometries[ name ];

			}

			function getMaterial( name ) {

				if ( name === undefined ) return undefined;

				if ( Array.isArray( name ) ) {

					var array = [];

					for ( var i = 0, l = name.length; i < l; i ++ ) {

						var uuid = name[ i ];

						if ( materials[ uuid ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

						}

						array.push( materials[ uuid ] );

					}

					return array;

				}

				if ( materials[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined material', name );

				}

				return materials[ name ];

			}

			switch ( data.type ) {

				case 'Scene':

					object = new Scene();

					if ( data.background !== undefined ) {

						if ( Number.isInteger( data.background ) ) {

							object.background = new Color( data.background );

						}

					}

					if ( data.fog !== undefined ) {

						if ( data.fog.type === 'Fog' ) {

							object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

						} else if ( data.fog.type === 'FogExp2' ) {

							object.fog = new FogExp2( data.fog.color, data.fog.density );

						}

					}

					break;

				case 'PerspectiveCamera':

					object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

					if ( data.focus !== undefined ) object.focus = data.focus;
					if ( data.zoom !== undefined ) object.zoom = data.zoom;
					if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
					if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
					if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

					break;

				case 'OrthographicCamera':

					object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

					break;

				case 'AmbientLight':

					object = new AmbientLight( data.color, data.intensity );

					break;

				case 'DirectionalLight':

					object = new DirectionalLight( data.color, data.intensity );

					break;

				case 'PointLight':

					object = new PointLight( data.color, data.intensity, data.distance, data.decay );

					break;

				case 'RectAreaLight':

					object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

					break;

				case 'SpotLight':

					object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

					break;

				case 'HemisphereLight':

					object = new HemisphereLight( data.color, data.groundColor, data.intensity );

					break;

				case 'SkinnedMesh':

					console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

				case 'Mesh':

					var geometry = getGeometry( data.geometry );
					var material = getMaterial( data.material );

					if ( geometry.bones && geometry.bones.length > 0 ) {

						object = new SkinnedMesh( geometry, material );

					} else {

						object = new Mesh( geometry, material );

					}

					break;

				case 'LOD':

					object = new LOD();

					break;

				case 'Line':

					object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

					break;

				case 'LineLoop':

					object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'LineSegments':

					object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'PointCloud':
				case 'Points':

					object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'Sprite':

					object = new Sprite( getMaterial( data.material ) );

					break;

				case 'Group':

					object = new Group();

					break;

				default:

					object = new Object3D();

			}

			object.uuid = data.uuid;

			if ( data.name !== undefined ) object.name = data.name;
			if ( data.matrix !== undefined ) {

				matrix.fromArray( data.matrix );
				matrix.decompose( object.position, object.quaternion, object.scale );

			} else {

				if ( data.position !== undefined ) object.position.fromArray( data.position );
				if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
				if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
				if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

			}

			if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
			if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

			if ( data.shadow ) {

				if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
				if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
				if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
				if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

			}

			if ( data.visible !== undefined ) object.visible = data.visible;
			if ( data.userData !== undefined ) object.userData = data.userData;

			if ( data.children !== undefined ) {

				var children = data.children;

				for ( var  i = 0; i < children.length; i ++ ) {

					object.add( this.parseObject( children[ i ], geometries, materials ) );

				}

			}

			if ( data.type === 'LOD' ) {

				var levels = data.levels;

				for ( var l = 0; l < levels.length; l ++ ) {

					var level = levels[ l ];
					var child = object.getObjectByProperty( 'uuid', level.object );

					if ( child !== undefined ) {

						object.addLevel( child, level.distance );

					}

				}

			}

			return object;

		};

	}()

} );

var TEXTURE_MAPPING = {
	UVMapping: UVMapping,
	CubeReflectionMapping: CubeReflectionMapping,
	CubeRefractionMapping: CubeRefractionMapping,
	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
	SphericalReflectionMapping: SphericalReflectionMapping,
	CubeUVReflectionMapping: CubeUVReflectionMapping,
	CubeUVRefractionMapping: CubeUVRefractionMapping
};

var TEXTURE_WRAPPING = {
	RepeatWrapping: RepeatWrapping,
	ClampToEdgeWrapping: ClampToEdgeWrapping,
	MirroredRepeatWrapping: MirroredRepeatWrapping
};

var TEXTURE_FILTER = {
	NearestFilter: NearestFilter,
	NearestMipMapNearestFilter: NearestMipMapNearestFilter,
	NearestMipMapLinearFilter: NearestMipMapLinearFilter,
	LinearFilter: LinearFilter,
	LinearMipMapNearestFilter: LinearMipMapNearestFilter,
	LinearMipMapLinearFilter: LinearMipMapLinearFilter
};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Bezier Curves formulas obtained from
 * http://en.wikipedia.org/wiki/Bézier_curve
 */

function CatmullRom( t, p0, p1, p2, p3 ) {

	var v0 = ( p2 - p0 ) * 0.5;
	var v1 = ( p3 - p1 ) * 0.5;
	var t2 = t * t;
	var t3 = t * t2;
	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

}

//

function QuadraticBezierP0( t, p ) {

	var k = 1 - t;
	return k * k * p;

}

function QuadraticBezierP1( t, p ) {

	return 2 * ( 1 - t ) * t * p;

}

function QuadraticBezierP2( t, p ) {

	return t * t * p;

}

function QuadraticBezier( t, p0, p1, p2 ) {

	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
		QuadraticBezierP2( t, p2 );

}

//

function CubicBezierP0( t, p ) {

	var k = 1 - t;
	return k * k * k * p;

}

function CubicBezierP1( t, p ) {

	var k = 1 - t;
	return 3 * k * k * t * p;

}

function CubicBezierP2( t, p ) {

	return 3 * ( 1 - t ) * t * t * p;

}

function CubicBezierP3( t, p ) {

	return t * t * t * p;

}

function CubicBezier( t, p0, p1, p2, p3 ) {

	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
		CubicBezierP3( t, p3 );

}

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Extensible curve object
 *
 * Some common of curve methods:
 * .getPoint(t), getTangent(t)
 * .getPointAt(u), getTangentAt(u)
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

/**************************************************************
 *	Abstract Curve base class
 **************************************************************/

function Curve() {

	this.arcLengthDivisions = 200;

}

Object.assign( Curve.prototype, {

	// Virtual base class method to overwrite and implement in subclasses
	//	- t [0 .. 1]

	getPoint: function () {

		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
		return null;

	},

	// Get point at relative position in curve according to arc length
	// - u [0 .. 1]

	getPointAt: function ( u ) {

		var t = this.getUtoTmapping( u );
		return this.getPoint( t );

	},

	// Get sequence of points using getPoint( t )

	getPoints: function ( divisions ) {

		if ( divisions === undefined ) divisions = 5;

		var points = [];

		for ( var d = 0; d <= divisions; d ++ ) {

			points.push( this.getPoint( d / divisions ) );

		}

		return points;

	},

	// Get sequence of points using getPointAt( u )

	getSpacedPoints: function ( divisions ) {

		if ( divisions === undefined ) divisions = 5;

		var points = [];

		for ( var d = 0; d <= divisions; d ++ ) {

			points.push( this.getPointAt( d / divisions ) );

		}

		return points;

	},

	// Get total curve arc length

	getLength: function () {

		var lengths = this.getLengths();
		return lengths[ lengths.length - 1 ];

	},

	// Get list of cumulative segment lengths

	getLengths: function ( divisions ) {

		if ( divisions === undefined ) divisions = this.arcLengthDivisions;

		if ( this.cacheArcLengths &&
			( this.cacheArcLengths.length === divisions + 1 ) &&
			! this.needsUpdate ) {

			return this.cacheArcLengths;

		}

		this.needsUpdate = false;

		var cache = [];
		var current, last = this.getPoint( 0 );
		var p, sum = 0;

		cache.push( 0 );

		for ( p = 1; p <= divisions; p ++ ) {

			current = this.getPoint( p / divisions );
			sum += current.distanceTo( last );
			cache.push( sum );
			last = current;

		}

		this.cacheArcLengths = cache;

		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

	},

	updateArcLengths: function () {

		this.needsUpdate = true;
		this.getLengths();

	},

	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

	getUtoTmapping: function ( u, distance ) {

		var arcLengths = this.getLengths();

		var i = 0, il = arcLengths.length;

		var targetArcLength; // The targeted u distance value to get

		if ( distance ) {

			targetArcLength = distance;

		} else {

			targetArcLength = u * arcLengths[ il - 1 ];

		}

		// binary search for the index with largest value smaller than target u distance

		var low = 0, high = il - 1, comparison;

		while ( low <= high ) {

			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

			comparison = arcLengths[ i ] - targetArcLength;

			if ( comparison < 0 ) {

				low = i + 1;

			} else if ( comparison > 0 ) {

				high = i - 1;

			} else {

				high = i;
				break;

				// DONE

			}

		}

		i = high;

		if ( arcLengths[ i ] === targetArcLength ) {

			return i / ( il - 1 );

		}

		// we could get finer grain at lengths, or use simple interpolation between two points

		var lengthBefore = arcLengths[ i ];
		var lengthAfter = arcLengths[ i + 1 ];

		var segmentLength = lengthAfter - lengthBefore;

		// determine where we are between the 'before' and 'after' points

		var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

		// add that fractional amount to t

		var t = ( i + segmentFraction ) / ( il - 1 );

		return t;

	},

	// Returns a unit vector tangent at t
	// In case any sub curve does not implement its tangent derivation,
	// 2 points a small delta apart will be used to find its gradient
	// which seems to give a reasonable approximation

	getTangent: function ( t ) {

		var delta = 0.0001;
		var t1 = t - delta;
		var t2 = t + delta;

		// Capping in case of danger

		if ( t1 < 0 ) t1 = 0;
		if ( t2 > 1 ) t2 = 1;

		var pt1 = this.getPoint( t1 );
		var pt2 = this.getPoint( t2 );

		var vec = pt2.clone().sub( pt1 );
		return vec.normalize();

	},

	getTangentAt: function ( u ) {

		var t = this.getUtoTmapping( u );
		return this.getTangent( t );

	},

	computeFrenetFrames: function ( segments, closed ) {

		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

		var normal = new Vector3();

		var tangents = [];
		var normals = [];
		var binormals = [];

		var vec = new Vector3();
		var mat = new Matrix4();

		var i, u, theta;

		// compute the tangent vectors for each segment on the curve

		for ( i = 0; i <= segments; i ++ ) {

			u = i / segments;

			tangents[ i ] = this.getTangentAt( u );
			tangents[ i ].normalize();

		}

		// select an initial normal vector perpendicular to the first tangent vector,
		// and in the direction of the minimum tangent xyz component

		normals[ 0 ] = new Vector3();
		binormals[ 0 ] = new Vector3();
		var min = Number.MAX_VALUE;
		var tx = Math.abs( tangents[ 0 ].x );
		var ty = Math.abs( tangents[ 0 ].y );
		var tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= min ) {

			min = tx;
			normal.set( 1, 0, 0 );

		}

		if ( ty <= min ) {

			min = ty;
			normal.set( 0, 1, 0 );

		}

		if ( tz <= min ) {

			normal.set( 0, 0, 1 );

		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


		// compute the slowly-varying normal and binormal vectors for each segment on the curve

		for ( i = 1; i <= segments; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed === true ) {

			theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
			theta /= segments;

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( i = 1; i <= segments; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

		return {
			tangents: tangents,
			normals: normals,
			binormals: binormals
		};

	}

} );

function LineCurve( v1, v2 ) {

	Curve.call( this );

	this.v1 = v1;
	this.v2 = v2;

}

LineCurve.prototype = Object.create( Curve.prototype );
LineCurve.prototype.constructor = LineCurve;

LineCurve.prototype.isLineCurve = true;

LineCurve.prototype.getPoint = function ( t ) {

	if ( t === 1 ) {

		return this.v2.clone();

	}

	var point = this.v2.clone().sub( this.v1 );
	point.multiplyScalar( t ).add( this.v1 );

	return point;

};

// Line curve is linear, so we can overwrite default getPointAt

LineCurve.prototype.getPointAt = function ( u ) {

	return this.getPoint( u );

};

LineCurve.prototype.getTangent = function ( t ) {

	var tangent = this.v2.clone().sub( this.v1 );

	return tangent.normalize();

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 **/

/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

function CurvePath() {

	Curve.call( this );

	this.curves = [];

	this.autoClose = false; // Automatically closes the path

}

CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

	constructor: CurvePath,

	add: function ( curve ) {

		this.curves.push( curve );

	},

	closePath: function () {

		// Add a line curve if start and end of lines are not connected
		var startPoint = this.curves[ 0 ].getPoint( 0 );
		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

		if ( ! startPoint.equals( endPoint ) ) {

			this.curves.push( new LineCurve( endPoint, startPoint ) );

		}

	},

	// To get accurate point with reference to
	// entire path distance at time t,
	// following has to be done:

	// 1. Length of each sub path have to be known
	// 2. Locate and identify type of curve
	// 3. Get t for the curve
	// 4. Return curve.getPointAt(t')

	getPoint: function ( t ) {

		var d = t * this.getLength();
		var curveLengths = this.getCurveLengths();
		var i = 0;

		// To think about boundaries points.

		while ( i < curveLengths.length ) {

			if ( curveLengths[ i ] >= d ) {

				var diff = curveLengths[ i ] - d;
				var curve = this.curves[ i ];

				var segmentLength = curve.getLength();
				var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

				return curve.getPointAt( u );

			}

			i ++;

		}

		return null;

		// loop where sum != 0, sum > d , sum+1 <d

	},

	// We cannot use the default THREE.Curve getPoint() with getLength() because in
	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
	// getPoint() depends on getLength

	getLength: function () {

		var lens = this.getCurveLengths();
		return lens[ lens.length - 1 ];

	},

	// cacheLengths must be recalculated.
	updateArcLengths: function () {

		this.needsUpdate = true;
		this.cacheLengths = null;
		this.getCurveLengths();

	},

	// Compute lengths and cache them
	// We cannot overwrite getLengths() because UtoT mapping uses it.

	getCurveLengths: function () {

		// We use cache values if curves and cache array are same length

		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

			return this.cacheLengths;

		}

		// Get length of sub-curve
		// Push sums into cached array

		var lengths = [], sums = 0;

		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

			sums += this.curves[ i ].getLength();
			lengths.push( sums );

		}

		this.cacheLengths = lengths;

		return lengths;

	},

	getSpacedPoints: function ( divisions ) {

		if ( divisions === undefined ) divisions = 40;

		var points = [];

		for ( var i = 0; i <= divisions; i ++ ) {

			points.push( this.getPoint( i / divisions ) );

		}

		if ( this.autoClose ) {

			points.push( points[ 0 ] );

		}

		return points;

	},

	getPoints: function ( divisions ) {

		divisions = divisions || 12;

		var points = [], last;

		for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

			var curve = curves[ i ];
			var resolution = (curve && curve.isEllipseCurve) ? divisions * 2
				: (curve && curve.isLineCurve) ? 1
				: (curve && curve.isSplineCurve) ? divisions * curve.points.length
				: divisions;

			var pts = curve.getPoints( resolution );

			for ( var j = 0; j < pts.length; j++ ) {

				var point = pts[ j ];

				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

				points.push( point );
				last = point;

			}

		}

		if ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {

			points.push( points[ 0 ] );

		}

		return points;

	},

	/**************************************************************
	 *	Create Geometries Helpers
	 **************************************************************/

	/// Generate geometry from path points (for Line or Points objects)

	createPointsGeometry: function ( divisions ) {

		var pts = this.getPoints( divisions );
		return this.createGeometry( pts );

	},

	// Generate geometry from equidistant sampling along the path

	createSpacedPointsGeometry: function ( divisions ) {

		var pts = this.getSpacedPoints( divisions );
		return this.createGeometry( pts );

	},

	createGeometry: function ( points ) {

		var geometry = new Geometry();

		for ( var i = 0, l = points.length; i < l; i ++ ) {

			var point = points[ i ];
			geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

		}

		return geometry;

	}

} );

function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

	Curve.call( this );

	this.aX = aX;
	this.aY = aY;

	this.xRadius = xRadius;
	this.yRadius = yRadius;

	this.aStartAngle = aStartAngle;
	this.aEndAngle = aEndAngle;

	this.aClockwise = aClockwise;

	this.aRotation = aRotation || 0;

}

EllipseCurve.prototype = Object.create( Curve.prototype );
EllipseCurve.prototype.constructor = EllipseCurve;

EllipseCurve.prototype.isEllipseCurve = true;

EllipseCurve.prototype.getPoint = function ( t ) {

	var twoPi = Math.PI * 2;
	var deltaAngle = this.aEndAngle - this.aStartAngle;
	var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

	// ensures that deltaAngle is 0 .. 2 PI
	while ( deltaAngle < 0 ) deltaAngle += twoPi;
	while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

	if ( deltaAngle < Number.EPSILON ) {

		if ( samePoints ) {

			deltaAngle = 0;

		} else {

			deltaAngle = twoPi;

		}

	}

	if ( this.aClockwise === true && ! samePoints ) {

		if ( deltaAngle === twoPi ) {

			deltaAngle = - twoPi;

		} else {

			deltaAngle = deltaAngle - twoPi;

		}

	}

	var angle = this.aStartAngle + t * deltaAngle;
	var x = this.aX + this.xRadius * Math.cos( angle );
	var y = this.aY + this.yRadius * Math.sin( angle );

	if ( this.aRotation !== 0 ) {

		var cos = Math.cos( this.aRotation );
		var sin = Math.sin( this.aRotation );

		var tx = x - this.aX;
		var ty = y - this.aY;

		// Rotate the point about the center of the ellipse.
		x = tx * cos - ty * sin + this.aX;
		y = tx * sin + ty * cos + this.aY;

	}

	return new Vector2( x, y );

};

function SplineCurve( points /* array of Vector2 */ ) {

	Curve.call( this );

	this.points = ( points === undefined ) ? [] : points;

}

SplineCurve.prototype = Object.create( Curve.prototype );
SplineCurve.prototype.constructor = SplineCurve;

SplineCurve.prototype.isSplineCurve = true;

SplineCurve.prototype.getPoint = function ( t ) {

	var points = this.points;
	var point = ( points.length - 1 ) * t;

	var intPoint = Math.floor( point );
	var weight = point - intPoint;

	var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
	var point1 = points[ intPoint ];
	var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
	var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

	return new Vector2(
		CatmullRom( weight, point0.x, point1.x, point2.x, point3.x ),
		CatmullRom( weight, point0.y, point1.y, point2.y, point3.y )
	);

};

function CubicBezierCurve( v0, v1, v2, v3 ) {

	Curve.call( this );

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;
	this.v3 = v3;

}

CubicBezierCurve.prototype = Object.create( Curve.prototype );
CubicBezierCurve.prototype.constructor = CubicBezierCurve;

CubicBezierCurve.prototype.getPoint = function ( t ) {

	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

	return new Vector2(
		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
		CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
	);

};

function QuadraticBezierCurve( v0, v1, v2 ) {

	Curve.call( this );

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;

}

QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

QuadraticBezierCurve.prototype.getPoint = function ( t ) {

	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

	return new Vector2(
		QuadraticBezier( t, v0.x, v1.x, v2.x ),
		QuadraticBezier( t, v0.y, v1.y, v2.y )
	);

};

var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {

	fromPoints: function ( vectors ) {

		this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

		for ( var i = 1, l = vectors.length; i < l; i ++ ) {

			this.lineTo( vectors[ i ].x, vectors[ i ].y );

		}

	},

	moveTo: function ( x, y ) {

		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

	},

	lineTo: function ( x, y ) {

		var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
		this.curves.push( curve );

		this.currentPoint.set( x, y );

	},

	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

		var curve = new QuadraticBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCPx, aCPy ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

	},

	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		var curve = new CubicBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCP1x, aCP1y ),
			new Vector2( aCP2x, aCP2y ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

	},

	splineThru: function ( pts /*Array of Vector*/ ) {

		var npts = [ this.currentPoint.clone() ].concat( pts );

		var curve = new SplineCurve( npts );
		this.curves.push( curve );

		this.currentPoint.copy( pts[ pts.length - 1 ] );

	},

	arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		var x0 = this.currentPoint.x;
		var y0 = this.currentPoint.y;

		this.absarc( aX + x0, aY + y0, aRadius,
			aStartAngle, aEndAngle, aClockwise );

	},

	absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	},

	ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var x0 = this.currentPoint.x;
		var y0 = this.currentPoint.y;

		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

	},

	absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		if ( this.curves.length > 0 ) {

			// if a previous curve is present, attempt to join
			var firstPoint = curve.getPoint( 0 );

			if ( ! firstPoint.equals( this.currentPoint ) ) {

				this.lineTo( firstPoint.x, firstPoint.y );

			}

		}

		this.curves.push( curve );

		var lastPoint = curve.getPoint( 1 );
		this.currentPoint.copy( lastPoint );

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Creates free form 2d path using series of points, lines or curves.
 **/

function Path( points ) {

	CurvePath.call( this );
	this.currentPoint = new Vector2();

	if ( points ) {

		this.fromPoints( points );

	}

}

Path.prototype = PathPrototype;
PathPrototype.constructor = Path;

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Defines a 2d shape plane using paths.
 **/

// STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.

function Shape() {

	Path.apply( this, arguments );

	this.holes = [];

}

Shape.prototype = Object.assign( Object.create( PathPrototype ), {

	constructor: Shape,

	getPointsHoles: function ( divisions ) {

		var holesPts = [];

		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

		}

		return holesPts;

	},

	// Get points of shape and holes (keypoints based on segments parameter)

	extractAllPoints: function ( divisions ) {

		return {

			shape: this.getPoints( divisions ),
			holes: this.getPointsHoles( divisions )

		};

	},

	extractPoints: function ( divisions ) {

		return this.extractAllPoints( divisions );

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
 **/

function ShapePath() {

	this.subPaths = [];
	this.currentPath = null;

}

Object.assign( ShapePath.prototype, {

	moveTo: function ( x, y ) {

		this.currentPath = new Path();
		this.subPaths.push( this.currentPath );
		this.currentPath.moveTo( x, y );

	},

	lineTo: function ( x, y ) {

		this.currentPath.lineTo( x, y );

	},

	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

	},

	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

	},

	splineThru: function ( pts ) {

		this.currentPath.splineThru( pts );

	},

	toShapes: function ( isCCW, noHoles ) {

		function toShapesNoHoles( inSubpaths ) {

			var shapes = [];

			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

				var tmpPath = inSubpaths[ i ];

				var tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;

				shapes.push( tmpShape );

			}

			return shapes;

		}

		function isPointInsidePolygon( inPt, inPolygon ) {

			var polyLen = inPolygon.length;

			// inPt on polygon contour => immediate success    or
			// toggling of inside/outside at every single! intersection point of an edge
			//  with the horizontal line through inPt, left of inPt
			//  not counting lowerY endpoints of edges and whole edges on that line
			var inside = false;
			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

				var edgeLowPt  = inPolygon[ p ];
				var edgeHighPt = inPolygon[ q ];

				var edgeDx = edgeHighPt.x - edgeLowPt.x;
				var edgeDy = edgeHighPt.y - edgeLowPt.y;

				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

					// not parallel
					if ( edgeDy < 0 ) {

						edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

					}
					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

					if ( inPt.y === edgeLowPt.y ) {

						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
						// continue;				// no intersection or edgeLowPt => doesn't count !!!

					} else {

						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
						if ( perpEdge < 0 ) 				continue;
						inside = ! inside;		// true intersection left of inPt

					}

				} else {

					// parallel or collinear
					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
					// edge lies on the same horizontal line as inPt
					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
					// continue;

				}

			}

			return	inside;

		}

		var isClockWise = ShapeUtils.isClockWise;

		var subPaths = this.subPaths;
		if ( subPaths.length === 0 ) return [];

		if ( noHoles === true )	return	toShapesNoHoles( subPaths );


		var solid, tmpPath, tmpShape, shapes = [];

		if ( subPaths.length === 1 ) {

			tmpPath = subPaths[ 0 ];
			tmpShape = new Shape();
			tmpShape.curves = tmpPath.curves;
			shapes.push( tmpShape );
			return shapes;

		}

		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
		holesFirst = isCCW ? ! holesFirst : holesFirst;

		// console.log("Holes first", holesFirst);

		var betterShapeHoles = [];
		var newShapes = [];
		var newShapeHoles = [];
		var mainIdx = 0;
		var tmpPoints;

		newShapes[ mainIdx ] = undefined;
		newShapeHoles[ mainIdx ] = [];

		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

			tmpPath = subPaths[ i ];
			tmpPoints = tmpPath.getPoints();
			solid = isClockWise( tmpPoints );
			solid = isCCW ? ! solid : solid;

			if ( solid ) {

				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
				newShapes[ mainIdx ].s.curves = tmpPath.curves;

				if ( holesFirst )	mainIdx ++;
				newShapeHoles[ mainIdx ] = [];

				//console.log('cw', i);

			} else {

				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

				//console.log('ccw', i);

			}

		}

		// only Holes? -> probably all Shapes with wrong orientation
		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


		if ( newShapes.length > 1 ) {

			var ambiguous = false;
			var toChange = [];

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				betterShapeHoles[ sIdx ] = [];

			}

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				var sho = newShapeHoles[ sIdx ];

				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

					var ho = sho[ hIdx ];
					var hole_unassigned = true;

					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
							if ( hole_unassigned ) {

								hole_unassigned = false;
								betterShapeHoles[ s2Idx ].push( ho );

							} else {

								ambiguous = true;

							}

						}

					}
					if ( hole_unassigned ) {

						betterShapeHoles[ sIdx ].push( ho );

					}

				}

			}
			// console.log("ambiguous: ", ambiguous);
			if ( toChange.length > 0 ) {

				// console.log("to change: ", toChange);
				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

			}

		}

		var tmpHoles;

		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

			tmpShape = newShapes[ i ].s;
			shapes.push( tmpShape );
			tmpHoles = newShapeHoles[ i ];

			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

				tmpShape.holes.push( tmpHoles[ j ].h );

			}

		}

		//console.log("shape", shapes);

		return shapes;

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author mrdoob / http://mrdoob.com/
 */

function Font( data ) {

	this.data = data;

}

Object.assign( Font.prototype, {

	isFont: true,

	generateShapes: function ( text, size, divisions ) {

		function createPaths( text ) {

			var chars = String( text ).split( '' );
			var scale = size / data.resolution;
			var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

			var offsetX = 0, offsetY = 0;

			var paths = [];

			for ( var i = 0; i < chars.length; i ++ ) {

				var char = chars[ i ];

				if ( char === '\n' ) {

					offsetX = 0;
					offsetY -= line_height;

				} else {

					var ret = createPath( char, scale, offsetX, offsetY );
					offsetX += ret.offsetX;
					paths.push( ret.path );

				}

			}

			return paths;

		}

		function createPath( c, scale, offsetX, offsetY ) {

			var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

			if ( ! glyph ) return;

			var path = new ShapePath();

			var pts = [];
			var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

			if ( glyph.o ) {

				var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

				for ( var i = 0, l = outline.length; i < l; ) {

					var action = outline[ i ++ ];

					switch ( action ) {

						case 'm': // moveTo

							x = outline[ i ++ ] * scale + offsetX;
							y = outline[ i ++ ] * scale + offsetY;

							path.moveTo( x, y );

							break;

						case 'l': // lineTo

							x = outline[ i ++ ] * scale + offsetX;
							y = outline[ i ++ ] * scale + offsetY;

							path.lineTo( x, y );

							break;

						case 'q': // quadraticCurveTo

							cpx  = outline[ i ++ ] * scale + offsetX;
							cpy  = outline[ i ++ ] * scale + offsetY;
							cpx1 = outline[ i ++ ] * scale + offsetX;
							cpy1 = outline[ i ++ ] * scale + offsetY;

							path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

							laste = pts[ pts.length - 1 ];

							if ( laste ) {

								cpx0 = laste.x;
								cpy0 = laste.y;

								for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

									var t = i2 / divisions;
									QuadraticBezier( t, cpx0, cpx1, cpx );
									QuadraticBezier( t, cpy0, cpy1, cpy );

								}

							}

							break;

						case 'b': // bezierCurveTo

							cpx  = outline[ i ++ ] * scale + offsetX;
							cpy  = outline[ i ++ ] * scale + offsetY;
							cpx1 = outline[ i ++ ] * scale + offsetX;
							cpy1 = outline[ i ++ ] * scale + offsetY;
							cpx2 = outline[ i ++ ] * scale + offsetX;
							cpy2 = outline[ i ++ ] * scale + offsetY;

							path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

							laste = pts[ pts.length - 1 ];

							if ( laste ) {

								cpx0 = laste.x;
								cpy0 = laste.y;

								for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

									var t = i2 / divisions;
									CubicBezier( t, cpx0, cpx1, cpx2, cpx );
									CubicBezier( t, cpy0, cpy1, cpy2, cpy );

								}

							}

							break;

					}

				}

			}

			return { offsetX: glyph.ha * scale, path: path };

		}

		//

		if ( size === undefined ) size = 100;
		if ( divisions === undefined ) divisions = 4;

		var data = this.data;

		var paths = createPaths( text );
		var shapes = [];

		for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

			Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

		}

		return shapes;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function FontLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( FontLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( this.manager );
		loader.load( url, function ( text ) {

			var json;

			try {

				json = JSON.parse( text );

			} catch ( e ) {

				console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
				json = JSON.parse( text.substring( 65, text.length - 2 ) );

			}

			var font = scope.parse( json );

			if ( onLoad ) onLoad( font );

		}, onProgress, onError );

	},

	parse: function ( json ) {

		return new Font( json );

	}

} );

var context;

var AudioContext = {

	getContext: function () {

		if ( context === undefined ) {

			context = new ( window.AudioContext || window.webkitAudioContext )();

		}

		return context;

	},

	setContext: function ( value ) {

		context = value;

	}

};

/**
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */

function AudioLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( AudioLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var loader = new FileLoader( this.manager );
		loader.setResponseType( 'arraybuffer' );
		loader.load( url, function ( buffer ) {

			var context = AudioContext.getContext();

			context.decodeAudioData( buffer, function ( audioBuffer ) {

				onLoad( audioBuffer );

			} );

		}, onProgress, onError );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function StereoCamera() {

	this.type = 'StereoCamera';

	this.aspect = 1;

	this.eyeSep = 0.064;

	this.cameraL = new PerspectiveCamera();
	this.cameraL.layers.enable( 1 );
	this.cameraL.matrixAutoUpdate = false;

	this.cameraR = new PerspectiveCamera();
	this.cameraR.layers.enable( 2 );
	this.cameraR.matrixAutoUpdate = false;

}

Object.assign( StereoCamera.prototype, {

	update: ( function () {

		var instance, focus, fov, aspect, near, far, zoom, eyeSep;

		var eyeRight = new Matrix4();
		var eyeLeft = new Matrix4();

		return function update( camera ) {

			var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
												aspect !== camera.aspect * this.aspect || near !== camera.near ||
												far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;

			if ( needsUpdate ) {

				instance = this;
				focus = camera.focus;
				fov = camera.fov;
				aspect = camera.aspect * this.aspect;
				near = camera.near;
				far = camera.far;
				zoom = camera.zoom;

				// Off-axis stereoscopic effect based on
				// http://paulbourke.net/stereographics/stereorender/

				var projectionMatrix = camera.projectionMatrix.clone();
				eyeSep = this.eyeSep / 2;
				var eyeSepOnProjection = eyeSep * near / focus;
				var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
				var xmin, xmax;

				// translate xOffset

				eyeLeft.elements[ 12 ] = - eyeSep;
				eyeRight.elements[ 12 ] = eyeSep;

				// for left eye

				xmin = - ymax * aspect + eyeSepOnProjection;
				xmax = ymax * aspect + eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraL.projectionMatrix.copy( projectionMatrix );

				// for right eye

				xmin = - ymax * aspect - eyeSepOnProjection;
				xmax = ymax * aspect - eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraR.projectionMatrix.copy( projectionMatrix );

			}

			this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
			this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

		};

	} )()

} );

/**
 * Camera for rendering cube maps
 *	- renders scene into axis-aligned cube
 *
 * @author alteredq / http://alteredqualia.com/
 */

function CubeCamera( near, far, cubeResolution ) {

	Object3D.call( this );

	this.type = 'CubeCamera';

	var fov = 90, aspect = 1;

	var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
	cameraPX.up.set( 0, - 1, 0 );
	cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
	this.add( cameraPX );

	var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
	cameraNX.up.set( 0, - 1, 0 );
	cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
	this.add( cameraNX );

	var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
	cameraPY.up.set( 0, 0, 1 );
	cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
	this.add( cameraPY );

	var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
	cameraNY.up.set( 0, 0, - 1 );
	cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
	this.add( cameraNY );

	var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
	cameraPZ.up.set( 0, - 1, 0 );
	cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
	this.add( cameraPZ );

	var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
	cameraNZ.up.set( 0, - 1, 0 );
	cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
	this.add( cameraNZ );

	var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

	this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
	this.renderTarget.texture.name = "CubeCamera";

	this.update = function ( renderer, scene ) {

		if ( this.parent === null ) this.updateMatrixWorld();

		var renderTarget = this.renderTarget;
		var generateMipmaps = renderTarget.texture.generateMipmaps;

		renderTarget.texture.generateMipmaps = false;

		renderTarget.activeCubeFace = 0;
		renderer.render( scene, cameraPX, renderTarget );

		renderTarget.activeCubeFace = 1;
		renderer.render( scene, cameraNX, renderTarget );

		renderTarget.activeCubeFace = 2;
		renderer.render( scene, cameraPY, renderTarget );

		renderTarget.activeCubeFace = 3;
		renderer.render( scene, cameraNY, renderTarget );

		renderTarget.activeCubeFace = 4;
		renderer.render( scene, cameraPZ, renderTarget );

		renderTarget.texture.generateMipmaps = generateMipmaps;

		renderTarget.activeCubeFace = 5;
		renderer.render( scene, cameraNZ, renderTarget );

		renderer.setRenderTarget( null );

	};

	this.clear = function ( renderer, color, depth, stencil ) {

		var renderTarget = this.renderTarget;

		for ( var i = 0; i < 6; i ++ ) {

			renderTarget.activeCubeFace = i;
			renderer.setRenderTarget( renderTarget );

			renderer.clear( color, depth, stencil );

		}

		renderer.setRenderTarget( null );

	};

}

CubeCamera.prototype = Object.create( Object3D.prototype );
CubeCamera.prototype.constructor = CubeCamera;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AudioListener() {

	Object3D.call( this );

	this.type = 'AudioListener';

	this.context = AudioContext.getContext();

	this.gain = this.context.createGain();
	this.gain.connect( this.context.destination );

	this.filter = null;

}

AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: AudioListener,

	getInput: function () {

		return this.gain;

	},

	removeFilter: function ( ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );
			this.gain.connect( this.context.destination );
			this.filter = null;

		}

	},

	getFilter: function () {

		return this.filter;

	},

	setFilter: function ( value ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );

		} else {

			this.gain.disconnect( this.context.destination );

		}

		this.filter = value;
		this.gain.connect( this.filter );
		this.filter.connect( this.context.destination );

	},

	getMasterVolume: function () {

		return this.gain.gain.value;

	},

	setMasterVolume: function ( value ) {

		this.gain.gain.value = value;

	},

	updateMatrixWorld: ( function () {

		var position = new Vector3();
		var quaternion = new Quaternion();
		var scale = new Vector3();

		var orientation = new Vector3();

		return function updateMatrixWorld( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			var listener = this.context.listener;
			var up = this.up;

			this.matrixWorld.decompose( position, quaternion, scale );

			orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

			if ( listener.positionX ) {

				listener.positionX.setValueAtTime( position.x, this.context.currentTime );
				listener.positionY.setValueAtTime( position.y, this.context.currentTime );
				listener.positionZ.setValueAtTime( position.z, this.context.currentTime );
				listener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );
				listener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );
				listener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );
				listener.upX.setValueAtTime( up.x, this.context.currentTime );
				listener.upY.setValueAtTime( up.y, this.context.currentTime );
				listener.upZ.setValueAtTime( up.z, this.context.currentTime );

			} else {

				listener.setPosition( position.x, position.y, position.z );
				listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

			}

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */

function Audio( listener ) {

	Object3D.call( this );

	this.type = 'Audio';

	this.context = listener.context;

	this.gain = this.context.createGain();
	this.gain.connect( listener.getInput() );

	this.autoplay = false;

	this.buffer = null;
	this.loop = false;
	this.startTime = 0;
	this.playbackRate = 1;
	this.isPlaying = false;
	this.hasPlaybackControl = true;
	this.sourceType = 'empty';

	this.filters = [];

}

Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Audio,

	getOutput: function () {

		return this.gain;

	},

	setNodeSource: function ( audioNode ) {

		this.hasPlaybackControl = false;
		this.sourceType = 'audioNode';
		this.source = audioNode;
		this.connect();

		return this;

	},

	setBuffer: function ( audioBuffer ) {

		this.buffer = audioBuffer;
		this.sourceType = 'buffer';

		if ( this.autoplay ) this.play();

		return this;

	},

	play: function () {

		if ( this.isPlaying === true ) {

			console.warn( 'THREE.Audio: Audio is already playing.' );
			return;

		}

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		var source = this.context.createBufferSource();

		source.buffer = this.buffer;
		source.loop = this.loop;
		source.onended = this.onEnded.bind( this );
		source.playbackRate.setValueAtTime( this.playbackRate, this.startTime );
		source.start( 0, this.startTime );

		this.isPlaying = true;

		this.source = source;

		return this.connect();

	},

	pause: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.stop();
		this.startTime = this.context.currentTime;
		this.isPlaying = false;

		return this;

	},

	stop: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.stop();
		this.startTime = 0;
		this.isPlaying = false;

		return this;

	},

	connect: function () {

		if ( this.filters.length > 0 ) {

			this.source.connect( this.filters[ 0 ] );

			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

				this.filters[ i - 1 ].connect( this.filters[ i ] );

			}

			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

		} else {

			this.source.connect( this.getOutput() );

		}

		return this;

	},

	disconnect: function () {

		if ( this.filters.length > 0 ) {

			this.source.disconnect( this.filters[ 0 ] );

			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

				this.filters[ i - 1 ].disconnect( this.filters[ i ] );

			}

			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

		} else {

			this.source.disconnect( this.getOutput() );

		}

		return this;

	},

	getFilters: function () {

		return this.filters;

	},

	setFilters: function ( value ) {

		if ( ! value ) value = [];

		if ( this.isPlaying === true ) {

			this.disconnect();
			this.filters = value;
			this.connect();

		} else {

			this.filters = value;

		}

		return this;

	},

	getFilter: function () {

		return this.getFilters()[ 0 ];

	},

	setFilter: function ( filter ) {

		return this.setFilters( filter ? [ filter ] : [] );

	},

	setPlaybackRate: function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.playbackRate = value;

		if ( this.isPlaying === true ) {

			this.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );

		}

		return this;

	},

	getPlaybackRate: function () {

		return this.playbackRate;

	},

	onEnded: function () {

		this.isPlaying = false;

	},

	getLoop: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return false;

		}

		return this.loop;

	},

	setLoop: function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.loop = value;

		if ( this.isPlaying === true ) {

			this.source.loop = this.loop;

		}

		return this;

	},

	getVolume: function () {

		return this.gain.gain.value;

	},

	setVolume: function ( value ) {

		this.gain.gain.value = value;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function PositionalAudio( listener ) {

	Audio.call( this, listener );

	this.panner = this.context.createPanner();
	this.panner.connect( this.gain );

}

PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

	constructor: PositionalAudio,

	getOutput: function () {

		return this.panner;

	},

	getRefDistance: function () {

		return this.panner.refDistance;

	},

	setRefDistance: function ( value ) {

		this.panner.refDistance = value;

	},

	getRolloffFactor: function () {

		return this.panner.rolloffFactor;

	},

	setRolloffFactor: function ( value ) {

		this.panner.rolloffFactor = value;

	},

	getDistanceModel: function () {

		return this.panner.distanceModel;

	},

	setDistanceModel: function ( value ) {

		this.panner.distanceModel = value;

	},

	getMaxDistance: function () {

		return this.panner.maxDistance;

	},

	setMaxDistance: function ( value ) {

		this.panner.maxDistance = value;

	},

	updateMatrixWorld: ( function () {

		var position = new Vector3();

		return function updateMatrixWorld( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			position.setFromMatrixPosition( this.matrixWorld );

			this.panner.setPosition( position.x, position.y, position.z );

		};

	} )()


} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AudioAnalyser( audio, fftSize ) {

	this.analyser = audio.context.createAnalyser();
	this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

	this.data = new Uint8Array( this.analyser.frequencyBinCount );

	audio.getOutput().connect( this.analyser );

}

Object.assign( AudioAnalyser.prototype, {

	getFrequencyData: function () {

		this.analyser.getByteFrequencyData( this.data );

		return this.data;

	},

	getAverageFrequency: function () {

		var value = 0, data = this.getFrequencyData();

		for ( var i = 0; i < data.length; i ++ ) {

			value += data[ i ];

		}

		return value / data.length;

	}

} );

/**
 *
 * Buffered scene graph property that allows weighted accumulation.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function PropertyMixer( binding, typeName, valueSize ) {

	this.binding = binding;
	this.valueSize = valueSize;

	var bufferType = Float64Array,
		mixFunction;

	switch ( typeName ) {

		case 'quaternion':
			mixFunction = this._slerp;
			break;

		case 'string':
		case 'bool':
			bufferType = Array;
			mixFunction = this._select;
			break;

		default:
			mixFunction = this._lerp;

	}

	this.buffer = new bufferType( valueSize * 4 );
	// layout: [ incoming | accu0 | accu1 | orig ]
	//
	// interpolators can use .buffer as their .result
	// the data then goes to 'incoming'
	//
	// 'accu0' and 'accu1' are used frame-interleaved for
	// the cumulative result and are compared to detect
	// changes
	//
	// 'orig' stores the original state of the property

	this._mixBufferRegion = mixFunction;

	this.cumulativeWeight = 0;

	this.useCount = 0;
	this.referenceCount = 0;

}

Object.assign( PropertyMixer.prototype, {

	// accumulate data in the 'incoming' region into 'accu<i>'
	accumulate: function ( accuIndex, weight ) {

		// note: happily accumulating nothing when weight = 0, the caller knows
		// the weight and shouldn't have made the call in the first place

		var buffer = this.buffer,
			stride = this.valueSize,
			offset = accuIndex * stride + stride,

			currentWeight = this.cumulativeWeight;

		if ( currentWeight === 0 ) {

			// accuN := incoming * weight

			for ( var i = 0; i !== stride; ++ i ) {

				buffer[ offset + i ] = buffer[ i ];

			}

			currentWeight = weight;

		} else {

			// accuN := accuN + incoming * weight

			currentWeight += weight;
			var mix = weight / currentWeight;
			this._mixBufferRegion( buffer, offset, 0, mix, stride );

		}

		this.cumulativeWeight = currentWeight;

	},

	// apply the state of 'accu<i>' to the binding when accus differ
	apply: function ( accuIndex ) {

		var stride = this.valueSize,
			buffer = this.buffer,
			offset = accuIndex * stride + stride,

			weight = this.cumulativeWeight,

			binding = this.binding;

		this.cumulativeWeight = 0;

		if ( weight < 1 ) {

			// accuN := accuN + original * ( 1 - cumulativeWeight )

			var originalValueOffset = stride * 3;

			this._mixBufferRegion(
				buffer, offset, originalValueOffset, 1 - weight, stride );

		}

		for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

			if ( buffer[ i ] !== buffer[ i + stride ] ) {

				// value has changed -> update scene graph

				binding.setValue( buffer, offset );
				break;

			}

		}

	},

	// remember the state of the bound property and copy it to both accus
	saveOriginalState: function () {

		var binding = this.binding;

		var buffer = this.buffer,
			stride = this.valueSize,

			originalValueOffset = stride * 3;

		binding.getValue( buffer, originalValueOffset );

		// accu[0..1] := orig -- initially detect changes against the original
		for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

		}

		this.cumulativeWeight = 0;

	},

	// apply the state previously taken via 'saveOriginalState' to the binding
	restoreOriginalState: function () {

		var originalValueOffset = this.valueSize * 3;
		this.binding.setValue( this.buffer, originalValueOffset );

	},


	// mix functions

	_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

		if ( t >= 0.5 ) {

			for ( var i = 0; i !== stride; ++ i ) {

				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

			}

		}

	},

	_slerp: function ( buffer, dstOffset, srcOffset, t ) {

		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

	},

	_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

		var s = 1 - t;

		for ( var i = 0; i !== stride; ++ i ) {

			var j = dstOffset + i;

			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

		}

	}

} );

/**
 *
 * A reference to a real property in the scene graph.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function Composite( targetGroup, path, optionalParsedPath ) {

	var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

	this._targetGroup = targetGroup;
	this._bindings = targetGroup.subscribe_( path, parsedPath );

}

Object.assign( Composite.prototype, {

	getValue: function ( array, offset ) {

		this.bind(); // bind all binding

		var firstValidIndex = this._targetGroup.nCachedObjects_,
			binding = this._bindings[ firstValidIndex ];

		// and only call .getValue on the first
		if ( binding !== undefined ) binding.getValue( array, offset );

	},

	setValue: function ( array, offset ) {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].setValue( array, offset );

		}

	},

	bind: function () {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].bind();

		}

	},

	unbind: function () {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].unbind();

		}

	}

} );


function PropertyBinding( rootNode, path, parsedPath ) {

	this.path = path;
	this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

	this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

	this.rootNode = rootNode;

}

Object.assign( PropertyBinding, {

	Composite: Composite,

	create: function ( root, path, parsedPath ) {

		if ( ! ( root && root.isAnimationObjectGroup ) ) {

			return new PropertyBinding( root, path, parsedPath );

		} else {

			return new PropertyBinding.Composite( root, path, parsedPath );

		}

	},

	/**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param  {string} name Node name to be sanitized.
	 * @return {string}
	 */
	sanitizeNodeName: function ( name ) {

		return name.replace( /\s/g, '_' ).replace( /[^\w-]/g, '' );

	},

	parseTrackName: function () {

		// Parent directories, delimited by '/' or ':'. Currently unused, but must
		// be matched to parse the rest of the track name.
		var directoryRe = /((?:[\w-]+[\/:])*)/;

		// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
		var nodeRe = /([\w-\.]+)?/;

		// Object on target node, and accessor. Name may contain only word
		// characters. Accessor may contain any character except closing bracket.
		var objectRe = /(?:\.([\w-]+)(?:\[(.+)\])?)?/;

		// Property and accessor. May contain only word characters. Accessor may
		// contain any non-bracket characters.
		var propertyRe = /\.([\w-]+)(?:\[(.+)\])?/;

		var trackRe = new RegExp(''
			+ '^'
			+ directoryRe.source
			+ nodeRe.source
			+ objectRe.source
			+ propertyRe.source
			+ '$'
		);

		var supportedObjectNames = [ 'material', 'materials', 'bones' ];

		return function ( trackName ) {

				var matches = trackRe.exec( trackName );

				if ( ! matches ) {

					throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

				}

				var results = {
					// directoryName: matches[ 1 ], // (tschw) currently unused
					nodeName: matches[ 2 ],
					objectName: matches[ 3 ],
					objectIndex: matches[ 4 ],
					propertyName: matches[ 5 ],     // required
					propertyIndex: matches[ 6 ]
				};

				var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

				if ( lastDot !== undefined && lastDot !== -1 ) {

					var objectName = results.nodeName.substring( lastDot + 1 );

					// Object names must be checked against a whitelist. Otherwise, there
					// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
					// 'bar' could be the objectName, or part of a nodeName (which can
					// include '.' characters).
					if ( supportedObjectNames.indexOf( objectName ) !== -1 ) {

						results.nodeName = results.nodeName.substring( 0, lastDot );
						results.objectName = objectName;

					}

				}

				if ( results.propertyName === null || results.propertyName.length === 0 ) {

					throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

				}

				return results;

			};

	}(),

	findNode: function ( root, nodeName ) {

		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if ( root.skeleton ) {

			var searchSkeleton = function ( skeleton ) {

				for ( var i = 0; i < skeleton.bones.length; i ++ ) {

					var bone = skeleton.bones[ i ];

					if ( bone.name === nodeName ) {

						return bone;

					}

				}

				return null;

			};

			var bone = searchSkeleton( root.skeleton );

			if ( bone ) {

				return bone;

			}

		}

		// search into node subtree.
		if ( root.children ) {

			var searchNodeSubtree = function ( children ) {

				for ( var i = 0; i < children.length; i ++ ) {

					var childNode = children[ i ];

					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					var result = searchNodeSubtree( childNode.children );

					if ( result ) return result;

				}

				return null;

			};

			var subTreeNode = searchNodeSubtree( root.children );

			if ( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	}

} );

Object.assign( PropertyBinding.prototype, { // prototype, continued

	// these are used to "bind" a nonexistent property
	_getValue_unavailable: function () {},
	_setValue_unavailable: function () {},

	BindingType: {
		Direct: 0,
		EntireArray: 1,
		ArrayElement: 2,
		HasFromToArray: 3
	},

	Versioning: {
		None: 0,
		NeedsUpdate: 1,
		MatrixWorldNeedsUpdate: 2
	},

	GetterByBindingType: [

		function getValue_direct( buffer, offset ) {

			buffer[ offset ] = this.node[ this.propertyName ];

		},

		function getValue_array( buffer, offset ) {

			var source = this.resolvedProperty;

			for ( var i = 0, n = source.length; i !== n; ++ i ) {

				buffer[ offset ++ ] = source[ i ];

			}

		},

		function getValue_arrayElement( buffer, offset ) {

			buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

		},

		function getValue_toArray( buffer, offset ) {

			this.resolvedProperty.toArray( buffer, offset );

		}

	],

	SetterByBindingTypeAndVersioning: [

		[
			// Direct

			function setValue_direct( buffer, offset ) {

				this.node[ this.propertyName ] = buffer[ offset ];

			},

			function setValue_direct_setNeedsUpdate( buffer, offset ) {

				this.node[ this.propertyName ] = buffer[ offset ];
				this.targetObject.needsUpdate = true;

			},

			function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.node[ this.propertyName ] = buffer[ offset ];
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// EntireArray

			function setValue_array( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

			},

			function setValue_array_setNeedsUpdate( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

				this.targetObject.needsUpdate = true;

			},

			function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// ArrayElement

			function setValue_arrayElement( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

			},

			function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
				this.targetObject.needsUpdate = true;

			},

			function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// HasToFromArray

			function setValue_fromArray( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );

			},

			function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );
				this.targetObject.needsUpdate = true;

			},

			function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		]

	],

	getValue: function getValue_unbound( targetArray, offset ) {

		this.bind();
		this.getValue( targetArray, offset );

		// Note: This class uses a State pattern on a per-method basis:
		// 'bind' sets 'this.getValue' / 'setValue' and shadows the
		// prototype version of these methods with one that represents
		// the bound state. When the property is not found, the methods
		// become no-ops.

	},

	setValue: function getValue_unbound( sourceArray, offset ) {

		this.bind();
		this.setValue( sourceArray, offset );

	},

	// create getter / setter pair for a property in the scene graph
	bind: function () {

		var targetObject = this.node,
			parsedPath = this.parsedPath,

			objectName = parsedPath.objectName,
			propertyName = parsedPath.propertyName,
			propertyIndex = parsedPath.propertyIndex;

		if ( ! targetObject ) {

			targetObject = PropertyBinding.findNode(
					this.rootNode, parsedPath.nodeName ) || this.rootNode;

			this.node = targetObject;

		}

		// set fail state so we can just 'return' on error
		this.getValue = this._getValue_unavailable;
		this.setValue = this._setValue_unavailable;

		// ensure there is a value node
		if ( ! targetObject ) {

			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
			return;

		}

		if ( objectName ) {

			var objectIndex = parsedPath.objectIndex;

			// special cases were we need to reach deeper into the hierarchy to get the face materials....
			switch ( objectName ) {

				case 'materials':

					if ( ! targetObject.material ) {

						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
						return;

					}

					if ( ! targetObject.material.materials ) {

						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
						return;

					}

					targetObject = targetObject.material.materials;

					break;

				case 'bones':

					if ( ! targetObject.skeleton ) {

						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
						return;

					}

					// potential future optimization: skip this if propertyIndex is already an integer
					// and convert the integer string to a true integer.

					targetObject = targetObject.skeleton.bones;

					// support resolving morphTarget names into indices.
					for ( var i = 0; i < targetObject.length; i ++ ) {

						if ( targetObject[ i ].name === objectIndex ) {

							objectIndex = i;
							break;

						}

					}

					break;

				default:

					if ( targetObject[ objectName ] === undefined ) {

						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
						return;

					}

					targetObject = targetObject[ objectName ];

			}


			if ( objectIndex !== undefined ) {

				if ( targetObject[ objectIndex ] === undefined ) {

					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
					return;

				}

				targetObject = targetObject[ objectIndex ];

			}

		}

		// resolve property
		var nodeProperty = targetObject[ propertyName ];

		if ( nodeProperty === undefined ) {

			var nodeName = parsedPath.nodeName;

			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
				'.' + propertyName + ' but it wasn\'t found.', targetObject );
			return;

		}

		// determine versioning scheme
		var versioning = this.Versioning.None;

		if ( targetObject.needsUpdate !== undefined ) { // material

			versioning = this.Versioning.NeedsUpdate;
			this.targetObject = targetObject;

		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

			versioning = this.Versioning.MatrixWorldNeedsUpdate;
			this.targetObject = targetObject;

		}

		// determine how the property gets bound
		var bindingType = this.BindingType.Direct;

		if ( propertyIndex !== undefined ) {

			// access a sub element of the property array (only primitives are supported right now)

			if ( propertyName === "morphTargetInfluences" ) {

				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

				// support resolving morphTarget names into indices.
				if ( ! targetObject.geometry ) {

					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
					return;

				}

				if ( targetObject.geometry.isBufferGeometry ) {

					if ( ! targetObject.geometry.morphAttributes ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

						if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}


				} else {

					if ( ! targetObject.geometry.morphTargets ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}

				}

			}

			bindingType = this.BindingType.ArrayElement;

			this.resolvedProperty = nodeProperty;
			this.propertyIndex = propertyIndex;

		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

			// must use copy for Object3D.Euler/Quaternion

			bindingType = this.BindingType.HasFromToArray;

			this.resolvedProperty = nodeProperty;

		} else if ( Array.isArray( nodeProperty ) ) {

			bindingType = this.BindingType.EntireArray;

			this.resolvedProperty = nodeProperty;

		} else {

			this.propertyName = propertyName;

		}

		// select getter / setter
		this.getValue = this.GetterByBindingType[ bindingType ];
		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

	},

	unbind: function () {

		this.node = null;

		// back to the prototype version of getValue / setValue
		// note: avoiding to mutate the shape of 'this' via 'delete'
		this.getValue = this._getValue_unbound;
		this.setValue = this._setValue_unbound;

	}

} );

//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign( PropertyBinding.prototype, {

	// initial state of these methods that calls 'bind'
	_getValue_unbound: PropertyBinding.prototype.getValue,
	_setValue_unbound: PropertyBinding.prototype.setValue,

} );

/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 * 	-	Add objects you would otherwise pass as 'root' to the
 * 		constructor or the .clipAction method of AnimationMixer.
 *
 * 	-	Instead pass this object as 'root'.
 *
 * 	-	You can also add and remove objects later when the mixer
 * 		is running.
 *
 * Note:
 *
 *  	Objects of this class appear as one object to the mixer,
 *  	so cache control of the individual objects must be done
 *  	on the group.
 *
 * Limitation:
 *
 * 	- 	The animated properties must be compatible among the
 * 		all objects in the group.
 *
 *  -	A single property can either be controlled through a
 *  	target group or directly, but not both.
 *
 * @author tschw
 */

function AnimationObjectGroup( var_args ) {

	this.uuid = _Math.generateUUID();

	// cached objects followed by the active ones
	this._objects = Array.prototype.slice.call( arguments );

	this.nCachedObjects_ = 0;			// threshold
	// note: read by PropertyBinding.Composite

	var indices = {};
	this._indicesByUUID = indices;		// for bookkeeping

	for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

		indices[ arguments[ i ].uuid ] = i;

	}

	this._paths = [];					// inside: string
	this._parsedPaths = [];				// inside: { we don't care, here }
	this._bindings = []; 				// inside: Array< PropertyBinding >
	this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

	var scope = this;

	this.stats = {

		objects: {
			get total() { return scope._objects.length; },
			get inUse() { return this.total - scope.nCachedObjects_; }
		},

		get bindingsPerObject() { return scope._bindings.length; }

	};

}

Object.assign( AnimationObjectGroup.prototype, {

	isAnimationObjectGroup: true,

	add: function( var_args ) {

		var objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			paths = this._paths,
			parsedPaths = this._parsedPaths,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ],
				knownObject = undefined;

			if ( index === undefined ) {

				// unknown object -> add it to the ACTIVE region

				index = nObjects ++;
				indicesByUUID[ uuid ] = index;
				objects.push( object );

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					bindings[ j ].push(
							new PropertyBinding(
								object, paths[ j ], parsedPaths[ j ] ) );

				}

			} else if ( index < nCachedObjects ) {

				knownObject = objects[ index ];

				// move existing object to the ACTIVE region

				var firstActiveIndex = -- nCachedObjects,
					lastCachedObject = objects[ firstActiveIndex ];

				indicesByUUID[ lastCachedObject.uuid ] = index;
				objects[ index ] = lastCachedObject;

				indicesByUUID[ uuid ] = firstActiveIndex;
				objects[ firstActiveIndex ] = object;

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					var bindingsForPath = bindings[ j ],
						lastCached = bindingsForPath[ firstActiveIndex ],
						binding = bindingsForPath[ index ];

					bindingsForPath[ index ] = lastCached;

					if ( binding === undefined ) {

						// since we do not bother to create new bindings
						// for objects that are cached, the binding may
						// or may not exist

						binding = new PropertyBinding(
								object, paths[ j ], parsedPaths[ j ] );

					}

					bindingsForPath[ firstActiveIndex ] = binding;

				}

			} else if ( objects[ index ] !== knownObject ) {

				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
						'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

			} // else the object is already where we want it to be

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	remove: function( var_args ) {

		var objects = this._objects,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ];

			if ( index !== undefined && index >= nCachedObjects ) {

				// move existing object into the CACHED region

				var lastCachedIndex = nCachedObjects ++,
					firstActiveObject = objects[ lastCachedIndex ];

				indicesByUUID[ firstActiveObject.uuid ] = index;
				objects[ index ] = firstActiveObject;

				indicesByUUID[ uuid ] = lastCachedIndex;
				objects[ lastCachedIndex ] = object;

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					var bindingsForPath = bindings[ j ],
						firstActive = bindingsForPath[ lastCachedIndex ],
						binding = bindingsForPath[ index ];

					bindingsForPath[ index ] = firstActive;
					bindingsForPath[ lastCachedIndex ] = binding;

				}

			}

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	// remove & forget
	uncache: function( var_args ) {

		var objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ];

			if ( index !== undefined ) {

				delete indicesByUUID[ uuid ];

				if ( index < nCachedObjects ) {

					// object is cached, shrink the CACHED region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ],
						lastIndex = -- nObjects,
						lastObject = objects[ lastIndex ];

					// last cached object takes this object's place
					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					// last object goes to the activated slot and pop
					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = lastObject;
					objects.pop();

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							last = bindingsForPath[ lastIndex ];

						bindingsForPath[ index ] = lastCached;
						bindingsForPath[ firstActiveIndex ] = last;
						bindingsForPath.pop();

					}

				} else {

					// object is active, just swap with the last and pop

					var lastIndex = -- nObjects,
						lastObject = objects[ lastIndex ];

					indicesByUUID[ lastObject.uuid ] = index;
					objects[ index ] = lastObject;
					objects.pop();

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ];

						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
						bindingsForPath.pop();

					}

				} // cached or active

			} // if object is known

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	// Internal interface used by befriended PropertyBinding.Composite:

	subscribe_: function ( path, parsedPath ) {

		// returns an array of bindings for the given path that is changed
		// according to the contained objects in the group

		var indicesByPath = this._bindingsIndicesByPath,
			index = indicesByPath[ path ],
			bindings = this._bindings;

		if ( index !== undefined ) return bindings[ index ];

		var paths = this._paths,
			parsedPaths = this._parsedPaths,
			objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			bindingsForPath = new Array( nObjects );

		index = bindings.length;

		indicesByPath[ path ] = index;

		paths.push( path );
		parsedPaths.push( parsedPath );
		bindings.push( bindingsForPath );

		for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

			var object = objects[ i ];
			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

		}

		return bindingsForPath;

	},

	unsubscribe_: function ( path ) {

		// tells the group to forget about a property path and no longer
		// update the array previously obtained with 'subscribe_'

		var indicesByPath = this._bindingsIndicesByPath,
			index = indicesByPath[ path ];

		if ( index !== undefined ) {

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				lastBindingsIndex = bindings.length - 1,
				lastBindings = bindings[ lastBindingsIndex ],
				lastBindingsPath = path[ lastBindingsIndex ];

			indicesByPath[ lastBindingsPath ] = index;

			bindings[ index ] = lastBindings;
			bindings.pop();

			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
			parsedPaths.pop();

			paths[ index ] = paths[ lastBindingsIndex ];
			paths.pop();

		}

	}

} );

/**
 *
 * Action provided by AnimationMixer for scheduling clip playback on specific
 * objects.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 *
 */

function AnimationAction( mixer, clip, localRoot ) {

	this._mixer = mixer;
	this._clip = clip;
	this._localRoot = localRoot || null;

	var tracks = clip.tracks,
		nTracks = tracks.length,
		interpolants = new Array( nTracks );

	var interpolantSettings = {
			endingStart: 	ZeroCurvatureEnding,
			endingEnd:		ZeroCurvatureEnding
	};

	for ( var i = 0; i !== nTracks; ++ i ) {

		var interpolant = tracks[ i ].createInterpolant( null );
		interpolants[ i ] = interpolant;
		interpolant.settings = interpolantSettings;

	}

	this._interpolantSettings = interpolantSettings;

	this._interpolants = interpolants;	// bound by the mixer

	// inside: PropertyMixer (managed by the mixer)
	this._propertyBindings = new Array( nTracks );

	this._cacheIndex = null;			// for the memory manager
	this._byClipCacheIndex = null;		// for the memory manager

	this._timeScaleInterpolant = null;
	this._weightInterpolant = null;

	this.loop = LoopRepeat;
	this._loopCount = -1;

	// global mixer time when the action is to be started
	// it's set back to 'null' upon start of the action
	this._startTime = null;

	// scaled local time of the action
	// gets clamped or wrapped to 0..clip.duration according to loop
	this.time = 0;

	this.timeScale = 1;
	this._effectiveTimeScale = 1;

	this.weight = 1;
	this._effectiveWeight = 1;

	this.repetitions = Infinity; 		// no. of repetitions when looping

	this.paused = false;				// true -> zero effective time scale
	this.enabled = true;				// false -> zero effective weight

	this.clampWhenFinished 	= false;	// keep feeding the last frame?

	this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
	this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

}

Object.assign( AnimationAction.prototype, {

	// State & Scheduling

	play: function() {

		this._mixer._activateAction( this );

		return this;

	},

	stop: function() {

		this._mixer._deactivateAction( this );

		return this.reset();

	},

	reset: function() {

		this.paused = false;
		this.enabled = true;

		this.time = 0;			// restart clip
		this._loopCount = -1;	// forget previous loops
		this._startTime = null;	// forget scheduling

		return this.stopFading().stopWarping();

	},

	isRunning: function() {

		return this.enabled && ! this.paused && this.timeScale !== 0 &&
				this._startTime === null && this._mixer._isActiveAction( this );

	},

	// return true when play has been called
	isScheduled: function() {

		return this._mixer._isActiveAction( this );

	},

	startAt: function( time ) {

		this._startTime = time;

		return this;

	},

	setLoop: function( mode, repetitions ) {

		this.loop = mode;
		this.repetitions = repetitions;

		return this;

	},

	// Weight

	// set the weight stopping any scheduled fading
	// although .enabled = false yields an effective weight of zero, this
	// method does *not* change .enabled, because it would be confusing
	setEffectiveWeight: function( weight ) {

		this.weight = weight;

		// note: same logic as when updated at runtime
		this._effectiveWeight = this.enabled ? weight : 0;

		return this.stopFading();

	},

	// return the weight considering fading and .enabled
	getEffectiveWeight: function() {

		return this._effectiveWeight;

	},

	fadeIn: function( duration ) {

		return this._scheduleFading( duration, 0, 1 );

	},

	fadeOut: function( duration ) {

		return this._scheduleFading( duration, 1, 0 );

	},

	crossFadeFrom: function( fadeOutAction, duration, warp ) {

		fadeOutAction.fadeOut( duration );
		this.fadeIn( duration );

		if( warp ) {

			var fadeInDuration = this._clip.duration,
				fadeOutDuration = fadeOutAction._clip.duration,

				startEndRatio = fadeOutDuration / fadeInDuration,
				endStartRatio = fadeInDuration / fadeOutDuration;

			fadeOutAction.warp( 1.0, startEndRatio, duration );
			this.warp( endStartRatio, 1.0, duration );

		}

		return this;

	},

	crossFadeTo: function( fadeInAction, duration, warp ) {

		return fadeInAction.crossFadeFrom( this, duration, warp );

	},

	stopFading: function() {

		var weightInterpolant = this._weightInterpolant;

		if ( weightInterpolant !== null ) {

			this._weightInterpolant = null;
			this._mixer._takeBackControlInterpolant( weightInterpolant );

		}

		return this;

	},

	// Time Scale Control

	// set the time scale stopping any scheduled warping
	// although .paused = true yields an effective time scale of zero, this
	// method does *not* change .paused, because it would be confusing
	setEffectiveTimeScale: function( timeScale ) {

		this.timeScale = timeScale;
		this._effectiveTimeScale = this.paused ? 0 :timeScale;

		return this.stopWarping();

	},

	// return the time scale considering warping and .paused
	getEffectiveTimeScale: function() {

		return this._effectiveTimeScale;

	},

	setDuration: function( duration ) {

		this.timeScale = this._clip.duration / duration;

		return this.stopWarping();

	},

	syncWith: function( action ) {

		this.time = action.time;
		this.timeScale = action.timeScale;

		return this.stopWarping();

	},

	halt: function( duration ) {

		return this.warp( this._effectiveTimeScale, 0, duration );

	},

	warp: function( startTimeScale, endTimeScale, duration ) {

		var mixer = this._mixer, now = mixer.time,
			interpolant = this._timeScaleInterpolant,

			timeScale = this.timeScale;

		if ( interpolant === null ) {

			interpolant = mixer._lendControlInterpolant();
			this._timeScaleInterpolant = interpolant;

		}

		var times = interpolant.parameterPositions,
			values = interpolant.sampleValues;

		times[ 0 ] = now;
		times[ 1 ] = now + duration;

		values[ 0 ] = startTimeScale / timeScale;
		values[ 1 ] = endTimeScale / timeScale;

		return this;

	},

	stopWarping: function() {

		var timeScaleInterpolant = this._timeScaleInterpolant;

		if ( timeScaleInterpolant !== null ) {

			this._timeScaleInterpolant = null;
			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

		}

		return this;

	},

	// Object Accessors

	getMixer: function() {

		return this._mixer;

	},

	getClip: function() {

		return this._clip;

	},

	getRoot: function() {

		return this._localRoot || this._mixer._root;

	},

	// Interna

	_update: function( time, deltaTime, timeDirection, accuIndex ) {

		// called by the mixer

		if ( ! this.enabled ) {

			// call ._updateWeight() to update ._effectiveWeight

			this._updateWeight( time );
			return;

		}

		var startTime = this._startTime;

		if ( startTime !== null ) {

			// check for scheduled start of action

			var timeRunning = ( time - startTime ) * timeDirection;
			if ( timeRunning < 0 || timeDirection === 0 ) {

				return; // yet to come / don't decide when delta = 0

			}

			// start

			this._startTime = null; // unschedule
			deltaTime = timeDirection * timeRunning;

		}

		// apply time scale and advance time

		deltaTime *= this._updateTimeScale( time );
		var clipTime = this._updateTime( deltaTime );

		// note: _updateTime may disable the action resulting in
		// an effective weight of 0

		var weight = this._updateWeight( time );

		if ( weight > 0 ) {

			var interpolants = this._interpolants;
			var propertyMixers = this._propertyBindings;

			for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

				interpolants[ j ].evaluate( clipTime );
				propertyMixers[ j ].accumulate( accuIndex, weight );

			}

		}

	},

	_updateWeight: function( time ) {

		var weight = 0;

		if ( this.enabled ) {

			weight = this.weight;
			var interpolant = this._weightInterpolant;

			if ( interpolant !== null ) {

				var interpolantValue = interpolant.evaluate( time )[ 0 ];

				weight *= interpolantValue;

				if ( time > interpolant.parameterPositions[ 1 ] ) {

					this.stopFading();

					if ( interpolantValue === 0 ) {

						// faded out, disable
						this.enabled = false;

					}

				}

			}

		}

		this._effectiveWeight = weight;
		return weight;

	},

	_updateTimeScale: function( time ) {

		var timeScale = 0;

		if ( ! this.paused ) {

			timeScale = this.timeScale;

			var interpolant = this._timeScaleInterpolant;

			if ( interpolant !== null ) {

				var interpolantValue = interpolant.evaluate( time )[ 0 ];

				timeScale *= interpolantValue;

				if ( time > interpolant.parameterPositions[ 1 ] ) {

					this.stopWarping();

					if ( timeScale === 0 ) {

						// motion has halted, pause
						this.paused = true;

					} else {

						// warp done - apply final time scale
						this.timeScale = timeScale;

					}

				}

			}

		}

		this._effectiveTimeScale = timeScale;
		return timeScale;

	},

	_updateTime: function( deltaTime ) {

		var time = this.time + deltaTime;

		if ( deltaTime === 0 ) return time;

		var duration = this._clip.duration,

			loop = this.loop,
			loopCount = this._loopCount;

		if ( loop === LoopOnce ) {

			if ( loopCount === -1 ) {
				// just started

				this._loopCount = 0;
				this._setEndings( true, true, false );

			}

			handle_stop: {

				if ( time >= duration ) {

					time = duration;

				} else if ( time < 0 ) {

					time = 0;

				} else break handle_stop;

				if ( this.clampWhenFinished ) this.paused = true;
				else this.enabled = false;

				this._mixer.dispatchEvent( {
					type: 'finished', action: this,
					direction: deltaTime < 0 ? -1 : 1
				} );

			}

		} else { // repetitive Repeat or PingPong

			var pingPong = ( loop === LoopPingPong );

			if ( loopCount === -1 ) {
				// just started

				if ( deltaTime >= 0 ) {

					loopCount = 0;

					this._setEndings(
							true, this.repetitions === 0, pingPong );

				} else {

					// when looping in reverse direction, the initial
					// transition through zero counts as a repetition,
					// so leave loopCount at -1

					this._setEndings(
							this.repetitions === 0, true, pingPong );

				}

			}

			if ( time >= duration || time < 0 ) {
				// wrap around

				var loopDelta = Math.floor( time / duration ); // signed
				time -= duration * loopDelta;

				loopCount += Math.abs( loopDelta );

				var pending = this.repetitions - loopCount;

				if ( pending < 0 ) {
					// have to stop (switch state, clamp time, fire event)

					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;

					time = deltaTime > 0 ? duration : 0;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime > 0 ? 1 : -1
					} );

				} else {
					// keep running

					if ( pending === 0 ) {
						// entering the last round

						var atStart = deltaTime < 0;
						this._setEndings( atStart, ! atStart, pingPong );

					} else {

						this._setEndings( false, false, pingPong );

					}

					this._loopCount = loopCount;

					this._mixer.dispatchEvent( {
						type: 'loop', action: this, loopDelta: loopDelta
					} );

				}

			}

			if ( pingPong && ( loopCount & 1 ) === 1 ) {
				// invert time for the "pong round"

				this.time = time;
				return duration - time;

			}

		}

		this.time = time;
		return time;

	},

	_setEndings: function( atStart, atEnd, pingPong ) {

		var settings = this._interpolantSettings;

		if ( pingPong ) {

			settings.endingStart 	= ZeroSlopeEnding;
			settings.endingEnd		= ZeroSlopeEnding;

		} else {

			// assuming for LoopOnce atStart == atEnd == true

			if ( atStart ) {

				settings.endingStart = this.zeroSlopeAtStart ?
						ZeroSlopeEnding : ZeroCurvatureEnding;

			} else {

				settings.endingStart = WrapAroundEnding;

			}

			if ( atEnd ) {

				settings.endingEnd = this.zeroSlopeAtEnd ?
						ZeroSlopeEnding : ZeroCurvatureEnding;

			} else {

				settings.endingEnd 	 = WrapAroundEnding;

			}

		}

	},

	_scheduleFading: function( duration, weightNow, weightThen ) {

		var mixer = this._mixer, now = mixer.time,
			interpolant = this._weightInterpolant;

		if ( interpolant === null ) {

			interpolant = mixer._lendControlInterpolant();
			this._weightInterpolant = interpolant;

		}

		var times = interpolant.parameterPositions,
			values = interpolant.sampleValues;

		times[ 0 ] = now; 				values[ 0 ] = weightNow;
		times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

		return this;

	}

} );

/**
 *
 * Player for AnimationClips.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function AnimationMixer( root ) {

	this._root = root;
	this._initMemoryManager();
	this._accuIndex = 0;

	this.time = 0;

	this.timeScale = 1.0;

}

Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {

	_bindAction: function ( action, prototypeAction ) {

		var root = action._localRoot || this._root,
			tracks = action._clip.tracks,
			nTracks = tracks.length,
			bindings = action._propertyBindings,
			interpolants = action._interpolants,
			rootUuid = root.uuid,
			bindingsByRoot = this._bindingsByRootAndName,
			bindingsByName = bindingsByRoot[ rootUuid ];

		if ( bindingsByName === undefined ) {

			bindingsByName = {};
			bindingsByRoot[ rootUuid ] = bindingsByName;

		}

		for ( var i = 0; i !== nTracks; ++ i ) {

			var track = tracks[ i ],
				trackName = track.name,
				binding = bindingsByName[ trackName ];

			if ( binding !== undefined ) {

				bindings[ i ] = binding;

			} else {

				binding = bindings[ i ];

				if ( binding !== undefined ) {

					// existing binding, make sure the cache knows

					if ( binding._cacheIndex === null ) {

						++ binding.referenceCount;
						this._addInactiveBinding( binding, rootUuid, trackName );

					}

					continue;

				}

				var path = prototypeAction && prototypeAction.
						_propertyBindings[ i ].binding.parsedPath;

				binding = new PropertyMixer(
					PropertyBinding.create( root, trackName, path ),
					track.ValueTypeName, track.getValueSize() );

				++ binding.referenceCount;
				this._addInactiveBinding( binding, rootUuid, trackName );

				bindings[ i ] = binding;

			}

			interpolants[ i ].resultBuffer = binding.buffer;

		}

	},

	_activateAction: function ( action ) {

		if ( ! this._isActiveAction( action ) ) {

			if ( action._cacheIndex === null ) {

				// this action has been forgotten by the cache, but the user
				// appears to be still using it -> rebind

				var rootUuid = ( action._localRoot || this._root ).uuid,
					clipUuid = action._clip.uuid,
					actionsForClip = this._actionsByClip[ clipUuid ];

				this._bindAction( action,
					actionsForClip && actionsForClip.knownActions[ 0 ] );

				this._addInactiveAction( action, clipUuid, rootUuid );

			}

			var bindings = action._propertyBindings;

			// increment reference counts / sort out state
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( binding.useCount ++ === 0 ) {

					this._lendBinding( binding );
					binding.saveOriginalState();

				}

			}

			this._lendAction( action );

		}

	},

	_deactivateAction: function ( action ) {

		if ( this._isActiveAction( action ) ) {

			var bindings = action._propertyBindings;

			// decrement reference counts / sort out state
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.useCount === 0 ) {

					binding.restoreOriginalState();
					this._takeBackBinding( binding );

				}

			}

			this._takeBackAction( action );

		}

	},

	// Memory manager

	_initMemoryManager: function () {

		this._actions = []; // 'nActiveActions' followed by inactive ones
		this._nActiveActions = 0;

		this._actionsByClip = {};
		// inside:
		// {
		// 		knownActions: Array< AnimationAction >	- used as prototypes
		// 		actionByRoot: AnimationAction			- lookup
		// }


		this._bindings = []; // 'nActiveBindings' followed by inactive ones
		this._nActiveBindings = 0;

		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


		this._controlInterpolants = []; // same game as above
		this._nActiveControlInterpolants = 0;

		var scope = this;

		this.stats = {

			actions: {
				get total() { return scope._actions.length; },
				get inUse() { return scope._nActiveActions; }
			},
			bindings: {
				get total() { return scope._bindings.length; },
				get inUse() { return scope._nActiveBindings; }
			},
			controlInterpolants: {
				get total() { return scope._controlInterpolants.length; },
				get inUse() { return scope._nActiveControlInterpolants; }
			}

		};

	},

	// Memory management for AnimationAction objects

	_isActiveAction: function ( action ) {

		var index = action._cacheIndex;
		return index !== null && index < this._nActiveActions;

	},

	_addInactiveAction: function ( action, clipUuid, rootUuid ) {

		var actions = this._actions,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ];

		if ( actionsForClip === undefined ) {

			actionsForClip = {

				knownActions: [ action ],
				actionByRoot: {}

			};

			action._byClipCacheIndex = 0;

			actionsByClip[ clipUuid ] = actionsForClip;

		} else {

			var knownActions = actionsForClip.knownActions;

			action._byClipCacheIndex = knownActions.length;
			knownActions.push( action );

		}

		action._cacheIndex = actions.length;
		actions.push( action );

		actionsForClip.actionByRoot[ rootUuid ] = action;

	},

	_removeInactiveAction: function ( action ) {

		var actions = this._actions,
			lastInactiveAction = actions[ actions.length - 1 ],
			cacheIndex = action._cacheIndex;

		lastInactiveAction._cacheIndex = cacheIndex;
		actions[ cacheIndex ] = lastInactiveAction;
		actions.pop();

		action._cacheIndex = null;


		var clipUuid = action._clip.uuid,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ],
			knownActionsForClip = actionsForClip.knownActions,

			lastKnownAction =
				knownActionsForClip[ knownActionsForClip.length - 1 ],

			byClipCacheIndex = action._byClipCacheIndex;

		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
		knownActionsForClip.pop();

		action._byClipCacheIndex = null;


		var actionByRoot = actionsForClip.actionByRoot,
			rootUuid = ( action._localRoot || this._root ).uuid;

		delete actionByRoot[ rootUuid ];

		if ( knownActionsForClip.length === 0 ) {

			delete actionsByClip[ clipUuid ];

		}

		this._removeInactiveBindingsForAction( action );

	},

	_removeInactiveBindingsForAction: function ( action ) {

		var bindings = action._propertyBindings;
		for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

			var binding = bindings[ i ];

			if ( -- binding.referenceCount === 0 ) {

				this._removeInactiveBinding( binding );

			}

		}

	},

	_lendAction: function ( action ) {

		// [ active actions |  inactive actions  ]
		// [  active actions >| inactive actions ]
		//                 s        a
		//                  <-swap->
		//                 a        s

		var actions = this._actions,
			prevIndex = action._cacheIndex,

			lastActiveIndex = this._nActiveActions ++,

			firstInactiveAction = actions[ lastActiveIndex ];

		action._cacheIndex = lastActiveIndex;
		actions[ lastActiveIndex ] = action;

		firstInactiveAction._cacheIndex = prevIndex;
		actions[ prevIndex ] = firstInactiveAction;

	},

	_takeBackAction: function ( action ) {

		// [  active actions  | inactive actions ]
		// [ active actions |< inactive actions  ]
		//        a        s
		//         <-swap->
		//        s        a

		var actions = this._actions,
			prevIndex = action._cacheIndex,

			firstInactiveIndex = -- this._nActiveActions,

			lastActiveAction = actions[ firstInactiveIndex ];

		action._cacheIndex = firstInactiveIndex;
		actions[ firstInactiveIndex ] = action;

		lastActiveAction._cacheIndex = prevIndex;
		actions[ prevIndex ] = lastActiveAction;

	},

	// Memory management for PropertyMixer objects

	_addInactiveBinding: function ( binding, rootUuid, trackName ) {

		var bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ],

			bindings = this._bindings;

		if ( bindingByName === undefined ) {

			bindingByName = {};
			bindingsByRoot[ rootUuid ] = bindingByName;

		}

		bindingByName[ trackName ] = binding;

		binding._cacheIndex = bindings.length;
		bindings.push( binding );

	},

	_removeInactiveBinding: function ( binding ) {

		var bindings = this._bindings,
			propBinding = binding.binding,
			rootUuid = propBinding.rootNode.uuid,
			trackName = propBinding.path,
			bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ],

			lastInactiveBinding = bindings[ bindings.length - 1 ],
			cacheIndex = binding._cacheIndex;

		lastInactiveBinding._cacheIndex = cacheIndex;
		bindings[ cacheIndex ] = lastInactiveBinding;
		bindings.pop();

		delete bindingByName[ trackName ];

		remove_empty_map: {

			for ( var _ in bindingByName ) break remove_empty_map;

			delete bindingsByRoot[ rootUuid ];

		}

	},

	_lendBinding: function ( binding ) {

		var bindings = this._bindings,
			prevIndex = binding._cacheIndex,

			lastActiveIndex = this._nActiveBindings ++,

			firstInactiveBinding = bindings[ lastActiveIndex ];

		binding._cacheIndex = lastActiveIndex;
		bindings[ lastActiveIndex ] = binding;

		firstInactiveBinding._cacheIndex = prevIndex;
		bindings[ prevIndex ] = firstInactiveBinding;

	},

	_takeBackBinding: function ( binding ) {

		var bindings = this._bindings,
			prevIndex = binding._cacheIndex,

			firstInactiveIndex = -- this._nActiveBindings,

			lastActiveBinding = bindings[ firstInactiveIndex ];

		binding._cacheIndex = firstInactiveIndex;
		bindings[ firstInactiveIndex ] = binding;

		lastActiveBinding._cacheIndex = prevIndex;
		bindings[ prevIndex ] = lastActiveBinding;

	},


	// Memory management of Interpolants for weight and time scale

	_lendControlInterpolant: function () {

		var interpolants = this._controlInterpolants,
			lastActiveIndex = this._nActiveControlInterpolants ++,
			interpolant = interpolants[ lastActiveIndex ];

		if ( interpolant === undefined ) {

			interpolant = new LinearInterpolant(
				new Float32Array( 2 ), new Float32Array( 2 ),
				1, this._controlInterpolantsResultBuffer );

			interpolant.__cacheIndex = lastActiveIndex;
			interpolants[ lastActiveIndex ] = interpolant;

		}

		return interpolant;

	},

	_takeBackControlInterpolant: function ( interpolant ) {

		var interpolants = this._controlInterpolants,
			prevIndex = interpolant.__cacheIndex,

			firstInactiveIndex = -- this._nActiveControlInterpolants,

			lastActiveInterpolant = interpolants[ firstInactiveIndex ];

		interpolant.__cacheIndex = firstInactiveIndex;
		interpolants[ firstInactiveIndex ] = interpolant;

		lastActiveInterpolant.__cacheIndex = prevIndex;
		interpolants[ prevIndex ] = lastActiveInterpolant;

	},

	_controlInterpolantsResultBuffer: new Float32Array( 1 ),

	// return an action for a clip optionally using a custom root target
	// object (this method allocates a lot of dynamic memory in case a
	// previously unknown clip/root combination is specified)
	clipAction: function ( clip, optionalRoot ) {

		var root = optionalRoot || this._root,
			rootUuid = root.uuid,

			clipObject = typeof clip === 'string' ?
				AnimationClip.findByName( root, clip ) : clip,

			clipUuid = clipObject !== null ? clipObject.uuid : clip,

			actionsForClip = this._actionsByClip[ clipUuid ],
			prototypeAction = null;

		if ( actionsForClip !== undefined ) {

			var existingAction =
					actionsForClip.actionByRoot[ rootUuid ];

			if ( existingAction !== undefined ) {

				return existingAction;

			}

			// we know the clip, so we don't have to parse all
			// the bindings again but can just copy
			prototypeAction = actionsForClip.knownActions[ 0 ];

			// also, take the clip from the prototype action
			if ( clipObject === null )
				clipObject = prototypeAction._clip;

		}

		// clip must be known when specified via string
		if ( clipObject === null ) return null;

		// allocate all resources required to run it
		var newAction = new AnimationAction( this, clipObject, optionalRoot );

		this._bindAction( newAction, prototypeAction );

		// and make the action known to the memory manager
		this._addInactiveAction( newAction, clipUuid, rootUuid );

		return newAction;

	},

	// get an existing action
	existingAction: function ( clip, optionalRoot ) {

		var root = optionalRoot || this._root,
			rootUuid = root.uuid,

			clipObject = typeof clip === 'string' ?
				AnimationClip.findByName( root, clip ) : clip,

			clipUuid = clipObject ? clipObject.uuid : clip,

			actionsForClip = this._actionsByClip[ clipUuid ];

		if ( actionsForClip !== undefined ) {

			return actionsForClip.actionByRoot[ rootUuid ] || null;

		}

		return null;

	},

	// deactivates all previously scheduled actions
	stopAllAction: function () {

		var actions = this._actions,
			nActions = this._nActiveActions,
			bindings = this._bindings,
			nBindings = this._nActiveBindings;

		this._nActiveActions = 0;
		this._nActiveBindings = 0;

		for ( var i = 0; i !== nActions; ++ i ) {

			actions[ i ].reset();

		}

		for ( var i = 0; i !== nBindings; ++ i ) {

			bindings[ i ].useCount = 0;

		}

		return this;

	},

	// advance the time and update apply the animation
	update: function ( deltaTime ) {

		deltaTime *= this.timeScale;

		var actions = this._actions,
			nActions = this._nActiveActions,

			time = this.time += deltaTime,
			timeDirection = Math.sign( deltaTime ),

			accuIndex = this._accuIndex ^= 1;

		// run active actions

		for ( var i = 0; i !== nActions; ++ i ) {

			var action = actions[ i ];

			action._update( time, deltaTime, timeDirection, accuIndex );

		}

		// update scene graph

		var bindings = this._bindings,
			nBindings = this._nActiveBindings;

		for ( var i = 0; i !== nBindings; ++ i ) {

			bindings[ i ].apply( accuIndex );

		}

		return this;

	},

	// return this mixer's root target object
	getRoot: function () {

		return this._root;

	},

	// free all resources specific to a particular clip
	uncacheClip: function ( clip ) {

		var actions = this._actions,
			clipUuid = clip.uuid,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ];

		if ( actionsForClip !== undefined ) {

			// note: just calling _removeInactiveAction would mess up the
			// iteration state and also require updating the state we can
			// just throw away

			var actionsToRemove = actionsForClip.knownActions;

			for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

				var action = actionsToRemove[ i ];

				this._deactivateAction( action );

				var cacheIndex = action._cacheIndex,
					lastInactiveAction = actions[ actions.length - 1 ];

				action._cacheIndex = null;
				action._byClipCacheIndex = null;

				lastInactiveAction._cacheIndex = cacheIndex;
				actions[ cacheIndex ] = lastInactiveAction;
				actions.pop();

				this._removeInactiveBindingsForAction( action );

			}

			delete actionsByClip[ clipUuid ];

		}

	},

	// free all resources specific to a particular root target object
	uncacheRoot: function ( root ) {

		var rootUuid = root.uuid,
			actionsByClip = this._actionsByClip;

		for ( var clipUuid in actionsByClip ) {

			var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
				action = actionByRoot[ rootUuid ];

			if ( action !== undefined ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

		var bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ];

		if ( bindingByName !== undefined ) {

			for ( var trackName in bindingByName ) {

				var binding = bindingByName[ trackName ];
				binding.restoreOriginalState();
				this._removeInactiveBinding( binding );

			}

		}

	},

	// remove a targeted clip from the cache
	uncacheAction: function ( clip, optionalRoot ) {

		var action = this.existingAction( clip, optionalRoot );

		if ( action !== null ) {

			this._deactivateAction( action );
			this._removeInactiveAction( action );

		}

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Uniform( value ) {

	if ( typeof value === 'string' ) {

		console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
		value = arguments[ 1 ];

	}

	this.value = value;

}

Uniform.prototype.clone = function () {

	return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

};

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedBufferGeometry() {

	BufferGeometry.call( this );

	this.type = 'InstancedBufferGeometry';
	this.maxInstancedCount = undefined;

}

InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

	constructor: InstancedBufferGeometry,

	isInstancedBufferGeometry: true,

	addGroup: function ( start, count, materialIndex ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex

		} );

	},

	copy: function ( source ) {

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		var attributes = source.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );

		}

		var groups = source.groups;

		for ( var i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.materialIndex );

		}

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

	this.uuid = _Math.generateUUID();

	this.data = interleavedBuffer;
	this.itemSize = itemSize;
	this.offset = offset;

	this.normalized = normalized === true;

}

Object.defineProperties( InterleavedBufferAttribute.prototype, {

	count: {

		get: function () {

			return this.data.count;

		}

	},

	array: {

		get: function () {

			return this.data.array;

		}

	}

} );

Object.assign( InterleavedBufferAttribute.prototype, {

	isInterleavedBufferAttribute: true,

	setX: function ( index, x ) {

		this.data.array[ index * this.data.stride + this.offset ] = x;

		return this;

	},

	setY: function ( index, y ) {

		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

		return this;

	},

	setZ: function ( index, z ) {

		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

		return this;

	},

	setW: function ( index, w ) {

		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

		return this;

	},

	getX: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset ];

	},

	getY: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 1 ];

	},

	getZ: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 2 ];

	},

	getW: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 3 ];

	},

	setXY: function ( index, x, y ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;

		return this;

	},

	setXYZ: function ( index, x, y, z ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;

		return this;

	},

	setXYZW: function ( index, x, y, z, w ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;
		this.data.array[ index + 3 ] = w;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InterleavedBuffer( array, stride ) {

	this.uuid = _Math.generateUUID();

	this.array = array;
	this.stride = stride;
	this.count = array !== undefined ? array.length / stride : 0;

	this.dynamic = false;
	this.updateRange = { offset: 0, count: - 1 };

	this.onUploadCallback = function () {};

	this.version = 0;

}

Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

	set: function ( value ) {

		if ( value === true ) this.version ++;

	}

} );

Object.assign( InterleavedBuffer.prototype, {

	isInterleavedBuffer: true,

	setArray: function ( array ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.count = array !== undefined ? array.length / this.stride : 0;
		this.array = array;

	},

	setDynamic: function ( value ) {

		this.dynamic = value;

		return this;

	},

	copy: function ( source ) {

		this.array = new source.array.constructor( source.array );
		this.count = source.count;
		this.stride = source.stride;
		this.dynamic = source.dynamic;

		return this;

	},

	copyAt: function ( index1, attribute, index2 ) {

		index1 *= this.stride;
		index2 *= attribute.stride;

		for ( var i = 0, l = this.stride; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	},

	set: function ( value, offset ) {

		if ( offset === undefined ) offset = 0;

		this.array.set( value, offset );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	onUpload: function ( callback ) {

		this.onUploadCallback = callback;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

	InterleavedBuffer.call( this, array, stride );

	this.meshPerAttribute = meshPerAttribute || 1;

}

InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

	constructor: InstancedInterleavedBuffer,

	isInstancedInterleavedBuffer: true,

	copy: function ( source ) {

		InterleavedBuffer.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

	BufferAttribute.call( this, array, itemSize );

	this.meshPerAttribute = meshPerAttribute || 1;

}

InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

	constructor: InstancedBufferAttribute,

	isInstancedBufferAttribute: true,

	copy: function ( source ) {

		BufferAttribute.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://clara.io/
 * @author stephomi / http://stephaneginier.com/
 */

function Raycaster( origin, direction, near, far ) {

	this.ray = new Ray( origin, direction );
	// direction is assumed to be normalized (for accurate distance calculations)

	this.near = near || 0;
	this.far = far || Infinity;

	this.params = {
		Mesh: {},
		Line: {},
		LOD: {},
		Points: { threshold: 1 },
		Sprite: {}
	};

	Object.defineProperties( this.params, {
		PointCloud: {
			get: function () {
				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
				return this.Points;
			}
		}
	} );

}

function ascSort( a, b ) {

	return a.distance - b.distance;

}

function intersectObject( object, raycaster, intersects, recursive ) {

	if ( object.visible === false ) return;

	object.raycast( raycaster, intersects );

	if ( recursive === true ) {

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			intersectObject( children[ i ], raycaster, intersects, true );

		}

	}

}

Object.assign( Raycaster.prototype, {

	linePrecision: 1,

	set: function ( origin, direction ) {

		// direction is assumed to be normalized (for accurate distance calculations)

		this.ray.set( origin, direction );

	},

	setFromCamera: function ( coords, camera ) {

		if ( ( camera && camera.isPerspectiveCamera ) ) {

			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

		} else if ( ( camera && camera.isOrthographicCamera ) ) {

			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

		} else {

			console.error( 'THREE.Raycaster: Unsupported camera type.' );

		}

	},

	intersectObject: function ( object, recursive ) {

		var intersects = [];

		intersectObject( object, this, intersects, recursive );

		intersects.sort( ascSort );

		return intersects;

	},

	intersectObjects: function ( objects, recursive ) {

		var intersects = [];

		if ( Array.isArray( objects ) === false ) {

			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
			return intersects;

		}

		for ( var i = 0, l = objects.length; i < l; i ++ ) {

			intersectObject( objects[ i ], this, intersects, recursive );

		}

		intersects.sort( ascSort );

		return intersects;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Clock( autoStart ) {

	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

	this.startTime = 0;
	this.oldTime = 0;
	this.elapsedTime = 0;

	this.running = false;

}

Object.assign( Clock.prototype, {

	start: function () {

		this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

		this.oldTime = this.startTime;
		this.elapsedTime = 0;
		this.running = true;

	},

	stop: function () {

		this.getElapsedTime();
		this.running = false;
		this.autoStart = false;

	},

	getElapsedTime: function () {

		this.getDelta();
		return this.elapsedTime;

	},

	getDelta: function () {

		var diff = 0;

		if ( this.autoStart && ! this.running ) {

			this.start();
			return 0;

		}

		if ( this.running ) {

			var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

			diff = ( newTime - this.oldTime ) / 1000;
			this.oldTime = newTime;

			this.elapsedTime += diff;

		}

		return diff;

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The poles (phi) are at the positive and negative y axis.
 * The equator starts at positive z.
 */

function Spherical( radius, phi, theta ) {

	this.radius = ( radius !== undefined ) ? radius : 1.0;
	this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
	this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

	return this;

}

Object.assign( Spherical.prototype, {

	set: function ( radius, phi, theta ) {

		this.radius = radius;
		this.phi = phi;
		this.theta = theta;

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( other ) {

		this.radius = other.radius;
		this.phi = other.phi;
		this.theta = other.theta;

		return this;

	},

	// restrict phi to be betwee EPS and PI-EPS
	makeSafe: function() {

		var EPS = 0.000001;
		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

		return this;

	},

	setFromVector3: function( vec3 ) {

		this.radius = vec3.length();

		if ( this.radius === 0 ) {

			this.theta = 0;
			this.phi = 0;

		} else {

			this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
			this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

		}

		return this;

	}

} );

/**
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 *
 */

function Cylindrical( radius, theta, y ) {

	this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
	this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
	this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

	return this;

}

Object.assign( Cylindrical.prototype, {

	set: function ( radius, theta, y ) {

		this.radius = radius;
		this.theta = theta;
		this.y = y;

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( other ) {

		this.radius = other.radius;
		this.theta = other.theta;
		this.y = other.y;

		return this;

	},

	setFromVector3: function( vec3 ) {

		this.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );
		this.theta = Math.atan2( vec3.x, vec3.z );
		this.y = vec3.y;

		return this;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function ImmediateRenderObject( material ) {

	Object3D.call( this );

	this.material = material;
	this.render = function ( renderCallback ) {};

}

ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

ImmediateRenderObject.prototype.isImmediateRenderObject = true;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function VertexNormalsHelper( object, size, hex, linewidth ) {

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xff0000;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	//

	var nNormals = 0;

	var objGeometry = this.object.geometry;

	if ( objGeometry && objGeometry.isGeometry ) {

		nNormals = objGeometry.faces.length * 3;

	} else if ( objGeometry && objGeometry.isBufferGeometry ) {

		nNormals = objGeometry.attributes.normal.count;

	}

	//

	var geometry = new BufferGeometry();

	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

	geometry.addAttribute( 'position', positions );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

	//

	this.matrixAutoUpdate = false;

	this.update();

}

VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

VertexNormalsHelper.prototype.update = ( function () {

	var v1 = new Vector3();
	var v2 = new Vector3();
	var normalMatrix = new Matrix3();

	return function update() {

		var keys = [ 'a', 'b', 'c' ];

		this.object.updateMatrixWorld( true );

		normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					var vertex = vertices[ face[ keys[ j ] ] ];

					var normal = face.vertexNormals[ j ];

					v1.copy( vertex ).applyMatrix4( matrixWorld );

					v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

			var objPos = objGeometry.attributes.position;

			var objNorm = objGeometry.attributes.normal;

			var idx = 0;

			// for simplicity, ignore index and drawcalls, and render every normal

			for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

				v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

				v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

				v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

		}

		position.needsUpdate = true;

	};

}() );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function SpotLightHelper( light, color ) {

	Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.color = color;

	var geometry = new BufferGeometry();

	var positions = [
		0, 0, 0,   0,   0,   1,
		0, 0, 0,   1,   0,   1,
		0, 0, 0, - 1,   0,   1,
		0, 0, 0,   0,   1,   1,
		0, 0, 0,   0, - 1,   1
	];

	for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

		var p1 = ( i / l ) * Math.PI * 2;
		var p2 = ( j / l ) * Math.PI * 2;

		positions.push(
			Math.cos( p1 ), Math.sin( p1 ), 1,
			Math.cos( p2 ), Math.sin( p2 ), 1
		);

	}

	geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

	var material = new LineBasicMaterial( { fog: false } );

	this.cone = new LineSegments( geometry, material );
	this.add( this.cone );

	this.update();

}

SpotLightHelper.prototype = Object.create( Object3D.prototype );
SpotLightHelper.prototype.constructor = SpotLightHelper;

SpotLightHelper.prototype.dispose = function () {

	this.cone.geometry.dispose();
	this.cone.material.dispose();

};

SpotLightHelper.prototype.update = function () {

	var vector = new Vector3();
	var vector2 = new Vector3();

	return function update() {

		this.light.updateMatrixWorld();

		var coneLength = this.light.distance ? this.light.distance : 1000;
		var coneWidth = coneLength * Math.tan( this.light.angle );

		this.cone.scale.set( coneWidth, coneWidth, coneLength );

		vector.setFromMatrixPosition( this.light.matrixWorld );
		vector2.setFromMatrixPosition( this.light.target.matrixWorld );

		this.cone.lookAt( vector2.sub( vector ) );

		if ( this.color !== undefined ) {

			this.cone.material.color.set( this.color );

		} else {

			this.cone.material.color.copy( this.light.color );

		}

	};

}();

/**
 * @author Sean Griffin / http://twitter.com/sgrif
 * @author Michael Guerrero / http://realitymeltdown.com
 * @author mrdoob / http://mrdoob.com/
 * @author ikerr / http://verold.com
 * @author Mugen87 / https://github.com/Mugen87
 */

function getBoneList( object ) {

	var boneList = [];

	if ( object && object.isBone ) {

		boneList.push( object );

	}

	for ( var i = 0; i < object.children.length; i ++ ) {

		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

	}

	return boneList;

}

function SkeletonHelper( object ) {

	var bones = getBoneList( object );

	var geometry = new BufferGeometry();

	var vertices = [];
	var colors = [];

	var color1 = new Color( 0, 0, 1 );
	var color2 = new Color( 0, 1, 0 );

	for ( var i = 0; i < bones.length; i ++ ) {

		var bone = bones[ i ];

		if ( bone.parent && bone.parent.isBone ) {

			vertices.push( 0, 0, 0 );
			vertices.push( 0, 0, 0 );
			colors.push( color1.r, color1.g, color1.b );
			colors.push( color2.r, color2.g, color2.b );

		}

	}

	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

	LineSegments.call( this, geometry, material );

	this.root = object;
	this.bones = bones;

	this.matrix = object.matrixWorld;
	this.matrixAutoUpdate = false;

	this.onBeforeRender();

}

SkeletonHelper.prototype = Object.create( LineSegments.prototype );
SkeletonHelper.prototype.constructor = SkeletonHelper;

SkeletonHelper.prototype.onBeforeRender = function () {

	var vector = new Vector3();

	var boneMatrix = new Matrix4();
	var matrixWorldInv = new Matrix4();

	return function onBeforeRender() {

		var bones = this.bones;

		var geometry = this.geometry;
		var position = geometry.getAttribute( 'position' );

		matrixWorldInv.getInverse( this.root.matrixWorld );

		for ( var i = 0, j = 0; i < bones.length; i ++ ) {

			var bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				vector.setFromMatrixPosition( boneMatrix );
				position.setXYZ( j, vector.x, vector.y, vector.z );

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				vector.setFromMatrixPosition( boneMatrix );
				position.setXYZ( j + 1, vector.x, vector.y, vector.z );

				j += 2;

			}

		}

		geometry.getAttribute( 'position' ).needsUpdate = true;

	};

}();

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function PointLightHelper( light, sphereSize, color ) {

	this.light = light;
	this.light.updateMatrixWorld();

	this.color = color;

	var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
	var material = new MeshBasicMaterial( { wireframe: true, fog: false } );

	Mesh.call( this, geometry, material );

	this.matrix = this.light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.update();


	/*
	var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
	var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	var d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/

}

PointLightHelper.prototype = Object.create( Mesh.prototype );
PointLightHelper.prototype.constructor = PointLightHelper;

PointLightHelper.prototype.dispose = function () {

	this.geometry.dispose();
	this.material.dispose();

};

PointLightHelper.prototype.update = function () {

	if ( this.color !== undefined ) {

		this.material.color.set( this.color );

	} else {

		this.material.color.copy( this.light.color );

	}

	/*
	var d = this.light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.visible = true;
		this.lightDistance.scale.set( d, d, d );

	}
	*/

};

/**
 * @author abelnation / http://github.com/abelnation
 * @author Mugen87 / http://github.com/Mugen87
 * @author WestLangley / http://github.com/WestLangley
 */

function RectAreaLightHelper( light, color ) {

	Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.color = color;

	var material = new LineBasicMaterial( { fog: false } );

	var geometry = new BufferGeometry();

	geometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );

	this.line = new Line( geometry, material );
	this.add( this.line );


	this.update();

}

RectAreaLightHelper.prototype = Object.create( Object3D.prototype );
RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;

RectAreaLightHelper.prototype.dispose = function () {

	this.children[ 0 ].geometry.dispose();
	this.children[ 0 ].material.dispose();

};

RectAreaLightHelper.prototype.update = function () {

	// calculate new dimensions of the helper

	var hx = this.light.width * 0.5;
	var hy = this.light.height * 0.5;

	var position = this.line.geometry.attributes.position;
	var array = position.array;

	// update vertices

	array[  0 ] =   hx; array[  1 ] = - hy; array[  2 ] = 0;
	array[  3 ] =   hx; array[  4 ] =   hy; array[  5 ] = 0;
	array[  6 ] = - hx; array[  7 ] =   hy; array[  8 ] = 0;
	array[  9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;
	array[ 12 ] =   hx; array[ 13 ] = - hy; array[ 14 ] = 0;

	position.needsUpdate = true;

	if ( this.color !== undefined ) {

		this.line.material.color.set( this.color );

	} else {

		this.line.material.color.copy( this.light.color );

	}

};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

function HemisphereLightHelper( light, size, color ) {

	Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.color = color;

	var geometry = new OctahedronBufferGeometry( size );
	geometry.rotateY( Math.PI * 0.5 );

	this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
	if ( this.color === undefined ) this.material.vertexColors = VertexColors;

	var position = geometry.getAttribute( 'position' );
	var colors = new Float32Array( position.count * 3 );

	geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

	this.add( new Mesh( geometry, this.material ) );

	this.update();

}

HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

HemisphereLightHelper.prototype.dispose = function () {

	this.children[ 0 ].geometry.dispose();
	this.children[ 0 ].material.dispose();

};

HemisphereLightHelper.prototype.update = function () {

	var vector = new Vector3();

	var color1 = new Color();
	var color2 = new Color();

	return function update() {

		var mesh = this.children[ 0 ];

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			var colors = mesh.geometry.getAttribute( 'color' );

			color1.copy( this.light.color );
			color2.copy( this.light.groundColor );

			for ( var i = 0, l = colors.count; i < l; i ++ ) {

				var color = ( i < ( l / 2 ) ) ? color1 : color2;

				colors.setXYZ( i, color.r, color.g, color.b );

			}

			colors.needsUpdate = true;

		}

		mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );

	};

}();

/**
 * @author mrdoob / http://mrdoob.com/
 */

function GridHelper( size, divisions, color1, color2 ) {

	size = size || 10;
	divisions = divisions || 10;
	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

	var center = divisions / 2;
	var step = size / divisions;
	var halfSize = size / 2;

	var vertices = [], colors = [];

	for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

		vertices.push( - halfSize, 0, k, halfSize, 0, k );
		vertices.push( k, 0, - halfSize, k, 0, halfSize );

		var color = i === center ? color1 : color2;

		color.toArray( colors, j ); j += 3;
		color.toArray( colors, j ); j += 3;
		color.toArray( colors, j ); j += 3;
		color.toArray( colors, j ); j += 3;

	}

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

	LineSegments.call( this, geometry, material );

}

GridHelper.prototype = Object.create( LineSegments.prototype );
GridHelper.prototype.constructor = GridHelper;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / http://github.com/Mugen87
 * @author Hectate / http://www.github.com/Hectate
 */

function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

	radius = radius || 10;
	radials = radials || 16;
	circles = circles || 8;
	divisions = divisions || 64;
	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

	var vertices = [];
	var colors = [];

	var x, z;
	var v, i, j, r, color;

	// create the radials

	for ( i = 0; i <= radials; i ++ ) {

		v = ( i / radials ) * ( Math.PI * 2 );

		x = Math.sin( v ) * radius;
		z = Math.cos( v ) * radius;

		vertices.push( 0, 0, 0 );
		vertices.push( x, 0, z );

		color = ( i & 1 ) ? color1 : color2;

		colors.push( color.r, color.g, color.b );
		colors.push( color.r, color.g, color.b );

	}

	// create the circles

	for ( i = 0; i <= circles; i ++ ) {

		color = ( i & 1 ) ? color1 : color2;

		r = radius - ( radius / circles * i );

		for ( j = 0; j < divisions; j ++ ) {

			// first vertex

			v = ( j / divisions ) * ( Math.PI * 2 );

			x = Math.sin( v ) * r;
			z = Math.cos( v ) * r;

			vertices.push( x, 0, z );
			colors.push( color.r, color.g, color.b );

			// second vertex

			v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

			x = Math.sin( v ) * r;
			z = Math.cos( v ) * r;

			vertices.push( x, 0, z );
			colors.push( color.r, color.g, color.b );

		}

	}

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

	LineSegments.call( this, geometry, material );

}

PolarGridHelper.prototype = Object.create( LineSegments.prototype );
PolarGridHelper.prototype.constructor = PolarGridHelper;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function FaceNormalsHelper( object, size, hex, linewidth ) {

	// FaceNormalsHelper only supports THREE.Geometry

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xffff00;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	//

	var nNormals = 0;

	var objGeometry = this.object.geometry;

	if ( objGeometry && objGeometry.isGeometry ) {

		nNormals = objGeometry.faces.length;

	} else {

		console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

	}

	//

	var geometry = new BufferGeometry();

	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

	geometry.addAttribute( 'position', positions );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

	//

	this.matrixAutoUpdate = false;
	this.update();

}

FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

FaceNormalsHelper.prototype.update = ( function () {

	var v1 = new Vector3();
	var v2 = new Vector3();
	var normalMatrix = new Matrix3();

	return function update() {

		this.object.updateMatrixWorld( true );

		normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		var vertices = objGeometry.vertices;

		var faces = objGeometry.faces;

		var idx = 0;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			var normal = face.normal;

			v1.copy( vertices[ face.a ] )
				.add( vertices[ face.b ] )
				.add( vertices[ face.c ] )
				.divideScalar( 3 )
				.applyMatrix4( matrixWorld );

			v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

			position.setXYZ( idx, v1.x, v1.y, v1.z );

			idx = idx + 1;

			position.setXYZ( idx, v2.x, v2.y, v2.z );

			idx = idx + 1;

		}

		position.needsUpdate = true;

	};

}() );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function DirectionalLightHelper( light, size, color ) {

	Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.color = color;

	if ( size === undefined ) size = 1;

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( [
		- size,   size, 0,
		  size,   size, 0,
		  size, - size, 0,
		- size, - size, 0,
		- size,   size, 0
	], 3 ) );

	var material = new LineBasicMaterial( { fog: false } );

	this.lightPlane = new Line( geometry, material );
	this.add( this.lightPlane );

	geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

	this.targetLine = new Line( geometry, material );
	this.add( this.targetLine );

	this.update();

}

DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

DirectionalLightHelper.prototype.dispose = function () {

	this.lightPlane.geometry.dispose();
	this.lightPlane.material.dispose();
	this.targetLine.geometry.dispose();
	this.targetLine.material.dispose();

};

DirectionalLightHelper.prototype.update = function () {

	var v1 = new Vector3();
	var v2 = new Vector3();
	var v3 = new Vector3();

	return function update() {

		v1.setFromMatrixPosition( this.light.matrixWorld );
		v2.setFromMatrixPosition( this.light.target.matrixWorld );
		v3.subVectors( v2, v1 );

		this.lightPlane.lookAt( v3 );

		if ( this.color !== undefined ) {

			this.lightPlane.material.color.set( this.color );
			this.targetLine.material.color.set( this.color );

		} else {

			this.lightPlane.material.color.copy( this.light.color );
			this.targetLine.material.color.copy( this.light.color );

		}

		this.targetLine.lookAt( v3 );
		this.targetLine.scale.z = v3.length();

	};

}();

/**
 * @author alteredq / http://alteredqualia.com/
 * @author Mugen87 / https://github.com/Mugen87
 *
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */

function CameraHelper( camera ) {

	var geometry = new BufferGeometry();
	var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

	var vertices = [];
	var colors = [];

	var pointMap = {};

	// colors

	var colorFrustum = new Color( 0xffaa00 );
	var colorCone = new Color( 0xff0000 );
	var colorUp = new Color( 0x00aaff );
	var colorTarget = new Color( 0xffffff );
	var colorCross = new Color( 0x333333 );

	// near

	addLine( "n1", "n2", colorFrustum );
	addLine( "n2", "n4", colorFrustum );
	addLine( "n4", "n3", colorFrustum );
	addLine( "n3", "n1", colorFrustum );

	// far

	addLine( "f1", "f2", colorFrustum );
	addLine( "f2", "f4", colorFrustum );
	addLine( "f4", "f3", colorFrustum );
	addLine( "f3", "f1", colorFrustum );

	// sides

	addLine( "n1", "f1", colorFrustum );
	addLine( "n2", "f2", colorFrustum );
	addLine( "n3", "f3", colorFrustum );
	addLine( "n4", "f4", colorFrustum );

	// cone

	addLine( "p", "n1", colorCone );
	addLine( "p", "n2", colorCone );
	addLine( "p", "n3", colorCone );
	addLine( "p", "n4", colorCone );

	// up

	addLine( "u1", "u2", colorUp );
	addLine( "u2", "u3", colorUp );
	addLine( "u3", "u1", colorUp );

	// target

	addLine( "c", "t", colorTarget );
	addLine( "p", "c", colorCross );

	// cross

	addLine( "cn1", "cn2", colorCross );
	addLine( "cn3", "cn4", colorCross );

	addLine( "cf1", "cf2", colorCross );
	addLine( "cf3", "cf4", colorCross );

	function addLine( a, b, color ) {

		addPoint( a, color );
		addPoint( b, color );

	}

	function addPoint( id, color ) {

		vertices.push( 0, 0, 0 );
		colors.push( color.r, color.g, color.b );

		if ( pointMap[ id ] === undefined ) {

			pointMap[ id ] = [];

		}

		pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

	}

	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	LineSegments.call( this, geometry, material );

	this.camera = camera;
	if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

	this.matrix = camera.matrixWorld;
	this.matrixAutoUpdate = false;

	this.pointMap = pointMap;

	this.update();

}

CameraHelper.prototype = Object.create( LineSegments.prototype );
CameraHelper.prototype.constructor = CameraHelper;

CameraHelper.prototype.update = function () {

	var geometry, pointMap;

	var vector = new Vector3();
	var camera = new Camera();

	function setPoint( point, x, y, z ) {

		vector.set( x, y, z ).unproject( camera );

		var points = pointMap[ point ];

		if ( points !== undefined ) {

			var position = geometry.getAttribute( 'position' );

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				position.setXYZ( points[ i ], vector.x, vector.y, vector.z );

			}

		}

	}

	return function update() {

		geometry = this.geometry;
		pointMap = this.pointMap;

		var w = 1, h = 1;

		// we need just camera projection matrix
		// world matrix must be identity

		camera.projectionMatrix.copy( this.camera.projectionMatrix );

		// center / target

		setPoint( "c", 0, 0, - 1 );
		setPoint( "t", 0, 0,  1 );

		// near

		setPoint( "n1", - w, - h, - 1 );
		setPoint( "n2",   w, - h, - 1 );
		setPoint( "n3", - w,   h, - 1 );
		setPoint( "n4",   w,   h, - 1 );

		// far

		setPoint( "f1", - w, - h, 1 );
		setPoint( "f2",   w, - h, 1 );
		setPoint( "f3", - w,   h, 1 );
		setPoint( "f4",   w,   h, 1 );

		// up

		setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
		setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
		setPoint( "u3",         0, h * 2,   - 1 );

		// cross

		setPoint( "cf1", - w,   0, 1 );
		setPoint( "cf2",   w,   0, 1 );
		setPoint( "cf3",   0, - h, 1 );
		setPoint( "cf4",   0,   h, 1 );

		setPoint( "cn1", - w,   0, - 1 );
		setPoint( "cn2",   w,   0, - 1 );
		setPoint( "cn3",   0, - h, - 1 );
		setPoint( "cn4",   0,   h, - 1 );

		geometry.getAttribute( 'position' ).needsUpdate = true;

	};

}();

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / http://github.com/Mugen87
 */

function BoxHelper( object, color ) {

	this.object = object;

	if ( color === undefined ) color = 0xffff00;

	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
	var positions = new Float32Array( 8 * 3 );

	var geometry = new BufferGeometry();
	geometry.setIndex( new BufferAttribute( indices, 1 ) );
	geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

	this.matrixAutoUpdate = false;

	this.update();

}

BoxHelper.prototype = Object.create( LineSegments.prototype );
BoxHelper.prototype.constructor = BoxHelper;

BoxHelper.prototype.update = ( function () {

	var box = new Box3();

	return function update( object ) {

		if ( object !== undefined ) {

			console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

		}

		if ( this.object !== undefined ) {

			box.setFromObject( this.object );

		}

		if ( box.isEmpty() ) return;

		var min = box.min;
		var max = box.max;

		/*
		  5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/

		var position = this.geometry.attributes.position;
		var array = position.array;

		array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
		array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
		array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
		array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
		array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
		array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
		array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
		array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

		position.needsUpdate = true;

		this.geometry.computeBoundingSphere();

	};

} )();

BoxHelper.prototype.setFromObject = function ( object ) {

	this.object = object;
	this.update();

	return this;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 */

function Box3Helper( box, hex ) {

	this.type = 'Box3Helper';

	this.box = box;

	var color = ( hex !== undefined ) ? hex : 0xffff00;

	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

	var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

	var geometry = new BufferGeometry();

	geometry.setIndex( new BufferAttribute( indices, 1 ) );

	geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

	this.geometry.computeBoundingSphere();

	this.onBeforeRender();

}

Box3Helper.prototype = Object.create( LineSegments.prototype );
Box3Helper.prototype.constructor = Box3Helper;

Box3Helper.prototype.onBeforeRender = function () {

	var box = this.box;

	if ( box.isEmpty() ) return;

	box.getCenter( this.position );

	box.getSize( this.scale );

	this.scale.multiplyScalar( 0.5 );

};

/**
 * @author WestLangley / http://github.com/WestLangley
 */

function PlaneHelper( plane, size, hex ) {

	this.type = 'PlaneHelper';

	this.plane = plane;

	this.size = ( size === undefined ) ? 1 : size;

	var color = ( hex !== undefined ) ? hex : 0xffff00;

	var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
	geometry.computeBoundingSphere();

	Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );

	//

	var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

	var geometry2 = new BufferGeometry();
	geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
	geometry2.computeBoundingSphere();

	this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );

	//

	this.onBeforeRender();

}

PlaneHelper.prototype = Object.create( Line.prototype );
PlaneHelper.prototype.constructor = PlaneHelper;

PlaneHelper.prototype.onBeforeRender = function () {

	var scale = - this.plane.constant;

	if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter

	this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

	this.lookAt( this.plane.normal );

	this.updateMatrixWorld();

};

/**
 * @author WestLangley / http://github.com/WestLangley
 * @author zz85 / http://github.com/zz85
 * @author bhouston / http://clara.io
 *
 * Creates an arrow for visualizing directions
 *
 * Parameters:
 *  dir - Vector3
 *  origin - Vector3
 *  length - Number
 *  color - color in hex value
 *  headLength - Number
 *  headWidth - Number
 */

var lineGeometry;
var coneGeometry;

function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

	// dir is assumed to be normalized

	Object3D.call( this );

	if ( color === undefined ) color = 0xffff00;
	if ( length === undefined ) length = 1;
	if ( headLength === undefined ) headLength = 0.2 * length;
	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

	if ( lineGeometry === undefined ) {

		lineGeometry = new BufferGeometry();
		lineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

		coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
		coneGeometry.translate( 0, - 0.5, 0 );

	}

	this.position.copy( origin );

	this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
	this.line.matrixAutoUpdate = false;
	this.add( this.line );

	this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
	this.cone.matrixAutoUpdate = false;
	this.add( this.cone );

	this.setDirection( dir );
	this.setLength( length, headLength, headWidth );

}

ArrowHelper.prototype = Object.create( Object3D.prototype );
ArrowHelper.prototype.constructor = ArrowHelper;

ArrowHelper.prototype.setDirection = ( function () {

	var axis = new Vector3();
	var radians;

	return function setDirection( dir ) {

		// dir is assumed to be normalized

		if ( dir.y > 0.99999 ) {

			this.quaternion.set( 0, 0, 0, 1 );

		} else if ( dir.y < - 0.99999 ) {

			this.quaternion.set( 1, 0, 0, 0 );

		} else {

			axis.set( dir.z, 0, - dir.x ).normalize();

			radians = Math.acos( dir.y );

			this.quaternion.setFromAxisAngle( axis, radians );

		}

	};

}() );

ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

	if ( headLength === undefined ) headLength = 0.2 * length;
	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

	this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
	this.line.updateMatrix();

	this.cone.scale.set( headWidth, headLength, headWidth );
	this.cone.position.y = length;
	this.cone.updateMatrix();

};

ArrowHelper.prototype.setColor = function ( color ) {

	this.line.material.color.copy( color );
	this.cone.material.color.copy( color );

};

/**
 * @author sroucheray / http://sroucheray.org/
 * @author mrdoob / http://mrdoob.com/
 */

function AxisHelper( size ) {

	size = size || 1;

	var vertices = [
		0, 0, 0,  size, 0, 0,
		0, 0, 0,  0, size, 0,
		0, 0, 0,  0, 0, size
	];

	var colors = [
		1, 0, 0,  1, 0.6, 0,
		0, 1, 0,  0.6, 1, 0,
		0, 0, 1,  0, 0.6, 1
	];

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

	LineSegments.call( this, geometry, material );

}

AxisHelper.prototype = Object.create( LineSegments.prototype );
AxisHelper.prototype.constructor = AxisHelper;

/**
 * @author zz85 https://github.com/zz85
 *
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */


/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {

	var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

	/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */
	function init( x0, x1, t0, t1 ) {

		c0 = x0;
		c1 = t0;
		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
		c3 = 2 * x0 - 2 * x1 + t0 + t1;

	}

	return {

		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		},

		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			init( x1, x2, t1, t2 );

		},

		calc: function ( t ) {

			var t2 = t * t;
			var t3 = t2 * t;
			return c0 + c1 * t + c2 * t2 + c3 * t3;

		}

	};

}

//

var tmp = new Vector3();
var px = new CubicPoly();
var py = new CubicPoly();
var pz = new CubicPoly();

function CatmullRomCurve3( points ) {

	Curve.call( this );

	if ( points.length < 2 ) console.warn( 'THREE.CatmullRomCurve3: Points array needs at least two entries.' );

	this.points = points || [];
	this.closed = false;

}

CatmullRomCurve3.prototype = Object.create( Curve.prototype );
CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

CatmullRomCurve3.prototype.getPoint = function ( t ) {

	var points = this.points;
	var l = points.length;

	var point = ( l - ( this.closed ? 0 : 1 ) ) * t;
	var intPoint = Math.floor( point );
	var weight = point - intPoint;

	if ( this.closed ) {

		intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

	} else if ( weight === 0 && intPoint === l - 1 ) {

		intPoint = l - 2;
		weight = 1;

	}

	var p0, p1, p2, p3; // 4 points

	if ( this.closed || intPoint > 0 ) {

		p0 = points[ ( intPoint - 1 ) % l ];

	} else {

		// extrapolate first point
		tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
		p0 = tmp;

	}

	p1 = points[ intPoint % l ];
	p2 = points[ ( intPoint + 1 ) % l ];

	if ( this.closed || intPoint + 2 < l ) {

		p3 = points[ ( intPoint + 2 ) % l ];

	} else {

		// extrapolate last point
		tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
		p3 = tmp;

	}

	if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

		// init Centripetal / Chordal Catmull-Rom
		var pow = this.type === 'chordal' ? 0.5 : 0.25;
		var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
		var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
		var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

		// safety check for repeated points
		if ( dt1 < 1e-4 ) dt1 = 1.0;
		if ( dt0 < 1e-4 ) dt0 = dt1;
		if ( dt2 < 1e-4 ) dt2 = dt1;

		px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
		py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
		pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

	} else if ( this.type === 'catmullrom' ) {

		var tension = this.tension !== undefined ? this.tension : 0.5;
		px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
		py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
		pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

	}

	return new Vector3( px.calc( weight ), py.calc( weight ), pz.calc( weight ) );

};

function CubicBezierCurve3( v0, v1, v2, v3 ) {

	Curve.call( this );

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;
	this.v3 = v3;

}

CubicBezierCurve3.prototype = Object.create( Curve.prototype );
CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

CubicBezierCurve3.prototype.getPoint = function ( t ) {

	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

	return new Vector3(
		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
		CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
		CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
	);

};

function QuadraticBezierCurve3( v0, v1, v2 ) {

	Curve.call( this );

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;

}

QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

QuadraticBezierCurve3.prototype.getPoint = function ( t ) {

	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

	return new Vector3(
		QuadraticBezier( t, v0.x, v1.x, v2.x ),
		QuadraticBezier( t, v0.y, v1.y, v2.y ),
		QuadraticBezier( t, v0.z, v1.z, v2.z )
	);

};

function LineCurve3( v1, v2 ) {

	Curve.call( this );

	this.v1 = v1;
	this.v2 = v2;

}

LineCurve3.prototype = Object.create( Curve.prototype );
LineCurve3.prototype.constructor = LineCurve3;

LineCurve3.prototype.getPoint = function ( t ) {

	if ( t === 1 ) {

		return this.v2.clone();

	}

	var vector = new Vector3();

	vector.subVectors( this.v2, this.v1 ); // diff
	vector.multiplyScalar( t );
	vector.add( this.v1 );

	return vector;

};

function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

	EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

}

ArcCurve.prototype = Object.create( EllipseCurve.prototype );
ArcCurve.prototype.constructor = ArcCurve;

/**
 * @author alteredq / http://alteredqualia.com/
 */

var SceneUtils = {

	createMultiMaterialObject: function ( geometry, materials ) {

		var group = new Group();

		for ( var i = 0, l = materials.length; i < l; i ++ ) {

			group.add( new Mesh( geometry, materials[ i ] ) );

		}

		return group;

	},

	detach: function ( child, parent, scene ) {

		child.applyMatrix( parent.matrixWorld );
		parent.remove( child );
		scene.add( child );

	},

	attach: function ( child, scene, parent ) {

		child.applyMatrix( new Matrix4().getInverse( parent.matrixWorld ) );

		scene.remove( child );
		parent.add( child );

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Face4( a, b, c, d, normal, color, materialIndex ) {

	console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
	return new Face3( a, b, c, normal, color, materialIndex );

}

var LineStrip = 0;

var LinePieces = 1;

function MeshFaceMaterial( materials ) {

	console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
	return materials;

}

function MultiMaterial( materials ) {

	if ( materials === undefined ) materials = [];

	console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
	materials.isMultiMaterial = true;
	materials.materials = materials;
	materials.clone = function () {

		return materials.slice();

	};
	return materials;

}

function PointCloud( geometry, material ) {

	console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
	return new Points( geometry, material );

}

function Particle( material ) {

	console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
	return new Sprite( material );

}

function ParticleSystem( geometry, material ) {

	console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
	return new Points( geometry, material );

}

function PointCloudMaterial( parameters ) {

	console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
	return new PointsMaterial( parameters );

}

function ParticleBasicMaterial( parameters ) {

	console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
	return new PointsMaterial( parameters );

}

function ParticleSystemMaterial( parameters ) {

	console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
	return new PointsMaterial( parameters );

}

function Vertex( x, y, z ) {

	console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
	return new Vector3( x, y, z );

}

//

function DynamicBufferAttribute( array, itemSize ) {

	console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
	return new BufferAttribute( array, itemSize ).setDynamic( true );

}

function Int8Attribute( array, itemSize ) {

	console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
	return new Int8BufferAttribute( array, itemSize );

}

function Uint8Attribute( array, itemSize ) {

	console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
	return new Uint8BufferAttribute( array, itemSize );

}

function Uint8ClampedAttribute( array, itemSize ) {

	console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
	return new Uint8ClampedBufferAttribute( array, itemSize );

}

function Int16Attribute( array, itemSize ) {

	console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
	return new Int16BufferAttribute( array, itemSize );

}

function Uint16Attribute( array, itemSize ) {

	console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
	return new Uint16BufferAttribute( array, itemSize );

}

function Int32Attribute( array, itemSize ) {

	console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
	return new Int32BufferAttribute( array, itemSize );

}

function Uint32Attribute( array, itemSize ) {

	console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
	return new Uint32BufferAttribute( array, itemSize );

}

function Float32Attribute( array, itemSize ) {

	console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
	return new Float32BufferAttribute( array, itemSize );

}

function Float64Attribute( array, itemSize ) {

	console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
	return new Float64BufferAttribute( array, itemSize );

}

//

Curve.create = function ( construct, getPoint ) {

	console.log( 'THREE.Curve.create() has been deprecated' );

	construct.prototype = Object.create( Curve.prototype );
	construct.prototype.constructor = construct;
	construct.prototype.getPoint = getPoint;

	return construct;

};

//

function ClosedSplineCurve3( points ) {

	console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

	CatmullRomCurve3.call( this, points );
	this.type = 'catmullrom';
	this.closed = true;

}

ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

//

function SplineCurve3( points ) {

	console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

	CatmullRomCurve3.call( this, points );
	this.type = 'catmullrom';

}

SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

//

function Spline( points ) {

	console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

	CatmullRomCurve3.call( this, points );
	this.type = 'catmullrom';

}

Spline.prototype = Object.create( CatmullRomCurve3.prototype );

Object.assign( Spline.prototype, {

	initFromArray: function ( a ) {

		console.error( 'THREE.Spline: .initFromArray() has been removed.' );

	},
	getControlPointsArray: function ( optionalTarget ) {

		console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

	},
	reparametrizeByArcLength: function ( samplingCoef ) {

		console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

	}

} );

//
function BoundingBoxHelper( object, color ) {

	console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
	return new BoxHelper( object, color );

}

function EdgesHelper( object, hex ) {

	console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
	return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

}

GridHelper.prototype.setColors = function () {

	console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

};

SkeletonHelper.prototype.update = function () {

	console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

};

function WireframeHelper( object, hex ) {

	console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
	return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

}

//

function XHRLoader( manager ) {

	console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
	return new FileLoader( manager );

}

function BinaryTextureLoader( manager ) {

	console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
	return new DataTextureLoader( manager );

}

//

Object.assign( Box2.prototype, {

	center: function ( optionalTarget ) {

		console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	},
	empty: function () {

		console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
		return this.isEmpty();

	},
	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	size: function ( optionalTarget ) {

		console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
		return this.getSize( optionalTarget );

	}
} );

Object.assign( Box3.prototype, {

	center: function ( optionalTarget ) {

		console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	},
	empty: function () {

		console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
		return this.isEmpty();

	},
	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	isIntersectionSphere: function ( sphere ) {

		console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
		return this.intersectsSphere( sphere );

	},
	size: function ( optionalTarget ) {

		console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
		return this.getSize( optionalTarget );

	}
} );

Line3.prototype.center = function ( optionalTarget ) {

	console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
	return this.getCenter( optionalTarget );

};

_Math.random16 = function () {

	console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
	return Math.random();

};

Object.assign( Matrix3.prototype, {

	flattenToArrayOffset: function ( array, offset ) {

		console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
		return this.toArray( array, offset );

	},
	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
		return vector.applyMatrix3( this );

	},
	multiplyVector3Array: function ( a ) {

		console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.'  );

	},
	applyToBuffer: function( buffer, offset, length ) {

		console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
		return this.applyToBufferAttribute( buffer );

	},
	applyToVector3Array: function( array, offset, length ) {

		console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

	}

} );

Object.assign( Matrix4.prototype, {

	extractPosition: function ( m ) {

		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
		return this.copyPosition( m );

	},
	flattenToArrayOffset: function ( array, offset ) {

		console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
		return this.toArray( array, offset );

	},
	getPosition: function () {

		var v1;

		return function getPosition() {

			if ( v1 === undefined ) v1 = new Vector3();
			console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
			return v1.setFromMatrixColumn( this, 3 );

		};

	}(),
	setRotationFromQuaternion: function ( q ) {

		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
		return this.makeRotationFromQuaternion( q );

	},
	multiplyToArray: function () {

		console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

	},
	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	multiplyVector4: function ( vector ) {

		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	multiplyVector3Array: function ( a ) {

		console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.'  );

	},
	rotateAxis: function ( v ) {

		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
		v.transformDirection( this );

	},
	crossVector: function ( vector ) {

		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	translate: function () {

		console.error( 'THREE.Matrix4: .translate() has been removed.' );

	},
	rotateX: function () {

		console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

	},
	rotateY: function () {

		console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

	},
	rotateZ: function () {

		console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

	},
	rotateByAxis: function () {

		console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

	},
	applyToBuffer: function( buffer, offset, length ) {

		console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
		return this.applyToBufferAttribute( buffer );

	},
	applyToVector3Array: function( array, offset, length ) {

		console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

	},
	makeFrustum: function( left, right, bottom, top, near, far ) {

		console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
		return this.makePerspective( left, right, top, bottom, near, far );

	}

} );

Plane.prototype.isIntersectionLine = function ( line ) {

	console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
	return this.intersectsLine( line );

};

Quaternion.prototype.multiplyVector3 = function ( vector ) {

	console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
	return vector.applyQuaternion( this );

};

Object.assign( Ray.prototype, {

	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	isIntersectionPlane: function ( plane ) {

		console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
		return this.intersectsPlane( plane );

	},
	isIntersectionSphere: function ( sphere ) {

		console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
		return this.intersectsSphere( sphere );

	}

} );

Object.assign( Shape.prototype, {

	extrude: function ( options ) {

		console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
		return new ExtrudeGeometry( this, options );

	},
	makeGeometry: function ( options ) {

		console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
		return new ShapeGeometry( this, options );

	}

} );

Object.assign( Vector2.prototype, {

	fromAttribute: function ( attribute, index, offset ) {

		console.error( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	}

} );

Object.assign( Vector3.prototype, {

	setEulerFromRotationMatrix: function () {

		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

	},
	setEulerFromQuaternion: function () {

		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

	},
	getPositionFromMatrix: function ( m ) {

		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
		return this.setFromMatrixPosition( m );

	},
	getScaleFromMatrix: function ( m ) {

		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
		return this.setFromMatrixScale( m );

	},
	getColumnFromMatrix: function ( index, matrix ) {

		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
		return this.setFromMatrixColumn( matrix, index );

	},
	applyProjection: function ( m ) {

		console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
		return this.applyMatrix4( m );

	},
	fromAttribute: function ( attribute, index, offset ) {

		console.error( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	}

} );

Object.assign( Vector4.prototype, {

	fromAttribute: function ( attribute, index, offset ) {

		console.error( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	}

} );

//

Geometry.prototype.computeTangents = function () {

	console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

};

Object.assign( Object3D.prototype, {

	getChildByName: function ( name ) {

		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
		return this.getObjectByName( name );

	},
	renderDepth: function () {

		console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

	},
	translate: function ( distance, axis ) {

		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
		return this.translateOnAxis( axis, distance );

	}

} );

Object.defineProperties( Object3D.prototype, {

	eulerOrder: {
		get: function () {

			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
			return this.rotation.order;

		},
		set: function ( value ) {

			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
			this.rotation.order = value;

		}
	},
	useQuaternion: {
		get: function () {

			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

		},
		set: function () {

			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

		}
	}

} );

Object.defineProperties( LOD.prototype, {

	objects: {
		get: function () {

			console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
			return this.levels;

		}
	}

} );

Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

	get: function () {

		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

	},
	set: function () {

		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

	}

} );

Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

	get: function () {

		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
		return this.arcLengthDivisions;

	},
	set: function ( value ) {

		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
		this.arcLengthDivisions = value;

	}

} );

//

PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

	console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
			"Use .setFocalLength and .filmGauge for a photographic setup." );

	if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
	this.setFocalLength( focalLength );

};

//

Object.defineProperties( Light.prototype, {
	onlyShadow: {
		set: function () {

			console.warn( 'THREE.Light: .onlyShadow has been removed.' );

		}
	},
	shadowCameraFov: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
			this.shadow.camera.fov = value;

		}
	},
	shadowCameraLeft: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
			this.shadow.camera.left = value;

		}
	},
	shadowCameraRight: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
			this.shadow.camera.right = value;

		}
	},
	shadowCameraTop: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
			this.shadow.camera.top = value;

		}
	},
	shadowCameraBottom: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
			this.shadow.camera.bottom = value;

		}
	},
	shadowCameraNear: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
			this.shadow.camera.near = value;

		}
	},
	shadowCameraFar: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
			this.shadow.camera.far = value;

		}
	},
	shadowCameraVisible: {
		set: function () {

			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

		}
	},
	shadowBias: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
			this.shadow.bias = value;

		}
	},
	shadowDarkness: {
		set: function () {

			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

		}
	},
	shadowMapWidth: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
			this.shadow.mapSize.width = value;

		}
	},
	shadowMapHeight: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
			this.shadow.mapSize.height = value;

		}
	}
} );

//

Object.defineProperties( BufferAttribute.prototype, {

	length: {
		get: function () {

			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
			return this.array.length;

		}
	}

} );

Object.assign( BufferGeometry.prototype, {

	addIndex: function ( index ) {

		console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
		this.setIndex( index );

	},
	addDrawCall: function ( start, count, indexOffset ) {

		if ( indexOffset !== undefined ) {

			console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

		}
		console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
		this.addGroup( start, count );

	},
	clearDrawCalls: function () {

		console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
		this.clearGroups();

	},
	computeTangents: function () {

		console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

	},
	computeOffsets: function () {

		console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

	}

} );

Object.defineProperties( BufferGeometry.prototype, {

	drawcalls: {
		get: function () {

			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
			return this.groups;

		}
	},
	offsets: {
		get: function () {

			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
			return this.groups;

		}
	}

} );

//

Object.defineProperties( Uniform.prototype, {

	dynamic: {
		set: function () {

			console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

		}
	},
	onUpdate: {
		value: function () {

			console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
			return this;

		}
	}

} );

//

Object.defineProperties( Material.prototype, {

	wrapAround: {
		get: function () {

			console.warn( 'THREE.Material: .wrapAround has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.Material: .wrapAround has been removed.' );

		}
	},
	wrapRGB: {
		get: function () {

			console.warn( 'THREE.Material: .wrapRGB has been removed.' );
			return new Color();

		}
	},

	shading: {
		get: function () {

			console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

		},
		set: function ( value ) {

			console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
			this.flatShading = ( value === FlatShading );

		}
	}

} );

Object.defineProperties( MeshPhongMaterial.prototype, {

	metal: {
		get: function () {

			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
			return false;

		},
		set: function () {

			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

		}
	}

} );

Object.defineProperties( ShaderMaterial.prototype, {

	derivatives: {
		get: function () {

			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
			return this.extensions.derivatives;

		},
		set: function ( value ) {

			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
			this.extensions.derivatives = value;

		}
	}

} );

//

Object.assign( WebGLRenderer.prototype, {

	getCurrentRenderTarget: function () {

		console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
		return this.getRenderTarget();

	},

	getMaxAnisotropy: function () {

		console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
		return this.capabilities.getMaxAnisotropy();

	},

	getPrecision: function () {

		console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
		return this.capabilities.precision;

	},

	supportsFloatTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
		return this.extensions.get( 'OES_texture_float' );

	},
	supportsHalfFloatTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
		return this.extensions.get( 'OES_texture_half_float' );

	},
	supportsStandardDerivatives: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
		return this.extensions.get( 'OES_standard_derivatives' );

	},
	supportsCompressedTextureS3TC: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
		return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

	},
	supportsCompressedTexturePVRTC: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
		return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

	},
	supportsBlendMinMax: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
		return this.extensions.get( 'EXT_blend_minmax' );

	},
	supportsVertexTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
		return this.capabilities.vertexTextures;

	},
	supportsInstancedArrays: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
		return this.extensions.get( 'ANGLE_instanced_arrays' );

	},
	enableScissorTest: function ( boolean ) {

		console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
		this.setScissorTest( boolean );

	},
	initMaterial: function () {

		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

	},
	addPrePlugin: function () {

		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

	},
	addPostPlugin: function () {

		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

	},
	updateShadowMap: function () {

		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

	}

} );

Object.defineProperties( WebGLRenderer.prototype, {

	shadowMapEnabled: {
		get: function () {

			return this.shadowMap.enabled;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
			this.shadowMap.enabled = value;

		}
	},
	shadowMapType: {
		get: function () {

			return this.shadowMap.type;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
			this.shadowMap.type = value;

		}
	},
	shadowMapCullFace: {
		get: function () {

			return this.shadowMap.cullFace;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
			this.shadowMap.cullFace = value;

		}
	}
} );

Object.defineProperties( WebGLShadowMap.prototype, {

	cullFace: {
		get: function () {

			return this.renderReverseSided ? CullFaceFront : CullFaceBack;

		},
		set: function ( cullFace ) {

			var value = ( cullFace !== CullFaceBack );
			console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
			this.renderReverseSided = value;

		}
	}

} );

//

Object.defineProperties( WebGLRenderTarget.prototype, {

	wrapS: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
			return this.texture.wrapS;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
			this.texture.wrapS = value;

		}
	},
	wrapT: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
			return this.texture.wrapT;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
			this.texture.wrapT = value;

		}
	},
	magFilter: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
			return this.texture.magFilter;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
			this.texture.magFilter = value;

		}
	},
	minFilter: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
			return this.texture.minFilter;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
			this.texture.minFilter = value;

		}
	},
	anisotropy: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
			return this.texture.anisotropy;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
			this.texture.anisotropy = value;

		}
	},
	offset: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
			return this.texture.offset;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
			this.texture.offset = value;

		}
	},
	repeat: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
			return this.texture.repeat;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
			this.texture.repeat = value;

		}
	},
	format: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
			return this.texture.format;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
			this.texture.format = value;

		}
	},
	type: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
			return this.texture.type;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
			this.texture.type = value;

		}
	},
	generateMipmaps: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
			return this.texture.generateMipmaps;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
			this.texture.generateMipmaps = value;

		}
	}

} );

//

Audio.prototype.load = function ( file ) {

	console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
	var scope = this;
	var audioLoader = new AudioLoader();
	audioLoader.load( file, function ( buffer ) {

		scope.setBuffer( buffer );

	} );
	return this;

};

AudioAnalyser.prototype.getData = function () {

	console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
	return this.getFrequencyData();

};

//

CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

	console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
	return this.update( renderer, scene );

};

//

var GeometryUtils = {

	merge: function ( geometry1, geometry2, materialIndexOffset ) {

		console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
		var matrix;

		if ( geometry2.isMesh ) {

			geometry2.matrixAutoUpdate && geometry2.updateMatrix();

			matrix = geometry2.matrix;
			geometry2 = geometry2.geometry;

		}

		geometry1.merge( geometry2, matrix, materialIndexOffset );

	},

	center: function ( geometry ) {

		console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
		return geometry.center();

	}

};

var ImageUtils = {

	crossOrigin: undefined,

	loadTexture: function ( url, mapping, onLoad, onError ) {

		console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

		var loader = new TextureLoader();
		loader.setCrossOrigin( this.crossOrigin );

		var texture = loader.load( url, onLoad, undefined, onError );

		if ( mapping ) texture.mapping = mapping;

		return texture;

	},

	loadTextureCube: function ( urls, mapping, onLoad, onError ) {

		console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

		var loader = new CubeTextureLoader();
		loader.setCrossOrigin( this.crossOrigin );

		var texture = loader.load( urls, onLoad, undefined, onError );

		if ( mapping ) texture.mapping = mapping;

		return texture;

	},

	loadCompressedTexture: function () {

		console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

	},

	loadCompressedTextureCube: function () {

		console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

	}

};

//

function Projector() {

	console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

	this.projectVector = function ( vector, camera ) {

		console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
		vector.project( camera );

	};

	this.unprojectVector = function ( vector, camera ) {

		console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
		vector.unproject( camera );

	};

	this.pickingRay = function () {

		console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

	};

}

//

function CanvasRenderer() {

	console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

	this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
	this.clear = function () {};
	this.render = function () {};
	this.setClearColor = function () {};
	this.setSize = function () {};

}




/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = function( THREE ) {
	/**
	 * @author qiao / https://github.com/qiao
	 * @author mrdoob / http://mrdoob.com
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author erich666 / http://erichaines.com
	 */

// This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one finger move
//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
//    Pan - right mouse, or arrow keys / touch: three finter swipe

	function OrbitControls( object, domElement ) {

		this.object = object;

		this.domElement = ( domElement !== undefined ) ? domElement : document;

		// Set to false to disable this control
		this.enabled = true;

		// "target" sets the location of focus, where the object orbits around
		this.target = new THREE.Vector3();

		// How far you can dolly in and out ( PerspectiveCamera only )
		this.minDistance = 0;
		this.maxDistance = Infinity;

		// How far you can zoom in and out ( OrthographicCamera only )
		this.minZoom = 0;
		this.maxZoom = Infinity;

		// How far you can orbit vertically, upper and lower limits.
		// Range is 0 to Math.PI radians.
		this.minPolarAngle = 0; // radians
		this.maxPolarAngle = Math.PI; // radians

		// How far you can orbit horizontally, upper and lower limits.
		// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
		this.minAzimuthAngle = - Infinity; // radians
		this.maxAzimuthAngle = Infinity; // radians

		// Set to true to enable damping (inertia)
		// If damping is enabled, you must call controls.update() in your animation loop
		this.enableDamping = false;
		this.dampingFactor = 0.25;

		// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
		// Set to false to disable zooming
		this.enableZoom = true;
		this.zoomSpeed = 1.0;

		// Set to false to disable rotating
		this.enableRotate = true;
		this.rotateSpeed = 1.0;

		// Set to false to disable panning
		this.enablePan = true;
		this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

		// Set to true to automatically rotate around the target
		// If auto-rotate is enabled, you must call controls.update() in your animation loop
		this.autoRotate = false;
		this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

		// Set to false to disable use of the keys
		this.enableKeys = true;

		// The four arrow keys
		this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

		// Mouse buttons
		this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

		// for reset
		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.zoom0 = this.object.zoom;

		//
		// public methods
		//

		this.getPolarAngle = function () {

			return spherical.phi;

		};

		this.getAzimuthalAngle = function () {

			return spherical.theta;

		};

		this.reset = function () {

			scope.target.copy( scope.target0 );
			scope.object.position.copy( scope.position0 );
			scope.object.zoom = scope.zoom0;

			scope.object.updateProjectionMatrix();
			scope.dispatchEvent( changeEvent );

			scope.update();

			state = STATE.NONE;

		};

		// this method is exposed, but perhaps it would be better if we can make it private...
		this.update = function() {

			var offset = new THREE.Vector3();

			// so camera.up is the orbit axis
			var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
			var quatInverse = quat.clone().inverse();

			var lastPosition = new THREE.Vector3();
			var lastQuaternion = new THREE.Quaternion();

			return function update () {

				var position = scope.object.position;

				offset.copy( position ).sub( scope.target );

				// rotate offset to "y-axis-is-up" space
				offset.applyQuaternion( quat );

				// angle from z-axis around y-axis
				spherical.setFromVector3( offset );

				if ( scope.autoRotate && state === STATE.NONE ) {

					rotateLeft( getAutoRotationAngle() );

				}

				spherical.theta += sphericalDelta.theta;
				spherical.phi += sphericalDelta.phi;

				// restrict theta to be between desired limits
				spherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );

				// restrict phi to be between desired limits
				spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

				spherical.makeSafe();


				spherical.radius *= scale;

				// restrict radius to be between desired limits
				spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

				// move target to panned location
				scope.target.add( panOffset );

				offset.setFromSpherical( spherical );

				// rotate offset back to "camera-up-vector-is-up" space
				offset.applyQuaternion( quatInverse );

				position.copy( scope.target ).add( offset );

				scope.object.lookAt( scope.target );

				if ( scope.enableDamping === true ) {

					sphericalDelta.theta *= ( 1 - scope.dampingFactor );
					sphericalDelta.phi *= ( 1 - scope.dampingFactor );

				} else {

					sphericalDelta.set( 0, 0, 0 );

				}

				scale = 1;
				panOffset.set( 0, 0, 0 );

				// update condition is:
				// min(camera displacement, camera rotation in radians)^2 > EPS
				// using small-angle approximation cos(x/2) = 1 - x^2 / 8

				if ( zoomChanged ||
					lastPosition.distanceToSquared( scope.object.position ) > EPS ||
					8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

					scope.dispatchEvent( changeEvent );

					lastPosition.copy( scope.object.position );
					lastQuaternion.copy( scope.object.quaternion );
					zoomChanged = false;

					return true;

				}

				return false;

			};

		}();

		this.dispose = function() {

			scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
			scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
			scope.domElement.removeEventListener( 'wheel', onMouseWheel, false );

			scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
			scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
			scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );

			document.removeEventListener( 'mousemove', onMouseMove, false );
			document.removeEventListener( 'mouseup', onMouseUp, false );

			window.removeEventListener( 'keydown', onKeyDown, false );

			//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

		};

		//
		// internals
		//

		var scope = this;

		var changeEvent = { type: 'change' };
		var startEvent = { type: 'start' };
		var endEvent = { type: 'end' };

		var STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };

		var state = STATE.NONE;

		var EPS = 0.000001;

		// current position in spherical coordinates
		var spherical = new THREE.Spherical();
		var sphericalDelta = new THREE.Spherical();

		var scale = 1;
		var panOffset = new THREE.Vector3();
		var zoomChanged = false;

		var rotateStart = new THREE.Vector2();
		var rotateEnd = new THREE.Vector2();
		var rotateDelta = new THREE.Vector2();

		var panStart = new THREE.Vector2();
		var panEnd = new THREE.Vector2();
		var panDelta = new THREE.Vector2();

		var dollyStart = new THREE.Vector2();
		var dollyEnd = new THREE.Vector2();
		var dollyDelta = new THREE.Vector2();

		function getAutoRotationAngle() {

			return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

		}

		function getZoomScale() {

			return Math.pow( 0.95, scope.zoomSpeed );

		}

		function rotateLeft( angle ) {

			sphericalDelta.theta -= angle;

		}

		function rotateUp( angle ) {

			sphericalDelta.phi -= angle;

		}

		var panLeft = function() {

			var v = new THREE.Vector3();

			return function panLeft( distance, objectMatrix ) {

				v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
				v.multiplyScalar( - distance );

				panOffset.add( v );

			};

		}();

		var panUp = function() {

			var v = new THREE.Vector3();

			return function panUp( distance, objectMatrix ) {

				v.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix
				v.multiplyScalar( distance );

				panOffset.add( v );

			};

		}();

		// deltaX and deltaY are in pixels; right and down are positive
		var pan = function() {

			var offset = new THREE.Vector3();

			return function pan ( deltaX, deltaY ) {

				var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

				if ( scope.object instanceof THREE.PerspectiveCamera ) {

					// perspective
					var position = scope.object.position;
					offset.copy( position ).sub( scope.target );
					var targetDistance = offset.length();

					// half of the fov is center to top of screen
					targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

					// we actually don't use screenWidth, since perspective camera is fixed to screen height
					panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
					panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

				} else if ( scope.object instanceof THREE.OrthographicCamera ) {

					// orthographic
					panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
					panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

				} else {

					// camera neither orthographic nor perspective
					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
					scope.enablePan = false;

				}

			};

		}();

		function dollyIn( dollyScale ) {

			if ( scope.object instanceof THREE.PerspectiveCamera ) {

				scale /= dollyScale;

			} else if ( scope.object instanceof THREE.OrthographicCamera ) {

				scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
				scope.object.updateProjectionMatrix();
				zoomChanged = true;

			} else {

				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
				scope.enableZoom = false;

			}

		}

		function dollyOut( dollyScale ) {

			if ( scope.object instanceof THREE.PerspectiveCamera ) {

				scale *= dollyScale;

			} else if ( scope.object instanceof THREE.OrthographicCamera ) {

				scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
				scope.object.updateProjectionMatrix();
				zoomChanged = true;

			} else {

				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
				scope.enableZoom = false;

			}

		}

		//
		// event callbacks - update the object state
		//

		function handleMouseDownRotate( event ) {

			//console.log( 'handleMouseDownRotate' );

			rotateStart.set( event.clientX, event.clientY );

		}

		function handleMouseDownDolly( event ) {

			//console.log( 'handleMouseDownDolly' );

			dollyStart.set( event.clientX, event.clientY );

		}

		function handleMouseDownPan( event ) {

			//console.log( 'handleMouseDownPan' );

			panStart.set( event.clientX, event.clientY );

		}

		function handleMouseMoveRotate( event ) {

			//console.log( 'handleMouseMoveRotate' );

			rotateEnd.set( event.clientX, event.clientY );
			rotateDelta.subVectors( rotateEnd, rotateStart );

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			// rotating across whole screen goes 360 degrees around
			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

			// rotating up and down along whole screen attempts to go 360, but limited to 180
			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

			rotateStart.copy( rotateEnd );

			scope.update();

		}

		function handleMouseMoveDolly( event ) {

			//console.log( 'handleMouseMoveDolly' );

			dollyEnd.set( event.clientX, event.clientY );

			dollyDelta.subVectors( dollyEnd, dollyStart );

			if ( dollyDelta.y > 0 ) {

				dollyIn( getZoomScale() );

			} else if ( dollyDelta.y < 0 ) {

				dollyOut( getZoomScale() );

			}

			dollyStart.copy( dollyEnd );

			scope.update();

		}

		function handleMouseMovePan( event ) {

			//console.log( 'handleMouseMovePan' );

			panEnd.set( event.clientX, event.clientY );

			panDelta.subVectors( panEnd, panStart );

			pan( panDelta.x, panDelta.y );

			panStart.copy( panEnd );

			scope.update();

		}

		function handleMouseUp( event ) {

			//console.log( 'handleMouseUp' );

		}

		function handleMouseWheel( event ) {

			//console.log( 'handleMouseWheel' );

			if ( event.deltaY < 0 ) {

				dollyOut( getZoomScale() );

			} else if ( event.deltaY > 0 ) {

				dollyIn( getZoomScale() );

			}

			scope.update();

		}

		function handleKeyDown( event ) {

			//console.log( 'handleKeyDown' );

			switch ( event.keyCode ) {

				case scope.keys.UP:
					pan( 0, scope.keyPanSpeed );
					scope.update();
					break;

				case scope.keys.BOTTOM:
					pan( 0, - scope.keyPanSpeed );
					scope.update();
					break;

				case scope.keys.LEFT:
					pan( scope.keyPanSpeed, 0 );
					scope.update();
					break;

				case scope.keys.RIGHT:
					pan( - scope.keyPanSpeed, 0 );
					scope.update();
					break;

			}

		}

		function handleTouchStartRotate( event ) {

			//console.log( 'handleTouchStartRotate' );

			rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

		}

		function handleTouchStartDolly( event ) {

			//console.log( 'handleTouchStartDolly' );

			var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
			var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

			var distance = Math.sqrt( dx * dx + dy * dy );

			dollyStart.set( 0, distance );

		}

		function handleTouchStartPan( event ) {

			//console.log( 'handleTouchStartPan' );

			panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

		}

		function handleTouchMoveRotate( event ) {

			//console.log( 'handleTouchMoveRotate' );

			rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
			rotateDelta.subVectors( rotateEnd, rotateStart );

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			// rotating across whole screen goes 360 degrees around
			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

			// rotating up and down along whole screen attempts to go 360, but limited to 180
			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

			rotateStart.copy( rotateEnd );

			scope.update();

		}

		function handleTouchMoveDolly( event ) {

			//console.log( 'handleTouchMoveDolly' );

			var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
			var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

			var distance = Math.sqrt( dx * dx + dy * dy );

			dollyEnd.set( 0, distance );

			dollyDelta.subVectors( dollyEnd, dollyStart );

			if ( dollyDelta.y > 0 ) {

				dollyOut( getZoomScale() );

			} else if ( dollyDelta.y < 0 ) {

				dollyIn( getZoomScale() );

			}

			dollyStart.copy( dollyEnd );

			scope.update();

		}

		function handleTouchMovePan( event ) {

			//console.log( 'handleTouchMovePan' );

			panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

			panDelta.subVectors( panEnd, panStart );

			pan( panDelta.x, panDelta.y );

			panStart.copy( panEnd );

			scope.update();

		}

		function handleTouchEnd( event ) {

			//console.log( 'handleTouchEnd' );

		}

		//
		// event handlers - FSM: listen for events and reset state
		//

		function onMouseDown( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();

			if ( event.button === scope.mouseButtons.ORBIT ) {

				if ( scope.enableRotate === false ) return;

				handleMouseDownRotate( event );

				state = STATE.ROTATE;

			} else if ( event.button === scope.mouseButtons.ZOOM ) {

				if ( scope.enableZoom === false ) return;

				handleMouseDownDolly( event );

				state = STATE.DOLLY;

			} else if ( event.button === scope.mouseButtons.PAN ) {

				if ( scope.enablePan === false ) return;

				handleMouseDownPan( event );

				state = STATE.PAN;

			}

			if ( state !== STATE.NONE ) {

				document.addEventListener( 'mousemove', onMouseMove, false );
				document.addEventListener( 'mouseup', onMouseUp, false );

				scope.dispatchEvent( startEvent );

			}

		}

		function onMouseMove( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();

			if ( state === STATE.ROTATE ) {

				if ( scope.enableRotate === false ) return;

				handleMouseMoveRotate( event );

			} else if ( state === STATE.DOLLY ) {

				if ( scope.enableZoom === false ) return;

				handleMouseMoveDolly( event );

			} else if ( state === STATE.PAN ) {

				if ( scope.enablePan === false ) return;

				handleMouseMovePan( event );

			}

		}

		function onMouseUp( event ) {

			if ( scope.enabled === false ) return;

			handleMouseUp( event );

			document.removeEventListener( 'mousemove', onMouseMove, false );
			document.removeEventListener( 'mouseup', onMouseUp, false );

			scope.dispatchEvent( endEvent );

			state = STATE.NONE;

		}

		function onMouseWheel( event ) {

			if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;

			event.preventDefault();
			event.stopPropagation();

			handleMouseWheel( event );

			scope.dispatchEvent( startEvent ); // not sure why these are here...
			scope.dispatchEvent( endEvent );

		}

		function onKeyDown( event ) {

			if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

			handleKeyDown( event );

		}

		function onTouchStart( event ) {

			if ( scope.enabled === false ) return;

			switch ( event.touches.length ) {

				case 1:	// one-fingered touch: rotate

					if ( scope.enableRotate === false ) return;

					handleTouchStartRotate( event );

					state = STATE.TOUCH_ROTATE;

					break;

				case 2:	// two-fingered touch: dolly

					if ( scope.enableZoom === false ) return;

					handleTouchStartDolly( event );

					state = STATE.TOUCH_DOLLY;

					break;

				case 3: // three-fingered touch: pan

					if ( scope.enablePan === false ) return;

					handleTouchStartPan( event );

					state = STATE.TOUCH_PAN;

					break;

				default:

					state = STATE.NONE;

			}

			if ( state !== STATE.NONE ) {

				scope.dispatchEvent( startEvent );

			}

		}

		function onTouchMove( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();
			event.stopPropagation();

			switch ( event.touches.length ) {

				case 1: // one-fingered touch: rotate

					if ( scope.enableRotate === false ) return;
					if ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...

					handleTouchMoveRotate( event );

					break;

				case 2: // two-fingered touch: dolly

					if ( scope.enableZoom === false ) return;
					if ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...

					handleTouchMoveDolly( event );

					break;

				case 3: // three-fingered touch: pan

					if ( scope.enablePan === false ) return;
					if ( state !== STATE.TOUCH_PAN ) return; // is this needed?...

					handleTouchMovePan( event );

					break;

				default:

					state = STATE.NONE;

			}

		}

		function onTouchEnd( event ) {

			if ( scope.enabled === false ) return;

			handleTouchEnd( event );

			scope.dispatchEvent( endEvent );

			state = STATE.NONE;

		}

		function onContextMenu( event ) {

			event.preventDefault();

		}

		//

		scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );

		scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
		scope.domElement.addEventListener( 'wheel', onMouseWheel, false );

		scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
		scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
		scope.domElement.addEventListener( 'touchmove', onTouchMove, false );

		window.addEventListener( 'keydown', onKeyDown, false );

		// force an update at start

		this.update();

	};

	OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
	OrbitControls.prototype.constructor = OrbitControls;

	Object.defineProperties( OrbitControls.prototype, {

		center: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .center has been renamed to .target' );
				return this.target;

			}

		},

		// backward compatibility

		noZoom: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
				return ! this.enableZoom;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
				this.enableZoom = ! value;

			}

		},

		noRotate: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
				return ! this.enableRotate;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
				this.enableRotate = ! value;

			}

		},

		noPan: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
				return ! this.enablePan;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
				this.enablePan = ! value;

			}

		},

		noKeys: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
				return ! this.enableKeys;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
				this.enableKeys = ! value;

			}

		},

		staticMoving : {

			get: function () {

				console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
				return ! this.enableDamping;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
				this.enableDamping = ! value;

			}

		},

		dynamicDampingFactor : {

			get: function () {

				console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
				return this.dampingFactor;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
				this.dampingFactor = value;

			}

		}

	} );

	return OrbitControls;
};


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const COLOR = {
    "colors": [{
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#000000",
        "rgb": "rgb(0, 0, 0)",
        "hsl": "hsl(0, 0%, 0%)",
        "red": 0,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 0,
        "lightness": 0
    }, {
        "hex": "#020202",
        "rgb": "rgb(2, 2, 2)",
        "hsl": "hsl(0, 0%, 1%)",
        "red": 2,
        "green": 2,
        "blue": 2,
        "hue": 0,
        "saturation": 0,
        "lightness": 1
    }, {
        "hex": "#161616",
        "rgb": "rgb(22, 22, 22)",
        "hsl": "hsl(0, 0%, 9%)",
        "red": 22,
        "green": 22,
        "blue": 22,
        "hue": 0,
        "saturation": 0,
        "lightness": 9
    }, {
        "hex": "#1F1F1F",
        "rgb": "rgb(31, 31, 31)",
        "hsl": "hsl(0, 0%, 12%)",
        "red": 31,
        "green": 31,
        "blue": 31,
        "hue": 0,
        "saturation": 0,
        "lightness": 12
    }, {
        "hex": "#2B2B2B",
        "rgb": "rgb(43, 43, 43)",
        "hsl": "hsl(0, 0%, 17%)",
        "red": 43,
        "green": 43,
        "blue": 43,
        "hue": 0,
        "saturation": 0,
        "lightness": 17
    }, {
        "hex": "#2E2E2E",
        "rgb": "rgb(46, 46, 46)",
        "hsl": "hsl(0, 0%, 18%)",
        "red": 46,
        "green": 46,
        "blue": 46,
        "hue": 0,
        "saturation": 0,
        "lightness": 18
    }, {
        "hex": "#333333",
        "rgb": "rgb(51, 51, 51)",
        "hsl": "hsl(0, 0%, 20%)",
        "red": 51,
        "green": 51,
        "blue": 51,
        "hue": 0,
        "saturation": 0,
        "lightness": 20
    }, {
        "hex": "#333333",
        "rgb": "rgb(51, 51, 51)",
        "hsl": "hsl(0, 0%, 20%)",
        "red": 51,
        "green": 51,
        "blue": 51,
        "hue": 0,
        "saturation": 0,
        "lightness": 20
    }, {
        "hex": "#363636",
        "rgb": "rgb(54, 54, 54)",
        "hsl": "hsl(0, 0%, 21%)",
        "red": 54,
        "green": 54,
        "blue": 54,
        "hue": 0,
        "saturation": 0,
        "lightness": 21
    }, {
        "hex": "#373737",
        "rgb": "rgb(55, 55, 55)",
        "hsl": "hsl(0, 0%, 22%)",
        "red": 55,
        "green": 55,
        "blue": 55,
        "hue": 0,
        "saturation": 0,
        "lightness": 22
    }, {
        "hex": "#3B3B3B",
        "rgb": "rgb(59, 59, 59)",
        "hsl": "hsl(0, 0%, 23%)",
        "red": 59,
        "green": 59,
        "blue": 59,
        "hue": 0,
        "saturation": 0,
        "lightness": 23
    }, {
        "hex": "#404040",
        "rgb": "rgb(64, 64, 64)",
        "hsl": "hsl(0, 0%, 25%)",
        "red": 64,
        "green": 64,
        "blue": 64,
        "hue": 0,
        "saturation": 0,
        "lightness": 25
    }, {
        "hex": "#424242",
        "rgb": "rgb(66, 66, 66)",
        "hsl": "hsl(0, 0%, 26%)",
        "red": 66,
        "green": 66,
        "blue": 66,
        "hue": 0,
        "saturation": 0,
        "lightness": 26
    }, {
        "hex": "#454545",
        "rgb": "rgb(69, 69, 69)",
        "hsl": "hsl(0, 0%, 27%)",
        "red": 69,
        "green": 69,
        "blue": 69,
        "hue": 0,
        "saturation": 0,
        "lightness": 27
    }, {
        "hex": "#444444",
        "rgb": "rgb(68, 68, 68)",
        "hsl": "hsl(0, 0%, 27%)",
        "red": 68,
        "green": 68,
        "blue": 68,
        "hue": 0,
        "saturation": 0,
        "lightness": 27
    }, {
        "hex": "#484848",
        "rgb": "rgb(72, 72, 72)",
        "hsl": "hsl(0, 0%, 28%)",
        "red": 72,
        "green": 72,
        "blue": 72,
        "hue": 0,
        "saturation": 0,
        "lightness": 28
    }, {
        "hex": "#474747",
        "rgb": "rgb(71, 71, 71)",
        "hsl": "hsl(0, 0%, 28%)",
        "red": 71,
        "green": 71,
        "blue": 71,
        "hue": 0,
        "saturation": 0,
        "lightness": 28
    }, {
        "hex": "#484848",
        "rgb": "rgb(72, 72, 72)",
        "hsl": "hsl(0, 0%, 28%)",
        "red": 72,
        "green": 72,
        "blue": 72,
        "hue": 0,
        "saturation": 0,
        "lightness": 28
    }, {
        "hex": "#4D4D4D",
        "rgb": "rgb(77, 77, 77)",
        "hsl": "hsl(0, 0%, 30%)",
        "red": 77,
        "green": 77,
        "blue": 77,
        "hue": 0,
        "saturation": 0,
        "lightness": 30
    }, {
        "hex": "#525252",
        "rgb": "rgb(82, 82, 82)",
        "hsl": "hsl(0, 0%, 32%)",
        "red": 82,
        "green": 82,
        "blue": 82,
        "hue": 0,
        "saturation": 0,
        "lightness": 32
    }, {
        "hex": "#545454",
        "rgb": "rgb(84, 84, 84)",
        "hsl": "hsl(0, 0%, 33%)",
        "red": 84,
        "green": 84,
        "blue": 84,
        "hue": 0,
        "saturation": 0,
        "lightness": 33
    }, {
        "hex": "#5E5E5E",
        "rgb": "rgb(94, 94, 94)",
        "hsl": "hsl(0, 0%, 37%)",
        "red": 94,
        "green": 94,
        "blue": 94,
        "hue": 0,
        "saturation": 0,
        "lightness": 37
    }, {
        "hex": "#636363",
        "rgb": "rgb(99, 99, 99)",
        "hsl": "hsl(0, 0%, 39%)",
        "red": 99,
        "green": 99,
        "blue": 99,
        "hue": 0,
        "saturation": 0,
        "lightness": 39
    }, {
        "hex": "#666666",
        "rgb": "rgb(102, 102, 102)",
        "hsl": "hsl(0, 0%, 40%)",
        "red": 102,
        "green": 102,
        "blue": 102,
        "hue": 0,
        "saturation": 0,
        "lightness": 40
    }, {
        "hex": "#666666",
        "rgb": "rgb(102, 102, 102)",
        "hsl": "hsl(0, 0%, 40%)",
        "red": 102,
        "green": 102,
        "blue": 102,
        "hue": 0,
        "saturation": 0,
        "lightness": 40
    }, {
        "hex": "#6B6B6B",
        "rgb": "rgb(107, 107, 107)",
        "hsl": "hsl(0, 0%, 42%)",
        "red": 107,
        "green": 107,
        "blue": 107,
        "hue": 0,
        "saturation": 0,
        "lightness": 42
    }, {
        "hex": "#6B6B6B",
        "rgb": "rgb(107, 107, 107)",
        "hsl": "hsl(0, 0%, 42%)",
        "red": 107,
        "green": 107,
        "blue": 107,
        "hue": 0,
        "saturation": 0,
        "lightness": 42
    }, {
        "hex": "#737373",
        "rgb": "rgb(115, 115, 115)",
        "hsl": "hsl(0, 0%, 45%)",
        "red": 115,
        "green": 115,
        "blue": 115,
        "hue": 0,
        "saturation": 0,
        "lightness": 45
    }, {
        "hex": "#757575",
        "rgb": "rgb(117, 117, 117)",
        "hsl": "hsl(0, 0%, 46%)",
        "red": 117,
        "green": 117,
        "blue": 117,
        "hue": 0,
        "saturation": 0,
        "lightness": 46
    }, {
        "hex": "#787878",
        "rgb": "rgb(120, 120, 120)",
        "hsl": "hsl(0, 0%, 47%)",
        "red": 120,
        "green": 120,
        "blue": 120,
        "hue": 0,
        "saturation": 0,
        "lightness": 47
    }, {
        "hex": "#8F8F8F",
        "rgb": "rgb(143, 143, 143)",
        "hsl": "hsl(0, 0%, 56%)",
        "red": 143,
        "green": 143,
        "blue": 143,
        "hue": 0,
        "saturation": 0,
        "lightness": 56
    }, {
        "hex": "#999999",
        "rgb": "rgb(153, 153, 153)",
        "hsl": "hsl(0, 0%, 60%)",
        "red": 153,
        "green": 153,
        "blue": 153,
        "hue": 0,
        "saturation": 0,
        "lightness": 60
    }, {
        "hex": "#9E9E9E",
        "rgb": "rgb(158, 158, 158)",
        "hsl": "hsl(0, 0%, 62%)",
        "red": 158,
        "green": 158,
        "blue": 158,
        "hue": 0,
        "saturation": 0,
        "lightness": 62
    }, {
        "hex": "#A1A1A1",
        "rgb": "rgb(161, 161, 161)",
        "hsl": "hsl(0, 0%, 63%)",
        "red": 161,
        "green": 161,
        "blue": 161,
        "hue": 0,
        "saturation": 0,
        "lightness": 63
    }, {
        "hex": "#BCBCBC",
        "rgb": "rgb(188, 188, 188)",
        "hsl": "hsl(0, 0%, 74%)",
        "red": 188,
        "green": 188,
        "blue": 188,
        "hue": 0,
        "saturation": 0,
        "lightness": 74
    }, {
        "hex": "#CACACA",
        "rgb": "rgb(202, 202, 202)",
        "hsl": "hsl(0, 0%, 79%)",
        "red": 202,
        "green": 202,
        "blue": 202,
        "hue": 0,
        "saturation": 0,
        "lightness": 79
    }, {
        "hex": "#CCCCCC",
        "rgb": "rgb(204, 204, 204)",
        "hsl": "hsl(0, 0%, 80%)",
        "red": 204,
        "green": 204,
        "blue": 204,
        "hue": 0,
        "saturation": 0,
        "lightness": 80
    }, {
        "hex": "#CCCCCC",
        "rgb": "rgb(204, 204, 204)",
        "hsl": "hsl(0, 0%, 80%)",
        "red": 204,
        "green": 204,
        "blue": 204,
        "hue": 0,
        "saturation": 0,
        "lightness": 80
    }, {
        "hex": "#CCCCCC",
        "rgb": "rgb(204, 204, 204)",
        "hsl": "hsl(0, 0%, 80%)",
        "red": 204,
        "green": 204,
        "blue": 204,
        "hue": 0,
        "saturation": 0,
        "lightness": 80
    }, {
        "hex": "#CFCFCF",
        "rgb": "rgb(207, 207, 207)",
        "hsl": "hsl(0, 0%, 81%)",
        "red": 207,
        "green": 207,
        "blue": 207,
        "hue": 0,
        "saturation": 0,
        "lightness": 81
    }, {
        "hex": "#D2D2D2",
        "rgb": "rgb(210, 210, 210)",
        "hsl": "hsl(0, 0%, 82%)",
        "red": 210,
        "green": 210,
        "blue": 210,
        "hue": 0,
        "saturation": 0,
        "lightness": 82
    }, {
        "hex": "#D9D9D9",
        "rgb": "rgb(217, 217, 217)",
        "hsl": "hsl(0, 0%, 85%)",
        "red": 217,
        "green": 217,
        "blue": 217,
        "hue": 0,
        "saturation": 0,
        "lightness": 85
    }, {
        "hex": "#D8D8D8",
        "rgb": "rgb(216, 216, 216)",
        "hsl": "hsl(0, 0%, 85%)",
        "red": 216,
        "green": 216,
        "blue": 216,
        "hue": 0,
        "saturation": 0,
        "lightness": 85
    }, {
        "hex": "#D8D8D8",
        "rgb": "rgb(216, 216, 216)",
        "hsl": "hsl(0, 0%, 85%)",
        "red": 216,
        "green": 216,
        "blue": 216,
        "hue": 0,
        "saturation": 0,
        "lightness": 85
    }, {
        "hex": "#E0E0E0",
        "rgb": "rgb(224, 224, 224)",
        "hsl": "hsl(0, 0%, 88%)",
        "red": 224,
        "green": 224,
        "blue": 224,
        "hue": 0,
        "saturation": 0,
        "lightness": 88
    }, {
        "hex": "#E0E0E0",
        "rgb": "rgb(224, 224, 224)",
        "hsl": "hsl(0, 0%, 88%)",
        "red": 224,
        "green": 224,
        "blue": 224,
        "hue": 0,
        "saturation": 0,
        "lightness": 88
    }, {
        "hex": "#E6E6E6",
        "rgb": "rgb(230, 230, 230)",
        "hsl": "hsl(0, 0%, 90%)",
        "red": 230,
        "green": 230,
        "blue": 230,
        "hue": 0,
        "saturation": 0,
        "lightness": 90
    }, {
        "hex": "#E5E5E5",
        "rgb": "rgb(229, 229, 229)",
        "hsl": "hsl(0, 0%, 90%)",
        "red": 229,
        "green": 229,
        "blue": 229,
        "hue": 0,
        "saturation": 0,
        "lightness": 90
    }, {
        "hex": "#E9E9E9",
        "rgb": "rgb(233, 233, 233)",
        "hsl": "hsl(0, 0%, 91%)",
        "red": 233,
        "green": 233,
        "blue": 233,
        "hue": 0,
        "saturation": 0,
        "lightness": 91
    }, {
        "hex": "#E9E9E9",
        "rgb": "rgb(233, 233, 233)",
        "hsl": "hsl(0, 0%, 91%)",
        "red": 233,
        "green": 233,
        "blue": 233,
        "hue": 0,
        "saturation": 0,
        "lightness": 91
    }, {
        "hex": "#E8E8E8",
        "rgb": "rgb(232, 232, 232)",
        "hsl": "hsl(0, 0%, 91%)",
        "red": 232,
        "green": 232,
        "blue": 232,
        "hue": 0,
        "saturation": 0,
        "lightness": 91
    }, {
        "hex": "#ECECEC",
        "rgb": "rgb(236, 236, 236)",
        "hsl": "hsl(0, 0%, 93%)",
        "red": 236,
        "green": 236,
        "blue": 236,
        "hue": 0,
        "saturation": 0,
        "lightness": 93
    }, {
        "hex": "#F0F0F0",
        "rgb": "rgb(240, 240, 240)",
        "hsl": "hsl(0, 0%, 94%)",
        "red": 240,
        "green": 240,
        "blue": 240,
        "hue": 0,
        "saturation": 0,
        "lightness": 94
    }, {
        "hex": "#F2F2F2",
        "rgb": "rgb(242, 242, 242)",
        "hsl": "hsl(0, 0%, 95%)",
        "red": 242,
        "green": 242,
        "blue": 242,
        "hue": 0,
        "saturation": 0,
        "lightness": 95
    }, {
        "hex": "#F5F5F5",
        "rgb": "rgb(245, 245, 245)",
        "hsl": "hsl(0, 0%, 96%)",
        "red": 245,
        "green": 245,
        "blue": 245,
        "hue": 0,
        "saturation": 0,
        "lightness": 96
    }, {
        "hex": "#F6F6F6",
        "rgb": "rgb(246, 246, 246)",
        "hsl": "hsl(0, 0%, 96%)",
        "red": 246,
        "green": 246,
        "blue": 246,
        "hue": 0,
        "saturation": 0,
        "lightness": 96
    }, {
        "hex": "#F4F4F4",
        "rgb": "rgb(244, 244, 244)",
        "hsl": "hsl(0, 0%, 96%)",
        "red": 244,
        "green": 244,
        "blue": 244,
        "hue": 0,
        "saturation": 0,
        "lightness": 96
    }, {
        "hex": "#F7F7F7",
        "rgb": "rgb(247, 247, 247)",
        "hsl": "hsl(0, 0%, 97%)",
        "red": 247,
        "green": 247,
        "blue": 247,
        "hue": 0,
        "saturation": 0,
        "lightness": 97
    }, {
        "hex": "#FAFAFA",
        "rgb": "rgb(250, 250, 250)",
        "hsl": "hsl(0, 0%, 98%)",
        "red": 250,
        "green": 250,
        "blue": 250,
        "hue": 0,
        "saturation": 0,
        "lightness": 98
    }, {
        "hex": "#FCFCFC",
        "rgb": "rgb(252, 252, 252)",
        "hsl": "hsl(0, 0%, 99%)",
        "red": 252,
        "green": 252,
        "blue": 252,
        "hue": 0,
        "saturation": 0,
        "lightness": 99
    }, {
        "hex": "#FCFCFC",
        "rgb": "rgb(252, 252, 252)",
        "hsl": "hsl(0, 0%, 99%)",
        "red": 252,
        "green": 252,
        "blue": 252,
        "hue": 0,
        "saturation": 0,
        "lightness": 99
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#FFFFFF",
        "rgb": "rgb(255, 255, 255)",
        "hsl": "hsl(0, 0%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 255,
        "hue": 0,
        "saturation": 0,
        "lightness": 100
    }, {
        "hex": "#262525",
        "rgb": "rgb(38, 37, 37)",
        "hsl": "hsl(0, 1%, 15%)",
        "red": 38,
        "green": 37,
        "blue": 37,
        "hue": 0,
        "saturation": 1,
        "lightness": 15
    }, {
        "hex": "#A8A7A7",
        "rgb": "rgb(168, 167, 167)",
        "hsl": "hsl(0, 1%, 66%)",
        "red": 168,
        "green": 167,
        "blue": 167,
        "hue": 0,
        "saturation": 1,
        "lightness": 66
    }, {
        "hex": "#413D3D",
        "rgb": "rgb(65, 61, 61)",
        "hsl": "hsl(0, 3%, 25%)",
        "red": 65,
        "green": 61,
        "blue": 61,
        "hue": 0,
        "saturation": 3,
        "lightness": 25
    }, {
        "hex": "#524E4E",
        "rgb": "rgb(82, 78, 78)",
        "hsl": "hsl(0, 3%, 31%)",
        "red": 82,
        "green": 78,
        "blue": 78,
        "hue": 0,
        "saturation": 3,
        "lightness": 31
    }, {
        "hex": "#615C5C",
        "rgb": "rgb(97, 92, 92)",
        "hsl": "hsl(0, 3%, 37%)",
        "red": 97,
        "green": 92,
        "blue": 92,
        "hue": 0,
        "saturation": 3,
        "lightness": 37
    }, {
        "hex": "#0D0C0C",
        "rgb": "rgb(13, 12, 12)",
        "hsl": "hsl(0, 4%, 5%)",
        "red": 13,
        "green": 12,
        "blue": 12,
        "hue": 0,
        "saturation": 4,
        "lightness": 5
    }, {
        "hex": "#3B3737",
        "rgb": "rgb(59, 55, 55)",
        "hsl": "hsl(0, 4%, 22%)",
        "red": 59,
        "green": 55,
        "blue": 55,
        "hue": 0,
        "saturation": 4,
        "lightness": 22
    }, {
        "hex": "#706767",
        "rgb": "rgb(112, 103, 103)",
        "hsl": "hsl(0, 4%, 42%)",
        "red": 112,
        "green": 103,
        "blue": 103,
        "hue": 0,
        "saturation": 4,
        "lightness": 42
    }, {
        "hex": "#433D3D",
        "rgb": "rgb(67, 61, 61)",
        "hsl": "hsl(0, 5%, 25%)",
        "red": 67,
        "green": 61,
        "blue": 61,
        "hue": 0,
        "saturation": 5,
        "lightness": 25
    }, {
        "hex": "#595151",
        "rgb": "rgb(89, 81, 81)",
        "hsl": "hsl(0, 5%, 33%)",
        "red": 89,
        "green": 81,
        "blue": 81,
        "hue": 0,
        "saturation": 5,
        "lightness": 33
    }, {
        "hex": "#594F4F",
        "rgb": "rgb(89, 79, 79)",
        "hsl": "hsl(0, 6%, 33%)",
        "red": 89,
        "green": 79,
        "blue": 79,
        "hue": 0,
        "saturation": 6,
        "lightness": 33
    }, {
        "hex": "#776A6A",
        "rgb": "rgb(119, 106, 106)",
        "hsl": "hsl(0, 6%, 44%)",
        "red": 119,
        "green": 106,
        "blue": 106,
        "hue": 0,
        "saturation": 6,
        "lightness": 44
    }, {
        "hex": "#3A3232",
        "rgb": "rgb(58, 50, 50)",
        "hsl": "hsl(0, 7%, 21%)",
        "red": 58,
        "green": 50,
        "blue": 50,
        "hue": 0,
        "saturation": 7,
        "lightness": 21
    }, {
        "hex": "#807070",
        "rgb": "rgb(128, 112, 112)",
        "hsl": "hsl(0, 7%, 47%)",
        "red": 128,
        "green": 112,
        "blue": 112,
        "hue": 0,
        "saturation": 7,
        "lightness": 47
    }, {
        "hex": "#EBE8E8",
        "rgb": "rgb(235, 232, 232)",
        "hsl": "hsl(0, 7%, 92%)",
        "red": 235,
        "green": 232,
        "blue": 232,
        "hue": 0,
        "saturation": 7,
        "lightness": 92
    }, {
        "hex": "#302727",
        "rgb": "rgb(48, 39, 39)",
        "hsl": "hsl(0, 10%, 17%)",
        "red": 48,
        "green": 39,
        "blue": 39,
        "hue": 0,
        "saturation": 10,
        "lightness": 17
    }, {
        "hex": "#4A3D3D",
        "rgb": "rgb(74, 61, 61)",
        "hsl": "hsl(0, 10%, 26%)",
        "red": 74,
        "green": 61,
        "blue": 61,
        "hue": 0,
        "saturation": 10,
        "lightness": 26
    }, {
        "hex": "#615050",
        "rgb": "rgb(97, 80, 80)",
        "hsl": "hsl(0, 10%, 35%)",
        "red": 97,
        "green": 80,
        "blue": 80,
        "hue": 0,
        "saturation": 10,
        "lightness": 35
    }, {
        "hex": "#594747",
        "rgb": "rgb(89, 71, 71)",
        "hsl": "hsl(0, 11%, 31%)",
        "red": 89,
        "green": 71,
        "blue": 71,
        "hue": 0,
        "saturation": 11,
        "lightness": 31
    }, {
        "hex": "#836868",
        "rgb": "rgb(131, 104, 104)",
        "hsl": "hsl(0, 11%, 46%)",
        "red": 131,
        "green": 104,
        "blue": 104,
        "hue": 0,
        "saturation": 11,
        "lightness": 46
    }, {
        "hex": "#856A6A",
        "rgb": "rgb(133, 106, 106)",
        "hsl": "hsl(0, 11%, 47%)",
        "red": 133,
        "green": 106,
        "blue": 106,
        "hue": 0,
        "saturation": 11,
        "lightness": 47
    }, {
        "hex": "#4D3B3B",
        "rgb": "rgb(77, 59, 59)",
        "hsl": "hsl(0, 13%, 27%)",
        "red": 77,
        "green": 59,
        "blue": 59,
        "hue": 0,
        "saturation": 13,
        "lightness": 27
    }, {
        "hex": "#382A2A",
        "rgb": "rgb(56, 42, 42)",
        "hsl": "hsl(0, 14%, 19%)",
        "red": 56,
        "green": 42,
        "blue": 42,
        "hue": 0,
        "saturation": 14,
        "lightness": 19
    }, {
        "hex": "#604848",
        "rgb": "rgb(96, 72, 72)",
        "hsl": "hsl(0, 14%, 33%)",
        "red": 96,
        "green": 72,
        "blue": 72,
        "hue": 0,
        "saturation": 14,
        "lightness": 33
    }, {
        "hex": "#604848",
        "rgb": "rgb(96, 72, 72)",
        "hsl": "hsl(0, 14%, 33%)",
        "red": 96,
        "green": 72,
        "blue": 72,
        "hue": 0,
        "saturation": 14,
        "lightness": 33
    }, {
        "hex": "#755858",
        "rgb": "rgb(117, 88, 88)",
        "hsl": "hsl(0, 14%, 40%)",
        "red": 117,
        "green": 88,
        "blue": 88,
        "hue": 0,
        "saturation": 14,
        "lightness": 40
    }, {
        "hex": "#A88C8C",
        "rgb": "rgb(168, 140, 140)",
        "hsl": "hsl(0, 14%, 60%)",
        "red": 168,
        "green": 140,
        "blue": 140,
        "hue": 0,
        "saturation": 14,
        "lightness": 60
    }, {
        "hex": "#CDBBBB",
        "rgb": "rgb(205, 187, 187)",
        "hsl": "hsl(0, 15%, 77%)",
        "red": 205,
        "green": 187,
        "blue": 187,
        "hue": 0,
        "saturation": 15,
        "lightness": 77
    }, {
        "hex": "#EEE8E8",
        "rgb": "rgb(238, 232, 232)",
        "hsl": "hsl(0, 15%, 92%)",
        "red": 238,
        "green": 232,
        "blue": 232,
        "hue": 0,
        "saturation": 15,
        "lightness": 92
    }, {
        "hex": "#2A1E1E",
        "rgb": "rgb(42, 30, 30)",
        "hsl": "hsl(0, 17%, 14%)",
        "red": 42,
        "green": 30,
        "blue": 30,
        "hue": 0,
        "saturation": 17,
        "lightness": 14
    }, {
        "hex": "#BDA2A2",
        "rgb": "rgb(189, 162, 162)",
        "hsl": "hsl(0, 17%, 69%)",
        "red": 189,
        "green": 162,
        "blue": 162,
        "hue": 0,
        "saturation": 17,
        "lightness": 69
    }, {
        "hex": "#4A3333",
        "rgb": "rgb(74, 51, 51)",
        "hsl": "hsl(0, 18%, 25%)",
        "red": 74,
        "green": 51,
        "blue": 51,
        "hue": 0,
        "saturation": 18,
        "lightness": 25
    }, {
        "hex": "#F1EBEB",
        "rgb": "rgb(241, 235, 235)",
        "hsl": "hsl(0, 18%, 93%)",
        "red": 241,
        "green": 235,
        "blue": 235,
        "hue": 0,
        "saturation": 18,
        "lightness": 93
    }, {
        "hex": "#130D0D",
        "rgb": "rgb(19, 13, 13)",
        "hsl": "hsl(0, 19%, 6%)",
        "red": 19,
        "green": 13,
        "blue": 13,
        "hue": 0,
        "saturation": 19,
        "lightness": 6
    }, {
        "hex": "#332222",
        "rgb": "rgb(51, 34, 34)",
        "hsl": "hsl(0, 20%, 17%)",
        "red": 51,
        "green": 34,
        "blue": 34,
        "hue": 0,
        "saturation": 20,
        "lightness": 17
    }, {
        "hex": "#996666",
        "rgb": "rgb(153, 102, 102)",
        "hsl": "hsl(0, 20%, 50%)",
        "red": 153,
        "green": 102,
        "blue": 102,
        "hue": 0,
        "saturation": 20,
        "lightness": 50
    }, {
        "hex": "#AD8484",
        "rgb": "rgb(173, 132, 132)",
        "hsl": "hsl(0, 20%, 60%)",
        "red": 173,
        "green": 132,
        "blue": 132,
        "hue": 0,
        "saturation": 20,
        "lightness": 60
    }, {
        "hex": "#1D1313",
        "rgb": "rgb(29, 19, 19)",
        "hsl": "hsl(0, 21%, 9%)",
        "red": 29,
        "green": 19,
        "blue": 19,
        "hue": 0,
        "saturation": 21,
        "lightness": 9
    }, {
        "hex": "#281A1A",
        "rgb": "rgb(40, 26, 26)",
        "hsl": "hsl(0, 21%, 13%)",
        "red": 40,
        "green": 26,
        "blue": 26,
        "hue": 0,
        "saturation": 21,
        "lightness": 13
    }, {
        "hex": "#DFCCCC",
        "rgb": "rgb(223, 204, 204)",
        "hsl": "hsl(0, 23%, 84%)",
        "red": 223,
        "green": 204,
        "blue": 204,
        "hue": 0,
        "saturation": 23,
        "lightness": 84
    }, {
        "hex": "#965959",
        "rgb": "rgb(150, 89, 89)",
        "hsl": "hsl(0, 26%, 47%)",
        "red": 150,
        "green": 89,
        "blue": 89,
        "hue": 0,
        "saturation": 26,
        "lightness": 47
    }, {
        "hex": "#301A1A",
        "rgb": "rgb(48, 26, 26)",
        "hsl": "hsl(0, 30%, 15%)",
        "red": 48,
        "green": 26,
        "blue": 26,
        "hue": 0,
        "saturation": 30,
        "lightness": 15
    }, {
        "hex": "#5A2E2E",
        "rgb": "rgb(90, 46, 46)",
        "hsl": "hsl(0, 32%, 27%)",
        "red": 90,
        "green": 46,
        "blue": 46,
        "hue": 0,
        "saturation": 32,
        "lightness": 27
    }, {
        "hex": "#663333",
        "rgb": "rgb(102, 51, 51)",
        "hsl": "hsl(0, 33%, 30%)",
        "red": 102,
        "green": 51,
        "blue": 51,
        "hue": 0,
        "saturation": 33,
        "lightness": 30
    }, {
        "hex": "#994D4D",
        "rgb": "rgb(153, 77, 77)",
        "hsl": "hsl(0, 33%, 45%)",
        "red": 153,
        "green": 77,
        "blue": 77,
        "hue": 0,
        "saturation": 33,
        "lightness": 45
    }, {
        "hex": "#7B3B3B",
        "rgb": "rgb(123, 59, 59)",
        "hsl": "hsl(0, 35%, 36%)",
        "red": 123,
        "green": 59,
        "blue": 59,
        "hue": 0,
        "saturation": 35,
        "lightness": 36
    }, {
        "hex": "#823C3C",
        "rgb": "rgb(130, 60, 60)",
        "hsl": "hsl(0, 37%, 37%)",
        "red": 130,
        "green": 60,
        "blue": 60,
        "hue": 0,
        "saturation": 37,
        "lightness": 37
    }, {
        "hex": "#BA6868",
        "rgb": "rgb(186, 104, 104)",
        "hsl": "hsl(0, 37%, 57%)",
        "red": 186,
        "green": 104,
        "blue": 104,
        "hue": 0,
        "saturation": 37,
        "lightness": 57
    }, {
        "hex": "#CC8383",
        "rgb": "rgb(204, 131, 131)",
        "hsl": "hsl(0, 42%, 66%)",
        "red": 204,
        "green": 131,
        "blue": 131,
        "hue": 0,
        "saturation": 42,
        "lightness": 66
    }, {
        "hex": "#BA5252",
        "rgb": "rgb(186, 82, 82)",
        "hsl": "hsl(0, 43%, 53%)",
        "red": 186,
        "green": 82,
        "blue": 82,
        "hue": 0,
        "saturation": 43,
        "lightness": 53
    }, {
        "hex": "#260D0D",
        "rgb": "rgb(38, 13, 13)",
        "hsl": "hsl(0, 49%, 10%)",
        "red": 38,
        "green": 13,
        "blue": 13,
        "hue": 0,
        "saturation": 49,
        "lightness": 10
    }, {
        "hex": "#C04848",
        "rgb": "rgb(192, 72, 72)",
        "hsl": "hsl(0, 49%, 52%)",
        "red": 192,
        "green": 72,
        "blue": 72,
        "hue": 0,
        "saturation": 49,
        "lightness": 52
    }, {
        "hex": "#D17878",
        "rgb": "rgb(209, 120, 120)",
        "hsl": "hsl(0, 49%, 65%)",
        "red": 209,
        "green": 120,
        "blue": 120,
        "hue": 0,
        "saturation": 49,
        "lightness": 65
    }, {
        "hex": "#4D1A1A",
        "rgb": "rgb(77, 26, 26)",
        "hsl": "hsl(0, 50%, 20%)",
        "red": 77,
        "green": 26,
        "blue": 26,
        "hue": 0,
        "saturation": 50,
        "lightness": 20
    }, {
        "hex": "#CC6666",
        "rgb": "rgb(204, 102, 102)",
        "hsl": "hsl(0, 50%, 60%)",
        "red": 204,
        "green": 102,
        "blue": 102,
        "hue": 0,
        "saturation": 50,
        "lightness": 60
    }, {
        "hex": "#D88A8A",
        "rgb": "rgb(216, 138, 138)",
        "hsl": "hsl(0, 50%, 69%)",
        "red": 216,
        "green": 138,
        "blue": 138,
        "hue": 0,
        "saturation": 50,
        "lightness": 69
    }, {
        "hex": "#822626",
        "rgb": "rgb(130, 38, 38)",
        "hsl": "hsl(0, 55%, 33%)",
        "red": 130,
        "green": 38,
        "blue": 38,
        "hue": 0,
        "saturation": 55,
        "lightness": 33
    }, {
        "hex": "#BD3737",
        "rgb": "rgb(189, 55, 55)",
        "hsl": "hsl(0, 55%, 48%)",
        "red": 189,
        "green": 55,
        "blue": 55,
        "hue": 0,
        "saturation": 55,
        "lightness": 48
    }, {
        "hex": "#BD3737",
        "rgb": "rgb(189, 55, 55)",
        "hsl": "hsl(0, 55%, 48%)",
        "red": 189,
        "green": 55,
        "blue": 55,
        "hue": 0,
        "saturation": 55,
        "lightness": 48
    }, {
        "hex": "#E8ACAC",
        "rgb": "rgb(232, 172, 172)",
        "hsl": "hsl(0, 57%, 79%)",
        "red": 232,
        "green": 172,
        "blue": 172,
        "hue": 0,
        "saturation": 57,
        "lightness": 79
    }, {
        "hex": "#BA2D2D",
        "rgb": "rgb(186, 45, 45)",
        "hsl": "hsl(0, 61%, 45%)",
        "red": 186,
        "green": 45,
        "blue": 45,
        "hue": 0,
        "saturation": 61,
        "lightness": 45
    }, {
        "hex": "#330C0C",
        "rgb": "rgb(51, 12, 12)",
        "hsl": "hsl(0, 62%, 12%)",
        "red": 51,
        "green": 12,
        "blue": 12,
        "hue": 0,
        "saturation": 62,
        "lightness": 12
    }, {
        "hex": "#942222",
        "rgb": "rgb(148, 34, 34)",
        "hsl": "hsl(0, 63%, 36%)",
        "red": 148,
        "green": 34,
        "blue": 34,
        "hue": 0,
        "saturation": 63,
        "lightness": 36
    }, {
        "hex": "#A92727",
        "rgb": "rgb(169, 39, 39)",
        "hsl": "hsl(0, 63%, 41%)",
        "red": 169,
        "green": 39,
        "blue": 39,
        "hue": 0,
        "saturation": 63,
        "lightness": 41
    }, {
        "hex": "#C92C2C",
        "rgb": "rgb(201, 44, 44)",
        "hsl": "hsl(0, 64%, 48%)",
        "red": 201,
        "green": 44,
        "blue": 44,
        "hue": 0,
        "saturation": 64,
        "lightness": 48
    }, {
        "hex": "#941F1F",
        "rgb": "rgb(148, 31, 31)",
        "hsl": "hsl(0, 65%, 35%)",
        "red": 148,
        "green": 31,
        "blue": 31,
        "hue": 0,
        "saturation": 65,
        "lightness": 35
    }, {
        "hex": "#DE6262",
        "rgb": "rgb(222, 98, 98)",
        "hsl": "hsl(0, 65%, 63%)",
        "red": 222,
        "green": 98,
        "blue": 98,
        "hue": 0,
        "saturation": 65,
        "lightness": 63
    }, {
        "hex": "#F1BBBB",
        "rgb": "rgb(241, 187, 187)",
        "hsl": "hsl(0, 66%, 84%)",
        "red": 241,
        "green": 187,
        "blue": 187,
        "hue": 0,
        "saturation": 66,
        "lightness": 84
    }, {
        "hex": "#A62121",
        "rgb": "rgb(166, 33, 33)",
        "hsl": "hsl(0, 67%, 39%)",
        "red": 166,
        "green": 33,
        "blue": 33,
        "hue": 0,
        "saturation": 67,
        "lightness": 39
    }, {
        "hex": "#D62E2E",
        "rgb": "rgb(214, 46, 46)",
        "hsl": "hsl(0, 67%, 51%)",
        "red": 214,
        "green": 46,
        "blue": 46,
        "hue": 0,
        "saturation": 67,
        "lightness": 51
    }, {
        "hex": "#E36B6B",
        "rgb": "rgb(227, 107, 107)",
        "hsl": "hsl(0, 68%, 65%)",
        "red": 227,
        "green": 107,
        "blue": 107,
        "hue": 0,
        "saturation": 68,
        "lightness": 65
    }, {
        "hex": "#110303",
        "rgb": "rgb(17, 3, 3)",
        "hsl": "hsl(0, 70%, 4%)",
        "red": 17,
        "green": 3,
        "blue": 3,
        "hue": 0,
        "saturation": 70,
        "lightness": 4
    }, {
        "hex": "#E25858",
        "rgb": "rgb(226, 88, 88)",
        "hsl": "hsl(0, 70%, 62%)",
        "red": 226,
        "green": 88,
        "blue": 88,
        "hue": 0,
        "saturation": 70,
        "lightness": 62
    }, {
        "hex": "#661111",
        "rgb": "rgb(102, 17, 17)",
        "hsl": "hsl(0, 71%, 23%)",
        "red": 102,
        "green": 17,
        "blue": 17,
        "hue": 0,
        "saturation": 71,
        "lightness": 23
    }, {
        "hex": "#E87474",
        "rgb": "rgb(232, 116, 116)",
        "hsl": "hsl(0, 72%, 68%)",
        "red": 232,
        "green": 116,
        "blue": 116,
        "hue": 0,
        "saturation": 72,
        "lightness": 68
    }, {
        "hex": "#991818",
        "rgb": "rgb(153, 24, 24)",
        "hsl": "hsl(0, 73%, 35%)",
        "red": 153,
        "green": 24,
        "blue": 24,
        "hue": 0,
        "saturation": 73,
        "lightness": 35
    }, {
        "hex": "#EB7F7F",
        "rgb": "rgb(235, 127, 127)",
        "hsl": "hsl(0, 73%, 71%)",
        "red": 235,
        "green": 127,
        "blue": 127,
        "hue": 0,
        "saturation": 73,
        "lightness": 71
    }, {
        "hex": "#8F1414",
        "rgb": "rgb(143, 20, 20)",
        "hsl": "hsl(0, 75%, 32%)",
        "red": 143,
        "green": 20,
        "blue": 20,
        "hue": 0,
        "saturation": 75,
        "lightness": 32
    }, {
        "hex": "#EB6E6E",
        "rgb": "rgb(235, 110, 110)",
        "hsl": "hsl(0, 76%, 68%)",
        "red": 235,
        "green": 110,
        "blue": 110,
        "hue": 0,
        "saturation": 76,
        "lightness": 68
    }, {
        "hex": "#EC6363",
        "rgb": "rgb(236, 99, 99)",
        "hsl": "hsl(0, 78%, 66%)",
        "red": 236,
        "green": 99,
        "blue": 99,
        "hue": 0,
        "saturation": 78,
        "lightness": 66
    }, {
        "hex": "#FAD6D6",
        "rgb": "rgb(250, 214, 214)",
        "hsl": "hsl(0, 78%, 91%)",
        "red": 250,
        "green": 214,
        "blue": 214,
        "hue": 0,
        "saturation": 78,
        "lightness": 91
    }, {
        "hex": "#320606",
        "rgb": "rgb(50, 6, 6)",
        "hsl": "hsl(0, 79%, 11%)",
        "red": 50,
        "green": 6,
        "blue": 6,
        "hue": 0,
        "saturation": 79,
        "lightness": 11
    }, {
        "hex": "#ED6464",
        "rgb": "rgb(237, 100, 100)",
        "hsl": "hsl(0, 79%, 66%)",
        "red": 237,
        "green": 100,
        "blue": 100,
        "hue": 0,
        "saturation": 79,
        "lightness": 66
    }, {
        "hex": "#ED6362",
        "rgb": "rgb(237, 99, 98)",
        "hsl": "hsl(0, 79%, 66%)",
        "red": 237,
        "green": 99,
        "blue": 98,
        "hue": 0,
        "saturation": 79,
        "lightness": 66
    }, {
        "hex": "#E83535",
        "rgb": "rgb(232, 53, 53)",
        "hsl": "hsl(0, 80%, 56%)",
        "red": 232,
        "green": 53,
        "blue": 53,
        "hue": 0,
        "saturation": 80,
        "lightness": 56
    }, {
        "hex": "#F07877",
        "rgb": "rgb(240, 120, 119)",
        "hsl": "hsl(0, 80%, 70%)",
        "red": 240,
        "green": 120,
        "blue": 119,
        "hue": 0,
        "saturation": 80,
        "lightness": 70
    }, {
        "hex": "#F38A8A",
        "rgb": "rgb(243, 138, 138)",
        "hsl": "hsl(0, 81%, 75%)",
        "red": 243,
        "green": 138,
        "blue": 138,
        "hue": 0,
        "saturation": 81,
        "lightness": 75
    }, {
        "hex": "#F5A2A2",
        "rgb": "rgb(245, 162, 162)",
        "hsl": "hsl(0, 81%, 80%)",
        "red": 245,
        "green": 162,
        "blue": 162,
        "hue": 0,
        "saturation": 81,
        "lightness": 80
    }, {
        "hex": "#F27C7C",
        "rgb": "rgb(242, 124, 124)",
        "hsl": "hsl(0, 82%, 72%)",
        "red": 242,
        "green": 124,
        "blue": 124,
        "hue": 0,
        "saturation": 82,
        "lightness": 72
    }, {
        "hex": "#DB1414",
        "rgb": "rgb(219, 20, 20)",
        "hsl": "hsl(0, 83%, 47%)",
        "red": 219,
        "green": 20,
        "blue": 20,
        "hue": 0,
        "saturation": 83,
        "lightness": 47
    }, {
        "hex": "#AC0D0D",
        "rgb": "rgb(172, 13, 13)",
        "hsl": "hsl(0, 86%, 36%)",
        "red": 172,
        "green": 13,
        "blue": 13,
        "hue": 0,
        "saturation": 86,
        "lightness": 36
    }, {
        "hex": "#F24E4E",
        "rgb": "rgb(242, 78, 78)",
        "hsl": "hsl(0, 86%, 63%)",
        "red": 242,
        "green": 78,
        "blue": 78,
        "hue": 0,
        "saturation": 86,
        "lightness": 63
    }, {
        "hex": "#FABDBD",
        "rgb": "rgb(250, 189, 189)",
        "hsl": "hsl(0, 86%, 86%)",
        "red": 250,
        "green": 189,
        "blue": 189,
        "hue": 0,
        "saturation": 86,
        "lightness": 86
    }, {
        "hex": "#700808",
        "rgb": "rgb(112, 8, 8)",
        "hsl": "hsl(0, 87%, 24%)",
        "red": 112,
        "green": 8,
        "blue": 8,
        "hue": 0,
        "saturation": 87,
        "lightness": 24
    }, {
        "hex": "#800909",
        "rgb": "rgb(128, 9, 9)",
        "hsl": "hsl(0, 87%, 27%)",
        "red": 128,
        "green": 9,
        "blue": 9,
        "hue": 0,
        "saturation": 87,
        "lightness": 27
    }, {
        "hex": "#E50E0E",
        "rgb": "rgb(229, 14, 14)",
        "hsl": "hsl(0, 88%, 48%)",
        "red": 229,
        "green": 14,
        "blue": 14,
        "hue": 0,
        "saturation": 88,
        "lightness": 48
    }, {
        "hex": "#FA9B9B",
        "rgb": "rgb(250, 155, 155)",
        "hsl": "hsl(0, 90%, 79%)",
        "red": 250,
        "green": 155,
        "blue": 155,
        "hue": 0,
        "saturation": 90,
        "lightness": 79
    }, {
        "hex": "#880606",
        "rgb": "rgb(136, 6, 6)",
        "hsl": "hsl(0, 92%, 28%)",
        "red": 136,
        "green": 6,
        "blue": 6,
        "hue": 0,
        "saturation": 92,
        "lightness": 28
    }, {
        "hex": "#FA3E3E",
        "rgb": "rgb(250, 62, 62)",
        "hsl": "hsl(0, 95%, 61%)",
        "red": 250,
        "green": 62,
        "blue": 62,
        "hue": 0,
        "saturation": 95,
        "lightness": 61
    }, {
        "hex": "#690202",
        "rgb": "rgb(105, 2, 2)",
        "hsl": "hsl(0, 96%, 21%)",
        "red": 105,
        "green": 2,
        "blue": 2,
        "hue": 0,
        "saturation": 96,
        "lightness": 21
    }, {
        "hex": "#B90504",
        "rgb": "rgb(185, 5, 4)",
        "hsl": "hsl(0, 96%, 37%)",
        "red": 185,
        "green": 5,
        "blue": 4,
        "hue": 0,
        "saturation": 96,
        "lightness": 37
    }, {
        "hex": "#FB4848",
        "rgb": "rgb(251, 72, 72)",
        "hsl": "hsl(0, 96%, 63%)",
        "red": 251,
        "green": 72,
        "blue": 72,
        "hue": 0,
        "saturation": 96,
        "lightness": 63
    }, {
        "hex": "#FC1A1A",
        "rgb": "rgb(252, 26, 26)",
        "hsl": "hsl(0, 97%, 55%)",
        "red": 252,
        "green": 26,
        "blue": 26,
        "hue": 0,
        "saturation": 97,
        "lightness": 55
    }, {
        "hex": "#050000",
        "rgb": "rgb(5, 0, 0)",
        "hsl": "hsl(0, 100%, 1%)",
        "red": 5,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 100,
        "lightness": 1
    }, {
        "hex": "#050000",
        "rgb": "rgb(5, 0, 0)",
        "hsl": "hsl(0, 100%, 1%)",
        "red": 5,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 100,
        "lightness": 1
    }, {
        "hex": "#080000",
        "rgb": "rgb(8, 0, 0)",
        "hsl": "hsl(0, 100%, 2%)",
        "red": 8,
        "green": 0,
        "blue": 0,
        "hue": 0,
        "saturation": 100,
        "lightness": 2
    }, {
        "hex": "#990100",
        "rgb": "rgb(153, 1, 0)",
        "hsl": "hsl(0, 100%, 30%)",
        "red": 153,
        "green": 1,
        "blue": 0,
        "hue": 0,
        "saturation": 100,
        "lightness": 30
    }, {
        "hex": "#FF2121",
        "rgb": "rgb(255, 33, 33)",
        "hsl": "hsl(0, 100%, 56%)",
        "red": 255,
        "green": 33,
        "blue": 33,
        "hue": 0,
        "saturation": 100,
        "lightness": 56
    }, {
        "hex": "#FF2121",
        "rgb": "rgb(255, 33, 33)",
        "hsl": "hsl(0, 100%, 56%)",
        "red": 255,
        "green": 33,
        "blue": 33,
        "hue": 0,
        "saturation": 100,
        "lightness": 56
    }, {
        "hex": "#FF3D3D",
        "rgb": "rgb(255, 61, 61)",
        "hsl": "hsl(0, 100%, 62%)",
        "red": 255,
        "green": 61,
        "blue": 61,
        "hue": 0,
        "saturation": 100,
        "lightness": 62
    }, {
        "hex": "#FF4242",
        "rgb": "rgb(255, 66, 66)",
        "hsl": "hsl(0, 100%, 63%)",
        "red": 255,
        "green": 66,
        "blue": 66,
        "hue": 0,
        "saturation": 100,
        "lightness": 63
    }, {
        "hex": "#FF4746",
        "rgb": "rgb(255, 71, 70)",
        "hsl": "hsl(0, 100%, 64%)",
        "red": 255,
        "green": 71,
        "blue": 70,
        "hue": 0,
        "saturation": 100,
        "lightness": 64
    }, {
        "hex": "#FF4A4A",
        "rgb": "rgb(255, 74, 74)",
        "hsl": "hsl(0, 100%, 65%)",
        "red": 255,
        "green": 74,
        "blue": 74,
        "hue": 0,
        "saturation": 100,
        "lightness": 65
    }, {
        "hex": "#FF5252",
        "rgb": "rgb(255, 82, 82)",
        "hsl": "hsl(0, 100%, 66%)",
        "red": 255,
        "green": 82,
        "blue": 82,
        "hue": 0,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FF5252",
        "rgb": "rgb(255, 82, 82)",
        "hsl": "hsl(0, 100%, 66%)",
        "red": 255,
        "green": 82,
        "blue": 82,
        "hue": 0,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FF6161",
        "rgb": "rgb(255, 97, 97)",
        "hsl": "hsl(0, 100%, 69%)",
        "red": 255,
        "green": 97,
        "blue": 97,
        "hue": 0,
        "saturation": 100,
        "lightness": 69
    }, {
        "hex": "#FF6B6B",
        "rgb": "rgb(255, 107, 107)",
        "hsl": "hsl(0, 100%, 71%)",
        "red": 255,
        "green": 107,
        "blue": 107,
        "hue": 0,
        "saturation": 100,
        "lightness": 71
    }, {
        "hex": "#FF7474",
        "rgb": "rgb(255, 116, 116)",
        "hsl": "hsl(0, 100%, 73%)",
        "red": 255,
        "green": 116,
        "blue": 116,
        "hue": 0,
        "saturation": 100,
        "lightness": 73
    }, {
        "hex": "#FF7373",
        "rgb": "rgb(255, 115, 115)",
        "hsl": "hsl(0, 100%, 73%)",
        "red": 255,
        "green": 115,
        "blue": 115,
        "hue": 0,
        "saturation": 100,
        "lightness": 73
    }, {
        "hex": "#FF7575",
        "rgb": "rgb(255, 117, 117)",
        "hsl": "hsl(0, 100%, 73%)",
        "red": 255,
        "green": 117,
        "blue": 117,
        "hue": 0,
        "saturation": 100,
        "lightness": 73
    }, {
        "hex": "#FFA4A4",
        "rgb": "rgb(255, 164, 164)",
        "hsl": "hsl(0, 100%, 82%)",
        "red": 255,
        "green": 164,
        "blue": 164,
        "hue": 0,
        "saturation": 100,
        "lightness": 82
    }, {
        "hex": "#FFABAB",
        "rgb": "rgb(255, 171, 171)",
        "hsl": "hsl(0, 100%, 84%)",
        "red": 255,
        "green": 171,
        "blue": 171,
        "hue": 0,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#FFD3D3",
        "rgb": "rgb(255, 211, 211)",
        "hsl": "hsl(0, 100%, 91%)",
        "red": 255,
        "green": 211,
        "blue": 211,
        "hue": 0,
        "saturation": 100,
        "lightness": 91
    }, {
        "hex": "#FFD8D8",
        "rgb": "rgb(255, 216, 216)",
        "hsl": "hsl(0, 100%, 92%)",
        "red": 255,
        "green": 216,
        "blue": 216,
        "hue": 0,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#C46564",
        "rgb": "rgb(196, 101, 100)",
        "hsl": "hsl(1, 45%, 58%)",
        "red": 196,
        "green": 101,
        "blue": 100,
        "hue": 1,
        "saturation": 45,
        "lightness": 58
    }, {
        "hex": "#8A2F2E",
        "rgb": "rgb(138, 47, 46)",
        "hsl": "hsl(1, 50%, 36%)",
        "red": 138,
        "green": 47,
        "blue": 46,
        "hue": 1,
        "saturation": 50,
        "lightness": 36
    }, {
        "hex": "#D54C4A",
        "rgb": "rgb(213, 76, 74)",
        "hsl": "hsl(1, 62%, 56%)",
        "red": 213,
        "green": 76,
        "blue": 74,
        "hue": 1,
        "saturation": 62,
        "lightness": 56
    }, {
        "hex": "#CA221F",
        "rgb": "rgb(202, 34, 31)",
        "hsl": "hsl(1, 73%, 46%)",
        "red": 202,
        "green": 34,
        "blue": 31,
        "hue": 1,
        "saturation": 73,
        "lightness": 46
    }, {
        "hex": "#EB6765",
        "rgb": "rgb(235, 103, 101)",
        "hsl": "hsl(1, 77%, 66%)",
        "red": 235,
        "green": 103,
        "blue": 101,
        "hue": 1,
        "saturation": 77,
        "lightness": 66
    }, {
        "hex": "#F18886",
        "rgb": "rgb(241, 136, 134)",
        "hsl": "hsl(1, 79%, 74%)",
        "red": 241,
        "green": 136,
        "blue": 134,
        "hue": 1,
        "saturation": 79,
        "lightness": 74
    }, {
        "hex": "#EF7270",
        "rgb": "rgb(239, 114, 112)",
        "hsl": "hsl(1, 80%, 69%)",
        "red": 239,
        "green": 114,
        "blue": 112,
        "hue": 1,
        "saturation": 80,
        "lightness": 69
    }, {
        "hex": "#FCD0CF",
        "rgb": "rgb(252, 208, 207)",
        "hsl": "hsl(1, 88%, 90%)",
        "red": 252,
        "green": 208,
        "blue": 207,
        "hue": 1,
        "saturation": 88,
        "lightness": 90
    }, {
        "hex": "#F76F6D",
        "rgb": "rgb(247, 111, 109)",
        "hsl": "hsl(1, 90%, 70%)",
        "red": 247,
        "green": 111,
        "blue": 109,
        "hue": 1,
        "saturation": 90,
        "lightness": 70
    }, {
        "hex": "#F87E7B",
        "rgb": "rgb(248, 126, 123)",
        "hsl": "hsl(1, 90%, 73%)",
        "red": 248,
        "green": 126,
        "blue": 123,
        "hue": 1,
        "saturation": 90,
        "lightness": 73
    }, {
        "hex": "#400403",
        "rgb": "rgb(64, 4, 3)",
        "hsl": "hsl(1, 91%, 13%)",
        "red": 64,
        "green": 4,
        "blue": 3,
        "hue": 1,
        "saturation": 91,
        "lightness": 13
    }, {
        "hex": "#FB0C06",
        "rgb": "rgb(251, 12, 6)",
        "hsl": "hsl(1, 97%, 50%)",
        "red": 251,
        "green": 12,
        "blue": 6,
        "hue": 1,
        "saturation": 97,
        "lightness": 50
    }, {
        "hex": "#FC5956",
        "rgb": "rgb(252, 89, 86)",
        "hsl": "hsl(1, 97%, 66%)",
        "red": 252,
        "green": 89,
        "blue": 86,
        "hue": 1,
        "saturation": 97,
        "lightness": 66
    }, {
        "hex": "#FF4845",
        "rgb": "rgb(255, 72, 69)",
        "hsl": "hsl(1, 100%, 64%)",
        "red": 255,
        "green": 72,
        "blue": 69,
        "hue": 1,
        "saturation": 100,
        "lightness": 64
    }, {
        "hex": "#FF7876",
        "rgb": "rgb(255, 120, 118)",
        "hsl": "hsl(1, 100%, 73%)",
        "red": 255,
        "green": 120,
        "blue": 118,
        "hue": 1,
        "saturation": 100,
        "lightness": 73
    }, {
        "hex": "#FF8482",
        "rgb": "rgb(255, 132, 130)",
        "hsl": "hsl(1, 100%, 75%)",
        "red": 255,
        "green": 132,
        "blue": 130,
        "hue": 1,
        "saturation": 100,
        "lightness": 75
    }, {
        "hex": "#FF9E9D",
        "rgb": "rgb(255, 158, 157)",
        "hsl": "hsl(1, 100%, 81%)",
        "red": 255,
        "green": 158,
        "blue": 157,
        "hue": 1,
        "saturation": 100,
        "lightness": 81
    }, {
        "hex": "#5A3938",
        "rgb": "rgb(90, 57, 56)",
        "hsl": "hsl(2, 23%, 29%)",
        "red": 90,
        "green": 57,
        "blue": 56,
        "hue": 2,
        "saturation": 23,
        "lightness": 29
    }, {
        "hex": "#C97C7A",
        "rgb": "rgb(201, 124, 122)",
        "hsl": "hsl(2, 42%, 63%)",
        "red": 201,
        "green": 124,
        "blue": 122,
        "hue": 2,
        "saturation": 42,
        "lightness": 63
    }, {
        "hex": "#752E2B",
        "rgb": "rgb(117, 46, 43)",
        "hsl": "hsl(2, 46%, 31%)",
        "red": 117,
        "green": 46,
        "blue": 43,
        "hue": 2,
        "saturation": 46,
        "lightness": 31
    }, {
        "hex": "#D15C57",
        "rgb": "rgb(209, 92, 87)",
        "hsl": "hsl(2, 57%, 58%)",
        "red": 209,
        "green": 92,
        "blue": 87,
        "hue": 2,
        "saturation": 57,
        "lightness": 58
    }, {
        "hex": "#E1918E",
        "rgb": "rgb(225, 145, 142)",
        "hsl": "hsl(2, 58%, 72%)",
        "red": 225,
        "green": 145,
        "blue": 142,
        "hue": 2,
        "saturation": 58,
        "lightness": 72
    }, {
        "hex": "#A22C27",
        "rgb": "rgb(162, 44, 39)",
        "hsl": "hsl(2, 61%, 39%)",
        "red": 162,
        "green": 44,
        "blue": 39,
        "hue": 2,
        "saturation": 61,
        "lightness": 39
    }, {
        "hex": "#A32C28",
        "rgb": "rgb(163, 44, 40)",
        "hsl": "hsl(2, 61%, 40%)",
        "red": 163,
        "green": 44,
        "blue": 40,
        "hue": 2,
        "saturation": 61,
        "lightness": 40
    }, {
        "hex": "#DE7571",
        "rgb": "rgb(222, 117, 113)",
        "hsl": "hsl(2, 62%, 66%)",
        "red": 222,
        "green": 117,
        "blue": 113,
        "hue": 2,
        "saturation": 62,
        "lightness": 66
    }, {
        "hex": "#8A211D",
        "rgb": "rgb(138, 33, 29)",
        "hsl": "hsl(2, 65%, 33%)",
        "red": 138,
        "green": 33,
        "blue": 29,
        "hue": 2,
        "saturation": 65,
        "lightness": 33
    }, {
        "hex": "#E17572",
        "rgb": "rgb(225, 117, 114)",
        "hsl": "hsl(2, 65%, 66%)",
        "red": 225,
        "green": 117,
        "blue": 114,
        "hue": 2,
        "saturation": 65,
        "lightness": 66
    }, {
        "hex": "#DD423E",
        "rgb": "rgb(221, 66, 62)",
        "hsl": "hsl(2, 70%, 55%)",
        "red": 221,
        "green": 66,
        "blue": 62,
        "hue": 2,
        "saturation": 70,
        "lightness": 55
    }, {
        "hex": "#E77A77",
        "rgb": "rgb(231, 122, 119)",
        "hsl": "hsl(2, 70%, 69%)",
        "red": 231,
        "green": 122,
        "blue": 119,
        "hue": 2,
        "saturation": 70,
        "lightness": 69
    }, {
        "hex": "#590F0C",
        "rgb": "rgb(89, 15, 12)",
        "hsl": "hsl(2, 76%, 20%)",
        "red": 89,
        "green": 15,
        "blue": 12,
        "hue": 2,
        "saturation": 76,
        "lightness": 20
    }, {
        "hex": "#E4211B",
        "rgb": "rgb(228, 33, 27)",
        "hsl": "hsl(2, 79%, 50%)",
        "red": 228,
        "green": 33,
        "blue": 27,
        "hue": 2,
        "saturation": 79,
        "lightness": 50
    }, {
        "hex": "#EF746F",
        "rgb": "rgb(239, 116, 111)",
        "hsl": "hsl(2, 80%, 69%)",
        "red": 239,
        "green": 116,
        "blue": 111,
        "hue": 2,
        "saturation": 80,
        "lightness": 69
    }, {
        "hex": "#F06F6B",
        "rgb": "rgb(240, 111, 107)",
        "hsl": "hsl(2, 82%, 68%)",
        "red": 240,
        "green": 111,
        "blue": 107,
        "hue": 2,
        "saturation": 82,
        "lightness": 68
    }, {
        "hex": "#810E0B",
        "rgb": "rgb(129, 14, 11)",
        "hsl": "hsl(2, 84%, 27%)",
        "red": 129,
        "green": 14,
        "blue": 11,
        "hue": 2,
        "saturation": 84,
        "lightness": 27
    }, {
        "hex": "#F04842",
        "rgb": "rgb(240, 72, 66)",
        "hsl": "hsl(2, 85%, 60%)",
        "red": 240,
        "green": 72,
        "blue": 66,
        "hue": 2,
        "saturation": 85,
        "lightness": 60
    }, {
        "hex": "#3D0604",
        "rgb": "rgb(61, 6, 4)",
        "hsl": "hsl(2, 88%, 13%)",
        "red": 61,
        "green": 6,
        "blue": 4,
        "hue": 2,
        "saturation": 88,
        "lightness": 13
    }, {
        "hex": "#F67975",
        "rgb": "rgb(246, 121, 117)",
        "hsl": "hsl(2, 88%, 71%)",
        "red": 246,
        "green": 121,
        "blue": 117,
        "hue": 2,
        "saturation": 88,
        "lightness": 71
    }, {
        "hex": "#3B0503",
        "rgb": "rgb(59, 5, 3)",
        "hsl": "hsl(2, 90%, 12%)",
        "red": 59,
        "green": 5,
        "blue": 3,
        "hue": 2,
        "saturation": 90,
        "lightness": 12
    }, {
        "hex": "#FA6A64",
        "rgb": "rgb(250, 106, 100)",
        "hsl": "hsl(2, 94%, 69%)",
        "red": 250,
        "green": 106,
        "blue": 100,
        "hue": 2,
        "saturation": 94,
        "lightness": 69
    }, {
        "hex": "#FC9D9A",
        "rgb": "rgb(252, 157, 154)",
        "hsl": "hsl(2, 94%, 80%)",
        "red": 252,
        "green": 157,
        "blue": 154,
        "hue": 2,
        "saturation": 94,
        "lightness": 80
    }, {
        "hex": "#C90A02",
        "rgb": "rgb(201, 10, 2)",
        "hsl": "hsl(2, 98%, 40%)",
        "red": 201,
        "green": 10,
        "blue": 2,
        "hue": 2,
        "saturation": 98,
        "lightness": 40
    }, {
        "hex": "#FE6763",
        "rgb": "rgb(254, 103, 99)",
        "hsl": "hsl(2, 99%, 69%)",
        "red": 254,
        "green": 103,
        "blue": 99,
        "hue": 2,
        "saturation": 99,
        "lightness": 69
    }, {
        "hex": "#FF5D57",
        "rgb": "rgb(255, 93, 87)",
        "hsl": "hsl(2, 100%, 67%)",
        "red": 255,
        "green": 93,
        "blue": 87,
        "hue": 2,
        "saturation": 100,
        "lightness": 67
    }, {
        "hex": "#493736",
        "rgb": "rgb(73, 55, 54)",
        "hsl": "hsl(3, 15%, 25%)",
        "red": 73,
        "green": 55,
        "blue": 54,
        "hue": 3,
        "saturation": 15,
        "lightness": 25
    }, {
        "hex": "#703E3B",
        "rgb": "rgb(112, 62, 59)",
        "hsl": "hsl(3, 31%, 34%)",
        "red": 112,
        "green": 62,
        "blue": 59,
        "hue": 3,
        "saturation": 31,
        "lightness": 34
    }, {
        "hex": "#D6B3B1",
        "rgb": "rgb(214, 179, 177)",
        "hsl": "hsl(3, 31%, 77%)",
        "red": 214,
        "green": 179,
        "blue": 177,
        "hue": 3,
        "saturation": 31,
        "lightness": 77
    }, {
        "hex": "#B3544F",
        "rgb": "rgb(179, 84, 79)",
        "hsl": "hsl(3, 40%, 51%)",
        "red": 179,
        "green": 84,
        "blue": 79,
        "hue": 3,
        "saturation": 40,
        "lightness": 51
    }, {
        "hex": "#CF8884",
        "rgb": "rgb(207, 136, 132)",
        "hsl": "hsl(3, 44%, 66%)",
        "red": 207,
        "green": 136,
        "blue": 132,
        "hue": 3,
        "saturation": 44,
        "lightness": 66
    }, {
        "hex": "#F1DBDA",
        "rgb": "rgb(241, 219, 218)",
        "hsl": "hsl(3, 45%, 90%)",
        "red": 241,
        "green": 219,
        "blue": 218,
        "hue": 3,
        "saturation": 45,
        "lightness": 90
    }, {
        "hex": "#D65C56",
        "rgb": "rgb(214, 92, 86)",
        "hsl": "hsl(3, 61%, 59%)",
        "red": 214,
        "green": 92,
        "blue": 86,
        "hue": 3,
        "saturation": 61,
        "lightness": 59
    }, {
        "hex": "#DF7670",
        "rgb": "rgb(223, 118, 112)",
        "hsl": "hsl(3, 63%, 66%)",
        "red": 223,
        "green": 118,
        "blue": 112,
        "hue": 3,
        "saturation": 63,
        "lightness": 66
    }, {
        "hex": "#BD2F28",
        "rgb": "rgb(189, 47, 40)",
        "hsl": "hsl(3, 65%, 45%)",
        "red": 189,
        "green": 47,
        "blue": 40,
        "hue": 3,
        "saturation": 65,
        "lightness": 45
    }, {
        "hex": "#D83A31",
        "rgb": "rgb(216, 58, 49)",
        "hsl": "hsl(3, 68%, 52%)",
        "red": 216,
        "green": 58,
        "blue": 49,
        "hue": 3,
        "saturation": 68,
        "lightness": 52
    }, {
        "hex": "#BF2A23",
        "rgb": "rgb(191, 42, 35)",
        "hsl": "hsl(3, 69%, 44%)",
        "red": 191,
        "green": 42,
        "blue": 35,
        "hue": 3,
        "saturation": 69,
        "lightness": 44
    }, {
        "hex": "#DE4C45",
        "rgb": "rgb(222, 76, 69)",
        "hsl": "hsl(3, 70%, 57%)",
        "red": 222,
        "green": 76,
        "blue": 69,
        "hue": 3,
        "saturation": 70,
        "lightness": 57
    }, {
        "hex": "#F0AFAB",
        "rgb": "rgb(240, 175, 171)",
        "hsl": "hsl(3, 70%, 81%)",
        "red": 240,
        "green": 175,
        "blue": 171,
        "hue": 3,
        "saturation": 70,
        "lightness": 81
    }, {
        "hex": "#DB3026",
        "rgb": "rgb(219, 48, 38)",
        "hsl": "hsl(3, 72%, 50%)",
        "red": 219,
        "green": 48,
        "blue": 38,
        "hue": 3,
        "saturation": 72,
        "lightness": 50
    }, {
        "hex": "#E5625C",
        "rgb": "rgb(229, 98, 92)",
        "hsl": "hsl(3, 72%, 63%)",
        "red": 229,
        "green": 98,
        "blue": 92,
        "hue": 3,
        "saturation": 72,
        "lightness": 63
    }, {
        "hex": "#E03E36",
        "rgb": "rgb(224, 62, 54)",
        "hsl": "hsl(3, 73%, 55%)",
        "red": 224,
        "green": 62,
        "blue": 54,
        "hue": 3,
        "saturation": 73,
        "lightness": 55
    }, {
        "hex": "#E1473F",
        "rgb": "rgb(225, 71, 63)",
        "hsl": "hsl(3, 73%, 56%)",
        "red": 225,
        "green": 71,
        "blue": 63,
        "hue": 3,
        "saturation": 73,
        "lightness": 56
    }, {
        "hex": "#C21B12",
        "rgb": "rgb(194, 27, 18)",
        "hsl": "hsl(3, 83%, 42%)",
        "red": 194,
        "green": 27,
        "blue": 18,
        "hue": 3,
        "saturation": 83,
        "lightness": 42
    }, {
        "hex": "#F05C54",
        "rgb": "rgb(240, 92, 84)",
        "hsl": "hsl(3, 84%, 64%)",
        "red": 240,
        "green": 92,
        "blue": 84,
        "hue": 3,
        "saturation": 84,
        "lightness": 64
    }, {
        "hex": "#F7A29E",
        "rgb": "rgb(247, 162, 158)",
        "hsl": "hsl(3, 85%, 79%)",
        "red": 247,
        "green": 162,
        "blue": 158,
        "hue": 3,
        "saturation": 85,
        "lightness": 79
    }, {
        "hex": "#F88F89",
        "rgb": "rgb(248, 143, 137)",
        "hsl": "hsl(3, 89%, 75%)",
        "red": 248,
        "green": 143,
        "blue": 137,
        "hue": 3,
        "saturation": 89,
        "lightness": 75
    }, {
        "hex": "#F88D87",
        "rgb": "rgb(248, 141, 135)",
        "hsl": "hsl(3, 89%, 75%)",
        "red": 248,
        "green": 141,
        "blue": 135,
        "hue": 3,
        "saturation": 89,
        "lightness": 75
    }, {
        "hex": "#F84339",
        "rgb": "rgb(248, 67, 57)",
        "hsl": "hsl(3, 93%, 60%)",
        "red": 248,
        "green": 67,
        "blue": 57,
        "hue": 3,
        "saturation": 93,
        "lightness": 60
    }, {
        "hex": "#FE857E",
        "rgb": "rgb(254, 133, 126)",
        "hsl": "hsl(3, 98%, 75%)",
        "red": 254,
        "green": 133,
        "blue": 126,
        "hue": 3,
        "saturation": 98,
        "lightness": 75
    }, {
        "hex": "#FE958F",
        "rgb": "rgb(254, 149, 143)",
        "hsl": "hsl(3, 98%, 78%)",
        "red": 254,
        "green": 149,
        "blue": 143,
        "hue": 3,
        "saturation": 98,
        "lightness": 78
    }, {
        "hex": "#FE9D97",
        "rgb": "rgb(254, 157, 151)",
        "hsl": "hsl(3, 98%, 79%)",
        "red": 254,
        "green": 157,
        "blue": 151,
        "hue": 3,
        "saturation": 98,
        "lightness": 79
    }, {
        "hex": "#FEA6A2",
        "rgb": "rgb(254, 166, 162)",
        "hsl": "hsl(3, 98%, 82%)",
        "red": 254,
        "green": 166,
        "blue": 162,
        "hue": 3,
        "saturation": 98,
        "lightness": 82
    }, {
        "hex": "#FE6960",
        "rgb": "rgb(254, 105, 96)",
        "hsl": "hsl(3, 99%, 69%)",
        "red": 254,
        "green": 105,
        "blue": 96,
        "hue": 3,
        "saturation": 99,
        "lightness": 69
    }, {
        "hex": "#FE6C63",
        "rgb": "rgb(254, 108, 99)",
        "hsl": "hsl(3, 99%, 69%)",
        "red": 254,
        "green": 108,
        "blue": 99,
        "hue": 3,
        "saturation": 99,
        "lightness": 69
    }, {
        "hex": "#FE6962",
        "rgb": "rgb(254, 105, 98)",
        "hsl": "hsl(3, 99%, 69%)",
        "red": 254,
        "green": 105,
        "blue": 98,
        "hue": 3,
        "saturation": 99,
        "lightness": 69
    }, {
        "hex": "#9B0800",
        "rgb": "rgb(155, 8, 0)",
        "hsl": "hsl(3, 100%, 30%)",
        "red": 155,
        "green": 8,
        "blue": 0,
        "hue": 3,
        "saturation": 100,
        "lightness": 30
    }, {
        "hex": "#C90A00",
        "rgb": "rgb(201, 10, 0)",
        "hsl": "hsl(3, 100%, 39%)",
        "red": 201,
        "green": 10,
        "blue": 0,
        "hue": 3,
        "saturation": 100,
        "lightness": 39
    }, {
        "hex": "#FF4E44",
        "rgb": "rgb(255, 78, 68)",
        "hsl": "hsl(3, 100%, 63%)",
        "red": 255,
        "green": 78,
        "blue": 68,
        "hue": 3,
        "saturation": 100,
        "lightness": 63
    }, {
        "hex": "#FF5248",
        "rgb": "rgb(255, 82, 72)",
        "hsl": "hsl(3, 100%, 64%)",
        "red": 255,
        "green": 82,
        "blue": 72,
        "hue": 3,
        "saturation": 100,
        "lightness": 64
    }, {
        "hex": "#FF8A84",
        "rgb": "rgb(255, 138, 132)",
        "hsl": "hsl(3, 100%, 76%)",
        "red": 255,
        "green": 138,
        "blue": 132,
        "hue": 3,
        "saturation": 100,
        "lightness": 76
    }, {
        "hex": "#FF9C97",
        "rgb": "rgb(255, 156, 151)",
        "hsl": "hsl(3, 100%, 80%)",
        "red": 255,
        "green": 156,
        "blue": 151,
        "hue": 3,
        "saturation": 100,
        "lightness": 80
    }, {
        "hex": "#FFAAA6",
        "rgb": "rgb(255, 170, 166)",
        "hsl": "hsl(3, 100%, 83%)",
        "red": 255,
        "green": 170,
        "blue": 166,
        "hue": 3,
        "saturation": 100,
        "lightness": 83
    }, {
        "hex": "#654B49",
        "rgb": "rgb(101, 75, 73)",
        "hsl": "hsl(4, 16%, 34%)",
        "red": 101,
        "green": 75,
        "blue": 73,
        "hue": 4,
        "saturation": 16,
        "lightness": 34
    }, {
        "hex": "#9B726F",
        "rgb": "rgb(155, 114, 111)",
        "hsl": "hsl(4, 18%, 52%)",
        "red": 155,
        "green": 114,
        "blue": 111,
        "hue": 4,
        "saturation": 18,
        "lightness": 52
    }, {
        "hex": "#C1A2A0",
        "rgb": "rgb(193, 162, 160)",
        "hsl": "hsl(4, 21%, 69%)",
        "red": 193,
        "green": 162,
        "blue": 160,
        "hue": 4,
        "saturation": 21,
        "lightness": 69
    }, {
        "hex": "#AE736F",
        "rgb": "rgb(174, 115, 111)",
        "hsl": "hsl(4, 28%, 56%)",
        "red": 174,
        "green": 115,
        "blue": 111,
        "hue": 4,
        "saturation": 28,
        "lightness": 56
    }, {
        "hex": "#1C0F0E",
        "rgb": "rgb(28, 15, 14)",
        "hsl": "hsl(4, 33%, 8%)",
        "red": 28,
        "green": 15,
        "blue": 14,
        "hue": 4,
        "saturation": 33,
        "lightness": 8
    }, {
        "hex": "#B56A65",
        "rgb": "rgb(181, 106, 101)",
        "hsl": "hsl(4, 35%, 55%)",
        "red": 181,
        "green": 106,
        "blue": 101,
        "hue": 4,
        "saturation": 35,
        "lightness": 55
    }, {
        "hex": "#C88984",
        "rgb": "rgb(200, 137, 132)",
        "hsl": "hsl(4, 38%, 65%)",
        "red": 200,
        "green": 137,
        "blue": 132,
        "hue": 4,
        "saturation": 38,
        "lightness": 65
    }, {
        "hex": "#6B312D",
        "rgb": "rgb(107, 49, 45)",
        "hsl": "hsl(4, 41%, 30%)",
        "red": 107,
        "green": 49,
        "blue": 45,
        "hue": 4,
        "saturation": 41,
        "lightness": 30
    }, {
        "hex": "#622824",
        "rgb": "rgb(98, 40, 36)",
        "hsl": "hsl(4, 46%, 26%)",
        "red": 98,
        "green": 40,
        "blue": 36,
        "hue": 4,
        "saturation": 46,
        "lightness": 26
    }, {
        "hex": "#D18681",
        "rgb": "rgb(209, 134, 129)",
        "hsl": "hsl(4, 47%, 66%)",
        "red": 209,
        "green": 134,
        "blue": 129,
        "hue": 4,
        "saturation": 47,
        "lightness": 66
    }, {
        "hex": "#AE2F27",
        "rgb": "rgb(174, 47, 39)",
        "hsl": "hsl(4, 63%, 42%)",
        "red": 174,
        "green": 47,
        "blue": 39,
        "hue": 4,
        "saturation": 63,
        "lightness": 42
    }, {
        "hex": "#EEAEAA",
        "rgb": "rgb(238, 174, 170)",
        "hsl": "hsl(4, 67%, 80%)",
        "red": 238,
        "green": 174,
        "blue": 170,
        "hue": 4,
        "saturation": 67,
        "lightness": 80
    }, {
        "hex": "#EFA09B",
        "rgb": "rgb(239, 160, 155)",
        "hsl": "hsl(4, 72%, 77%)",
        "red": 239,
        "green": 160,
        "blue": 155,
        "hue": 4,
        "saturation": 72,
        "lightness": 77
    }, {
        "hex": "#DE3C2F",
        "rgb": "rgb(222, 60, 47)",
        "hsl": "hsl(4, 73%, 53%)",
        "red": 222,
        "green": 60,
        "blue": 47,
        "hue": 4,
        "saturation": 73,
        "lightness": 53
    }, {
        "hex": "#C0261C",
        "rgb": "rgb(192, 38, 28)",
        "hsl": "hsl(4, 75%, 43%)",
        "red": 192,
        "green": 38,
        "blue": 28,
        "hue": 4,
        "saturation": 75,
        "lightness": 43
    }, {
        "hex": "#E85A50",
        "rgb": "rgb(232, 90, 80)",
        "hsl": "hsl(4, 77%, 61%)",
        "red": 232,
        "green": 90,
        "blue": 80,
        "hue": 4,
        "saturation": 77,
        "lightness": 61
    }, {
        "hex": "#E32F21",
        "rgb": "rgb(227, 47, 33)",
        "hsl": "hsl(4, 78%, 51%)",
        "red": 227,
        "green": 47,
        "blue": 33,
        "hue": 4,
        "saturation": 78,
        "lightness": 51
    }, {
        "hex": "#F35F55",
        "rgb": "rgb(243, 95, 85)",
        "hsl": "hsl(4, 87%, 64%)",
        "red": 243,
        "green": 95,
        "blue": 85,
        "hue": 4,
        "saturation": 87,
        "lightness": 64
    }, {
        "hex": "#F76157",
        "rgb": "rgb(247, 97, 87)",
        "hsl": "hsl(4, 91%, 65%)",
        "red": 247,
        "green": 97,
        "blue": 87,
        "hue": 4,
        "saturation": 91,
        "lightness": 65
    }, {
        "hex": "#FA7F77",
        "rgb": "rgb(250, 127, 119)",
        "hsl": "hsl(4, 93%, 72%)",
        "red": 250,
        "green": 127,
        "blue": 119,
        "hue": 4,
        "saturation": 93,
        "lightness": 72
    }, {
        "hex": "#FF847C",
        "rgb": "rgb(255, 132, 124)",
        "hsl": "hsl(4, 100%, 74%)",
        "red": 255,
        "green": 132,
        "blue": 124,
        "hue": 4,
        "saturation": 100,
        "lightness": 74
    }, {
        "hex": "#FFC5C1",
        "rgb": "rgb(255, 197, 193)",
        "hsl": "hsl(4, 100%, 88%)",
        "red": 255,
        "green": 197,
        "blue": 193,
        "hue": 4,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#3E3433",
        "rgb": "rgb(62, 52, 51)",
        "hsl": "hsl(5, 10%, 22%)",
        "red": 62,
        "green": 52,
        "blue": 51,
        "hue": 5,
        "saturation": 10,
        "lightness": 22
    }, {
        "hex": "#BF9692",
        "rgb": "rgb(191, 150, 146)",
        "hsl": "hsl(5, 26%, 66%)",
        "red": 191,
        "green": 150,
        "blue": 146,
        "hue": 5,
        "saturation": 26,
        "lightness": 66
    }, {
        "hex": "#DAAEAA",
        "rgb": "rgb(218, 174, 170)",
        "hsl": "hsl(5, 39%, 76%)",
        "red": 218,
        "green": 174,
        "blue": 170,
        "hue": 5,
        "saturation": 39,
        "lightness": 76
    }, {
        "hex": "#B6554C",
        "rgb": "rgb(182, 85, 76)",
        "hsl": "hsl(5, 42%, 51%)",
        "red": 182,
        "green": 85,
        "blue": 76,
        "hue": 5,
        "saturation": 42,
        "lightness": 51
    }, {
        "hex": "#CD5B51",
        "rgb": "rgb(205, 91, 81)",
        "hsl": "hsl(5, 55%, 56%)",
        "red": 205,
        "green": 91,
        "blue": 81,
        "hue": 5,
        "saturation": 55,
        "lightness": 56
    }, {
        "hex": "#D97F76",
        "rgb": "rgb(217, 127, 118)",
        "hsl": "hsl(5, 57%, 66%)",
        "red": 217,
        "green": 127,
        "blue": 118,
        "hue": 5,
        "saturation": 57,
        "lightness": 66
    }, {
        "hex": "#D43B2D",
        "rgb": "rgb(212, 59, 45)",
        "hsl": "hsl(5, 66%, 50%)",
        "red": 212,
        "green": 59,
        "blue": 45,
        "hue": 5,
        "saturation": 66,
        "lightness": 50
    }, {
        "hex": "#E47267",
        "rgb": "rgb(228, 114, 103)",
        "hsl": "hsl(5, 70%, 65%)",
        "red": 228,
        "green": 114,
        "blue": 103,
        "hue": 5,
        "saturation": 70,
        "lightness": 65
    }, {
        "hex": "#C02C20",
        "rgb": "rgb(192, 44, 32)",
        "hsl": "hsl(5, 71%, 44%)",
        "red": 192,
        "green": 44,
        "blue": 32,
        "hue": 5,
        "saturation": 71,
        "lightness": 44
    }, {
        "hex": "#DD4538",
        "rgb": "rgb(221, 69, 56)",
        "hsl": "hsl(5, 71%, 54%)",
        "red": 221,
        "green": 69,
        "blue": 56,
        "hue": 5,
        "saturation": 71,
        "lightness": 54
    }, {
        "hex": "#E15244",
        "rgb": "rgb(225, 82, 68)",
        "hsl": "hsl(5, 72%, 57%)",
        "red": 225,
        "green": 82,
        "blue": 68,
        "hue": 5,
        "saturation": 72,
        "lightness": 57
    }, {
        "hex": "#7E1C13",
        "rgb": "rgb(126, 28, 19)",
        "hsl": "hsl(5, 74%, 28%)",
        "red": 126,
        "green": 28,
        "blue": 19,
        "hue": 5,
        "saturation": 74,
        "lightness": 28
    }, {
        "hex": "#70160E",
        "rgb": "rgb(112, 22, 14)",
        "hsl": "hsl(5, 78%, 25%)",
        "red": 112,
        "green": 22,
        "blue": 14,
        "hue": 5,
        "saturation": 78,
        "lightness": 25
    }, {
        "hex": "#F06D61",
        "rgb": "rgb(240, 109, 97)",
        "hsl": "hsl(5, 83%, 66%)",
        "red": 240,
        "green": 109,
        "blue": 97,
        "hue": 5,
        "saturation": 83,
        "lightness": 66
    }, {
        "hex": "#F5938B",
        "rgb": "rgb(245, 147, 139)",
        "hsl": "hsl(5, 84%, 75%)",
        "red": 245,
        "green": 147,
        "blue": 139,
        "hue": 5,
        "saturation": 84,
        "lightness": 75
    }, {
        "hex": "#E72313",
        "rgb": "rgb(231, 35, 19)",
        "hsl": "hsl(5, 85%, 49%)",
        "red": 231,
        "green": 35,
        "blue": 19,
        "hue": 5,
        "saturation": 85,
        "lightness": 49
    }, {
        "hex": "#EF4335",
        "rgb": "rgb(239, 67, 53)",
        "hsl": "hsl(5, 85%, 57%)",
        "red": 239,
        "green": 67,
        "blue": 53,
        "hue": 5,
        "saturation": 85,
        "lightness": 57
    }, {
        "hex": "#F34739",
        "rgb": "rgb(243, 71, 57)",
        "hsl": "hsl(5, 89%, 59%)",
        "red": 243,
        "green": 71,
        "blue": 57,
        "hue": 5,
        "saturation": 89,
        "lightness": 59
    }, {
        "hex": "#F75E50",
        "rgb": "rgb(247, 94, 80)",
        "hsl": "hsl(5, 91%, 64%)",
        "red": 247,
        "green": 94,
        "blue": 80,
        "hue": 5,
        "saturation": 91,
        "lightness": 64
    }, {
        "hex": "#F86254",
        "rgb": "rgb(248, 98, 84)",
        "hsl": "hsl(5, 92%, 65%)",
        "red": 248,
        "green": 98,
        "blue": 84,
        "hue": 5,
        "saturation": 92,
        "lightness": 65
    }, {
        "hex": "#F96153",
        "rgb": "rgb(249, 97, 83)",
        "hsl": "hsl(5, 93%, 65%)",
        "red": 249,
        "green": 97,
        "blue": 83,
        "hue": 5,
        "saturation": 93,
        "lightness": 65
    }, {
        "hex": "#FC8A80",
        "rgb": "rgb(252, 138, 128)",
        "hsl": "hsl(5, 95%, 75%)",
        "red": 252,
        "green": 138,
        "blue": 128,
        "hue": 5,
        "saturation": 95,
        "lightness": 75
    }, {
        "hex": "#FF695C",
        "rgb": "rgb(255, 105, 92)",
        "hsl": "hsl(5, 100%, 68%)",
        "red": 255,
        "green": 105,
        "blue": 92,
        "hue": 5,
        "saturation": 100,
        "lightness": 68
    }, {
        "hex": "#FF695C",
        "rgb": "rgb(255, 105, 92)",
        "hsl": "hsl(5, 100%, 68%)",
        "red": 255,
        "green": 105,
        "blue": 92,
        "hue": 5,
        "saturation": 100,
        "lightness": 68
    }, {
        "hex": "#FF7C70",
        "rgb": "rgb(255, 124, 112)",
        "hsl": "hsl(5, 100%, 72%)",
        "red": 255,
        "green": 124,
        "blue": 112,
        "hue": 5,
        "saturation": 100,
        "lightness": 72
    }, {
        "hex": "#FF948B",
        "rgb": "rgb(255, 148, 139)",
        "hsl": "hsl(5, 100%, 77%)",
        "red": 255,
        "green": 148,
        "blue": 139,
        "hue": 5,
        "saturation": 100,
        "lightness": 77
    }, {
        "hex": "#E2D9D8",
        "rgb": "rgb(226, 217, 216)",
        "hsl": "hsl(6, 15%, 87%)",
        "red": 226,
        "green": 217,
        "blue": 216,
        "hue": 6,
        "saturation": 15,
        "lightness": 87
    }, {
        "hex": "#8A6662",
        "rgb": "rgb(138, 102, 98)",
        "hsl": "hsl(6, 17%, 46%)",
        "red": 138,
        "green": 102,
        "blue": 98,
        "hue": 6,
        "saturation": 17,
        "lightness": 46
    }, {
        "hex": "#E6DDDC",
        "rgb": "rgb(230, 221, 220)",
        "hsl": "hsl(6, 17%, 88%)",
        "red": 230,
        "green": 221,
        "blue": 220,
        "hue": 6,
        "saturation": 17,
        "lightness": 88
    }, {
        "hex": "#42302E",
        "rgb": "rgb(66, 48, 46)",
        "hsl": "hsl(6, 18%, 22%)",
        "red": 66,
        "green": 48,
        "blue": 46,
        "hue": 6,
        "saturation": 18,
        "lightness": 22
    }, {
        "hex": "#342220",
        "rgb": "rgb(52, 34, 32)",
        "hsl": "hsl(6, 24%, 16%)",
        "red": 52,
        "green": 34,
        "blue": 32,
        "hue": 6,
        "saturation": 24,
        "lightness": 16
    }, {
        "hex": "#B88C87",
        "rgb": "rgb(184, 140, 135)",
        "hsl": "hsl(6, 26%, 63%)",
        "red": 184,
        "green": 140,
        "blue": 135,
        "hue": 6,
        "saturation": 26,
        "lightness": 63
    }, {
        "hex": "#71443F",
        "rgb": "rgb(113, 68, 63)",
        "hsl": "hsl(6, 28%, 35%)",
        "red": 113,
        "green": 68,
        "blue": 63,
        "hue": 6,
        "saturation": 28,
        "lightness": 35
    }, {
        "hex": "#ECDAD8",
        "rgb": "rgb(236, 218, 216)",
        "hsl": "hsl(6, 34%, 89%)",
        "red": 236,
        "green": 218,
        "blue": 216,
        "hue": 6,
        "saturation": 34,
        "lightness": 89
    }, {
        "hex": "#A95A52",
        "rgb": "rgb(169, 90, 82)",
        "hsl": "hsl(6, 35%, 49%)",
        "red": 169,
        "green": 90,
        "blue": 82,
        "hue": 6,
        "saturation": 35,
        "lightness": 49
    }, {
        "hex": "#4A2723",
        "rgb": "rgb(74, 39, 35)",
        "hsl": "hsl(6, 36%, 21%)",
        "red": 74,
        "green": 39,
        "blue": 35,
        "hue": 6,
        "saturation": 36,
        "lightness": 21
    }, {
        "hex": "#D39088",
        "rgb": "rgb(211, 144, 136)",
        "hsl": "hsl(6, 46%, 68%)",
        "red": 211,
        "green": 144,
        "blue": 136,
        "hue": 6,
        "saturation": 46,
        "lightness": 68
    }, {
        "hex": "#E6B0AA",
        "rgb": "rgb(230, 176, 170)",
        "hsl": "hsl(6, 55%, 78%)",
        "red": 230,
        "green": 176,
        "blue": 170,
        "hue": 6,
        "saturation": 55,
        "lightness": 78
    }, {
        "hex": "#F5DBD8",
        "rgb": "rgb(245, 219, 216)",
        "hsl": "hsl(6, 59%, 90%)",
        "red": 245,
        "green": 219,
        "blue": 216,
        "hue": 6,
        "saturation": 59,
        "lightness": 90
    }, {
        "hex": "#D14334",
        "rgb": "rgb(209, 67, 52)",
        "hsl": "hsl(6, 63%, 51%)",
        "red": 209,
        "green": 67,
        "blue": 52,
        "hue": 6,
        "saturation": 63,
        "lightness": 51
    }, {
        "hex": "#D96153",
        "rgb": "rgb(217, 97, 83)",
        "hsl": "hsl(6, 64%, 59%)",
        "red": 217,
        "green": 97,
        "blue": 83,
        "hue": 6,
        "saturation": 64,
        "lightness": 59
    }, {
        "hex": "#EFB0A9",
        "rgb": "rgb(239, 176, 169)",
        "hsl": "hsl(6, 69%, 80%)",
        "red": 239,
        "green": 176,
        "blue": 169,
        "hue": 6,
        "saturation": 69,
        "lightness": 80
    }, {
        "hex": "#EFAAA3",
        "rgb": "rgb(239, 170, 163)",
        "hsl": "hsl(6, 70%, 79%)",
        "red": 239,
        "green": 170,
        "blue": 163,
        "hue": 6,
        "saturation": 70,
        "lightness": 79
    }, {
        "hex": "#8C2318",
        "rgb": "rgb(140, 35, 24)",
        "hsl": "hsl(6, 71%, 32%)",
        "red": 140,
        "green": 35,
        "blue": 24,
        "hue": 6,
        "saturation": 71,
        "lightness": 32
    }, {
        "hex": "#E35241",
        "rgb": "rgb(227, 82, 65)",
        "hsl": "hsl(6, 74%, 57%)",
        "red": 227,
        "green": 82,
        "blue": 65,
        "hue": 6,
        "saturation": 74,
        "lightness": 57
    }, {
        "hex": "#C42311",
        "rgb": "rgb(196, 35, 17)",
        "hsl": "hsl(6, 84%, 42%)",
        "red": 196,
        "green": 35,
        "blue": 17,
        "hue": 6,
        "saturation": 84,
        "lightness": 42
    }, {
        "hex": "#EA2A15",
        "rgb": "rgb(234, 42, 21)",
        "hsl": "hsl(6, 84%, 50%)",
        "red": 234,
        "green": 42,
        "blue": 21,
        "hue": 6,
        "saturation": 84,
        "lightness": 50
    }, {
        "hex": "#F45D4C",
        "rgb": "rgb(244, 93, 76)",
        "hsl": "hsl(6, 88%, 63%)",
        "red": 244,
        "green": 93,
        "blue": 76,
        "hue": 6,
        "saturation": 88,
        "lightness": 63
    }, {
        "hex": "#F78376",
        "rgb": "rgb(247, 131, 118)",
        "hsl": "hsl(6, 89%, 72%)",
        "red": 247,
        "green": 131,
        "blue": 118,
        "hue": 6,
        "saturation": 89,
        "lightness": 72
    }, {
        "hex": "#FC4630",
        "rgb": "rgb(252, 70, 48)",
        "hsl": "hsl(6, 97%, 59%)",
        "red": 252,
        "green": 70,
        "blue": 48,
        "hue": 6,
        "saturation": 97,
        "lightness": 59
    }, {
        "hex": "#FE9B91",
        "rgb": "rgb(254, 155, 145)",
        "hsl": "hsl(6, 98%, 78%)",
        "red": 254,
        "green": 155,
        "blue": 145,
        "hue": 6,
        "saturation": 98,
        "lightness": 78
    }, {
        "hex": "#6F0B00",
        "rgb": "rgb(111, 11, 0)",
        "hsl": "hsl(6, 100%, 22%)",
        "red": 111,
        "green": 11,
        "blue": 0,
        "hue": 6,
        "saturation": 100,
        "lightness": 22
    }, {
        "hex": "#CF1500",
        "rgb": "rgb(207, 21, 0)",
        "hsl": "hsl(6, 100%, 41%)",
        "red": 207,
        "green": 21,
        "blue": 0,
        "hue": 6,
        "saturation": 100,
        "lightness": 41
    }, {
        "hex": "#FF6A5A",
        "rgb": "rgb(255, 106, 90)",
        "hsl": "hsl(6, 100%, 68%)",
        "red": 255,
        "green": 106,
        "blue": 90,
        "hue": 6,
        "saturation": 100,
        "lightness": 68
    }, {
        "hex": "#FF705F",
        "rgb": "rgb(255, 112, 95)",
        "hsl": "hsl(6, 100%, 69%)",
        "red": 255,
        "green": 112,
        "blue": 95,
        "hue": 6,
        "saturation": 100,
        "lightness": 69
    }, {
        "hex": "#FF9B8F",
        "rgb": "rgb(255, 155, 143)",
        "hsl": "hsl(6, 100%, 78%)",
        "red": 255,
        "green": 155,
        "blue": 143,
        "hue": 6,
        "saturation": 100,
        "lightness": 78
    }, {
        "hex": "#FFC2BB",
        "rgb": "rgb(255, 194, 187)",
        "hsl": "hsl(6, 100%, 87%)",
        "red": 255,
        "green": 194,
        "blue": 187,
        "hue": 6,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#FFDCD8",
        "rgb": "rgb(255, 220, 216)",
        "hsl": "hsl(6, 100%, 92%)",
        "red": 255,
        "green": 220,
        "blue": 216,
        "hue": 6,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#FFDBD7",
        "rgb": "rgb(255, 219, 215)",
        "hsl": "hsl(6, 100%, 92%)",
        "red": 255,
        "green": 219,
        "blue": 215,
        "hue": 6,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#56413E",
        "rgb": "rgb(86, 65, 62)",
        "hsl": "hsl(7, 16%, 29%)",
        "red": 86,
        "green": 65,
        "blue": 62,
        "hue": 7,
        "saturation": 16,
        "lightness": 29
    }, {
        "hex": "#9A736E",
        "rgb": "rgb(154, 115, 110)",
        "hsl": "hsl(7, 18%, 52%)",
        "red": 154,
        "green": 115,
        "blue": 110,
        "hue": 7,
        "saturation": 18,
        "lightness": 52
    }, {
        "hex": "#7E514B",
        "rgb": "rgb(126, 81, 75)",
        "hsl": "hsl(7, 25%, 39%)",
        "red": 126,
        "green": 81,
        "blue": 75,
        "hue": 7,
        "saturation": 25,
        "lightness": 39
    }, {
        "hex": "#7A4E48",
        "rgb": "rgb(122, 78, 72)",
        "hsl": "hsl(7, 26%, 38%)",
        "red": 122,
        "green": 78,
        "blue": 72,
        "hue": 7,
        "saturation": 26,
        "lightness": 38
    }, {
        "hex": "#A65D53",
        "rgb": "rgb(166, 93, 83)",
        "hsl": "hsl(7, 33%, 49%)",
        "red": 166,
        "green": 93,
        "blue": 83,
        "hue": 7,
        "saturation": 33,
        "lightness": 49
    }, {
        "hex": "#4F2621",
        "rgb": "rgb(79, 38, 33)",
        "hsl": "hsl(7, 41%, 22%)",
        "red": 79,
        "green": 38,
        "blue": 33,
        "hue": 7,
        "saturation": 41,
        "lightness": 22
    }, {
        "hex": "#CE938B",
        "rgb": "rgb(206, 147, 139)",
        "hsl": "hsl(7, 41%, 68%)",
        "red": 206,
        "green": 147,
        "blue": 139,
        "hue": 7,
        "saturation": 41,
        "lightness": 68
    }, {
        "hex": "#E3B8B2",
        "rgb": "rgb(227, 184, 178)",
        "hsl": "hsl(7, 47%, 79%)",
        "red": 227,
        "green": 184,
        "blue": 178,
        "hue": 7,
        "saturation": 47,
        "lightness": 79
    }, {
        "hex": "#C4594B",
        "rgb": "rgb(196, 89, 75)",
        "hsl": "hsl(7, 51%, 53%)",
        "red": 196,
        "green": 89,
        "blue": 75,
        "hue": 7,
        "saturation": 51,
        "lightness": 53
    }, {
        "hex": "#CE6B5D",
        "rgb": "rgb(206, 107, 93)",
        "hsl": "hsl(7, 54%, 59%)",
        "red": 206,
        "green": 107,
        "blue": 93,
        "hue": 7,
        "saturation": 54,
        "lightness": 59
    }, {
        "hex": "#E48679",
        "rgb": "rgb(228, 134, 121)",
        "hsl": "hsl(7, 66%, 68%)",
        "red": 228,
        "green": 134,
        "blue": 121,
        "hue": 7,
        "saturation": 66,
        "lightness": 68
    }, {
        "hex": "#E6867A",
        "rgb": "rgb(230, 134, 122)",
        "hsl": "hsl(7, 68%, 69%)",
        "red": 230,
        "green": 134,
        "blue": 122,
        "hue": 7,
        "saturation": 68,
        "lightness": 69
    }, {
        "hex": "#EE9C92",
        "rgb": "rgb(238, 156, 146)",
        "hsl": "hsl(7, 73%, 75%)",
        "red": 238,
        "green": 156,
        "blue": 146,
        "hue": 7,
        "saturation": 73,
        "lightness": 75
    }, {
        "hex": "#EE887A",
        "rgb": "rgb(238, 136, 122)",
        "hsl": "hsl(7, 77%, 71%)",
        "red": 238,
        "green": 136,
        "blue": 122,
        "hue": 7,
        "saturation": 77,
        "lightness": 71
    }, {
        "hex": "#F2A297",
        "rgb": "rgb(242, 162, 151)",
        "hsl": "hsl(7, 78%, 77%)",
        "red": 242,
        "green": 162,
        "blue": 151,
        "hue": 7,
        "saturation": 78,
        "lightness": 77
    }, {
        "hex": "#EB624F",
        "rgb": "rgb(235, 98, 79)",
        "hsl": "hsl(7, 80%, 62%)",
        "red": 235,
        "green": 98,
        "blue": 79,
        "hue": 7,
        "saturation": 80,
        "lightness": 62
    }, {
        "hex": "#7D1A0C",
        "rgb": "rgb(125, 26, 12)",
        "hsl": "hsl(7, 82%, 27%)",
        "red": 125,
        "green": 26,
        "blue": 12,
        "hue": 7,
        "saturation": 82,
        "lightness": 27
    }, {
        "hex": "#F07868",
        "rgb": "rgb(240, 120, 104)",
        "hsl": "hsl(7, 82%, 67%)",
        "red": 240,
        "green": 120,
        "blue": 104,
        "hue": 7,
        "saturation": 82,
        "lightness": 67
    }, {
        "hex": "#F18273",
        "rgb": "rgb(241, 130, 115)",
        "hsl": "hsl(7, 82%, 70%)",
        "red": 241,
        "green": 130,
        "blue": 115,
        "hue": 7,
        "saturation": 82,
        "lightness": 70
    }, {
        "hex": "#F59D92",
        "rgb": "rgb(245, 157, 146)",
        "hsl": "hsl(7, 83%, 77%)",
        "red": 245,
        "green": 157,
        "blue": 146,
        "hue": 7,
        "saturation": 83,
        "lightness": 77
    }, {
        "hex": "#F7A398",
        "rgb": "rgb(247, 163, 152)",
        "hsl": "hsl(7, 86%, 78%)",
        "red": 247,
        "green": 163,
        "blue": 152,
        "hue": 7,
        "saturation": 86,
        "lightness": 78
    }, {
        "hex": "#F67968",
        "rgb": "rgb(246, 121, 104)",
        "hsl": "hsl(7, 89%, 69%)",
        "red": 246,
        "green": 121,
        "blue": 104,
        "hue": 7,
        "saturation": 89,
        "lightness": 69
    }, {
        "hex": "#F67968",
        "rgb": "rgb(246, 121, 104)",
        "hsl": "hsl(7, 89%, 69%)",
        "red": 246,
        "green": 121,
        "blue": 104,
        "hue": 7,
        "saturation": 89,
        "lightness": 69
    }, {
        "hex": "#F85741",
        "rgb": "rgb(248, 87, 65)",
        "hsl": "hsl(7, 93%, 61%)",
        "red": 248,
        "green": 87,
        "blue": 65,
        "hue": 7,
        "saturation": 93,
        "lightness": 61
    }, {
        "hex": "#F95842",
        "rgb": "rgb(249, 88, 66)",
        "hsl": "hsl(7, 94%, 62%)",
        "red": 249,
        "green": 88,
        "blue": 66,
        "hue": 7,
        "saturation": 94,
        "lightness": 62
    }, {
        "hex": "#FCA89D",
        "rgb": "rgb(252, 168, 157)",
        "hsl": "hsl(7, 94%, 80%)",
        "red": 252,
        "green": 168,
        "blue": 157,
        "hue": 7,
        "saturation": 94,
        "lightness": 80
    }, {
        "hex": "#FB7968",
        "rgb": "rgb(251, 121, 104)",
        "hsl": "hsl(7, 95%, 70%)",
        "red": 251,
        "green": 121,
        "blue": 104,
        "hue": 7,
        "saturation": 95,
        "lightness": 70
    }, {
        "hex": "#FA3419",
        "rgb": "rgb(250, 52, 25)",
        "hsl": "hsl(7, 96%, 54%)",
        "red": 250,
        "green": 52,
        "blue": 25,
        "hue": 7,
        "saturation": 96,
        "lightness": 54
    }, {
        "hex": "#FC7765",
        "rgb": "rgb(252, 119, 101)",
        "hsl": "hsl(7, 96%, 69%)",
        "red": 252,
        "green": 119,
        "blue": 101,
        "hue": 7,
        "saturation": 96,
        "lightness": 69
    }, {
        "hex": "#D31900",
        "rgb": "rgb(211, 25, 0)",
        "hsl": "hsl(7, 100%, 41%)",
        "red": 211,
        "green": 25,
        "blue": 0,
        "hue": 7,
        "saturation": 100,
        "lightness": 41
    }, {
        "hex": "#514442",
        "rgb": "rgb(81, 68, 66)",
        "hsl": "hsl(8, 10%, 29%)",
        "red": 81,
        "green": 68,
        "blue": 66,
        "hue": 8,
        "saturation": 10,
        "lightness": 29
    }, {
        "hex": "#9D7E79",
        "rgb": "rgb(157, 126, 121)",
        "hsl": "hsl(8, 16%, 55%)",
        "red": 157,
        "green": 126,
        "blue": 121,
        "hue": 8,
        "saturation": 16,
        "lightness": 55
    }, {
        "hex": "#BD928B",
        "rgb": "rgb(189, 146, 139)",
        "hsl": "hsl(8, 27%, 64%)",
        "red": 189,
        "green": 146,
        "blue": 139,
        "hue": 8,
        "saturation": 27,
        "lightness": 64
    }, {
        "hex": "#4E2D28",
        "rgb": "rgb(78, 45, 40)",
        "hsl": "hsl(8, 32%, 23%)",
        "red": 78,
        "green": 45,
        "blue": 40,
        "hue": 8,
        "saturation": 32,
        "lightness": 23
    }, {
        "hex": "#CC8C82",
        "rgb": "rgb(204, 140, 130)",
        "hsl": "hsl(8, 42%, 65%)",
        "red": 204,
        "green": 140,
        "blue": 130,
        "hue": 8,
        "saturation": 42,
        "lightness": 65
    }, {
        "hex": "#75372D",
        "rgb": "rgb(117, 55, 45)",
        "hsl": "hsl(8, 44%, 32%)",
        "red": 117,
        "green": 55,
        "blue": 45,
        "hue": 8,
        "saturation": 44,
        "lightness": 32
    }, {
        "hex": "#913F33",
        "rgb": "rgb(145, 63, 51)",
        "hsl": "hsl(8, 48%, 38%)",
        "red": 145,
        "green": 63,
        "blue": 51,
        "hue": 8,
        "saturation": 48,
        "lightness": 38
    }, {
        "hex": "#C25848",
        "rgb": "rgb(194, 88, 72)",
        "hsl": "hsl(8, 50%, 52%)",
        "red": 194,
        "green": 88,
        "blue": 72,
        "hue": 8,
        "saturation": 50,
        "lightness": 52
    }, {
        "hex": "#DFA49B",
        "rgb": "rgb(223, 164, 155)",
        "hsl": "hsl(8, 52%, 74%)",
        "red": 223,
        "green": 164,
        "blue": 155,
        "hue": 8,
        "saturation": 52,
        "lightness": 74
    }, {
        "hex": "#CC5D4C",
        "rgb": "rgb(204, 93, 76)",
        "hsl": "hsl(8, 56%, 55%)",
        "red": 204,
        "green": 93,
        "blue": 76,
        "hue": 8,
        "saturation": 56,
        "lightness": 55
    }, {
        "hex": "#C2412D",
        "rgb": "rgb(194, 65, 45)",
        "hsl": "hsl(8, 62%, 47%)",
        "red": 194,
        "green": 65,
        "blue": 45,
        "hue": 8,
        "saturation": 62,
        "lightness": 47
    }, {
        "hex": "#E07767",
        "rgb": "rgb(224, 119, 103)",
        "hsl": "hsl(8, 66%, 64%)",
        "red": 224,
        "green": 119,
        "blue": 103,
        "hue": 8,
        "saturation": 66,
        "lightness": 64
    }, {
        "hex": "#D8523D",
        "rgb": "rgb(216, 82, 61)",
        "hsl": "hsl(8, 67%, 54%)",
        "red": 216,
        "green": 82,
        "blue": 61,
        "hue": 8,
        "saturation": 67,
        "lightness": 54
    }, {
        "hex": "#DB5643",
        "rgb": "rgb(219, 86, 67)",
        "hsl": "hsl(8, 68%, 56%)",
        "red": 219,
        "green": 86,
        "blue": 67,
        "hue": 8,
        "saturation": 68,
        "lightness": 56
    }, {
        "hex": "#BA3622",
        "rgb": "rgb(186, 54, 34)",
        "hsl": "hsl(8, 69%, 43%)",
        "red": 186,
        "green": 54,
        "blue": 34,
        "hue": 8,
        "saturation": 69,
        "lightness": 43
    }, {
        "hex": "#DE4F3A",
        "rgb": "rgb(222, 79, 58)",
        "hsl": "hsl(8, 71%, 55%)",
        "red": 222,
        "green": 79,
        "blue": 58,
        "hue": 8,
        "saturation": 71,
        "lightness": 55
    }, {
        "hex": "#E3604D",
        "rgb": "rgb(227, 96, 77)",
        "hsl": "hsl(8, 73%, 60%)",
        "red": 227,
        "green": 96,
        "blue": 77,
        "hue": 8,
        "saturation": 73,
        "lightness": 60
    }, {
        "hex": "#EA8676",
        "rgb": "rgb(234, 134, 118)",
        "hsl": "hsl(8, 73%, 69%)",
        "red": 234,
        "green": 134,
        "blue": 118,
        "hue": 8,
        "saturation": 73,
        "lightness": 69
    }, {
        "hex": "#D83018",
        "rgb": "rgb(216, 48, 24)",
        "hsl": "hsl(8, 80%, 47%)",
        "red": 216,
        "green": 48,
        "blue": 24,
        "hue": 8,
        "saturation": 80,
        "lightness": 47
    }, {
        "hex": "#280904",
        "rgb": "rgb(40, 9, 4)",
        "hsl": "hsl(8, 82%, 9%)",
        "red": 40,
        "green": 9,
        "blue": 4,
        "hue": 8,
        "saturation": 82,
        "lightness": 9
    }, {
        "hex": "#F07360",
        "rgb": "rgb(240, 115, 96)",
        "hsl": "hsl(8, 83%, 66%)",
        "red": 240,
        "green": 115,
        "blue": 96,
        "hue": 8,
        "saturation": 83,
        "lightness": 66
    }, {
        "hex": "#330A04",
        "rgb": "rgb(51, 10, 4)",
        "hsl": "hsl(8, 85%, 11%)",
        "red": 51,
        "green": 10,
        "blue": 4,
        "hue": 8,
        "saturation": 85,
        "lightness": 11
    }, {
        "hex": "#F68B7B",
        "rgb": "rgb(246, 139, 123)",
        "hsl": "hsl(8, 87%, 72%)",
        "red": 246,
        "green": 139,
        "blue": 123,
        "hue": 8,
        "saturation": 87,
        "lightness": 72
    }, {
        "hex": "#F0371A",
        "rgb": "rgb(240, 55, 26)",
        "hsl": "hsl(8, 88%, 52%)",
        "red": 240,
        "green": 55,
        "blue": 26,
        "hue": 8,
        "saturation": 88,
        "lightness": 52
    }, {
        "hex": "#F79585",
        "rgb": "rgb(247, 149, 133)",
        "hsl": "hsl(8, 88%, 75%)",
        "red": 247,
        "green": 149,
        "blue": 133,
        "hue": 8,
        "saturation": 88,
        "lightness": 75
    }, {
        "hex": "#6C1305",
        "rgb": "rgb(108, 19, 5)",
        "hsl": "hsl(8, 91%, 22%)",
        "red": 108,
        "green": 19,
        "blue": 5,
        "hue": 8,
        "saturation": 91,
        "lightness": 22
    }, {
        "hex": "#FCA699",
        "rgb": "rgb(252, 166, 153)",
        "hsl": "hsl(8, 94%, 79%)",
        "red": 252,
        "green": 166,
        "blue": 153,
        "hue": 8,
        "saturation": 94,
        "lightness": 79
    }, {
        "hex": "#C21A01",
        "rgb": "rgb(194, 26, 1)",
        "hsl": "hsl(8, 99%, 38%)",
        "red": 194,
        "green": 26,
        "blue": 1,
        "hue": 8,
        "saturation": 99,
        "lightness": 38
    }, {
        "hex": "#FF745F",
        "rgb": "rgb(255, 116, 95)",
        "hsl": "hsl(8, 100%, 69%)",
        "red": 255,
        "green": 116,
        "blue": 95,
        "hue": 8,
        "saturation": 100,
        "lightness": 69
    }, {
        "hex": "#FF8D7B",
        "rgb": "rgb(255, 141, 123)",
        "hsl": "hsl(8, 100%, 74%)",
        "red": 255,
        "green": 141,
        "blue": 123,
        "hue": 8,
        "saturation": 100,
        "lightness": 74
    }, {
        "hex": "#FFCDC5",
        "rgb": "rgb(255, 205, 197)",
        "hsl": "hsl(8, 100%, 89%)",
        "red": 255,
        "green": 205,
        "blue": 197,
        "hue": 8,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#FFD2CB",
        "rgb": "rgb(255, 210, 203)",
        "hsl": "hsl(8, 100%, 90%)",
        "red": 255,
        "green": 210,
        "blue": 203,
        "hue": 8,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#C6AEAA",
        "rgb": "rgb(198, 174, 170)",
        "hsl": "hsl(9, 20%, 72%)",
        "red": 198,
        "green": 174,
        "blue": 170,
        "hue": 9,
        "saturation": 20,
        "lightness": 72
    }, {
        "hex": "#A73E2B",
        "rgb": "rgb(167, 62, 43)",
        "hsl": "hsl(9, 59%, 41%)",
        "red": 167,
        "green": 62,
        "blue": 43,
        "hue": 9,
        "saturation": 59,
        "lightness": 41
    }, {
        "hex": "#E6AA9F",
        "rgb": "rgb(230, 170, 159)",
        "hsl": "hsl(9, 59%, 76%)",
        "red": 230,
        "green": 170,
        "blue": 159,
        "hue": 9,
        "saturation": 59,
        "lightness": 76
    }, {
        "hex": "#E49183",
        "rgb": "rgb(228, 145, 131)",
        "hsl": "hsl(9, 64%, 70%)",
        "red": 228,
        "green": 145,
        "blue": 131,
        "hue": 9,
        "saturation": 64,
        "lightness": 70
    }, {
        "hex": "#D95B45",
        "rgb": "rgb(217, 91, 69)",
        "hsl": "hsl(9, 66%, 56%)",
        "red": 217,
        "green": 91,
        "blue": 69,
        "hue": 9,
        "saturation": 66,
        "lightness": 56
    }, {
        "hex": "#A7321C",
        "rgb": "rgb(167, 50, 28)",
        "hsl": "hsl(9, 71%, 38%)",
        "red": 167,
        "green": 50,
        "blue": 28,
        "hue": 9,
        "saturation": 71,
        "lightness": 38
    }, {
        "hex": "#DE4126",
        "rgb": "rgb(222, 65, 38)",
        "hsl": "hsl(9, 74%, 51%)",
        "red": 222,
        "green": 65,
        "blue": 38,
        "hue": 9,
        "saturation": 74,
        "lightness": 51
    }, {
        "hex": "#CF391D",
        "rgb": "rgb(207, 57, 29)",
        "hsl": "hsl(9, 75%, 46%)",
        "red": 207,
        "green": 57,
        "blue": 29,
        "hue": 9,
        "saturation": 75,
        "lightness": 46
    }, {
        "hex": "#EF8E7D",
        "rgb": "rgb(239, 142, 125)",
        "hsl": "hsl(9, 78%, 71%)",
        "red": 239,
        "green": 142,
        "blue": 125,
        "hue": 9,
        "saturation": 78,
        "lightness": 71
    }, {
        "hex": "#F5B9AE",
        "rgb": "rgb(245, 185, 174)",
        "hsl": "hsl(9, 78%, 82%)",
        "red": 245,
        "green": 185,
        "blue": 174,
        "hue": 9,
        "saturation": 78,
        "lightness": 82
    }, {
        "hex": "#F9A799",
        "rgb": "rgb(249, 167, 153)",
        "hsl": "hsl(9, 89%, 79%)",
        "red": 249,
        "green": 167,
        "blue": 153,
        "hue": 9,
        "saturation": 89,
        "lightness": 79
    }, {
        "hex": "#F5634A",
        "rgb": "rgb(245, 99, 74)",
        "hsl": "hsl(9, 90%, 63%)",
        "red": 245,
        "green": 99,
        "blue": 74,
        "hue": 9,
        "saturation": 90,
        "lightness": 63
    }, {
        "hex": "#F54828",
        "rgb": "rgb(245, 72, 40)",
        "hsl": "hsl(9, 91%, 56%)",
        "red": 245,
        "green": 72,
        "blue": 40,
        "hue": 9,
        "saturation": 91,
        "lightness": 56
    }, {
        "hex": "#FAA191",
        "rgb": "rgb(250, 161, 145)",
        "hsl": "hsl(9, 91%, 77%)",
        "red": 250,
        "green": 161,
        "blue": 145,
        "hue": 9,
        "saturation": 91,
        "lightness": 77
    }, {
        "hex": "#FB573B",
        "rgb": "rgb(251, 87, 59)",
        "hsl": "hsl(9, 96%, 61%)",
        "red": 251,
        "green": 87,
        "blue": 59,
        "hue": 9,
        "saturation": 96,
        "lightness": 61
    }, {
        "hex": "#FC8C77",
        "rgb": "rgb(252, 140, 119)",
        "hsl": "hsl(9, 96%, 73%)",
        "red": 252,
        "green": 140,
        "blue": 119,
        "hue": 9,
        "saturation": 96,
        "lightness": 73
    }, {
        "hex": "#FC4B2A",
        "rgb": "rgb(252, 75, 42)",
        "hsl": "hsl(9, 97%, 58%)",
        "red": 252,
        "green": 75,
        "blue": 42,
        "hue": 9,
        "saturation": 97,
        "lightness": 58
    }, {
        "hex": "#FE9E8E",
        "rgb": "rgb(254, 158, 142)",
        "hsl": "hsl(9, 98%, 78%)",
        "red": 254,
        "green": 158,
        "blue": 142,
        "hue": 9,
        "saturation": 98,
        "lightness": 78
    }, {
        "hex": "#FF6D54",
        "rgb": "rgb(255, 109, 84)",
        "hsl": "hsl(9, 100%, 66%)",
        "red": 255,
        "green": 109,
        "blue": 84,
        "hue": 9,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#AF9C98",
        "rgb": "rgb(175, 156, 152)",
        "hsl": "hsl(10, 13%, 64%)",
        "red": 175,
        "green": 156,
        "blue": 152,
        "hue": 10,
        "saturation": 13,
        "lightness": 64
    }, {
        "hex": "#A48B86",
        "rgb": "rgb(164, 139, 134)",
        "hsl": "hsl(10, 14%, 58%)",
        "red": 164,
        "green": 139,
        "blue": 134,
        "hue": 10,
        "saturation": 14,
        "lightness": 58
    }, {
        "hex": "#473430",
        "rgb": "rgb(71, 52, 48)",
        "hsl": "hsl(10, 19%, 23%)",
        "red": 71,
        "green": 52,
        "blue": 48,
        "hue": 10,
        "saturation": 19,
        "lightness": 23
    }, {
        "hex": "#C3AAA5",
        "rgb": "rgb(195, 170, 165)",
        "hsl": "hsl(10, 20%, 71%)",
        "red": 195,
        "green": 170,
        "blue": 165,
        "hue": 10,
        "saturation": 20,
        "lightness": 71
    }, {
        "hex": "#281916",
        "rgb": "rgb(40, 25, 22)",
        "hsl": "hsl(10, 29%, 12%)",
        "red": 40,
        "green": 25,
        "blue": 22,
        "hue": 10,
        "saturation": 29,
        "lightness": 12
    }, {
        "hex": "#57342D",
        "rgb": "rgb(87, 52, 45)",
        "hsl": "hsl(10, 32%, 26%)",
        "red": 87,
        "green": 52,
        "blue": 45,
        "hue": 10,
        "saturation": 32,
        "lightness": 26
    }, {
        "hex": "#AE5543",
        "rgb": "rgb(174, 85, 67)",
        "hsl": "hsl(10, 44%, 47%)",
        "red": 174,
        "green": 85,
        "blue": 67,
        "hue": 10,
        "saturation": 44,
        "lightness": 47
    }, {
        "hex": "#EDC5BD",
        "rgb": "rgb(237, 197, 189)",
        "hsl": "hsl(10, 57%, 84%)",
        "red": 237,
        "green": 197,
        "blue": 189,
        "hue": 10,
        "saturation": 57,
        "lightness": 84
    }, {
        "hex": "#541F14",
        "rgb": "rgb(84, 31, 20)",
        "hsl": "hsl(10, 62%, 20%)",
        "red": 84,
        "green": 31,
        "blue": 20,
        "hue": 10,
        "saturation": 62,
        "lightness": 20
    }, {
        "hex": "#D95B43",
        "rgb": "rgb(217, 91, 67)",
        "hsl": "hsl(10, 66%, 56%)",
        "red": 217,
        "green": 91,
        "blue": 67,
        "hue": 10,
        "saturation": 66,
        "lightness": 56
    }, {
        "hex": "#D74F33",
        "rgb": "rgb(215, 79, 51)",
        "hsl": "hsl(10, 67%, 52%)",
        "red": 215,
        "green": 79,
        "blue": 51,
        "hue": 10,
        "saturation": 67,
        "lightness": 52
    }, {
        "hex": "#EB9D8D",
        "rgb": "rgb(235, 157, 141)",
        "hsl": "hsl(10, 70%, 74%)",
        "red": 235,
        "green": 157,
        "blue": 141,
        "hue": 10,
        "saturation": 70,
        "lightness": 74
    }, {
        "hex": "#F5C8BF",
        "rgb": "rgb(245, 200, 191)",
        "hsl": "hsl(10, 73%, 85%)",
        "red": 245,
        "green": 200,
        "blue": 191,
        "hue": 10,
        "saturation": 73,
        "lightness": 85
    }, {
        "hex": "#EC7963",
        "rgb": "rgb(236, 121, 99)",
        "hsl": "hsl(10, 78%, 66%)",
        "red": 236,
        "green": 121,
        "blue": 99,
        "hue": 10,
        "saturation": 78,
        "lightness": 66
    }, {
        "hex": "#E84B2C",
        "rgb": "rgb(232, 75, 44)",
        "hsl": "hsl(10, 80%, 54%)",
        "red": 232,
        "green": 75,
        "blue": 44,
        "hue": 10,
        "saturation": 80,
        "lightness": 54
    }, {
        "hex": "#E84624",
        "rgb": "rgb(232, 70, 36)",
        "hsl": "hsl(10, 81%, 53%)",
        "red": 232,
        "green": 70,
        "blue": 36,
        "hue": 10,
        "saturation": 81,
        "lightness": 53
    }, {
        "hex": "#EC6349",
        "rgb": "rgb(236, 99, 73)",
        "hsl": "hsl(10, 81%, 61%)",
        "red": 236,
        "green": 99,
        "blue": 73,
        "hue": 10,
        "saturation": 81,
        "lightness": 61
    }, {
        "hex": "#F06B50",
        "rgb": "rgb(240, 107, 80)",
        "hsl": "hsl(10, 84%, 63%)",
        "red": 240,
        "green": 107,
        "blue": 80,
        "hue": 10,
        "saturation": 84,
        "lightness": 63
    }, {
        "hex": "#F03813",
        "rgb": "rgb(240, 56, 19)",
        "hsl": "hsl(10, 88%, 51%)",
        "red": 240,
        "green": 56,
        "blue": 19,
        "hue": 10,
        "saturation": 88,
        "lightness": 51
    }, {
        "hex": "#F57E67",
        "rgb": "rgb(245, 126, 103)",
        "hsl": "hsl(10, 88%, 68%)",
        "red": 245,
        "green": 126,
        "blue": 103,
        "hue": 10,
        "saturation": 88,
        "lightness": 68
    }, {
        "hex": "#F88F79",
        "rgb": "rgb(248, 143, 121)",
        "hsl": "hsl(10, 90%, 72%)",
        "red": 248,
        "green": 143,
        "blue": 121,
        "hue": 10,
        "saturation": 90,
        "lightness": 72
    }, {
        "hex": "#AC2005",
        "rgb": "rgb(172, 32, 5)",
        "hsl": "hsl(10, 94%, 35%)",
        "red": 172,
        "green": 32,
        "blue": 5,
        "hue": 10,
        "saturation": 94,
        "lightness": 35
    }, {
        "hex": "#AD2003",
        "rgb": "rgb(173, 32, 3)",
        "hsl": "hsl(10, 97%, 35%)",
        "red": 173,
        "green": 32,
        "blue": 3,
        "hue": 10,
        "saturation": 97,
        "lightness": 35
    }, {
        "hex": "#FC694D",
        "rgb": "rgb(252, 105, 77)",
        "hsl": "hsl(10, 97%, 65%)",
        "red": 252,
        "green": 105,
        "blue": 77,
        "hue": 10,
        "saturation": 97,
        "lightness": 65
    }, {
        "hex": "#FA2A00",
        "rgb": "rgb(250, 42, 0)",
        "hsl": "hsl(10, 100%, 49%)",
        "red": 250,
        "green": 42,
        "blue": 0,
        "hue": 10,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FF360E",
        "rgb": "rgb(255, 54, 14)",
        "hsl": "hsl(10, 100%, 53%)",
        "red": 255,
        "green": 54,
        "blue": 14,
        "hue": 10,
        "saturation": 100,
        "lightness": 53
    }, {
        "hex": "#FF370F",
        "rgb": "rgb(255, 55, 15)",
        "hsl": "hsl(10, 100%, 53%)",
        "red": 255,
        "green": 55,
        "blue": 15,
        "hue": 10,
        "saturation": 100,
        "lightness": 53
    }, {
        "hex": "#FFA492",
        "rgb": "rgb(255, 164, 146)",
        "hsl": "hsl(10, 100%, 79%)",
        "red": 255,
        "green": 164,
        "blue": 146,
        "hue": 10,
        "saturation": 100,
        "lightness": 79
    }, {
        "hex": "#7E6762",
        "rgb": "rgb(126, 103, 98)",
        "hsl": "hsl(11, 13%, 44%)",
        "red": 126,
        "green": 103,
        "blue": 98,
        "hue": 11,
        "saturation": 13,
        "lightness": 44
    }, {
        "hex": "#2C2321",
        "rgb": "rgb(44, 35, 33)",
        "hsl": "hsl(11, 14%, 15%)",
        "red": 44,
        "green": 35,
        "blue": 33,
        "hue": 11,
        "saturation": 14,
        "lightness": 15
    }, {
        "hex": "#423431",
        "rgb": "rgb(66, 52, 49)",
        "hsl": "hsl(11, 15%, 23%)",
        "red": 66,
        "green": 52,
        "blue": 49,
        "hue": 11,
        "saturation": 15,
        "lightness": 23
    }, {
        "hex": "#241714",
        "rgb": "rgb(36, 23, 20)",
        "hsl": "hsl(11, 29%, 11%)",
        "red": 36,
        "green": 23,
        "blue": 20,
        "hue": 11,
        "saturation": 29,
        "lightness": 11
    }, {
        "hex": "#301E1A",
        "rgb": "rgb(48, 30, 26)",
        "hsl": "hsl(11, 30%, 15%)",
        "red": 48,
        "green": 30,
        "blue": 26,
        "hue": 11,
        "saturation": 30,
        "lightness": 15
    }, {
        "hex": "#D28574",
        "rgb": "rgb(210, 133, 116)",
        "hsl": "hsl(11, 51%, 64%)",
        "red": 210,
        "green": 133,
        "blue": 116,
        "hue": 11,
        "saturation": 51,
        "lightness": 64
    }, {
        "hex": "#DC5B3E",
        "rgb": "rgb(220, 91, 62)",
        "hsl": "hsl(11, 69%, 55%)",
        "red": 220,
        "green": 91,
        "blue": 62,
        "hue": 11,
        "saturation": 69,
        "lightness": 55
    }, {
        "hex": "#EDAD9E",
        "rgb": "rgb(237, 173, 158)",
        "hsl": "hsl(11, 69%, 77%)",
        "red": 237,
        "green": 173,
        "blue": 158,
        "hue": 11,
        "saturation": 69,
        "lightness": 77
    }, {
        "hex": "#E45635",
        "rgb": "rgb(228, 86, 53)",
        "hsl": "hsl(11, 76%, 55%)",
        "red": 228,
        "green": 86,
        "blue": 53,
        "hue": 11,
        "saturation": 76,
        "lightness": 55
    }, {
        "hex": "#F09580",
        "rgb": "rgb(240, 149, 128)",
        "hsl": "hsl(11, 79%, 72%)",
        "red": 240,
        "green": 149,
        "blue": 128,
        "hue": 11,
        "saturation": 79,
        "lightness": 72
    }, {
        "hex": "#CC3917",
        "rgb": "rgb(204, 57, 23)",
        "hsl": "hsl(11, 80%, 45%)",
        "red": 204,
        "green": 57,
        "blue": 23,
        "hue": 11,
        "saturation": 80,
        "lightness": 45
    }, {
        "hex": "#F26C4F",
        "rgb": "rgb(242, 108, 79)",
        "hsl": "hsl(11, 86%, 63%)",
        "red": 242,
        "green": 108,
        "blue": 79,
        "hue": 11,
        "saturation": 86,
        "lightness": 63
    }, {
        "hex": "#F2502C",
        "rgb": "rgb(242, 80, 44)",
        "hsl": "hsl(11, 88%, 56%)",
        "red": 242,
        "green": 80,
        "blue": 44,
        "hue": 11,
        "saturation": 88,
        "lightness": 56
    }, {
        "hex": "#F36444",
        "rgb": "rgb(243, 100, 68)",
        "hsl": "hsl(11, 88%, 61%)",
        "red": 243,
        "green": 100,
        "blue": 68,
        "hue": 11,
        "saturation": 88,
        "lightness": 61
    }, {
        "hex": "#FC6747",
        "rgb": "rgb(252, 103, 71)",
        "hsl": "hsl(11, 97%, 63%)",
        "red": 252,
        "green": 103,
        "blue": 71,
        "hue": 11,
        "saturation": 97,
        "lightness": 63
    }, {
        "hex": "#FC370C",
        "rgb": "rgb(252, 55, 12)",
        "hsl": "hsl(11, 98%, 52%)",
        "red": 252,
        "green": 55,
        "blue": 12,
        "hue": 11,
        "saturation": 98,
        "lightness": 52
    }, {
        "hex": "#FF6543",
        "rgb": "rgb(255, 101, 67)",
        "hsl": "hsl(11, 100%, 63%)",
        "red": 255,
        "green": 101,
        "blue": 67,
        "hue": 11,
        "saturation": 100,
        "lightness": 63
    }, {
        "hex": "#FFA590",
        "rgb": "rgb(255, 165, 144)",
        "hsl": "hsl(11, 100%, 78%)",
        "red": 255,
        "green": 165,
        "blue": 144,
        "hue": 11,
        "saturation": 100,
        "lightness": 78
    }, {
        "hex": "#353130",
        "rgb": "rgb(53, 49, 48)",
        "hsl": "hsl(12, 5%, 20%)",
        "red": 53,
        "green": 49,
        "blue": 48,
        "hue": 12,
        "saturation": 5,
        "lightness": 20
    }, {
        "hex": "#2B2726",
        "rgb": "rgb(43, 39, 38)",
        "hsl": "hsl(12, 6%, 16%)",
        "red": 43,
        "green": 39,
        "blue": 38,
        "hue": 12,
        "saturation": 6,
        "lightness": 16
    }, {
        "hex": "#785D56",
        "rgb": "rgb(120, 93, 86)",
        "hsl": "hsl(12, 17%, 40%)",
        "red": 120,
        "green": 93,
        "blue": 86,
        "hue": 12,
        "saturation": 17,
        "lightness": 40
    }, {
        "hex": "#875346",
        "rgb": "rgb(135, 83, 70)",
        "hsl": "hsl(12, 32%, 40%)",
        "red": 135,
        "green": 83,
        "blue": 70,
        "hue": 12,
        "saturation": 32,
        "lightness": 40
    }, {
        "hex": "#C99E93",
        "rgb": "rgb(201, 158, 147)",
        "hsl": "hsl(12, 33%, 68%)",
        "red": 201,
        "green": 158,
        "blue": 147,
        "hue": 12,
        "saturation": 33,
        "lightness": 68
    }, {
        "hex": "#B77463",
        "rgb": "rgb(183, 116, 99)",
        "hsl": "hsl(12, 37%, 55%)",
        "red": 183,
        "green": 116,
        "blue": 99,
        "hue": 12,
        "saturation": 37,
        "lightness": 55
    }, {
        "hex": "#EAD1CB",
        "rgb": "rgb(234, 209, 203)",
        "hsl": "hsl(12, 42%, 86%)",
        "red": 234,
        "green": 209,
        "blue": 203,
        "hue": 12,
        "saturation": 42,
        "lightness": 86
    }, {
        "hex": "#E5B8AD",
        "rgb": "rgb(229, 184, 173)",
        "hsl": "hsl(12, 52%, 79%)",
        "red": 229,
        "green": 184,
        "blue": 173,
        "hue": 12,
        "saturation": 52,
        "lightness": 79
    }, {
        "hex": "#A8462D",
        "rgb": "rgb(168, 70, 45)",
        "hsl": "hsl(12, 58%, 42%)",
        "red": 168,
        "green": 70,
        "blue": 45,
        "hue": 12,
        "saturation": 58,
        "lightness": 42
    }, {
        "hex": "#E08E79",
        "rgb": "rgb(224, 142, 121)",
        "hsl": "hsl(12, 62%, 68%)",
        "red": 224,
        "green": 142,
        "blue": 121,
        "hue": 12,
        "saturation": 62,
        "lightness": 68
    }, {
        "hex": "#C54B2C",
        "rgb": "rgb(197, 75, 44)",
        "hsl": "hsl(12, 63%, 47%)",
        "red": 197,
        "green": 75,
        "blue": 44,
        "hue": 12,
        "saturation": 63,
        "lightness": 47
    }, {
        "hex": "#E0846D",
        "rgb": "rgb(224, 132, 109)",
        "hsl": "hsl(12, 65%, 65%)",
        "red": 224,
        "green": 132,
        "blue": 109,
        "hue": 12,
        "saturation": 65,
        "lightness": 65
    }, {
        "hex": "#EDA08C",
        "rgb": "rgb(237, 160, 140)",
        "hsl": "hsl(12, 73%, 74%)",
        "red": 237,
        "green": 160,
        "blue": 140,
        "hue": 12,
        "saturation": 73,
        "lightness": 74
    }, {
        "hex": "#E77155",
        "rgb": "rgb(231, 113, 85)",
        "hsl": "hsl(12, 75%, 62%)",
        "red": 231,
        "green": 113,
        "blue": 85,
        "hue": 12,
        "saturation": 75,
        "lightness": 62
    }, {
        "hex": "#F59982",
        "rgb": "rgb(245, 153, 130)",
        "hsl": "hsl(12, 85%, 74%)",
        "red": 245,
        "green": 153,
        "blue": 130,
        "hue": 12,
        "saturation": 85,
        "lightness": 74
    }, {
        "hex": "#F85931",
        "rgb": "rgb(248, 89, 49)",
        "hsl": "hsl(12, 93%, 58%)",
        "red": 248,
        "green": 89,
        "blue": 49,
        "hue": 12,
        "saturation": 93,
        "lightness": 58
    }, {
        "hex": "#F8572D",
        "rgb": "rgb(248, 87, 45)",
        "hsl": "hsl(12, 94%, 57%)",
        "red": 248,
        "green": 87,
        "blue": 45,
        "hue": 12,
        "saturation": 94,
        "lightness": 57
    }, {
        "hex": "#FEA189",
        "rgb": "rgb(254, 161, 137)",
        "hsl": "hsl(12, 98%, 77%)",
        "red": 254,
        "green": 161,
        "blue": 137,
        "hue": 12,
        "saturation": 98,
        "lightness": 77
    }, {
        "hex": "#FF6E49",
        "rgb": "rgb(255, 110, 73)",
        "hsl": "hsl(12, 100%, 64%)",
        "red": 255,
        "green": 110,
        "blue": 73,
        "hue": 12,
        "saturation": 100,
        "lightness": 64
    }, {
        "hex": "#FF6E4A",
        "rgb": "rgb(255, 110, 74)",
        "hsl": "hsl(12, 100%, 65%)",
        "red": 255,
        "green": 110,
        "blue": 74,
        "hue": 12,
        "saturation": 100,
        "lightness": 65
    }, {
        "hex": "#FF704D",
        "rgb": "rgb(255, 112, 77)",
        "hsl": "hsl(12, 100%, 65%)",
        "red": 255,
        "green": 112,
        "blue": 77,
        "hue": 12,
        "saturation": 100,
        "lightness": 65
    }, {
        "hex": "#FF7857",
        "rgb": "rgb(255, 120, 87)",
        "hsl": "hsl(12, 100%, 67%)",
        "red": 255,
        "green": 120,
        "blue": 87,
        "hue": 12,
        "saturation": 100,
        "lightness": 67
    }, {
        "hex": "#FFC1B2",
        "rgb": "rgb(255, 193, 178)",
        "hsl": "hsl(12, 100%, 85%)",
        "red": 255,
        "green": 193,
        "blue": 178,
        "hue": 12,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#9C8680",
        "rgb": "rgb(156, 134, 128)",
        "hsl": "hsl(13, 12%, 56%)",
        "red": 156,
        "green": 134,
        "blue": 128,
        "hue": 13,
        "saturation": 12,
        "lightness": 56
    }, {
        "hex": "#977E77",
        "rgb": "rgb(151, 126, 119)",
        "hsl": "hsl(13, 13%, 53%)",
        "red": 151,
        "green": 126,
        "blue": 119,
        "hue": 13,
        "saturation": 13,
        "lightness": 53
    }, {
        "hex": "#A78B83",
        "rgb": "rgb(167, 139, 131)",
        "hsl": "hsl(13, 17%, 58%)",
        "red": 167,
        "green": 139,
        "blue": 131,
        "hue": 13,
        "saturation": 17,
        "lightness": 58
    }, {
        "hex": "#4D3B36",
        "rgb": "rgb(77, 59, 54)",
        "hsl": "hsl(13, 18%, 26%)",
        "red": 77,
        "green": 59,
        "blue": 54,
        "hue": 13,
        "saturation": 18,
        "lightness": 26
    }, {
        "hex": "#33211C",
        "rgb": "rgb(51, 33, 28)",
        "hsl": "hsl(13, 29%, 15%)",
        "red": 51,
        "green": 33,
        "blue": 28,
        "hue": 13,
        "saturation": 29,
        "lightness": 15
    }, {
        "hex": "#49281F",
        "rgb": "rgb(73, 40, 31)",
        "hsl": "hsl(13, 40%, 20%)",
        "red": 73,
        "green": 40,
        "blue": 31,
        "hue": 13,
        "saturation": 40,
        "lightness": 20
    }, {
        "hex": "#C75233",
        "rgb": "rgb(199, 82, 51)",
        "hsl": "hsl(13, 59%, 49%)",
        "red": 199,
        "green": 82,
        "blue": 51,
        "hue": 13,
        "saturation": 59,
        "lightness": 49
    }, {
        "hex": "#D16344",
        "rgb": "rgb(209, 99, 68)",
        "hsl": "hsl(13, 61%, 54%)",
        "red": 209,
        "green": 99,
        "blue": 68,
        "hue": 13,
        "saturation": 61,
        "lightness": 54
    }, {
        "hex": "#E49D89",
        "rgb": "rgb(228, 157, 137)",
        "hsl": "hsl(13, 63%, 72%)",
        "red": 228,
        "green": 157,
        "blue": 137,
        "hue": 13,
        "saturation": 63,
        "lightness": 72
    }, {
        "hex": "#F3C6B9",
        "rgb": "rgb(243, 198, 185)",
        "hsl": "hsl(13, 71%, 84%)",
        "red": 243,
        "green": 198,
        "blue": 185,
        "hue": 13,
        "saturation": 71,
        "lightness": 84
    }, {
        "hex": "#DB4B23",
        "rgb": "rgb(219, 75, 35)",
        "hsl": "hsl(13, 72%, 50%)",
        "red": 219,
        "green": 75,
        "blue": 35,
        "hue": 13,
        "saturation": 72,
        "lightness": 50
    }, {
        "hex": "#CC3E18",
        "rgb": "rgb(204, 62, 24)",
        "hsl": "hsl(13, 79%, 45%)",
        "red": 204,
        "green": 62,
        "blue": 24,
        "hue": 13,
        "saturation": 79,
        "lightness": 45
    }, {
        "hex": "#E4491C",
        "rgb": "rgb(228, 73, 28)",
        "hsl": "hsl(13, 79%, 50%)",
        "red": 228,
        "green": 73,
        "blue": 28,
        "hue": 13,
        "saturation": 79,
        "lightness": 50
    }, {
        "hex": "#D34017",
        "rgb": "rgb(211, 64, 23)",
        "hsl": "hsl(13, 80%, 46%)",
        "red": 211,
        "green": 64,
        "blue": 23,
        "hue": 13,
        "saturation": 80,
        "lightness": 46
    }, {
        "hex": "#EB613B",
        "rgb": "rgb(235, 97, 59)",
        "hsl": "hsl(13, 81%, 58%)",
        "red": 235,
        "green": 97,
        "blue": 59,
        "hue": 13,
        "saturation": 81,
        "lightness": 58
    }, {
        "hex": "#F08E73",
        "rgb": "rgb(240, 142, 115)",
        "hsl": "hsl(13, 81%, 70%)",
        "red": 240,
        "green": 142,
        "blue": 115,
        "hue": 13,
        "saturation": 81,
        "lightness": 70
    }, {
        "hex": "#ED6D4A",
        "rgb": "rgb(237, 109, 74)",
        "hsl": "hsl(13, 82%, 61%)",
        "red": 237,
        "green": 109,
        "blue": 74,
        "hue": 13,
        "saturation": 82,
        "lightness": 61
    }, {
        "hex": "#F2977E",
        "rgb": "rgb(242, 151, 126)",
        "hsl": "hsl(13, 82%, 72%)",
        "red": 242,
        "green": 151,
        "blue": 126,
        "hue": 13,
        "saturation": 82,
        "lightness": 72
    }, {
        "hex": "#F38264",
        "rgb": "rgb(243, 130, 100)",
        "hsl": "hsl(13, 86%, 67%)",
        "red": 243,
        "green": 130,
        "blue": 100,
        "hue": 13,
        "saturation": 86,
        "lightness": 67
    }, {
        "hex": "#F2643D",
        "rgb": "rgb(242, 100, 61)",
        "hsl": "hsl(13, 87%, 59%)",
        "red": 242,
        "green": 100,
        "blue": 61,
        "hue": 13,
        "saturation": 87,
        "lightness": 59
    }, {
        "hex": "#F5886B",
        "rgb": "rgb(245, 136, 107)",
        "hsl": "hsl(13, 87%, 69%)",
        "red": 245,
        "green": 136,
        "blue": 107,
        "hue": 13,
        "saturation": 87,
        "lightness": 69
    }, {
        "hex": "#FB9274",
        "rgb": "rgb(251, 146, 116)",
        "hsl": "hsl(13, 94%, 72%)",
        "red": 251,
        "green": 146,
        "blue": 116,
        "hue": 13,
        "saturation": 94,
        "lightness": 72
    }, {
        "hex": "#FA3C08",
        "rgb": "rgb(250, 60, 8)",
        "hsl": "hsl(13, 96%, 51%)",
        "red": 250,
        "green": 60,
        "blue": 8,
        "hue": 13,
        "saturation": 96,
        "lightness": 51
    }, {
        "hex": "#FC3903",
        "rgb": "rgb(252, 57, 3)",
        "hsl": "hsl(13, 98%, 50%)",
        "red": 252,
        "green": 57,
        "blue": 3,
        "hue": 13,
        "saturation": 98,
        "lightness": 50
    }, {
        "hex": "#FEBEAC",
        "rgb": "rgb(254, 190, 172)",
        "hsl": "hsl(13, 98%, 84%)",
        "red": 254,
        "green": 190,
        "blue": 172,
        "hue": 13,
        "saturation": 98,
        "lightness": 84
    }, {
        "hex": "#F63700",
        "rgb": "rgb(246, 55, 0)",
        "hsl": "hsl(13, 100%, 48%)",
        "red": 246,
        "green": 55,
        "blue": 0,
        "hue": 13,
        "saturation": 100,
        "lightness": 48
    }, {
        "hex": "#FF714B",
        "rgb": "rgb(255, 113, 75)",
        "hsl": "hsl(13, 100%, 65%)",
        "red": 255,
        "green": 113,
        "blue": 75,
        "hue": 13,
        "saturation": 100,
        "lightness": 65
    }, {
        "hex": "#FF7752",
        "rgb": "rgb(255, 119, 82)",
        "hsl": "hsl(13, 100%, 66%)",
        "red": 255,
        "green": 119,
        "blue": 82,
        "hue": 13,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#4A403D",
        "rgb": "rgb(74, 64, 61)",
        "hsl": "hsl(14, 10%, 26%)",
        "red": 74,
        "green": 64,
        "blue": 61,
        "hue": 14,
        "saturation": 10,
        "lightness": 26
    }, {
        "hex": "#443A37",
        "rgb": "rgb(68, 58, 55)",
        "hsl": "hsl(14, 11%, 24%)",
        "red": 68,
        "green": 58,
        "blue": 55,
        "hue": 14,
        "saturation": 11,
        "lightness": 24
    }, {
        "hex": "#3B2E2A",
        "rgb": "rgb(59, 46, 42)",
        "hsl": "hsl(14, 17%, 20%)",
        "red": 59,
        "green": 46,
        "blue": 42,
        "hue": 14,
        "saturation": 17,
        "lightness": 20
    }, {
        "hex": "#412E28",
        "rgb": "rgb(65, 46, 40)",
        "hsl": "hsl(14, 24%, 21%)",
        "red": 65,
        "green": 46,
        "blue": 40,
        "hue": 14,
        "saturation": 24,
        "lightness": 21
    }, {
        "hex": "#3F2C26",
        "rgb": "rgb(63, 44, 38)",
        "hsl": "hsl(14, 25%, 20%)",
        "red": 63,
        "green": 44,
        "blue": 38,
        "hue": 14,
        "saturation": 25,
        "lightness": 20
    }, {
        "hex": "#C6A49A",
        "rgb": "rgb(198, 164, 154)",
        "hsl": "hsl(14, 28%, 69%)",
        "red": 198,
        "green": 164,
        "blue": 154,
        "hue": 14,
        "saturation": 28,
        "lightness": 69
    }, {
        "hex": "#ECDFDB",
        "rgb": "rgb(236, 223, 219)",
        "hsl": "hsl(14, 31%, 89%)",
        "red": 236,
        "green": 223,
        "blue": 219,
        "hue": 14,
        "saturation": 31,
        "lightness": 89
    }, {
        "hex": "#5A372C",
        "rgb": "rgb(90, 55, 44)",
        "hsl": "hsl(14, 34%, 26%)",
        "red": 90,
        "green": 55,
        "blue": 44,
        "hue": 14,
        "saturation": 34,
        "lightness": 26
    }, {
        "hex": "#5A3226",
        "rgb": "rgb(90, 50, 38)",
        "hsl": "hsl(14, 41%, 25%)",
        "red": 90,
        "green": 50,
        "blue": 38,
        "hue": 14,
        "saturation": 41,
        "lightness": 25
    }, {
        "hex": "#C98D7B",
        "rgb": "rgb(201, 141, 123)",
        "hsl": "hsl(14, 42%, 64%)",
        "red": 201,
        "green": 141,
        "blue": 123,
        "hue": 14,
        "saturation": 42,
        "lightness": 64
    }, {
        "hex": "#59291B",
        "rgb": "rgb(89, 41, 27)",
        "hsl": "hsl(14, 53%, 23%)",
        "red": 89,
        "green": 41,
        "blue": 27,
        "hue": 14,
        "saturation": 53,
        "lightness": 23
    }, {
        "hex": "#E47C5D",
        "rgb": "rgb(228, 124, 93)",
        "hsl": "hsl(14, 71%, 63%)",
        "red": 228,
        "green": 124,
        "blue": 93,
        "hue": 14,
        "saturation": 71,
        "lightness": 63
    }, {
        "hex": "#F7D7CD",
        "rgb": "rgb(247, 215, 205)",
        "hsl": "hsl(14, 72%, 89%)",
        "red": 247,
        "green": 215,
        "blue": 205,
        "hue": 14,
        "saturation": 72,
        "lightness": 89
    }, {
        "hex": "#EB7B59",
        "rgb": "rgb(235, 123, 89)",
        "hsl": "hsl(14, 78%, 64%)",
        "red": 235,
        "green": 123,
        "blue": 89,
        "hue": 14,
        "saturation": 78,
        "lightness": 64
    }, {
        "hex": "#EB6841",
        "rgb": "rgb(235, 104, 65)",
        "hsl": "hsl(14, 81%, 59%)",
        "red": 235,
        "green": 104,
        "blue": 65,
        "hue": 14,
        "saturation": 81,
        "lightness": 59
    }, {
        "hex": "#F6A68D",
        "rgb": "rgb(246, 166, 141)",
        "hsl": "hsl(14, 85%, 76%)",
        "red": 246,
        "green": 166,
        "blue": 141,
        "hue": 14,
        "saturation": 85,
        "lightness": 76
    }, {
        "hex": "#F6AA93",
        "rgb": "rgb(246, 170, 147)",
        "hsl": "hsl(14, 85%, 77%)",
        "red": 246,
        "green": 170,
        "blue": 147,
        "hue": 14,
        "saturation": 85,
        "lightness": 77
    }, {
        "hex": "#F59275",
        "rgb": "rgb(245, 146, 117)",
        "hsl": "hsl(14, 86%, 71%)",
        "red": 245,
        "green": 146,
        "blue": 117,
        "hue": 14,
        "saturation": 86,
        "lightness": 71
    }, {
        "hex": "#F7A48B",
        "rgb": "rgb(247, 164, 139)",
        "hsl": "hsl(14, 87%, 76%)",
        "red": 247,
        "green": 164,
        "blue": 139,
        "hue": 14,
        "saturation": 87,
        "lightness": 76
    }, {
        "hex": "#B9340B",
        "rgb": "rgb(185, 52, 11)",
        "hsl": "hsl(14, 89%, 38%)",
        "red": 185,
        "green": 52,
        "blue": 11,
        "hue": 14,
        "saturation": 89,
        "lightness": 38
    }, {
        "hex": "#F3450F",
        "rgb": "rgb(243, 69, 15)",
        "hsl": "hsl(14, 90%, 51%)",
        "red": 243,
        "green": 69,
        "blue": 15,
        "hue": 14,
        "saturation": 90,
        "lightness": 51
    }, {
        "hex": "#F89B7E",
        "rgb": "rgb(248, 155, 126)",
        "hsl": "hsl(14, 90%, 73%)",
        "red": 248,
        "green": 155,
        "blue": 126,
        "hue": 14,
        "saturation": 90,
        "lightness": 73
    }, {
        "hex": "#F66B40",
        "rgb": "rgb(246, 107, 64)",
        "hsl": "hsl(14, 91%, 61%)",
        "red": 246,
        "green": 107,
        "blue": 64,
        "hue": 14,
        "saturation": 91,
        "lightness": 61
    }, {
        "hex": "#F8764E",
        "rgb": "rgb(248, 118, 78)",
        "hsl": "hsl(14, 92%, 64%)",
        "red": 248,
        "green": 118,
        "blue": 78,
        "hue": 14,
        "saturation": 92,
        "lightness": 64
    }, {
        "hex": "#F98F6F",
        "rgb": "rgb(249, 143, 111)",
        "hsl": "hsl(14, 92%, 71%)",
        "red": 249,
        "green": 143,
        "blue": 111,
        "hue": 14,
        "saturation": 92,
        "lightness": 71
    }, {
        "hex": "#F98F6F",
        "rgb": "rgb(249, 143, 111)",
        "hsl": "hsl(14, 92%, 71%)",
        "red": 249,
        "green": 143,
        "blue": 111,
        "hue": 14,
        "saturation": 92,
        "lightness": 71
    }, {
        "hex": "#E33C08",
        "rgb": "rgb(227, 60, 8)",
        "hsl": "hsl(14, 93%, 46%)",
        "red": 227,
        "green": 60,
        "blue": 8,
        "hue": 14,
        "saturation": 93,
        "lightness": 46
    }, {
        "hex": "#FB6A3D",
        "rgb": "rgb(251, 106, 61)",
        "hsl": "hsl(14, 96%, 61%)",
        "red": 251,
        "green": 106,
        "blue": 61,
        "hue": 14,
        "saturation": 96,
        "lightness": 61
    }, {
        "hex": "#FB6B41",
        "rgb": "rgb(251, 107, 65)",
        "hsl": "hsl(14, 96%, 62%)",
        "red": 251,
        "green": 107,
        "blue": 65,
        "hue": 14,
        "saturation": 96,
        "lightness": 62
    }, {
        "hex": "#B32900",
        "rgb": "rgb(179, 41, 0)",
        "hsl": "hsl(14, 100%, 35%)",
        "red": 179,
        "green": 41,
        "blue": 0,
        "hue": 14,
        "saturation": 100,
        "lightness": 35
    }, {
        "hex": "#FF3D00",
        "rgb": "rgb(255, 61, 0)",
        "hsl": "hsl(14, 100%, 50%)",
        "red": 255,
        "green": 61,
        "blue": 0,
        "hue": 14,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF7E57",
        "rgb": "rgb(255, 126, 87)",
        "hsl": "hsl(14, 100%, 67%)",
        "red": 255,
        "green": 126,
        "blue": 87,
        "hue": 14,
        "saturation": 100,
        "lightness": 67
    }, {
        "hex": "#2F2C2B",
        "rgb": "rgb(47, 44, 43)",
        "hsl": "hsl(15, 4%, 18%)",
        "red": 47,
        "green": 44,
        "blue": 43,
        "hue": 15,
        "saturation": 4,
        "lightness": 18
    }, {
        "hex": "#70615C",
        "rgb": "rgb(112, 97, 92)",
        "hsl": "hsl(15, 10%, 40%)",
        "red": 112,
        "green": 97,
        "blue": 92,
        "hue": 15,
        "saturation": 10,
        "lightness": 40
    }, {
        "hex": "#604E48",
        "rgb": "rgb(96, 78, 72)",
        "hsl": "hsl(15, 14%, 33%)",
        "red": 96,
        "green": 78,
        "blue": 72,
        "hue": 15,
        "saturation": 14,
        "lightness": 33
    }, {
        "hex": "#382924",
        "rgb": "rgb(56, 41, 36)",
        "hsl": "hsl(15, 22%, 18%)",
        "red": 56,
        "green": 41,
        "blue": 36,
        "hue": 15,
        "saturation": 22,
        "lightness": 18
    }, {
        "hex": "#B18272",
        "rgb": "rgb(177, 130, 114)",
        "hsl": "hsl(15, 29%, 57%)",
        "red": 177,
        "green": 130,
        "blue": 114,
        "hue": 15,
        "saturation": 29,
        "lightness": 57
    }, {
        "hex": "#1A110E",
        "rgb": "rgb(26, 17, 14)",
        "hsl": "hsl(15, 30%, 8%)",
        "red": 26,
        "green": 17,
        "blue": 14,
        "hue": 15,
        "saturation": 30,
        "lightness": 8
    }, {
        "hex": "#F2E9E6",
        "rgb": "rgb(242, 233, 230)",
        "hsl": "hsl(15, 32%, 93%)",
        "red": 242,
        "green": 233,
        "blue": 230,
        "hue": 15,
        "saturation": 32,
        "lightness": 93
    }, {
        "hex": "#E6D1CA",
        "rgb": "rgb(230, 209, 202)",
        "hsl": "hsl(15, 36%, 85%)",
        "red": 230,
        "green": 209,
        "blue": 202,
        "hue": 15,
        "saturation": 36,
        "lightness": 85
    }, {
        "hex": "#A25D47",
        "rgb": "rgb(162, 93, 71)",
        "hsl": "hsl(15, 39%, 46%)",
        "red": 162,
        "green": 93,
        "blue": 71,
        "hue": 15,
        "saturation": 39,
        "lightness": 46
    }, {
        "hex": "#693726",
        "rgb": "rgb(105, 55, 38)",
        "hsl": "hsl(15, 47%, 28%)",
        "red": 105,
        "green": 55,
        "blue": 38,
        "hue": 15,
        "saturation": 47,
        "lightness": 28
    }, {
        "hex": "#CC7254",
        "rgb": "rgb(204, 114, 84)",
        "hsl": "hsl(15, 54%, 56%)",
        "red": 204,
        "green": 114,
        "blue": 84,
        "hue": 15,
        "saturation": 54,
        "lightness": 56
    }, {
        "hex": "#BD5532",
        "rgb": "rgb(189, 85, 50)",
        "hsl": "hsl(15, 58%, 47%)",
        "red": 189,
        "green": 85,
        "blue": 50,
        "hue": 15,
        "saturation": 58,
        "lightness": 47
    }, {
        "hex": "#E4A691",
        "rgb": "rgb(228, 166, 145)",
        "hsl": "hsl(15, 61%, 73%)",
        "red": 228,
        "green": 166,
        "blue": 145,
        "hue": 15,
        "saturation": 61,
        "lightness": 73
    }, {
        "hex": "#BF4D28",
        "rgb": "rgb(191, 77, 40)",
        "hsl": "hsl(15, 65%, 45%)",
        "red": 191,
        "green": 77,
        "blue": 40,
        "hue": 15,
        "saturation": 65,
        "lightness": 45
    }, {
        "hex": "#E3967D",
        "rgb": "rgb(227, 150, 125)",
        "hsl": "hsl(15, 65%, 69%)",
        "red": 227,
        "green": 150,
        "blue": 125,
        "hue": 15,
        "saturation": 65,
        "lightness": 69
    }, {
        "hex": "#B14623",
        "rgb": "rgb(177, 70, 35)",
        "hsl": "hsl(15, 67%, 42%)",
        "red": 177,
        "green": 70,
        "blue": 35,
        "hue": 15,
        "saturation": 67,
        "lightness": 42
    }, {
        "hex": "#E89A80",
        "rgb": "rgb(232, 154, 128)",
        "hsl": "hsl(15, 69%, 71%)",
        "red": 232,
        "green": 154,
        "blue": 128,
        "hue": 15,
        "saturation": 69,
        "lightness": 71
    }, {
        "hex": "#E68A6C",
        "rgb": "rgb(230, 138, 108)",
        "hsl": "hsl(15, 71%, 66%)",
        "red": 230,
        "green": 138,
        "blue": 108,
        "hue": 15,
        "saturation": 71,
        "lightness": 66
    }, {
        "hex": "#EB9A7F",
        "rgb": "rgb(235, 154, 127)",
        "hsl": "hsl(15, 73%, 71%)",
        "red": 235,
        "green": 154,
        "blue": 127,
        "hue": 15,
        "saturation": 73,
        "lightness": 71
    }, {
        "hex": "#E15E32",
        "rgb": "rgb(225, 94, 50)",
        "hsl": "hsl(15, 74%, 54%)",
        "red": 225,
        "green": 94,
        "blue": 50,
        "hue": 15,
        "saturation": 74,
        "lightness": 54
    }, {
        "hex": "#F0A991",
        "rgb": "rgb(240, 169, 145)",
        "hsl": "hsl(15, 76%, 75%)",
        "red": 240,
        "green": 169,
        "blue": 145,
        "hue": 15,
        "saturation": 76,
        "lightness": 75
    }, {
        "hex": "#F4BFAD",
        "rgb": "rgb(244, 191, 173)",
        "hsl": "hsl(15, 76%, 82%)",
        "red": 244,
        "green": 191,
        "blue": 173,
        "hue": 15,
        "saturation": 76,
        "lightness": 82
    }, {
        "hex": "#F6C7B7",
        "rgb": "rgb(246, 199, 183)",
        "hsl": "hsl(15, 78%, 84%)",
        "red": 246,
        "green": 199,
        "blue": 183,
        "hue": 15,
        "saturation": 78,
        "lightness": 84
    }, {
        "hex": "#F19474",
        "rgb": "rgb(241, 148, 116)",
        "hsl": "hsl(15, 82%, 70%)",
        "red": 241,
        "green": 148,
        "blue": 116,
        "hue": 15,
        "saturation": 82,
        "lightness": 70
    }, {
        "hex": "#F07951",
        "rgb": "rgb(240, 121, 81)",
        "hsl": "hsl(15, 84%, 63%)",
        "red": 240,
        "green": 121,
        "blue": 81,
        "hue": 15,
        "saturation": 84,
        "lightness": 63
    }, {
        "hex": "#F5A489",
        "rgb": "rgb(245, 164, 137)",
        "hsl": "hsl(15, 84%, 75%)",
        "red": 245,
        "green": 164,
        "blue": 137,
        "hue": 15,
        "saturation": 84,
        "lightness": 75
    }, {
        "hex": "#D53D0C",
        "rgb": "rgb(213, 61, 12)",
        "hsl": "hsl(15, 89%, 44%)",
        "red": 213,
        "green": 61,
        "blue": 12,
        "hue": 15,
        "saturation": 89,
        "lightness": 44
    }, {
        "hex": "#F2511B",
        "rgb": "rgb(242, 81, 27)",
        "hsl": "hsl(15, 89%, 53%)",
        "red": 242,
        "green": 81,
        "blue": 27,
        "hue": 15,
        "saturation": 89,
        "lightness": 53
    }, {
        "hex": "#F68C68",
        "rgb": "rgb(246, 140, 104)",
        "hsl": "hsl(15, 89%, 69%)",
        "red": 246,
        "green": 140,
        "blue": 104,
        "hue": 15,
        "saturation": 89,
        "lightness": 69
    }, {
        "hex": "#F68C68",
        "rgb": "rgb(246, 140, 104)",
        "hsl": "hsl(15, 89%, 69%)",
        "red": 246,
        "green": 140,
        "blue": 104,
        "hue": 15,
        "saturation": 89,
        "lightness": 69
    }, {
        "hex": "#F88863",
        "rgb": "rgb(248, 136, 99)",
        "hsl": "hsl(15, 91%, 68%)",
        "red": 248,
        "green": 136,
        "blue": 99,
        "hue": 15,
        "saturation": 91,
        "lightness": 68
    }, {
        "hex": "#FBBAA4",
        "rgb": "rgb(251, 186, 164)",
        "hsl": "hsl(15, 92%, 81%)",
        "red": 251,
        "green": 186,
        "blue": 164,
        "hue": 15,
        "saturation": 92,
        "lightness": 81
    }, {
        "hex": "#FDCFBF",
        "rgb": "rgb(253, 207, 191)",
        "hsl": "hsl(15, 94%, 87%)",
        "red": 253,
        "green": 207,
        "blue": 191,
        "hue": 15,
        "saturation": 94,
        "lightness": 87
    }, {
        "hex": "#FC6E3D",
        "rgb": "rgb(252, 110, 61)",
        "hsl": "hsl(15, 97%, 61%)",
        "red": 252,
        "green": 110,
        "blue": 61,
        "hue": 15,
        "saturation": 97,
        "lightness": 61
    }, {
        "hex": "#F03C02",
        "rgb": "rgb(240, 60, 2)",
        "hsl": "hsl(15, 98%, 47%)",
        "red": 240,
        "green": 60,
        "blue": 2,
        "hue": 15,
        "saturation": 98,
        "lightness": 47
    }, {
        "hex": "#F23E02",
        "rgb": "rgb(242, 62, 2)",
        "hsl": "hsl(15, 98%, 48%)",
        "red": 242,
        "green": 62,
        "blue": 2,
        "hue": 15,
        "saturation": 98,
        "lightness": 48
    }, {
        "hex": "#FEC0AB",
        "rgb": "rgb(254, 192, 171)",
        "hsl": "hsl(15, 98%, 83%)",
        "red": 254,
        "green": 192,
        "blue": 171,
        "hue": 15,
        "saturation": 98,
        "lightness": 83
    }, {
        "hex": "#B52C00",
        "rgb": "rgb(181, 44, 0)",
        "hsl": "hsl(15, 100%, 35%)",
        "red": 181,
        "green": 44,
        "blue": 0,
        "hue": 15,
        "saturation": 100,
        "lightness": 35
    }, {
        "hex": "#BE3100",
        "rgb": "rgb(190, 49, 0)",
        "hsl": "hsl(15, 100%, 37%)",
        "red": 190,
        "green": 49,
        "blue": 0,
        "hue": 15,
        "saturation": 100,
        "lightness": 37
    }, {
        "hex": "#FF4000",
        "rgb": "rgb(255, 64, 0)",
        "hsl": "hsl(15, 100%, 50%)",
        "red": 255,
        "green": 64,
        "blue": 0,
        "hue": 15,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF703F",
        "rgb": "rgb(255, 112, 63)",
        "hsl": "hsl(15, 100%, 62%)",
        "red": 255,
        "green": 112,
        "blue": 63,
        "hue": 15,
        "saturation": 100,
        "lightness": 62
    }, {
        "hex": "#FF9D7D",
        "rgb": "rgb(255, 157, 125)",
        "hsl": "hsl(15, 100%, 75%)",
        "red": 255,
        "green": 157,
        "blue": 125,
        "hue": 15,
        "saturation": 100,
        "lightness": 75
    }, {
        "hex": "#FFA588",
        "rgb": "rgb(255, 165, 136)",
        "hsl": "hsl(15, 100%, 77%)",
        "red": 255,
        "green": 165,
        "blue": 136,
        "hue": 15,
        "saturation": 100,
        "lightness": 77
    }, {
        "hex": "#98908D",
        "rgb": "rgb(152, 144, 141)",
        "hsl": "hsl(16, 5%, 57%)",
        "red": 152,
        "green": 144,
        "blue": 141,
        "hue": 16,
        "saturation": 5,
        "lightness": 57
    }, {
        "hex": "#6E5B54",
        "rgb": "rgb(110, 91, 84)",
        "hsl": "hsl(16, 13%, 38%)",
        "red": 110,
        "green": 91,
        "blue": 84,
        "hue": 16,
        "saturation": 13,
        "lightness": 38
    }, {
        "hex": "#52423C",
        "rgb": "rgb(82, 66, 60)",
        "hsl": "hsl(16, 15%, 28%)",
        "red": 82,
        "green": 66,
        "blue": 60,
        "hue": 16,
        "saturation": 15,
        "lightness": 28
    }, {
        "hex": "#4A362F",
        "rgb": "rgb(74, 54, 47)",
        "hsl": "hsl(16, 22%, 24%)",
        "red": 74,
        "green": 54,
        "blue": 47,
        "hue": 16,
        "saturation": 22,
        "lightness": 24
    }, {
        "hex": "#3D2922",
        "rgb": "rgb(61, 41, 34)",
        "hsl": "hsl(16, 28%, 19%)",
        "red": 61,
        "green": 41,
        "blue": 34,
        "hue": 16,
        "saturation": 28,
        "lightness": 19
    }, {
        "hex": "#EECFC4",
        "rgb": "rgb(238, 207, 196)",
        "hsl": "hsl(16, 55%, 85%)",
        "red": 238,
        "green": 207,
        "blue": 196,
        "hue": 16,
        "saturation": 55,
        "lightness": 85
    }, {
        "hex": "#D3643B",
        "rgb": "rgb(211, 100, 59)",
        "hsl": "hsl(16, 63%, 53%)",
        "red": 211,
        "green": 100,
        "blue": 59,
        "hue": 16,
        "saturation": 63,
        "lightness": 53
    }, {
        "hex": "#0D0502",
        "rgb": "rgb(13, 5, 2)",
        "hsl": "hsl(16, 73%, 3%)",
        "red": 13,
        "green": 5,
        "blue": 2,
        "hue": 16,
        "saturation": 73,
        "lightness": 3
    }, {
        "hex": "#DF5D2E",
        "rgb": "rgb(223, 93, 46)",
        "hsl": "hsl(16, 73%, 53%)",
        "red": 223,
        "green": 93,
        "blue": 46,
        "hue": 16,
        "saturation": 73,
        "lightness": 53
    }, {
        "hex": "#F0B49E",
        "rgb": "rgb(240, 180, 158)",
        "hsl": "hsl(16, 73%, 78%)",
        "red": 240,
        "green": 180,
        "blue": 158,
        "hue": 16,
        "saturation": 73,
        "lightness": 78
    }, {
        "hex": "#F0B49E",
        "rgb": "rgb(240, 180, 158)",
        "hsl": "hsl(16, 73%, 78%)",
        "red": 240,
        "green": 180,
        "blue": 158,
        "hue": 16,
        "saturation": 73,
        "lightness": 78
    }, {
        "hex": "#E16639",
        "rgb": "rgb(225, 102, 57)",
        "hsl": "hsl(16, 74%, 55%)",
        "red": 225,
        "green": 102,
        "blue": 57,
        "hue": 16,
        "saturation": 74,
        "lightness": 55
    }, {
        "hex": "#E88460",
        "rgb": "rgb(232, 132, 96)",
        "hsl": "hsl(16, 75%, 64%)",
        "red": 232,
        "green": 132,
        "blue": 96,
        "hue": 16,
        "saturation": 75,
        "lightness": 64
    }, {
        "hex": "#D54B1A",
        "rgb": "rgb(213, 75, 26)",
        "hsl": "hsl(16, 78%, 47%)",
        "red": 213,
        "green": 75,
        "blue": 26,
        "hue": 16,
        "saturation": 78,
        "lightness": 47
    }, {
        "hex": "#F17144",
        "rgb": "rgb(241, 113, 68)",
        "hsl": "hsl(16, 86%, 61%)",
        "red": 241,
        "green": 113,
        "blue": 68,
        "hue": 16,
        "saturation": 86,
        "lightness": 61
    }, {
        "hex": "#FAC7B4",
        "rgb": "rgb(250, 199, 180)",
        "hsl": "hsl(16, 88%, 84%)",
        "red": 250,
        "green": 199,
        "blue": 180,
        "hue": 16,
        "saturation": 88,
        "lightness": 84
    }, {
        "hex": "#FA6632",
        "rgb": "rgb(250, 102, 50)",
        "hsl": "hsl(16, 95%, 59%)",
        "red": 250,
        "green": 102,
        "blue": 50,
        "hue": 16,
        "saturation": 95,
        "lightness": 59
    }, {
        "hex": "#FCA483",
        "rgb": "rgb(252, 164, 131)",
        "hsl": "hsl(16, 95%, 75%)",
        "red": 252,
        "green": 164,
        "blue": 131,
        "hue": 16,
        "saturation": 95,
        "lightness": 75
    }, {
        "hex": "#FEAB8D",
        "rgb": "rgb(254, 171, 141)",
        "hsl": "hsl(16, 98%, 77%)",
        "red": 254,
        "green": 171,
        "blue": 141,
        "hue": 16,
        "saturation": 98,
        "lightness": 77
    }, {
        "hex": "#FEB89F",
        "rgb": "rgb(254, 184, 159)",
        "hsl": "hsl(16, 98%, 81%)",
        "red": 254,
        "green": 184,
        "blue": 159,
        "hue": 16,
        "saturation": 98,
        "lightness": 81
    }, {
        "hex": "#BD3200",
        "rgb": "rgb(189, 50, 0)",
        "hsl": "hsl(16, 100%, 37%)",
        "red": 189,
        "green": 50,
        "blue": 0,
        "hue": 16,
        "saturation": 100,
        "lightness": 37
    }, {
        "hex": "#D43A00",
        "rgb": "rgb(212, 58, 0)",
        "hsl": "hsl(16, 100%, 42%)",
        "red": 212,
        "green": 58,
        "blue": 0,
        "hue": 16,
        "saturation": 100,
        "lightness": 42
    }, {
        "hex": "#FF6933",
        "rgb": "rgb(255, 105, 51)",
        "hsl": "hsl(16, 100%, 60%)",
        "red": 255,
        "green": 105,
        "blue": 51,
        "hue": 16,
        "saturation": 100,
        "lightness": 60
    }, {
        "hex": "#FF8E65",
        "rgb": "rgb(255, 142, 101)",
        "hsl": "hsl(16, 100%, 70%)",
        "red": 255,
        "green": 142,
        "blue": 101,
        "hue": 16,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#6E6460",
        "rgb": "rgb(110, 100, 96)",
        "hsl": "hsl(17, 7%, 40%)",
        "red": 110,
        "green": 100,
        "blue": 96,
        "hue": 17,
        "saturation": 7,
        "lightness": 40
    }, {
        "hex": "#55443D",
        "rgb": "rgb(85, 68, 61)",
        "hsl": "hsl(17, 16%, 29%)",
        "red": 85,
        "green": 68,
        "blue": 61,
        "hue": 17,
        "saturation": 16,
        "lightness": 29
    }, {
        "hex": "#493831",
        "rgb": "rgb(73, 56, 49)",
        "hsl": "hsl(17, 20%, 24%)",
        "red": 73,
        "green": 56,
        "blue": 49,
        "hue": 17,
        "saturation": 20,
        "lightness": 24
    }, {
        "hex": "#482C21",
        "rgb": "rgb(72, 44, 33)",
        "hsl": "hsl(17, 37%, 21%)",
        "red": 72,
        "green": 44,
        "blue": 33,
        "hue": 17,
        "saturation": 37,
        "lightness": 21
    }, {
        "hex": "#633D2E",
        "rgb": "rgb(99, 61, 46)",
        "hsl": "hsl(17, 37%, 28%)",
        "red": 99,
        "green": 61,
        "blue": 46,
        "hue": 17,
        "saturation": 37,
        "lightness": 28
    }, {
        "hex": "#3F261C",
        "rgb": "rgb(63, 38, 28)",
        "hsl": "hsl(17, 38%, 18%)",
        "red": 63,
        "green": 38,
        "blue": 28,
        "hue": 17,
        "saturation": 38,
        "lightness": 18
    }, {
        "hex": "#D2A391",
        "rgb": "rgb(210, 163, 145)",
        "hsl": "hsl(17, 42%, 70%)",
        "red": 210,
        "green": 163,
        "blue": 145,
        "hue": 17,
        "saturation": 42,
        "lightness": 70
    }, {
        "hex": "#DA8F72",
        "rgb": "rgb(218, 143, 114)",
        "hsl": "hsl(17, 58%, 65%)",
        "red": 218,
        "green": 143,
        "blue": 114,
        "hue": 17,
        "saturation": 58,
        "lightness": 65
    }, {
        "hex": "#DA825F",
        "rgb": "rgb(218, 130, 95)",
        "hsl": "hsl(17, 62%, 61%)",
        "red": 218,
        "green": 130,
        "blue": 95,
        "hue": 17,
        "saturation": 62,
        "lightness": 61
    }, {
        "hex": "#D55C2B",
        "rgb": "rgb(213, 92, 43)",
        "hsl": "hsl(17, 67%, 50%)",
        "red": 213,
        "green": 92,
        "blue": 43,
        "hue": 17,
        "saturation": 67,
        "lightness": 50
    }, {
        "hex": "#E48B69",
        "rgb": "rgb(228, 139, 105)",
        "hsl": "hsl(17, 69%, 65%)",
        "red": 228,
        "green": 139,
        "blue": 105,
        "hue": 17,
        "saturation": 69,
        "lightness": 65
    }, {
        "hex": "#EFB198",
        "rgb": "rgb(239, 177, 152)",
        "hsl": "hsl(17, 73%, 77%)",
        "red": 239,
        "green": 177,
        "blue": 152,
        "hue": 17,
        "saturation": 73,
        "lightness": 77
    }, {
        "hex": "#EE9F80",
        "rgb": "rgb(238, 159, 128)",
        "hsl": "hsl(17, 76%, 72%)",
        "red": 238,
        "green": 159,
        "blue": 128,
        "hue": 17,
        "saturation": 76,
        "lightness": 72
    }, {
        "hex": "#F9DED3",
        "rgb": "rgb(249, 222, 211)",
        "hsl": "hsl(17, 76%, 90%)",
        "red": 249,
        "green": 222,
        "blue": 211,
        "hue": 17,
        "saturation": 76,
        "lightness": 90
    }, {
        "hex": "#DE4F15",
        "rgb": "rgb(222, 79, 21)",
        "hsl": "hsl(17, 83%, 48%)",
        "red": 222,
        "green": 79,
        "blue": 21,
        "hue": 17,
        "saturation": 83,
        "lightness": 48
    }, {
        "hex": "#F39772",
        "rgb": "rgb(243, 151, 114)",
        "hsl": "hsl(17, 84%, 70%)",
        "red": 243,
        "green": 151,
        "blue": 114,
        "hue": 17,
        "saturation": 84,
        "lightness": 70
    }, {
        "hex": "#F07241",
        "rgb": "rgb(240, 114, 65)",
        "hsl": "hsl(17, 85%, 60%)",
        "red": 240,
        "green": 114,
        "blue": 65,
        "hue": 17,
        "saturation": 85,
        "lightness": 60
    }, {
        "hex": "#F07848",
        "rgb": "rgb(240, 120, 72)",
        "hsl": "hsl(17, 85%, 61%)",
        "red": 240,
        "green": 120,
        "blue": 72,
        "hue": 17,
        "saturation": 85,
        "lightness": 61
    }, {
        "hex": "#F18052",
        "rgb": "rgb(241, 128, 82)",
        "hsl": "hsl(17, 85%, 63%)",
        "red": 241,
        "green": 128,
        "blue": 82,
        "hue": 17,
        "saturation": 85,
        "lightness": 63
    }, {
        "hex": "#F8B195",
        "rgb": "rgb(248, 177, 149)",
        "hsl": "hsl(17, 88%, 78%)",
        "red": 248,
        "green": 177,
        "blue": 149,
        "hue": 17,
        "saturation": 88,
        "lightness": 78
    }, {
        "hex": "#FAAD8E",
        "rgb": "rgb(250, 173, 142)",
        "hsl": "hsl(17, 92%, 77%)",
        "red": 250,
        "green": 173,
        "blue": 142,
        "hue": 17,
        "saturation": 92,
        "lightness": 77
    }, {
        "hex": "#FBB498",
        "rgb": "rgb(251, 180, 152)",
        "hsl": "hsl(17, 93%, 79%)",
        "red": 251,
        "green": 180,
        "blue": 152,
        "hue": 17,
        "saturation": 93,
        "lightness": 79
    }, {
        "hex": "#F85313",
        "rgb": "rgb(248, 83, 19)",
        "hsl": "hsl(17, 94%, 52%)",
        "red": 248,
        "green": 83,
        "blue": 19,
        "hue": 17,
        "saturation": 94,
        "lightness": 52
    }, {
        "hex": "#FEA887",
        "rgb": "rgb(254, 168, 135)",
        "hsl": "hsl(17, 98%, 76%)",
        "red": 254,
        "green": 168,
        "blue": 135,
        "hue": 17,
        "saturation": 98,
        "lightness": 76
    }, {
        "hex": "#EC4401",
        "rgb": "rgb(236, 68, 1)",
        "hsl": "hsl(17, 99%, 46%)",
        "red": 236,
        "green": 68,
        "blue": 1,
        "hue": 17,
        "saturation": 99,
        "lightness": 46
    }, {
        "hex": "#FE5412",
        "rgb": "rgb(254, 84, 18)",
        "hsl": "hsl(17, 99%, 53%)",
        "red": 254,
        "green": 84,
        "blue": 18,
        "hue": 17,
        "saturation": 99,
        "lightness": 53
    }, {
        "hex": "#FE7945",
        "rgb": "rgb(254, 121, 69)",
        "hsl": "hsl(17, 99%, 63%)",
        "red": 254,
        "green": 121,
        "blue": 69,
        "hue": 17,
        "saturation": 99,
        "lightness": 63
    }, {
        "hex": "#F84600",
        "rgb": "rgb(248, 70, 0)",
        "hsl": "hsl(17, 100%, 49%)",
        "red": 248,
        "green": 70,
        "blue": 0,
        "hue": 17,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FFB294",
        "rgb": "rgb(255, 178, 148)",
        "hsl": "hsl(17, 100%, 79%)",
        "red": 255,
        "green": 178,
        "blue": 148,
        "hue": 17,
        "saturation": 100,
        "lightness": 79
    }, {
        "hex": "#766862",
        "rgb": "rgb(118, 104, 98)",
        "hsl": "hsl(18, 9%, 42%)",
        "red": 118,
        "green": 104,
        "blue": 98,
        "hue": 18,
        "saturation": 9,
        "lightness": 42
    }, {
        "hex": "#29221F",
        "rgb": "rgb(41, 34, 31)",
        "hsl": "hsl(18, 14%, 14%)",
        "red": 41,
        "green": 34,
        "blue": 31,
        "hue": 18,
        "saturation": 14,
        "lightness": 14
    }, {
        "hex": "#BCA297",
        "rgb": "rgb(188, 162, 151)",
        "hsl": "hsl(18, 22%, 66%)",
        "red": 188,
        "green": 162,
        "blue": 151,
        "hue": 18,
        "saturation": 22,
        "lightness": 66
    }, {
        "hex": "#6A4A3C",
        "rgb": "rgb(106, 74, 60)",
        "hsl": "hsl(18, 28%, 33%)",
        "red": 106,
        "green": 74,
        "blue": 60,
        "hue": 18,
        "saturation": 28,
        "lightness": 33
    }, {
        "hex": "#B28774",
        "rgb": "rgb(178, 135, 116)",
        "hsl": "hsl(18, 29%, 58%)",
        "red": 178,
        "green": 135,
        "blue": 116,
        "hue": 18,
        "saturation": 29,
        "lightness": 58
    }, {
        "hex": "#5E3929",
        "rgb": "rgb(94, 57, 41)",
        "hsl": "hsl(18, 39%, 26%)",
        "red": 94,
        "green": 57,
        "blue": 41,
        "hue": 18,
        "saturation": 39,
        "lightness": 26
    }, {
        "hex": "#CC9E8A",
        "rgb": "rgb(204, 158, 138)",
        "hsl": "hsl(18, 39%, 67%)",
        "red": 204,
        "green": 158,
        "blue": 138,
        "hue": 18,
        "saturation": 39,
        "lightness": 67
    }, {
        "hex": "#D6A692",
        "rgb": "rgb(214, 166, 146)",
        "hsl": "hsl(18, 45%, 71%)",
        "red": 214,
        "green": 166,
        "blue": 146,
        "hue": 18,
        "saturation": 45,
        "lightness": 71
    }, {
        "hex": "#A04B26",
        "rgb": "rgb(160, 75, 38)",
        "hsl": "hsl(18, 62%, 39%)",
        "red": 160,
        "green": 75,
        "blue": 38,
        "hue": 18,
        "saturation": 62,
        "lightness": 39
    }, {
        "hex": "#EFCABA",
        "rgb": "rgb(239, 202, 186)",
        "hsl": "hsl(18, 62%, 83%)",
        "red": 239,
        "green": 202,
        "blue": 186,
        "hue": 18,
        "saturation": 62,
        "lightness": 83
    }, {
        "hex": "#E8AE96",
        "rgb": "rgb(232, 174, 150)",
        "hsl": "hsl(18, 64%, 75%)",
        "red": 232,
        "green": 174,
        "blue": 150,
        "hue": 18,
        "saturation": 64,
        "lightness": 75
    }, {
        "hex": "#D9764D",
        "rgb": "rgb(217, 118, 77)",
        "hsl": "hsl(18, 65%, 58%)",
        "red": 217,
        "green": 118,
        "blue": 77,
        "hue": 18,
        "saturation": 65,
        "lightness": 58
    }, {
        "hex": "#E39B7D",
        "rgb": "rgb(227, 155, 125)",
        "hsl": "hsl(18, 65%, 69%)",
        "red": 227,
        "green": 155,
        "blue": 125,
        "hue": 18,
        "saturation": 65,
        "lightness": 69
    }, {
        "hex": "#E9A385",
        "rgb": "rgb(233, 163, 133)",
        "hsl": "hsl(18, 69%, 72%)",
        "red": 233,
        "green": 163,
        "blue": 133,
        "hue": 18,
        "saturation": 69,
        "lightness": 72
    }, {
        "hex": "#A14016",
        "rgb": "rgb(161, 64, 22)",
        "hsl": "hsl(18, 76%, 36%)",
        "red": 161,
        "green": 64,
        "blue": 22,
        "hue": 18,
        "saturation": 76,
        "lightness": 36
    }, {
        "hex": "#F2B8A0",
        "rgb": "rgb(242, 184, 160)",
        "hsl": "hsl(18, 76%, 79%)",
        "red": 242,
        "green": 184,
        "blue": 160,
        "hue": 18,
        "saturation": 76,
        "lightness": 79
    }, {
        "hex": "#B34212",
        "rgb": "rgb(179, 66, 18)",
        "hsl": "hsl(18, 82%, 39%)",
        "red": 179,
        "green": 66,
        "blue": 18,
        "hue": 18,
        "saturation": 82,
        "lightness": 39
    }, {
        "hex": "#E8591C",
        "rgb": "rgb(232, 89, 28)",
        "hsl": "hsl(18, 82%, 51%)",
        "red": 232,
        "green": 89,
        "blue": 28,
        "hue": 18,
        "saturation": 82,
        "lightness": 51
    }, {
        "hex": "#FA7F4B",
        "rgb": "rgb(250, 127, 75)",
        "hsl": "hsl(18, 95%, 64%)",
        "red": 250,
        "green": 127,
        "blue": 75,
        "hue": 18,
        "saturation": 95,
        "lightness": 64
    }, {
        "hex": "#FB8351",
        "rgb": "rgb(251, 131, 81)",
        "hsl": "hsl(18, 96%, 65%)",
        "red": 251,
        "green": 131,
        "blue": 81,
        "hue": 18,
        "saturation": 96,
        "lightness": 65
    }, {
        "hex": "#FEBEA3",
        "rgb": "rgb(254, 190, 163)",
        "hsl": "hsl(18, 98%, 82%)",
        "red": 254,
        "green": 190,
        "blue": 163,
        "hue": 18,
        "saturation": 98,
        "lightness": 82
    }, {
        "hex": "#FE6C2B",
        "rgb": "rgb(254, 108, 43)",
        "hsl": "hsl(18, 99%, 58%)",
        "red": 254,
        "green": 108,
        "blue": 43,
        "hue": 18,
        "saturation": 99,
        "lightness": 58
    }, {
        "hex": "#FA4B00",
        "rgb": "rgb(250, 75, 0)",
        "hsl": "hsl(18, 100%, 49%)",
        "red": 250,
        "green": 75,
        "blue": 0,
        "hue": 18,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FFBDA1",
        "rgb": "rgb(255, 189, 161)",
        "hsl": "hsl(18, 100%, 82%)",
        "red": 255,
        "green": 189,
        "blue": 161,
        "hue": 18,
        "saturation": 100,
        "lightness": 82
    }, {
        "hex": "#FFCDB8",
        "rgb": "rgb(255, 205, 184)",
        "hsl": "hsl(18, 100%, 86%)",
        "red": 255,
        "green": 205,
        "blue": 184,
        "hue": 18,
        "saturation": 100,
        "lightness": 86
    }, {
        "hex": "#FFD2BF",
        "rgb": "rgb(255, 210, 191)",
        "hsl": "hsl(18, 100%, 87%)",
        "red": 255,
        "green": 210,
        "blue": 191,
        "hue": 18,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#FFE6DB",
        "rgb": "rgb(255, 230, 219)",
        "hsl": "hsl(18, 100%, 93%)",
        "red": 255,
        "green": 230,
        "blue": 219,
        "hue": 18,
        "saturation": 100,
        "lightness": 93
    }, {
        "hex": "#7D5D4E",
        "rgb": "rgb(125, 93, 78)",
        "hsl": "hsl(19, 23%, 40%)",
        "red": 125,
        "green": 93,
        "blue": 78,
        "hue": 19,
        "saturation": 23,
        "lightness": 40
    }, {
        "hex": "#D39679",
        "rgb": "rgb(211, 150, 121)",
        "hsl": "hsl(19, 51%, 65%)",
        "red": 211,
        "green": 150,
        "blue": 121,
        "hue": 19,
        "saturation": 51,
        "lightness": 65
    }, {
        "hex": "#F5D5C6",
        "rgb": "rgb(245, 213, 198)",
        "hsl": "hsl(19, 70%, 87%)",
        "red": 245,
        "green": 213,
        "blue": 198,
        "hue": 19,
        "saturation": 70,
        "lightness": 87
    }, {
        "hex": "#341405",
        "rgb": "rgb(52, 20, 5)",
        "hsl": "hsl(19, 82%, 11%)",
        "red": 52,
        "green": 20,
        "blue": 5,
        "hue": 19,
        "saturation": 82,
        "lightness": 11
    }, {
        "hex": "#EB6427",
        "rgb": "rgb(235, 100, 39)",
        "hsl": "hsl(19, 83%, 54%)",
        "red": 235,
        "green": 100,
        "blue": 39,
        "hue": 19,
        "saturation": 83,
        "lightness": 54
    }, {
        "hex": "#EE7E4C",
        "rgb": "rgb(238, 126, 76)",
        "hsl": "hsl(19, 83%, 62%)",
        "red": 238,
        "green": 126,
        "blue": 76,
        "hue": 19,
        "saturation": 83,
        "lightness": 62
    }, {
        "hex": "#F59B71",
        "rgb": "rgb(245, 155, 113)",
        "hsl": "hsl(19, 87%, 70%)",
        "red": 245,
        "green": 155,
        "blue": 113,
        "hue": 19,
        "saturation": 87,
        "lightness": 70
    }, {
        "hex": "#4C1B05",
        "rgb": "rgb(76, 27, 5)",
        "hsl": "hsl(19, 88%, 16%)",
        "red": 76,
        "green": 27,
        "blue": 5,
        "hue": 19,
        "saturation": 88,
        "lightness": 16
    }, {
        "hex": "#F8AF8C",
        "rgb": "rgb(248, 175, 140)",
        "hsl": "hsl(19, 89%, 76%)",
        "red": 248,
        "green": 175,
        "blue": 140,
        "hue": 19,
        "saturation": 89,
        "lightness": 76
    }, {
        "hex": "#F9A177",
        "rgb": "rgb(249, 161, 119)",
        "hsl": "hsl(19, 92%, 72%)",
        "red": 249,
        "green": 161,
        "blue": 119,
        "hue": 19,
        "saturation": 92,
        "lightness": 72
    }, {
        "hex": "#FA7F46",
        "rgb": "rgb(250, 127, 70)",
        "hsl": "hsl(19, 95%, 63%)",
        "red": 250,
        "green": 127,
        "blue": 70,
        "hue": 19,
        "saturation": 95,
        "lightness": 63
    }, {
        "hex": "#FC8E5B",
        "rgb": "rgb(252, 142, 91)",
        "hsl": "hsl(19, 96%, 67%)",
        "red": 252,
        "green": 142,
        "blue": 91,
        "hue": 19,
        "saturation": 96,
        "lightness": 67
    }, {
        "hex": "#FDAF8A",
        "rgb": "rgb(253, 175, 138)",
        "hsl": "hsl(19, 97%, 77%)",
        "red": 253,
        "green": 175,
        "blue": 138,
        "hue": 19,
        "saturation": 97,
        "lightness": 77
    }, {
        "hex": "#FC580C",
        "rgb": "rgb(252, 88, 12)",
        "hsl": "hsl(19, 98%, 52%)",
        "red": 252,
        "green": 88,
        "blue": 12,
        "hue": 19,
        "saturation": 98,
        "lightness": 52
    }, {
        "hex": "#230B00",
        "rgb": "rgb(35, 11, 0)",
        "hsl": "hsl(19, 100%, 7%)",
        "red": 35,
        "green": 11,
        "blue": 0,
        "hue": 19,
        "saturation": 100,
        "lightness": 7
    }, {
        "hex": "#FF824A",
        "rgb": "rgb(255, 130, 74)",
        "hsl": "hsl(19, 100%, 65%)",
        "red": 255,
        "green": 130,
        "blue": 74,
        "hue": 19,
        "saturation": 100,
        "lightness": 65
    }, {
        "hex": "#FF9563",
        "rgb": "rgb(255, 149, 99)",
        "hsl": "hsl(19, 100%, 69%)",
        "red": 255,
        "green": 149,
        "blue": 99,
        "hue": 19,
        "saturation": 100,
        "lightness": 69
    }, {
        "hex": "#FFB391",
        "rgb": "rgb(255, 179, 145)",
        "hsl": "hsl(19, 100%, 78%)",
        "red": 255,
        "green": 179,
        "blue": 145,
        "hue": 19,
        "saturation": 100,
        "lightness": 78
    }, {
        "hex": "#6E6662",
        "rgb": "rgb(110, 102, 98)",
        "hsl": "hsl(20, 6%, 41%)",
        "red": 110,
        "green": 102,
        "blue": 98,
        "hue": 20,
        "saturation": 6,
        "lightness": 41
    }, {
        "hex": "#574B45",
        "rgb": "rgb(87, 75, 69)",
        "hsl": "hsl(20, 12%, 31%)",
        "red": 87,
        "green": 75,
        "blue": 69,
        "hue": 20,
        "saturation": 12,
        "lightness": 31
    }, {
        "hex": "#85685A",
        "rgb": "rgb(133, 104, 90)",
        "hsl": "hsl(20, 19%, 44%)",
        "red": 133,
        "green": 104,
        "blue": 90,
        "hue": 20,
        "saturation": 19,
        "lightness": 44
    }, {
        "hex": "#83563F",
        "rgb": "rgb(131, 86, 63)",
        "hsl": "hsl(20, 35%, 38%)",
        "red": 131,
        "green": 86,
        "blue": 63,
        "hue": 20,
        "saturation": 35,
        "lightness": 38
    }, {
        "hex": "#A86B4C",
        "rgb": "rgb(168, 107, 76)",
        "hsl": "hsl(20, 38%, 48%)",
        "red": 168,
        "green": 107,
        "blue": 76,
        "hue": 20,
        "saturation": 38,
        "lightness": 48
    }, {
        "hex": "#C27B57",
        "rgb": "rgb(194, 123, 87)",
        "hsl": "hsl(20, 47%, 55%)",
        "red": 194,
        "green": 123,
        "blue": 87,
        "hue": 20,
        "saturation": 47,
        "lightness": 55
    }, {
        "hex": "#E6B39A",
        "rgb": "rgb(230, 179, 154)",
        "hsl": "hsl(20, 60%, 75%)",
        "red": 230,
        "green": 179,
        "blue": 154,
        "hue": 20,
        "saturation": 60,
        "lightness": 75
    }, {
        "hex": "#EECCBB",
        "rgb": "rgb(238, 204, 187)",
        "hsl": "hsl(20, 60%, 83%)",
        "red": 238,
        "green": 204,
        "blue": 187,
        "hue": 20,
        "saturation": 60,
        "lightness": 83
    }, {
        "hex": "#4A2512",
        "rgb": "rgb(74, 37, 18)",
        "hsl": "hsl(20, 61%, 18%)",
        "red": 74,
        "green": 37,
        "blue": 18,
        "hue": 20,
        "saturation": 61,
        "lightness": 18
    }, {
        "hex": "#DC8051",
        "rgb": "rgb(220, 128, 81)",
        "hsl": "hsl(20, 67%, 59%)",
        "red": 220,
        "green": 128,
        "blue": 81,
        "hue": 20,
        "saturation": 67,
        "lightness": 59
    }, {
        "hex": "#D96831",
        "rgb": "rgb(217, 104, 49)",
        "hsl": "hsl(20, 69%, 52%)",
        "red": 217,
        "green": 104,
        "blue": 49,
        "hue": 20,
        "saturation": 69,
        "lightness": 52
    }, {
        "hex": "#DE733E",
        "rgb": "rgb(222, 115, 62)",
        "hsl": "hsl(20, 71%, 56%)",
        "red": 222,
        "green": 115,
        "blue": 62,
        "hue": 20,
        "saturation": 71,
        "lightness": 56
    }, {
        "hex": "#F0C0A8",
        "rgb": "rgb(240, 192, 168)",
        "hsl": "hsl(20, 71%, 80%)",
        "red": 240,
        "green": 192,
        "blue": 168,
        "hue": 20,
        "saturation": 71,
        "lightness": 80
    }, {
        "hex": "#EDAB8B",
        "rgb": "rgb(237, 171, 139)",
        "hsl": "hsl(20, 73%, 74%)",
        "red": 237,
        "green": 171,
        "blue": 139,
        "hue": 20,
        "saturation": 73,
        "lightness": 74
    }, {
        "hex": "#61290E",
        "rgb": "rgb(97, 41, 14)",
        "hsl": "hsl(20, 75%, 22%)",
        "red": 97,
        "green": 41,
        "blue": 14,
        "hue": 20,
        "saturation": 75,
        "lightness": 22
    }, {
        "hex": "#A84818",
        "rgb": "rgb(168, 72, 24)",
        "hsl": "hsl(20, 75%, 38%)",
        "red": 168,
        "green": 72,
        "blue": 24,
        "hue": 20,
        "saturation": 75,
        "lightness": 38
    }, {
        "hex": "#EEAA88",
        "rgb": "rgb(238, 170, 136)",
        "hsl": "hsl(20, 75%, 73%)",
        "red": 238,
        "green": 170,
        "blue": 136,
        "hue": 20,
        "saturation": 75,
        "lightness": 73
    }, {
        "hex": "#EB9064",
        "rgb": "rgb(235, 144, 100)",
        "hsl": "hsl(20, 77%, 66%)",
        "red": 235,
        "green": 144,
        "blue": 100,
        "hue": 20,
        "saturation": 77,
        "lightness": 66
    }, {
        "hex": "#301406",
        "rgb": "rgb(48, 20, 6)",
        "hsl": "hsl(20, 78%, 11%)",
        "red": 48,
        "green": 20,
        "blue": 6,
        "hue": 20,
        "saturation": 78,
        "lightness": 11
    }, {
        "hex": "#EA804C",
        "rgb": "rgb(234, 128, 76)",
        "hsl": "hsl(20, 79%, 61%)",
        "red": 234,
        "green": 128,
        "blue": 76,
        "hue": 20,
        "saturation": 79,
        "lightness": 61
    }, {
        "hex": "#EB783F",
        "rgb": "rgb(235, 120, 63)",
        "hsl": "hsl(20, 81%, 58%)",
        "red": 235,
        "green": 120,
        "blue": 63,
        "hue": 20,
        "saturation": 81,
        "lightness": 58
    }, {
        "hex": "#ED834E",
        "rgb": "rgb(237, 131, 78)",
        "hsl": "hsl(20, 82%, 62%)",
        "red": 237,
        "green": 131,
        "blue": 78,
        "hue": 20,
        "saturation": 82,
        "lightness": 62
    }, {
        "hex": "#F5B494",
        "rgb": "rgb(245, 180, 148)",
        "hsl": "hsl(20, 83%, 77%)",
        "red": 245,
        "green": 180,
        "blue": 148,
        "hue": 20,
        "saturation": 83,
        "lightness": 77
    }, {
        "hex": "#EC6C2B",
        "rgb": "rgb(236, 108, 43)",
        "hsl": "hsl(20, 84%, 55%)",
        "red": 236,
        "green": 108,
        "blue": 43,
        "hue": 20,
        "saturation": 84,
        "lightness": 55
    }, {
        "hex": "#BA460D",
        "rgb": "rgb(186, 70, 13)",
        "hsl": "hsl(20, 87%, 39%)",
        "red": 186,
        "green": 70,
        "blue": 13,
        "hue": 20,
        "saturation": 87,
        "lightness": 39
    }, {
        "hex": "#F27435",
        "rgb": "rgb(242, 116, 53)",
        "hsl": "hsl(20, 88%, 58%)",
        "red": 242,
        "green": 116,
        "blue": 53,
        "hue": 20,
        "saturation": 88,
        "lightness": 58
    }, {
        "hex": "#C94B0C",
        "rgb": "rgb(201, 75, 12)",
        "hsl": "hsl(20, 89%, 42%)",
        "red": 201,
        "green": 75,
        "blue": 12,
        "hue": 20,
        "saturation": 89,
        "lightness": 42
    }, {
        "hex": "#F56217",
        "rgb": "rgb(245, 98, 23)",
        "hsl": "hsl(20, 92%, 53%)",
        "red": 245,
        "green": 98,
        "blue": 23,
        "hue": 20,
        "saturation": 92,
        "lightness": 53
    }, {
        "hex": "#F56218",
        "rgb": "rgb(245, 98, 24)",
        "hsl": "hsl(20, 92%, 53%)",
        "red": 245,
        "green": 98,
        "blue": 24,
        "hue": 20,
        "saturation": 92,
        "lightness": 53
    }, {
        "hex": "#F77C3E",
        "rgb": "rgb(247, 124, 62)",
        "hsl": "hsl(20, 92%, 61%)",
        "red": 247,
        "green": 124,
        "blue": 62,
        "hue": 20,
        "saturation": 92,
        "lightness": 61
    }, {
        "hex": "#F78145",
        "rgb": "rgb(247, 129, 69)",
        "hsl": "hsl(20, 92%, 62%)",
        "red": 247,
        "green": 129,
        "blue": 69,
        "hue": 20,
        "saturation": 92,
        "lightness": 62
    }, {
        "hex": "#F76E2A",
        "rgb": "rgb(247, 110, 42)",
        "hsl": "hsl(20, 93%, 57%)",
        "red": 247,
        "green": 110,
        "blue": 42,
        "hue": 20,
        "saturation": 93,
        "lightness": 57
    }, {
        "hex": "#FE9C6B",
        "rgb": "rgb(254, 156, 107)",
        "hsl": "hsl(20, 99%, 71%)",
        "red": 254,
        "green": 156,
        "blue": 107,
        "hue": 20,
        "saturation": 99,
        "lightness": 71
    }, {
        "hex": "#481800",
        "rgb": "rgb(72, 24, 0)",
        "hsl": "hsl(20, 100%, 14%)",
        "red": 72,
        "green": 24,
        "blue": 0,
        "hue": 20,
        "saturation": 100,
        "lightness": 14
    }, {
        "hex": "#FF6E27",
        "rgb": "rgb(255, 110, 39)",
        "hsl": "hsl(20, 100%, 58%)",
        "red": 255,
        "green": 110,
        "blue": 39,
        "hue": 20,
        "saturation": 100,
        "lightness": 58
    }, {
        "hex": "#FF9966",
        "rgb": "rgb(255, 153, 102)",
        "hsl": "hsl(20, 100%, 70%)",
        "red": 255,
        "green": 153,
        "blue": 102,
        "hue": 20,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#FFB48F",
        "rgb": "rgb(255, 180, 143)",
        "hsl": "hsl(20, 100%, 78%)",
        "red": 255,
        "green": 180,
        "blue": 143,
        "hue": 20,
        "saturation": 100,
        "lightness": 78
    }, {
        "hex": "#FFC4A6",
        "rgb": "rgb(255, 196, 166)",
        "hsl": "hsl(20, 100%, 83%)",
        "red": 255,
        "green": 196,
        "blue": 166,
        "hue": 20,
        "saturation": 100,
        "lightness": 83
    }, {
        "hex": "#D6C3B9",
        "rgb": "rgb(214, 195, 185)",
        "hsl": "hsl(21, 26%, 78%)",
        "red": 214,
        "green": 195,
        "blue": 185,
        "hue": 21,
        "saturation": 26,
        "lightness": 78
    }, {
        "hex": "#C5A898",
        "rgb": "rgb(197, 168, 152)",
        "hsl": "hsl(21, 28%, 68%)",
        "red": 197,
        "green": 168,
        "blue": 152,
        "hue": 21,
        "saturation": 28,
        "lightness": 68
    }, {
        "hex": "#94654C",
        "rgb": "rgb(148, 101, 76)",
        "hsl": "hsl(21, 32%, 44%)",
        "red": 148,
        "green": 101,
        "blue": 76,
        "hue": 21,
        "saturation": 32,
        "lightness": 44
    }, {
        "hex": "#D3AD98",
        "rgb": "rgb(211, 173, 152)",
        "hsl": "hsl(21, 40%, 71%)",
        "red": 211,
        "green": 173,
        "blue": 152,
        "hue": 21,
        "saturation": 40,
        "lightness": 71
    }, {
        "hex": "#CC9476",
        "rgb": "rgb(204, 148, 118)",
        "hsl": "hsl(21, 46%, 63%)",
        "red": 204,
        "green": 148,
        "blue": 118,
        "hue": 21,
        "saturation": 46,
        "lightness": 63
    }, {
        "hex": "#E7A17A",
        "rgb": "rgb(231, 161, 122)",
        "hsl": "hsl(21, 69%, 69%)",
        "red": 231,
        "green": 161,
        "blue": 122,
        "hue": 21,
        "saturation": 69,
        "lightness": 69
    }, {
        "hex": "#F2A176",
        "rgb": "rgb(242, 161, 118)",
        "hsl": "hsl(21, 83%, 71%)",
        "red": 242,
        "green": 161,
        "blue": 118,
        "hue": 21,
        "saturation": 83,
        "lightness": 71
    }, {
        "hex": "#F6B794",
        "rgb": "rgb(246, 183, 148)",
        "hsl": "hsl(21, 84%, 77%)",
        "red": 246,
        "green": 183,
        "blue": 148,
        "hue": 21,
        "saturation": 84,
        "lightness": 77
    }, {
        "hex": "#2C1001",
        "rgb": "rgb(44, 16, 1)",
        "hsl": "hsl(21, 96%, 9%)",
        "red": 44,
        "green": 16,
        "blue": 1,
        "hue": 21,
        "saturation": 96,
        "lightness": 9
    }, {
        "hex": "#FB6F24",
        "rgb": "rgb(251, 111, 36)",
        "hsl": "hsl(21, 96%, 56%)",
        "red": 251,
        "green": 111,
        "blue": 36,
        "hue": 21,
        "saturation": 96,
        "lightness": 56
    }, {
        "hex": "#F15500",
        "rgb": "rgb(241, 85, 0)",
        "hsl": "hsl(21, 100%, 47%)",
        "red": 241,
        "green": 85,
        "blue": 0,
        "hue": 21,
        "saturation": 100,
        "lightness": 47
    }, {
        "hex": "#FFDBC8",
        "rgb": "rgb(255, 219, 200)",
        "hsl": "hsl(21, 100%, 89%)",
        "red": 255,
        "green": 219,
        "blue": 200,
        "hue": 21,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#99928E",
        "rgb": "rgb(153, 146, 142)",
        "hsl": "hsl(22, 5%, 58%)",
        "red": 153,
        "green": 146,
        "blue": 142,
        "hue": 22,
        "saturation": 5,
        "lightness": 58
    }, {
        "hex": "#59483E",
        "rgb": "rgb(89, 72, 62)",
        "hsl": "hsl(22, 18%, 30%)",
        "red": 89,
        "green": 72,
        "blue": 62,
        "hue": 22,
        "saturation": 18,
        "lightness": 30
    }, {
        "hex": "#705647",
        "rgb": "rgb(112, 86, 71)",
        "hsl": "hsl(22, 22%, 36%)",
        "red": 112,
        "green": 86,
        "blue": 71,
        "hue": 22,
        "saturation": 22,
        "lightness": 36
    }, {
        "hex": "#A5826E",
        "rgb": "rgb(165, 130, 110)",
        "hsl": "hsl(22, 23%, 54%)",
        "red": 165,
        "green": 130,
        "blue": 110,
        "hue": 22,
        "saturation": 23,
        "lightness": 54
    }, {
        "hex": "#D7C7BE",
        "rgb": "rgb(215, 199, 190)",
        "hsl": "hsl(22, 24%, 79%)",
        "red": 215,
        "green": 199,
        "blue": 190,
        "hue": 22,
        "saturation": 24,
        "lightness": 79
    }, {
        "hex": "#805841",
        "rgb": "rgb(128, 88, 65)",
        "hsl": "hsl(22, 33%, 38%)",
        "red": 128,
        "green": 88,
        "blue": 65,
        "hue": 22,
        "saturation": 33,
        "lightness": 38
    }, {
        "hex": "#241811",
        "rgb": "rgb(36, 24, 17)",
        "hsl": "hsl(22, 36%, 10%)",
        "red": 36,
        "green": 24,
        "blue": 17,
        "hue": 22,
        "saturation": 36,
        "lightness": 10
    }, {
        "hex": "#774F38",
        "rgb": "rgb(119, 79, 56)",
        "hsl": "hsl(22, 36%, 34%)",
        "red": 119,
        "green": 79,
        "blue": 56,
        "hue": 22,
        "saturation": 36,
        "lightness": 34
    }, {
        "hex": "#D9AB91",
        "rgb": "rgb(217, 171, 145)",
        "hsl": "hsl(22, 49%, 71%)",
        "red": 217,
        "green": 171,
        "blue": 145,
        "hue": 22,
        "saturation": 49,
        "lightness": 71
    }, {
        "hex": "#D99973",
        "rgb": "rgb(217, 153, 115)",
        "hsl": "hsl(22, 57%, 65%)",
        "red": 217,
        "green": 153,
        "blue": 115,
        "hue": 22,
        "saturation": 57,
        "lightness": 65
    }, {
        "hex": "#CF6123",
        "rgb": "rgb(207, 97, 35)",
        "hsl": "hsl(22, 71%, 47%)",
        "red": 207,
        "green": 97,
        "blue": 35,
        "hue": 22,
        "saturation": 71,
        "lightness": 47
    }, {
        "hex": "#F0B593",
        "rgb": "rgb(240, 181, 147)",
        "hsl": "hsl(22, 76%, 76%)",
        "red": 240,
        "green": 181,
        "blue": 147,
        "hue": 22,
        "saturation": 76,
        "lightness": 76
    }, {
        "hex": "#DF621C",
        "rgb": "rgb(223, 98, 28)",
        "hsl": "hsl(22, 78%, 49%)",
        "red": 223,
        "green": 98,
        "blue": 28,
        "hue": 22,
        "saturation": 78,
        "lightness": 49
    }, {
        "hex": "#E46D29",
        "rgb": "rgb(228, 109, 41)",
        "hsl": "hsl(22, 78%, 53%)",
        "red": 228,
        "green": 109,
        "blue": 41,
        "hue": 22,
        "saturation": 78,
        "lightness": 53
    }, {
        "hex": "#FEF9F6",
        "rgb": "rgb(254, 249, 246)",
        "hsl": "hsl(22, 80%, 98%)",
        "red": 254,
        "green": 249,
        "blue": 246,
        "hue": 22,
        "saturation": 80,
        "lightness": 98
    }, {
        "hex": "#240F03",
        "rgb": "rgb(36, 15, 3)",
        "hsl": "hsl(22, 85%, 8%)",
        "red": 36,
        "green": 15,
        "blue": 3,
        "hue": 22,
        "saturation": 85,
        "lightness": 8
    }, {
        "hex": "#F7803C",
        "rgb": "rgb(247, 128, 60)",
        "hsl": "hsl(22, 92%, 60%)",
        "red": 247,
        "green": 128,
        "blue": 60,
        "hue": 22,
        "saturation": 92,
        "lightness": 60
    }, {
        "hex": "#FBBE9A",
        "rgb": "rgb(251, 190, 154)",
        "hsl": "hsl(22, 92%, 79%)",
        "red": 251,
        "green": 190,
        "blue": 154,
        "hue": 22,
        "saturation": 92,
        "lightness": 79
    }, {
        "hex": "#FC8D4D",
        "rgb": "rgb(252, 141, 77)",
        "hsl": "hsl(22, 97%, 65%)",
        "red": 252,
        "green": 141,
        "blue": 77,
        "hue": 22,
        "saturation": 97,
        "lightness": 65
    }, {
        "hex": "#FF823A",
        "rgb": "rgb(255, 130, 58)",
        "hsl": "hsl(22, 100%, 61%)",
        "red": 255,
        "green": 130,
        "blue": 58,
        "hue": 22,
        "saturation": 100,
        "lightness": 61
    }, {
        "hex": "#FF985E",
        "rgb": "rgb(255, 152, 94)",
        "hsl": "hsl(22, 100%, 68%)",
        "red": 255,
        "green": 152,
        "blue": 94,
        "hue": 22,
        "saturation": 100,
        "lightness": 68
    }, {
        "hex": "#FF995E",
        "rgb": "rgb(255, 153, 94)",
        "hsl": "hsl(22, 100%, 68%)",
        "red": 255,
        "green": 153,
        "blue": 94,
        "hue": 22,
        "saturation": 100,
        "lightness": 68
    }, {
        "hex": "#FFC6A5",
        "rgb": "rgb(255, 198, 165)",
        "hsl": "hsl(22, 100%, 82%)",
        "red": 255,
        "green": 198,
        "blue": 165,
        "hue": 22,
        "saturation": 100,
        "lightness": 82
    }, {
        "hex": "#998B82",
        "rgb": "rgb(153, 139, 130)",
        "hsl": "hsl(23, 10%, 55%)",
        "red": 153,
        "green": 139,
        "blue": 130,
        "hue": 23,
        "saturation": 10,
        "lightness": 55
    }, {
        "hex": "#4D433D",
        "rgb": "rgb(77, 67, 61)",
        "hsl": "hsl(23, 12%, 27%)",
        "red": 77,
        "green": 67,
        "blue": 61,
        "hue": 23,
        "saturation": 12,
        "lightness": 27
    }, {
        "hex": "#745E50",
        "rgb": "rgb(116, 94, 80)",
        "hsl": "hsl(23, 18%, 38%)",
        "red": 116,
        "green": 94,
        "blue": 80,
        "hue": 23,
        "saturation": 18,
        "lightness": 38
    }, {
        "hex": "#5C493D",
        "rgb": "rgb(92, 73, 61)",
        "hsl": "hsl(23, 20%, 30%)",
        "red": 92,
        "green": 73,
        "blue": 61,
        "hue": 23,
        "saturation": 20,
        "lightness": 30
    }, {
        "hex": "#D4C7BF",
        "rgb": "rgb(212, 199, 191)",
        "hsl": "hsl(23, 20%, 79%)",
        "red": 212,
        "green": 199,
        "blue": 191,
        "hue": 23,
        "saturation": 20,
        "lightness": 79
    }, {
        "hex": "#554236",
        "rgb": "rgb(85, 66, 54)",
        "hsl": "hsl(23, 22%, 27%)",
        "red": 85,
        "green": 66,
        "blue": 54,
        "hue": 23,
        "saturation": 22,
        "lightness": 27
    }, {
        "hex": "#C9AD9B",
        "rgb": "rgb(201, 173, 155)",
        "hsl": "hsl(23, 30%, 70%)",
        "red": 201,
        "green": 173,
        "blue": 155,
        "hue": 23,
        "saturation": 30,
        "lightness": 70
    }, {
        "hex": "#5E412F",
        "rgb": "rgb(94, 65, 47)",
        "hsl": "hsl(23, 33%, 28%)",
        "red": 94,
        "green": 65,
        "blue": 47,
        "hue": 23,
        "saturation": 33,
        "lightness": 28
    }, {
        "hex": "#9E6D4E",
        "rgb": "rgb(158, 109, 78)",
        "hsl": "hsl(23, 34%, 46%)",
        "red": 158,
        "green": 109,
        "blue": 78,
        "hue": 23,
        "saturation": 34,
        "lightness": 46
    }, {
        "hex": "#D1B4A2",
        "rgb": "rgb(209, 180, 162)",
        "hsl": "hsl(23, 34%, 73%)",
        "red": 209,
        "green": 180,
        "blue": 162,
        "hue": 23,
        "saturation": 34,
        "lightness": 73
    }, {
        "hex": "#DBC4B6",
        "rgb": "rgb(219, 196, 182)",
        "hsl": "hsl(23, 34%, 79%)",
        "red": 219,
        "green": 196,
        "blue": 182,
        "hue": 23,
        "saturation": 34,
        "lightness": 79
    }, {
        "hex": "#DEB297",
        "rgb": "rgb(222, 178, 151)",
        "hsl": "hsl(23, 52%, 73%)",
        "red": 222,
        "green": 178,
        "blue": 151,
        "hue": 23,
        "saturation": 52,
        "lightness": 73
    }, {
        "hex": "#E2AA87",
        "rgb": "rgb(226, 170, 135)",
        "hsl": "hsl(23, 61%, 71%)",
        "red": 226,
        "green": 170,
        "blue": 135,
        "hue": 23,
        "saturation": 61,
        "lightness": 71
    }, {
        "hex": "#F5E0D3",
        "rgb": "rgb(245, 224, 211)",
        "hsl": "hsl(23, 63%, 89%)",
        "red": 245,
        "green": 224,
        "blue": 211,
        "hue": 23,
        "saturation": 63,
        "lightness": 89
    }, {
        "hex": "#E6A37A",
        "rgb": "rgb(230, 163, 122)",
        "hsl": "hsl(23, 68%, 69%)",
        "red": 230,
        "green": 163,
        "blue": 122,
        "hue": 23,
        "saturation": 68,
        "lightness": 69
    }, {
        "hex": "#F7DECE",
        "rgb": "rgb(247, 222, 206)",
        "hsl": "hsl(23, 72%, 89%)",
        "red": 247,
        "green": 222,
        "blue": 206,
        "hue": 23,
        "saturation": 72,
        "lightness": 89
    }, {
        "hex": "#2C1507",
        "rgb": "rgb(44, 21, 7)",
        "hsl": "hsl(23, 73%, 10%)",
        "red": 44,
        "green": 21,
        "blue": 7,
        "hue": 23,
        "saturation": 73,
        "lightness": 10
    }, {
        "hex": "#E4844A",
        "rgb": "rgb(228, 132, 74)",
        "hsl": "hsl(23, 74%, 59%)",
        "red": 228,
        "green": 132,
        "blue": 74,
        "hue": 23,
        "saturation": 74,
        "lightness": 59
    }, {
        "hex": "#EB9E6E",
        "rgb": "rgb(235, 158, 110)",
        "hsl": "hsl(23, 76%, 68%)",
        "red": 235,
        "green": 158,
        "blue": 110,
        "hue": 23,
        "saturation": 76,
        "lightness": 68
    }, {
        "hex": "#E57C3A",
        "rgb": "rgb(229, 124, 58)",
        "hsl": "hsl(23, 77%, 56%)",
        "red": 229,
        "green": 124,
        "blue": 58,
        "hue": 23,
        "saturation": 77,
        "lightness": 56
    }, {
        "hex": "#D7621A",
        "rgb": "rgb(215, 98, 26)",
        "hsl": "hsl(23, 78%, 47%)",
        "red": 215,
        "green": 98,
        "blue": 26,
        "hue": 23,
        "saturation": 78,
        "lightness": 47
    }, {
        "hex": "#CC5B14",
        "rgb": "rgb(204, 91, 20)",
        "hsl": "hsl(23, 82%, 44%)",
        "red": 204,
        "green": 91,
        "blue": 20,
        "hue": 23,
        "saturation": 82,
        "lightness": 44
    }, {
        "hex": "#F0823F",
        "rgb": "rgb(240, 130, 63)",
        "hsl": "hsl(23, 86%, 59%)",
        "red": 240,
        "green": 130,
        "blue": 63,
        "hue": 23,
        "saturation": 86,
        "lightness": 59
    }, {
        "hex": "#F28A49",
        "rgb": "rgb(242, 138, 73)",
        "hsl": "hsl(23, 87%, 62%)",
        "red": 242,
        "green": 138,
        "blue": 73,
        "hue": 23,
        "saturation": 87,
        "lightness": 62
    }, {
        "hex": "#F7A472",
        "rgb": "rgb(247, 164, 114)",
        "hsl": "hsl(23, 89%, 71%)",
        "red": 247,
        "green": 164,
        "blue": 114,
        "hue": 23,
        "saturation": 89,
        "lightness": 71
    }, {
        "hex": "#EB5F07",
        "rgb": "rgb(235, 95, 7)",
        "hsl": "hsl(23, 94%, 47%)",
        "red": 235,
        "green": 95,
        "blue": 7,
        "hue": 23,
        "saturation": 94,
        "lightness": 47
    }, {
        "hex": "#FDD1B6",
        "rgb": "rgb(253, 209, 182)",
        "hsl": "hsl(23, 95%, 85%)",
        "red": 253,
        "green": 209,
        "blue": 182,
        "hue": 23,
        "saturation": 95,
        "lightness": 85
    }, {
        "hex": "#FEBF97",
        "rgb": "rgb(254, 191, 151)",
        "hsl": "hsl(23, 98%, 79%)",
        "red": 254,
        "green": 191,
        "blue": 151,
        "hue": 23,
        "saturation": 98,
        "lightness": 79
    }, {
        "hex": "#FEBF97",
        "rgb": "rgb(254, 191, 151)",
        "hsl": "hsl(23, 98%, 79%)",
        "red": 254,
        "green": 191,
        "blue": 151,
        "hue": 23,
        "saturation": 98,
        "lightness": 79
    }, {
        "hex": "#CC4E00",
        "rgb": "rgb(204, 78, 0)",
        "hsl": "hsl(23, 100%, 40%)",
        "red": 204,
        "green": 78,
        "blue": 0,
        "hue": 23,
        "saturation": 100,
        "lightness": 40
    }, {
        "hex": "#FF8030",
        "rgb": "rgb(255, 128, 48)",
        "hsl": "hsl(23, 100%, 59%)",
        "red": 255,
        "green": 128,
        "blue": 48,
        "hue": 23,
        "saturation": 100,
        "lightness": 59
    }, {
        "hex": "#FFB88C",
        "rgb": "rgb(255, 184, 140)",
        "hsl": "hsl(23, 100%, 77%)",
        "red": 255,
        "green": 184,
        "blue": 140,
        "hue": 23,
        "saturation": 100,
        "lightness": 77
    }, {
        "hex": "#FFD0B3",
        "rgb": "rgb(255, 208, 179)",
        "hsl": "hsl(23, 100%, 85%)",
        "red": 255,
        "green": 208,
        "blue": 179,
        "hue": 23,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#937460",
        "rgb": "rgb(147, 116, 96)",
        "hsl": "hsl(24, 21%, 48%)",
        "red": 147,
        "green": 116,
        "blue": 96,
        "hue": 24,
        "saturation": 21,
        "lightness": 48
    }, {
        "hex": "#A17457",
        "rgb": "rgb(161, 116, 87)",
        "hsl": "hsl(24, 30%, 49%)",
        "red": 161,
        "green": 116,
        "blue": 87,
        "hue": 24,
        "saturation": 30,
        "lightness": 49
    }, {
        "hex": "#D1B39F",
        "rgb": "rgb(209, 179, 159)",
        "hsl": "hsl(24, 35%, 72%)",
        "red": 209,
        "green": 179,
        "blue": 159,
        "hue": 24,
        "saturation": 35,
        "lightness": 72
    }, {
        "hex": "#EDD5C5",
        "rgb": "rgb(237, 213, 197)",
        "hsl": "hsl(24, 53%, 85%)",
        "red": 237,
        "green": 213,
        "blue": 197,
        "hue": 24,
        "saturation": 53,
        "lightness": 85
    }, {
        "hex": "#DBA887",
        "rgb": "rgb(219, 168, 135)",
        "hsl": "hsl(24, 54%, 69%)",
        "red": 219,
        "green": 168,
        "blue": 135,
        "hue": 24,
        "saturation": 54,
        "lightness": 69
    }, {
        "hex": "#EFD5C4",
        "rgb": "rgb(239, 213, 196)",
        "hsl": "hsl(24, 57%, 85%)",
        "red": 239,
        "green": 213,
        "blue": 196,
        "hue": 24,
        "saturation": 57,
        "lightness": 85
    }, {
        "hex": "#E7BFA5",
        "rgb": "rgb(231, 191, 165)",
        "hsl": "hsl(24, 58%, 78%)",
        "red": 231,
        "green": 191,
        "blue": 165,
        "hue": 24,
        "saturation": 58,
        "lightness": 78
    }, {
        "hex": "#EFD2BE",
        "rgb": "rgb(239, 210, 190)",
        "hsl": "hsl(24, 60%, 84%)",
        "red": 239,
        "green": 210,
        "blue": 190,
        "hue": 24,
        "saturation": 60,
        "lightness": 84
    }, {
        "hex": "#E6AC84",
        "rgb": "rgb(230, 172, 132)",
        "hsl": "hsl(24, 66%, 71%)",
        "red": 230,
        "green": 172,
        "blue": 132,
        "hue": 24,
        "saturation": 66,
        "lightness": 71
    }, {
        "hex": "#E19563",
        "rgb": "rgb(225, 149, 99)",
        "hsl": "hsl(24, 68%, 64%)",
        "red": 225,
        "green": 149,
        "blue": 99,
        "hue": 24,
        "saturation": 68,
        "lightness": 64
    }, {
        "hex": "#EB9961",
        "rgb": "rgb(235, 153, 97)",
        "hsl": "hsl(24, 78%, 65%)",
        "red": 235,
        "green": 153,
        "blue": 97,
        "hue": 24,
        "saturation": 78,
        "lightness": 65
    }, {
        "hex": "#D46419",
        "rgb": "rgb(212, 100, 25)",
        "hsl": "hsl(24, 79%, 46%)",
        "red": 212,
        "green": 100,
        "blue": 25,
        "hue": 24,
        "saturation": 79,
        "lightness": 46
    }, {
        "hex": "#DB6516",
        "rgb": "rgb(219, 101, 22)",
        "hsl": "hsl(24, 82%, 47%)",
        "red": 219,
        "green": 101,
        "blue": 22,
        "hue": 24,
        "saturation": 82,
        "lightness": 47
    }, {
        "hex": "#E86E1C",
        "rgb": "rgb(232, 110, 28)",
        "hsl": "hsl(24, 82%, 51%)",
        "red": 232,
        "green": 110,
        "blue": 28,
        "hue": 24,
        "saturation": 82,
        "lightness": 51
    }, {
        "hex": "#F4B58A",
        "rgb": "rgb(244, 181, 138)",
        "hsl": "hsl(24, 83%, 75%)",
        "red": 244,
        "green": 181,
        "blue": 138,
        "hue": 24,
        "saturation": 83,
        "lightness": 75
    }, {
        "hex": "#F1731F",
        "rgb": "rgb(241, 115, 31)",
        "hsl": "hsl(24, 88%, 53%)",
        "red": 241,
        "green": 115,
        "blue": 31,
        "hue": 24,
        "saturation": 88,
        "lightness": 53
    }, {
        "hex": "#F49859",
        "rgb": "rgb(244, 152, 89)",
        "hsl": "hsl(24, 88%, 65%)",
        "red": 244,
        "green": 152,
        "blue": 89,
        "hue": 24,
        "saturation": 88,
        "lightness": 65
    }, {
        "hex": "#F6A570",
        "rgb": "rgb(246, 165, 112)",
        "hsl": "hsl(24, 88%, 70%)",
        "red": 246,
        "green": 165,
        "blue": 112,
        "hue": 24,
        "saturation": 88,
        "lightness": 70
    }, {
        "hex": "#F6A168",
        "rgb": "rgb(246, 161, 104)",
        "hsl": "hsl(24, 89%, 69%)",
        "red": 246,
        "green": 161,
        "blue": 104,
        "hue": 24,
        "saturation": 89,
        "lightness": 69
    }, {
        "hex": "#F7A168",
        "rgb": "rgb(247, 161, 104)",
        "hsl": "hsl(24, 90%, 69%)",
        "red": 247,
        "green": 161,
        "blue": 104,
        "hue": 24,
        "saturation": 90,
        "lightness": 69
    }, {
        "hex": "#FCDDC8",
        "rgb": "rgb(252, 221, 200)",
        "hsl": "hsl(24, 90%, 89%)",
        "red": 252,
        "green": 221,
        "blue": 200,
        "hue": 24,
        "saturation": 90,
        "lightness": 89
    }, {
        "hex": "#F77014",
        "rgb": "rgb(247, 112, 20)",
        "hsl": "hsl(24, 93%, 52%)",
        "red": 247,
        "green": 112,
        "blue": 20,
        "hue": 24,
        "saturation": 93,
        "lightness": 52
    }, {
        "hex": "#F77825",
        "rgb": "rgb(247, 120, 37)",
        "hsl": "hsl(24, 93%, 56%)",
        "red": 247,
        "green": 120,
        "blue": 37,
        "hue": 24,
        "saturation": 93,
        "lightness": 56
    }, {
        "hex": "#FA8331",
        "rgb": "rgb(250, 131, 49)",
        "hsl": "hsl(24, 95%, 59%)",
        "red": 250,
        "green": 131,
        "blue": 49,
        "hue": 24,
        "saturation": 95,
        "lightness": 59
    }, {
        "hex": "#FB9553",
        "rgb": "rgb(251, 149, 83)",
        "hsl": "hsl(24, 95%, 65%)",
        "red": 251,
        "green": 149,
        "blue": 83,
        "hue": 24,
        "saturation": 95,
        "lightness": 65
    }, {
        "hex": "#FC6B0A",
        "rgb": "rgb(252, 107, 10)",
        "hsl": "hsl(24, 98%, 51%)",
        "red": 252,
        "green": 107,
        "blue": 10,
        "hue": 24,
        "saturation": 98,
        "lightness": 51
    }, {
        "hex": "#9E3F00",
        "rgb": "rgb(158, 63, 0)",
        "hsl": "hsl(24, 100%, 31%)",
        "red": 158,
        "green": 63,
        "blue": 0,
        "hue": 24,
        "saturation": 100,
        "lightness": 31
    }, {
        "hex": "#FF6600",
        "rgb": "rgb(255, 102, 0)",
        "hsl": "hsl(24, 100%, 50%)",
        "red": 255,
        "green": 102,
        "blue": 0,
        "hue": 24,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF7A24",
        "rgb": "rgb(255, 122, 36)",
        "hsl": "hsl(24, 100%, 57%)",
        "red": 255,
        "green": 122,
        "blue": 36,
        "hue": 24,
        "saturation": 100,
        "lightness": 57
    }, {
        "hex": "#FF9C5B",
        "rgb": "rgb(255, 156, 91)",
        "hsl": "hsl(24, 100%, 68%)",
        "red": 255,
        "green": 156,
        "blue": 91,
        "hue": 24,
        "saturation": 100,
        "lightness": 68
    }, {
        "hex": "#FFD3B5",
        "rgb": "rgb(255, 211, 181)",
        "hsl": "hsl(24, 100%, 85%)",
        "red": 255,
        "green": 211,
        "blue": 181,
        "hue": 24,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#FFD1B3",
        "rgb": "rgb(255, 209, 179)",
        "hsl": "hsl(24, 100%, 85%)",
        "red": 255,
        "green": 209,
        "blue": 179,
        "hue": 24,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#87796F",
        "rgb": "rgb(135, 121, 111)",
        "hsl": "hsl(25, 10%, 48%)",
        "red": 135,
        "green": 121,
        "blue": 111,
        "hue": 25,
        "saturation": 10,
        "lightness": 48
    }, {
        "hex": "#5C483A",
        "rgb": "rgb(92, 72, 58)",
        "hsl": "hsl(25, 23%, 29%)",
        "red": 92,
        "green": 72,
        "blue": 58,
        "hue": 25,
        "saturation": 23,
        "lightness": 29
    }, {
        "hex": "#BF9F88",
        "rgb": "rgb(191, 159, 136)",
        "hsl": "hsl(25, 30%, 64%)",
        "red": 191,
        "green": 159,
        "blue": 136,
        "hue": 25,
        "saturation": 30,
        "lightness": 64
    }, {
        "hex": "#CCAC95",
        "rgb": "rgb(204, 172, 149)",
        "hsl": "hsl(25, 35%, 69%)",
        "red": 204,
        "green": 172,
        "blue": 149,
        "hue": 25,
        "saturation": 35,
        "lightness": 69
    }, {
        "hex": "#20130A",
        "rgb": "rgb(32, 19, 10)",
        "hsl": "hsl(25, 52%, 8%)",
        "red": 32,
        "green": 19,
        "blue": 10,
        "hue": 25,
        "saturation": 52,
        "lightness": 8
    }, {
        "hex": "#E7C7B0",
        "rgb": "rgb(231, 199, 176)",
        "hsl": "hsl(25, 53%, 80%)",
        "red": 231,
        "green": 199,
        "blue": 176,
        "hue": 25,
        "saturation": 53,
        "lightness": 80
    }, {
        "hex": "#DEA37A",
        "rgb": "rgb(222, 163, 122)",
        "hsl": "hsl(25, 60%, 67%)",
        "red": 222,
        "green": 163,
        "blue": 122,
        "hue": 25,
        "saturation": 60,
        "lightness": 67
    }, {
        "hex": "#EBC4A9",
        "rgb": "rgb(235, 196, 169)",
        "hsl": "hsl(25, 62%, 79%)",
        "red": 235,
        "green": 196,
        "blue": 169,
        "hue": 25,
        "saturation": 62,
        "lightness": 79
    }, {
        "hex": "#EECAB1",
        "rgb": "rgb(238, 202, 177)",
        "hsl": "hsl(25, 64%, 81%)",
        "red": 238,
        "green": 202,
        "blue": 177,
        "hue": 25,
        "saturation": 64,
        "lightness": 81
    }, {
        "hex": "#E7A97E",
        "rgb": "rgb(231, 169, 126)",
        "hsl": "hsl(25, 69%, 70%)",
        "red": 231,
        "green": 169,
        "blue": 126,
        "hue": 25,
        "saturation": 69,
        "lightness": 70
    }, {
        "hex": "#C96823",
        "rgb": "rgb(201, 104, 35)",
        "hsl": "hsl(25, 70%, 46%)",
        "red": 201,
        "green": 104,
        "blue": 35,
        "hue": 25,
        "saturation": 70,
        "lightness": 46
    }, {
        "hex": "#E6A06F",
        "rgb": "rgb(230, 160, 111)",
        "hsl": "hsl(25, 70%, 67%)",
        "red": 230,
        "green": 160,
        "blue": 111,
        "hue": 25,
        "saturation": 70,
        "lightness": 67
    }, {
        "hex": "#EFBC98",
        "rgb": "rgb(239, 188, 152)",
        "hsl": "hsl(25, 73%, 77%)",
        "red": 239,
        "green": 188,
        "blue": 152,
        "hue": 25,
        "saturation": 73,
        "lightness": 77
    }, {
        "hex": "#4B2409",
        "rgb": "rgb(75, 36, 9)",
        "hsl": "hsl(25, 79%, 16%)",
        "red": 75,
        "green": 36,
        "blue": 9,
        "hue": 25,
        "saturation": 79,
        "lightness": 16
    }, {
        "hex": "#E87624",
        "rgb": "rgb(232, 118, 36)",
        "hsl": "hsl(25, 81%, 53%)",
        "red": 232,
        "green": 118,
        "blue": 36,
        "hue": 25,
        "saturation": 81,
        "lightness": 53
    }, {
        "hex": "#F2A772",
        "rgb": "rgb(242, 167, 114)",
        "hsl": "hsl(25, 83%, 70%)",
        "red": 242,
        "green": 167,
        "blue": 114,
        "hue": 25,
        "saturation": 83,
        "lightness": 70
    }, {
        "hex": "#F5BA90",
        "rgb": "rgb(245, 186, 144)",
        "hsl": "hsl(25, 83%, 76%)",
        "red": 245,
        "green": 186,
        "blue": 144,
        "hue": 25,
        "saturation": 83,
        "lightness": 76
    }, {
        "hex": "#F3A36B",
        "rgb": "rgb(243, 163, 107)",
        "hsl": "hsl(25, 85%, 69%)",
        "red": 243,
        "green": 163,
        "blue": 107,
        "hue": 25,
        "saturation": 85,
        "lightness": 69
    }, {
        "hex": "#F9CDAD",
        "rgb": "rgb(249, 205, 173)",
        "hsl": "hsl(25, 86%, 83%)",
        "red": 249,
        "green": 205,
        "blue": 173,
        "hue": 25,
        "saturation": 86,
        "lightness": 83
    }, {
        "hex": "#FB9C5A",
        "rgb": "rgb(251, 156, 90)",
        "hsl": "hsl(25, 95%, 67%)",
        "red": 251,
        "green": 156,
        "blue": 90,
        "hue": 25,
        "saturation": 95,
        "lightness": 67
    }, {
        "hex": "#FC7D23",
        "rgb": "rgb(252, 125, 35)",
        "hsl": "hsl(25, 97%, 56%)",
        "red": 252,
        "green": 125,
        "blue": 35,
        "hue": 25,
        "saturation": 97,
        "lightness": 56
    }, {
        "hex": "#FEC49B",
        "rgb": "rgb(254, 196, 155)",
        "hsl": "hsl(25, 98%, 80%)",
        "red": 254,
        "green": 196,
        "blue": 155,
        "hue": 25,
        "saturation": 98,
        "lightness": 80
    }, {
        "hex": "#FEA667",
        "rgb": "rgb(254, 166, 103)",
        "hsl": "hsl(25, 99%, 70%)",
        "red": 254,
        "green": 166,
        "blue": 103,
        "hue": 25,
        "saturation": 99,
        "lightness": 70
    }, {
        "hex": "#FA6900",
        "rgb": "rgb(250, 105, 0)",
        "hsl": "hsl(25, 100%, 49%)",
        "red": 250,
        "green": 105,
        "blue": 0,
        "hue": 25,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FB6900",
        "rgb": "rgb(251, 105, 0)",
        "hsl": "hsl(25, 100%, 49%)",
        "red": 251,
        "green": 105,
        "blue": 0,
        "hue": 25,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FF6A00",
        "rgb": "rgb(255, 106, 0)",
        "hsl": "hsl(25, 100%, 50%)",
        "red": 255,
        "green": 106,
        "blue": 0,
        "hue": 25,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF9A52",
        "rgb": "rgb(255, 154, 82)",
        "hsl": "hsl(25, 100%, 66%)",
        "red": 255,
        "green": 154,
        "blue": 82,
        "hue": 25,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FF9A52",
        "rgb": "rgb(255, 154, 82)",
        "hsl": "hsl(25, 100%, 66%)",
        "red": 255,
        "green": 154,
        "blue": 82,
        "hue": 25,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FF9A52",
        "rgb": "rgb(255, 154, 82)",
        "hsl": "hsl(25, 100%, 66%)",
        "red": 255,
        "green": 154,
        "blue": 82,
        "hue": 25,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FFA463",
        "rgb": "rgb(255, 164, 99)",
        "hsl": "hsl(25, 100%, 69%)",
        "red": 255,
        "green": 164,
        "blue": 99,
        "hue": 25,
        "saturation": 100,
        "lightness": 69
    }, {
        "hex": "#FFA566",
        "rgb": "rgb(255, 165, 102)",
        "hsl": "hsl(25, 100%, 70%)",
        "red": 255,
        "green": 165,
        "blue": 102,
        "hue": 25,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#FFB884",
        "rgb": "rgb(255, 184, 132)",
        "hsl": "hsl(25, 100%, 76%)",
        "red": 255,
        "green": 184,
        "blue": 132,
        "hue": 25,
        "saturation": 100,
        "lightness": 76
    }, {
        "hex": "#FFBF91",
        "rgb": "rgb(255, 191, 145)",
        "hsl": "hsl(25, 100%, 78%)",
        "red": 255,
        "green": 191,
        "blue": 145,
        "hue": 25,
        "saturation": 100,
        "lightness": 78
    }, {
        "hex": "#FFCFAD",
        "rgb": "rgb(255, 207, 173)",
        "hsl": "hsl(25, 100%, 84%)",
        "red": 255,
        "green": 207,
        "blue": 173,
        "hue": 25,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#FFDABF",
        "rgb": "rgb(255, 218, 191)",
        "hsl": "hsl(25, 100%, 87%)",
        "red": 255,
        "green": 218,
        "blue": 191,
        "hue": 25,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#FFDABF",
        "rgb": "rgb(255, 218, 191)",
        "hsl": "hsl(25, 100%, 87%)",
        "red": 255,
        "green": 218,
        "blue": 191,
        "hue": 25,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#292522",
        "rgb": "rgb(41, 37, 34)",
        "hsl": "hsl(26, 9%, 15%)",
        "red": 41,
        "green": 37,
        "blue": 34,
        "hue": 26,
        "saturation": 9,
        "lightness": 15
    }, {
        "hex": "#5D544D",
        "rgb": "rgb(93, 84, 77)",
        "hsl": "hsl(26, 9%, 33%)",
        "red": 93,
        "green": 84,
        "blue": 77,
        "hue": 26,
        "saturation": 9,
        "lightness": 33
    }, {
        "hex": "#67594E",
        "rgb": "rgb(103, 89, 78)",
        "hsl": "hsl(26, 14%, 35%)",
        "red": 103,
        "green": 89,
        "blue": 78,
        "hue": 26,
        "saturation": 14,
        "lightness": 35
    }, {
        "hex": "#A39081",
        "rgb": "rgb(163, 144, 129)",
        "hsl": "hsl(26, 16%, 57%)",
        "red": 163,
        "green": 144,
        "blue": 129,
        "hue": 26,
        "saturation": 16,
        "lightness": 57
    }, {
        "hex": "#615145",
        "rgb": "rgb(97, 81, 69)",
        "hsl": "hsl(26, 17%, 33%)",
        "red": 97,
        "green": 81,
        "blue": 69,
        "hue": 26,
        "saturation": 17,
        "lightness": 33
    }, {
        "hex": "#6F5846",
        "rgb": "rgb(111, 88, 70)",
        "hsl": "hsl(26, 23%, 35%)",
        "red": 111,
        "green": 88,
        "blue": 70,
        "hue": 26,
        "saturation": 23,
        "lightness": 35
    }, {
        "hex": "#574435",
        "rgb": "rgb(87, 68, 53)",
        "hsl": "hsl(26, 24%, 27%)",
        "red": 87,
        "green": 68,
        "blue": 53,
        "hue": 26,
        "saturation": 24,
        "lightness": 27
    }, {
        "hex": "#564334",
        "rgb": "rgb(86, 67, 52)",
        "hsl": "hsl(26, 25%, 27%)",
        "red": 86,
        "green": 67,
        "blue": 52,
        "hue": 26,
        "saturation": 25,
        "lightness": 27
    }, {
        "hex": "#503D2E",
        "rgb": "rgb(80, 61, 46)",
        "hsl": "hsl(26, 27%, 25%)",
        "red": 80,
        "green": 61,
        "blue": 46,
        "hue": 26,
        "saturation": 27,
        "lightness": 25
    }, {
        "hex": "#E0C4AE",
        "rgb": "rgb(224, 196, 174)",
        "hsl": "hsl(26, 45%, 78%)",
        "red": 224,
        "green": 196,
        "blue": 174,
        "hue": 26,
        "saturation": 45,
        "lightness": 78
    }, {
        "hex": "#CB8E5F",
        "rgb": "rgb(203, 142, 95)",
        "hsl": "hsl(26, 51%, 58%)",
        "red": 203,
        "green": 142,
        "blue": 95,
        "hue": 26,
        "saturation": 51,
        "lightness": 58
    }, {
        "hex": "#CC8F60",
        "rgb": "rgb(204, 143, 96)",
        "hsl": "hsl(26, 51%, 59%)",
        "red": 204,
        "green": 143,
        "blue": 96,
        "hue": 26,
        "saturation": 51,
        "lightness": 59
    }, {
        "hex": "#EED7C5",
        "rgb": "rgb(238, 215, 197)",
        "hsl": "hsl(26, 55%, 85%)",
        "red": 238,
        "green": 215,
        "blue": 197,
        "hue": 26,
        "saturation": 55,
        "lightness": 85
    }, {
        "hex": "#633B1C",
        "rgb": "rgb(99, 59, 28)",
        "hsl": "hsl(26, 56%, 25%)",
        "red": 99,
        "green": 59,
        "blue": 28,
        "hue": 26,
        "saturation": 56,
        "lightness": 25
    }, {
        "hex": "#79451D",
        "rgb": "rgb(121, 69, 29)",
        "hsl": "hsl(26, 61%, 29%)",
        "red": 121,
        "green": 69,
        "blue": 29,
        "hue": 26,
        "saturation": 61,
        "lightness": 29
    }, {
        "hex": "#E3B18B",
        "rgb": "rgb(227, 177, 139)",
        "hsl": "hsl(26, 61%, 72%)",
        "red": 227,
        "green": 177,
        "blue": 139,
        "hue": 26,
        "saturation": 61,
        "lightness": 72
    }, {
        "hex": "#F3D7C2",
        "rgb": "rgb(243, 215, 194)",
        "hsl": "hsl(26, 67%, 86%)",
        "red": 243,
        "green": 215,
        "blue": 194,
        "hue": 26,
        "saturation": 67,
        "lightness": 86
    }, {
        "hex": "#1F1106",
        "rgb": "rgb(31, 17, 6)",
        "hsl": "hsl(26, 68%, 7%)",
        "red": 31,
        "green": 17,
        "blue": 6,
        "hue": 26,
        "saturation": 68,
        "lightness": 7
    }, {
        "hex": "#924F1B",
        "rgb": "rgb(146, 79, 27)",
        "hsl": "hsl(26, 69%, 34%)",
        "red": 146,
        "green": 79,
        "blue": 27,
        "hue": 26,
        "saturation": 69,
        "lightness": 34
    }, {
        "hex": "#ECA36C",
        "rgb": "rgb(236, 163, 108)",
        "hsl": "hsl(26, 77%, 67%)",
        "red": 236,
        "green": 163,
        "blue": 108,
        "hue": 26,
        "saturation": 77,
        "lightness": 67
    }, {
        "hex": "#F3A76D",
        "rgb": "rgb(243, 167, 109)",
        "hsl": "hsl(26, 85%, 69%)",
        "red": 243,
        "green": 167,
        "blue": 109,
        "hue": 26,
        "saturation": 85,
        "lightness": 69
    }, {
        "hex": "#F7C097",
        "rgb": "rgb(247, 192, 151)",
        "hsl": "hsl(26, 86%, 78%)",
        "red": 247,
        "green": 192,
        "blue": 151,
        "hue": 26,
        "saturation": 86,
        "lightness": 78
    }, {
        "hex": "#F38630",
        "rgb": "rgb(243, 134, 48)",
        "hsl": "hsl(26, 89%, 57%)",
        "red": 243,
        "green": 134,
        "blue": 48,
        "hue": 26,
        "saturation": 89,
        "lightness": 57
    }, {
        "hex": "#F8872E",
        "rgb": "rgb(248, 135, 46)",
        "hsl": "hsl(26, 94%, 58%)",
        "red": 248,
        "green": 135,
        "blue": 46,
        "hue": 26,
        "saturation": 94,
        "lightness": 58
    }, {
        "hex": "#FA8D3B",
        "rgb": "rgb(250, 141, 59)",
        "hsl": "hsl(26, 95%, 61%)",
        "red": 250,
        "green": 141,
        "blue": 59,
        "hue": 26,
        "saturation": 95,
        "lightness": 61
    }, {
        "hex": "#3B1A01",
        "rgb": "rgb(59, 26, 1)",
        "hsl": "hsl(26, 97%, 12%)",
        "red": 59,
        "green": 26,
        "blue": 1,
        "hue": 26,
        "saturation": 97,
        "lightness": 12
    }, {
        "hex": "#FC8020",
        "rgb": "rgb(252, 128, 32)",
        "hsl": "hsl(26, 97%, 56%)",
        "red": 252,
        "green": 128,
        "blue": 32,
        "hue": 26,
        "saturation": 97,
        "lightness": 56
    }, {
        "hex": "#FDA664",
        "rgb": "rgb(253, 166, 100)",
        "hsl": "hsl(26, 97%, 69%)",
        "red": 253,
        "green": 166,
        "blue": 100,
        "hue": 26,
        "saturation": 97,
        "lightness": 69
    }, {
        "hex": "#AC4A00",
        "rgb": "rgb(172, 74, 0)",
        "hsl": "hsl(26, 100%, 34%)",
        "red": 172,
        "green": 74,
        "blue": 0,
        "hue": 26,
        "saturation": 100,
        "lightness": 34
    }, {
        "hex": "#F96A00",
        "rgb": "rgb(249, 106, 0)",
        "hsl": "hsl(26, 100%, 49%)",
        "red": 249,
        "green": 106,
        "blue": 0,
        "hue": 26,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FF8830",
        "rgb": "rgb(255, 136, 48)",
        "hsl": "hsl(26, 100%, 59%)",
        "red": 255,
        "green": 136,
        "blue": 48,
        "hue": 26,
        "saturation": 100,
        "lightness": 59
    }, {
        "hex": "#FFAA67",
        "rgb": "rgb(255, 170, 103)",
        "hsl": "hsl(26, 100%, 70%)",
        "red": 255,
        "green": 170,
        "blue": 103,
        "hue": 26,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#9A9088",
        "rgb": "rgb(154, 144, 136)",
        "hsl": "hsl(27, 8%, 57%)",
        "red": 154,
        "green": 144,
        "blue": 136,
        "hue": 27,
        "saturation": 8,
        "lightness": 57
    }, {
        "hex": "#A69A90",
        "rgb": "rgb(166, 154, 144)",
        "hsl": "hsl(27, 11%, 61%)",
        "red": 166,
        "green": 154,
        "blue": 144,
        "hue": 27,
        "saturation": 11,
        "lightness": 61
    }, {
        "hex": "#938172",
        "rgb": "rgb(147, 129, 114)",
        "hsl": "hsl(27, 13%, 51%)",
        "red": 147,
        "green": 129,
        "blue": 114,
        "hue": 27,
        "saturation": 13,
        "lightness": 51
    }, {
        "hex": "#E2DDD9",
        "rgb": "rgb(226, 221, 217)",
        "hsl": "hsl(27, 13%, 87%)",
        "red": 226,
        "green": 221,
        "blue": 217,
        "hue": 27,
        "saturation": 13,
        "lightness": 87
    }, {
        "hex": "#EEE9E5",
        "rgb": "rgb(238, 233, 229)",
        "hsl": "hsl(27, 21%, 92%)",
        "red": 238,
        "green": 233,
        "blue": 229,
        "hue": 27,
        "saturation": 21,
        "lightness": 92
    }, {
        "hex": "#4C3D31",
        "rgb": "rgb(76, 61, 49)",
        "hsl": "hsl(27, 22%, 25%)",
        "red": 76,
        "green": 61,
        "blue": 49,
        "hue": 27,
        "saturation": 22,
        "lightness": 25
    }, {
        "hex": "#594433",
        "rgb": "rgb(89, 68, 51)",
        "hsl": "hsl(27, 27%, 27%)",
        "red": 89,
        "green": 68,
        "blue": 51,
        "hue": 27,
        "saturation": 27,
        "lightness": 27
    }, {
        "hex": "#E3CEBD",
        "rgb": "rgb(227, 206, 189)",
        "hsl": "hsl(27, 40%, 82%)",
        "red": 227,
        "green": 206,
        "blue": 189,
        "hue": 27,
        "saturation": 40,
        "lightness": 82
    }, {
        "hex": "#68462B",
        "rgb": "rgb(104, 70, 43)",
        "hsl": "hsl(27, 41%, 29%)",
        "red": 104,
        "green": 70,
        "blue": 43,
        "hue": 27,
        "saturation": 41,
        "lightness": 29
    }, {
        "hex": "#C7956D",
        "rgb": "rgb(199, 149, 109)",
        "hsl": "hsl(27, 45%, 60%)",
        "red": 199,
        "green": 149,
        "blue": 109,
        "hue": 27,
        "saturation": 45,
        "lightness": 60
    }, {
        "hex": "#452C18",
        "rgb": "rgb(69, 44, 24)",
        "hsl": "hsl(27, 48%, 18%)",
        "red": 69,
        "green": 44,
        "blue": 24,
        "hue": 27,
        "saturation": 48,
        "lightness": 18
    }, {
        "hex": "#D5A57F",
        "rgb": "rgb(213, 165, 127)",
        "hsl": "hsl(27, 51%, 67%)",
        "red": 213,
        "green": 165,
        "blue": 127,
        "hue": 27,
        "saturation": 51,
        "lightness": 67
    }, {
        "hex": "#E0BA9B",
        "rgb": "rgb(224, 186, 155)",
        "hsl": "hsl(27, 53%, 74%)",
        "red": 224,
        "green": 186,
        "blue": 155,
        "hue": 27,
        "saturation": 53,
        "lightness": 74
    }, {
        "hex": "#D9A071",
        "rgb": "rgb(217, 160, 113)",
        "hsl": "hsl(27, 58%, 65%)",
        "red": 217,
        "green": 160,
        "blue": 113,
        "hue": 27,
        "saturation": 58,
        "lightness": 65
    }, {
        "hex": "#DE9153",
        "rgb": "rgb(222, 145, 83)",
        "hsl": "hsl(27, 68%, 60%)",
        "red": 222,
        "green": 145,
        "blue": 83,
        "hue": 27,
        "saturation": 68,
        "lightness": 60
    }, {
        "hex": "#7F4311",
        "rgb": "rgb(127, 67, 17)",
        "hsl": "hsl(27, 76%, 28%)",
        "red": 127,
        "green": 67,
        "blue": 17,
        "hue": 27,
        "saturation": 76,
        "lightness": 28
    }, {
        "hex": "#EFAE78",
        "rgb": "rgb(239, 174, 120)",
        "hsl": "hsl(27, 79%, 70%)",
        "red": 239,
        "green": 174,
        "blue": 120,
        "hue": 27,
        "saturation": 79,
        "lightness": 70
    }, {
        "hex": "#F8DAC2",
        "rgb": "rgb(248, 218, 194)",
        "hsl": "hsl(27, 79%, 87%)",
        "red": 248,
        "green": 218,
        "blue": 194,
        "hue": 27,
        "saturation": 79,
        "lightness": 87
    }, {
        "hex": "#E6781E",
        "rgb": "rgb(230, 120, 30)",
        "hsl": "hsl(27, 80%, 51%)",
        "red": 230,
        "green": 120,
        "blue": 30,
        "hue": 27,
        "saturation": 80,
        "lightness": 51
    }, {
        "hex": "#EE9B57",
        "rgb": "rgb(238, 155, 87)",
        "hsl": "hsl(27, 82%, 64%)",
        "red": 238,
        "green": 155,
        "blue": 87,
        "hue": 27,
        "saturation": 82,
        "lightness": 64
    }, {
        "hex": "#9D4E0F",
        "rgb": "rgb(157, 78, 15)",
        "hsl": "hsl(27, 83%, 34%)",
        "red": 157,
        "green": 78,
        "blue": 15,
        "hue": 27,
        "saturation": 83,
        "lightness": 34
    }, {
        "hex": "#EE7F27",
        "rgb": "rgb(238, 127, 39)",
        "hsl": "hsl(27, 85%, 54%)",
        "red": 238,
        "green": 127,
        "blue": 39,
        "hue": 27,
        "saturation": 85,
        "lightness": 54
    }, {
        "hex": "#F7C69F",
        "rgb": "rgb(247, 198, 159)",
        "hsl": "hsl(27, 85%, 80%)",
        "red": 247,
        "green": 198,
        "blue": 159,
        "hue": 27,
        "saturation": 85,
        "lightness": 80
    }, {
        "hex": "#ED7615",
        "rgb": "rgb(237, 118, 21)",
        "hsl": "hsl(27, 86%, 51%)",
        "red": 237,
        "green": 118,
        "blue": 21,
        "hue": 27,
        "saturation": 86,
        "lightness": 51
    }, {
        "hex": "#F07818",
        "rgb": "rgb(240, 120, 24)",
        "hsl": "hsl(27, 88%, 52%)",
        "red": 240,
        "green": 120,
        "blue": 24,
        "hue": 27,
        "saturation": 88,
        "lightness": 52
    }, {
        "hex": "#FAD3B2",
        "rgb": "rgb(250, 211, 178)",
        "hsl": "hsl(27, 88%, 84%)",
        "red": 250,
        "green": 211,
        "blue": 178,
        "hue": 27,
        "saturation": 88,
        "lightness": 84
    }, {
        "hex": "#FCE1CB",
        "rgb": "rgb(252, 225, 203)",
        "hsl": "hsl(27, 89%, 89%)",
        "red": 252,
        "green": 225,
        "blue": 203,
        "hue": 27,
        "saturation": 89,
        "lightness": 89
    }, {
        "hex": "#F68B36",
        "rgb": "rgb(246, 139, 54)",
        "hsl": "hsl(27, 91%, 59%)",
        "red": 246,
        "green": 139,
        "blue": 54,
        "hue": 27,
        "saturation": 91,
        "lightness": 59
    }, {
        "hex": "#FBC599",
        "rgb": "rgb(251, 197, 153)",
        "hsl": "hsl(27, 92%, 79%)",
        "red": 251,
        "green": 197,
        "blue": 153,
        "hue": 27,
        "saturation": 92,
        "lightness": 79
    }, {
        "hex": "#FBC599",
        "rgb": "rgb(251, 197, 153)",
        "hsl": "hsl(27, 92%, 79%)",
        "red": 251,
        "green": 197,
        "blue": 153,
        "hue": 27,
        "saturation": 92,
        "lightness": 79
    }, {
        "hex": "#FC913A",
        "rgb": "rgb(252, 145, 58)",
        "hsl": "hsl(27, 97%, 61%)",
        "red": 252,
        "green": 145,
        "blue": 58,
        "hue": 27,
        "saturation": 97,
        "lightness": 61
    }, {
        "hex": "#FD8D32",
        "rgb": "rgb(253, 141, 50)",
        "hsl": "hsl(27, 98%, 59%)",
        "red": 253,
        "green": 141,
        "blue": 50,
        "hue": 27,
        "saturation": 98,
        "lightness": 59
    }, {
        "hex": "#FECEA8",
        "rgb": "rgb(254, 206, 168)",
        "hsl": "hsl(27, 98%, 83%)",
        "red": 254,
        "green": 206,
        "blue": 168,
        "hue": 27,
        "saturation": 98,
        "lightness": 83
    }, {
        "hex": "#FF7D10",
        "rgb": "rgb(255, 125, 16)",
        "hsl": "hsl(27, 100%, 53%)",
        "red": 255,
        "green": 125,
        "blue": 16,
        "hue": 27,
        "saturation": 100,
        "lightness": 53
    }, {
        "hex": "#FF8826",
        "rgb": "rgb(255, 136, 38)",
        "hsl": "hsl(27, 100%, 57%)",
        "red": 255,
        "green": 136,
        "blue": 38,
        "hue": 27,
        "saturation": 100,
        "lightness": 57
    }, {
        "hex": "#FF9036",
        "rgb": "rgb(255, 144, 54)",
        "hsl": "hsl(27, 100%, 61%)",
        "red": 255,
        "green": 144,
        "blue": 54,
        "hue": 27,
        "saturation": 100,
        "lightness": 61
    }, {
        "hex": "#FFBD87",
        "rgb": "rgb(255, 189, 135)",
        "hsl": "hsl(27, 100%, 76%)",
        "red": 255,
        "green": 189,
        "blue": 135,
        "hue": 27,
        "saturation": 100,
        "lightness": 76
    }, {
        "hex": "#FFC391",
        "rgb": "rgb(255, 195, 145)",
        "hsl": "hsl(27, 100%, 78%)",
        "red": 255,
        "green": 195,
        "blue": 145,
        "hue": 27,
        "saturation": 100,
        "lightness": 78
    }, {
        "hex": "#FFE1C9",
        "rgb": "rgb(255, 225, 201)",
        "hsl": "hsl(27, 100%, 89%)",
        "red": 255,
        "green": 225,
        "blue": 201,
        "hue": 27,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#FFF9F4",
        "rgb": "rgb(255, 249, 244)",
        "hsl": "hsl(27, 100%, 98%)",
        "red": 255,
        "green": 249,
        "blue": 244,
        "hue": 27,
        "saturation": 100,
        "lightness": 98
    }, {
        "hex": "#403831",
        "rgb": "rgb(64, 56, 49)",
        "hsl": "hsl(28, 13%, 22%)",
        "red": 64,
        "green": 56,
        "blue": 49,
        "hue": 28,
        "saturation": 13,
        "lightness": 22
    }, {
        "hex": "#67594D",
        "rgb": "rgb(103, 89, 77)",
        "hsl": "hsl(28, 14%, 35%)",
        "red": 103,
        "green": 89,
        "blue": 77,
        "hue": 28,
        "saturation": 14,
        "lightness": 35
    }, {
        "hex": "#332C26",
        "rgb": "rgb(51, 44, 38)",
        "hsl": "hsl(28, 15%, 17%)",
        "red": 51,
        "green": 44,
        "blue": 38,
        "hue": 28,
        "saturation": 15,
        "lightness": 17
    }, {
        "hex": "#987F69",
        "rgb": "rgb(152, 127, 105)",
        "hsl": "hsl(28, 19%, 50%)",
        "red": 152,
        "green": 127,
        "blue": 105,
        "hue": 28,
        "saturation": 19,
        "lightness": 50
    }, {
        "hex": "#B49B85",
        "rgb": "rgb(180, 155, 133)",
        "hsl": "hsl(28, 24%, 61%)",
        "red": 180,
        "green": 155,
        "blue": 133,
        "hue": 28,
        "saturation": 24,
        "lightness": 61
    }, {
        "hex": "#D3B9A3",
        "rgb": "rgb(211, 185, 163)",
        "hsl": "hsl(28, 35%, 73%)",
        "red": 211,
        "green": 185,
        "blue": 163,
        "hue": 28,
        "saturation": 35,
        "lightness": 73
    }, {
        "hex": "#1C140D",
        "rgb": "rgb(28, 20, 13)",
        "hsl": "hsl(28, 37%, 8%)",
        "red": 28,
        "green": 20,
        "blue": 13,
        "hue": 28,
        "saturation": 37,
        "lightness": 8
    }, {
        "hex": "#F2E9E1",
        "rgb": "rgb(242, 233, 225)",
        "hsl": "hsl(28, 40%, 92%)",
        "red": 242,
        "green": 233,
        "blue": 225,
        "hue": 28,
        "saturation": 40,
        "lightness": 92
    }, {
        "hex": "#D7B89C",
        "rgb": "rgb(215, 184, 156)",
        "hsl": "hsl(28, 42%, 73%)",
        "red": 215,
        "green": 184,
        "blue": 156,
        "hue": 28,
        "saturation": 42,
        "lightness": 73
    }, {
        "hex": "#E5CBB4",
        "rgb": "rgb(229, 203, 180)",
        "hsl": "hsl(28, 49%, 80%)",
        "red": 229,
        "green": 203,
        "blue": 180,
        "hue": 28,
        "saturation": 49,
        "lightness": 80
    }, {
        "hex": "#CD8C52",
        "rgb": "rgb(205, 140, 82)",
        "hsl": "hsl(28, 55%, 56%)",
        "red": 205,
        "green": 140,
        "blue": 82,
        "hue": 28,
        "saturation": 55,
        "lightness": 56
    }, {
        "hex": "#E8CAAF",
        "rgb": "rgb(232, 202, 175)",
        "hsl": "hsl(28, 55%, 80%)",
        "red": 232,
        "green": 202,
        "blue": 175,
        "hue": 28,
        "saturation": 55,
        "lightness": 80
    }, {
        "hex": "#EDD4BE",
        "rgb": "rgb(237, 212, 190)",
        "hsl": "hsl(28, 57%, 84%)",
        "red": 237,
        "green": 212,
        "blue": 190,
        "hue": 28,
        "saturation": 57,
        "lightness": 84
    }, {
        "hex": "#E6A972",
        "rgb": "rgb(230, 169, 114)",
        "hsl": "hsl(28, 70%, 67%)",
        "red": 230,
        "green": 169,
        "blue": 114,
        "hue": 28,
        "saturation": 70,
        "lightness": 67
    }, {
        "hex": "#E58634",
        "rgb": "rgb(229, 134, 52)",
        "hsl": "hsl(28, 77%, 55%)",
        "red": 229,
        "green": 134,
        "blue": 52,
        "hue": 28,
        "saturation": 77,
        "lightness": 55
    }, {
        "hex": "#F4C9A3",
        "rgb": "rgb(244, 201, 163)",
        "hsl": "hsl(28, 79%, 80%)",
        "red": 244,
        "green": 201,
        "blue": 163,
        "hue": 28,
        "saturation": 79,
        "lightness": 80
    }, {
        "hex": "#F8D9BD",
        "rgb": "rgb(248, 217, 189)",
        "hsl": "hsl(28, 81%, 86%)",
        "red": 248,
        "green": 217,
        "blue": 189,
        "hue": 28,
        "saturation": 81,
        "lightness": 86
    }, {
        "hex": "#F07C19",
        "rgb": "rgb(240, 124, 25)",
        "hsl": "hsl(28, 88%, 52%)",
        "red": 240,
        "green": 124,
        "blue": 25,
        "hue": 28,
        "saturation": 88,
        "lightness": 52
    }, {
        "hex": "#F9BA84",
        "rgb": "rgb(249, 186, 132)",
        "hsl": "hsl(28, 91%, 75%)",
        "red": 249,
        "green": 186,
        "blue": 132,
        "hue": 28,
        "saturation": 91,
        "lightness": 75
    }, {
        "hex": "#E46F0A",
        "rgb": "rgb(228, 111, 10)",
        "hsl": "hsl(28, 92%, 47%)",
        "red": 228,
        "green": 111,
        "blue": 10,
        "hue": 28,
        "saturation": 92,
        "lightness": 47
    }, {
        "hex": "#FAB87F",
        "rgb": "rgb(250, 184, 127)",
        "hsl": "hsl(28, 92%, 74%)",
        "red": 250,
        "green": 184,
        "blue": 127,
        "hue": 28,
        "saturation": 92,
        "lightness": 74
    }, {
        "hex": "#FD9A42",
        "rgb": "rgb(253, 154, 66)",
        "hsl": "hsl(28, 98%, 63%)",
        "red": 253,
        "green": 154,
        "blue": 66,
        "hue": 28,
        "saturation": 98,
        "lightness": 63
    }, {
        "hex": "#FEBD84",
        "rgb": "rgb(254, 189, 132)",
        "hsl": "hsl(28, 98%, 76%)",
        "red": 254,
        "green": 189,
        "blue": 132,
        "hue": 28,
        "saturation": 98,
        "lightness": 76
    }, {
        "hex": "#3D1C00",
        "rgb": "rgb(61, 28, 0)",
        "hsl": "hsl(28, 100%, 12%)",
        "red": 61,
        "green": 28,
        "blue": 0,
        "hue": 28,
        "saturation": 100,
        "lightness": 12
    }, {
        "hex": "#FFAD64",
        "rgb": "rgb(255, 173, 100)",
        "hsl": "hsl(28, 100%, 70%)",
        "red": 255,
        "green": 173,
        "blue": 100,
        "hue": 28,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#FFBA7F",
        "rgb": "rgb(255, 186, 127)",
        "hsl": "hsl(28, 100%, 75%)",
        "red": 255,
        "green": 186,
        "blue": 127,
        "hue": 28,
        "saturation": 100,
        "lightness": 75
    }, {
        "hex": "#FFC897",
        "rgb": "rgb(255, 200, 151)",
        "hsl": "hsl(28, 100%, 80%)",
        "red": 255,
        "green": 200,
        "blue": 151,
        "hue": 28,
        "saturation": 100,
        "lightness": 80
    }, {
        "hex": "#7B7066",
        "rgb": "rgb(123, 112, 102)",
        "hsl": "hsl(29, 9%, 44%)",
        "red": 123,
        "green": 112,
        "blue": 102,
        "hue": 29,
        "saturation": 9,
        "lightness": 44
    }, {
        "hex": "#736558",
        "rgb": "rgb(115, 101, 88)",
        "hsl": "hsl(29, 13%, 40%)",
        "red": 115,
        "green": 101,
        "blue": 88,
        "hue": 29,
        "saturation": 13,
        "lightness": 40
    }, {
        "hex": "#917F6E",
        "rgb": "rgb(145, 127, 110)",
        "hsl": "hsl(29, 14%, 50%)",
        "red": 145,
        "green": 127,
        "blue": 110,
        "hue": 29,
        "saturation": 14,
        "lightness": 50
    }, {
        "hex": "#8D7966",
        "rgb": "rgb(141, 121, 102)",
        "hsl": "hsl(29, 16%, 48%)",
        "red": 141,
        "green": 121,
        "blue": 102,
        "hue": 29,
        "saturation": 16,
        "lightness": 48
    }, {
        "hex": "#BBAA9A",
        "rgb": "rgb(187, 170, 154)",
        "hsl": "hsl(29, 20%, 67%)",
        "red": 187,
        "green": 170,
        "blue": 154,
        "hue": 29,
        "saturation": 20,
        "lightness": 67
    }, {
        "hex": "#C9B8A8",
        "rgb": "rgb(201, 184, 168)",
        "hsl": "hsl(29, 23%, 72%)",
        "red": 201,
        "green": 184,
        "blue": 168,
        "hue": 29,
        "saturation": 23,
        "lightness": 72
    }, {
        "hex": "#CDBDAE",
        "rgb": "rgb(205, 189, 174)",
        "hsl": "hsl(29, 24%, 74%)",
        "red": 205,
        "green": 189,
        "blue": 174,
        "hue": 29,
        "saturation": 24,
        "lightness": 74
    }, {
        "hex": "#B39980",
        "rgb": "rgb(179, 153, 128)",
        "hsl": "hsl(29, 25%, 60%)",
        "red": 179,
        "green": 153,
        "blue": 128,
        "hue": 29,
        "saturation": 25,
        "lightness": 60
    }, {
        "hex": "#B39980",
        "rgb": "rgb(179, 153, 128)",
        "hsl": "hsl(29, 25%, 60%)",
        "red": 179,
        "green": 153,
        "blue": 128,
        "hue": 29,
        "saturation": 25,
        "lightness": 60
    }, {
        "hex": "#E0D2C5",
        "rgb": "rgb(224, 210, 197)",
        "hsl": "hsl(29, 30%, 83%)",
        "red": 224,
        "green": 210,
        "blue": 197,
        "hue": 29,
        "saturation": 30,
        "lightness": 83
    }, {
        "hex": "#7A5B3E",
        "rgb": "rgb(122, 91, 62)",
        "hsl": "hsl(29, 33%, 36%)",
        "red": 122,
        "green": 91,
        "blue": 62,
        "hue": 29,
        "saturation": 33,
        "lightness": 36
    }, {
        "hex": "#D1B8A0",
        "rgb": "rgb(209, 184, 160)",
        "hsl": "hsl(29, 35%, 72%)",
        "red": 209,
        "green": 184,
        "blue": 160,
        "hue": 29,
        "saturation": 35,
        "lightness": 72
    }, {
        "hex": "#E6D8CB",
        "rgb": "rgb(230, 216, 203)",
        "hsl": "hsl(29, 35%, 85%)",
        "red": 230,
        "green": 216,
        "blue": 203,
        "hue": 29,
        "saturation": 35,
        "lightness": 85
    }, {
        "hex": "#B47941",
        "rgb": "rgb(180, 121, 65)",
        "hsl": "hsl(29, 47%, 48%)",
        "red": 180,
        "green": 121,
        "blue": 65,
        "hue": 29,
        "saturation": 47,
        "lightness": 48
    }, {
        "hex": "#E6B280",
        "rgb": "rgb(230, 178, 128)",
        "hsl": "hsl(29, 67%, 70%)",
        "red": 230,
        "green": 178,
        "blue": 128,
        "hue": 29,
        "saturation": 67,
        "lightness": 70
    }, {
        "hex": "#E3A56B",
        "rgb": "rgb(227, 165, 107)",
        "hsl": "hsl(29, 68%, 65%)",
        "red": 227,
        "green": 165,
        "blue": 107,
        "hue": 29,
        "saturation": 68,
        "lightness": 65
    }, {
        "hex": "#5F3711",
        "rgb": "rgb(95, 55, 17)",
        "hsl": "hsl(29, 70%, 22%)",
        "red": 95,
        "green": 55,
        "blue": 17,
        "hue": 29,
        "saturation": 70,
        "lightness": 22
    }, {
        "hex": "#DE8531",
        "rgb": "rgb(222, 133, 49)",
        "hsl": "hsl(29, 72%, 53%)",
        "red": 222,
        "green": 133,
        "blue": 49,
        "hue": 29,
        "saturation": 72,
        "lightness": 53
    }, {
        "hex": "#EDB886",
        "rgb": "rgb(237, 184, 134)",
        "hsl": "hsl(29, 74%, 73%)",
        "red": 237,
        "green": 184,
        "blue": 134,
        "hue": 29,
        "saturation": 74,
        "lightness": 73
    }, {
        "hex": "#F07E13",
        "rgb": "rgb(240, 126, 19)",
        "hsl": "hsl(29, 88%, 51%)",
        "red": 240,
        "green": 126,
        "blue": 19,
        "hue": 29,
        "saturation": 88,
        "lightness": 51
    }, {
        "hex": "#F9C593",
        "rgb": "rgb(249, 197, 147)",
        "hsl": "hsl(29, 89%, 78%)",
        "red": 249,
        "green": 197,
        "blue": 147,
        "hue": 29,
        "saturation": 89,
        "lightness": 78
    }, {
        "hex": "#F58723",
        "rgb": "rgb(245, 135, 35)",
        "hsl": "hsl(29, 91%, 55%)",
        "red": 245,
        "green": 135,
        "blue": 35,
        "hue": 29,
        "saturation": 91,
        "lightness": 55
    }, {
        "hex": "#F67704",
        "rgb": "rgb(246, 119, 4)",
        "hsl": "hsl(29, 97%, 49%)",
        "red": 246,
        "green": 119,
        "blue": 4,
        "hue": 29,
        "saturation": 97,
        "lightness": 49
    }, {
        "hex": "#D46700",
        "rgb": "rgb(212, 103, 0)",
        "hsl": "hsl(29, 100%, 42%)",
        "red": 212,
        "green": 103,
        "blue": 0,
        "hue": 29,
        "saturation": 100,
        "lightness": 42
    }, {
        "hex": "#FF8006",
        "rgb": "rgb(255, 128, 6)",
        "hsl": "hsl(29, 100%, 51%)",
        "red": 255,
        "green": 128,
        "blue": 6,
        "hue": 29,
        "saturation": 100,
        "lightness": 51
    }, {
        "hex": "#FF8716",
        "rgb": "rgb(255, 135, 22)",
        "hsl": "hsl(29, 100%, 54%)",
        "red": 255,
        "green": 135,
        "blue": 22,
        "hue": 29,
        "saturation": 100,
        "lightness": 54
    }, {
        "hex": "#FFE3C9",
        "rgb": "rgb(255, 227, 201)",
        "hsl": "hsl(29, 100%, 89%)",
        "red": 255,
        "green": 227,
        "blue": 201,
        "hue": 29,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#3D3C3B",
        "rgb": "rgb(61, 60, 59)",
        "hsl": "hsl(30, 2%, 24%)",
        "red": 61,
        "green": 60,
        "blue": 59,
        "hue": 30,
        "saturation": 2,
        "lightness": 24
    }, {
        "hex": "#B2AEAA",
        "rgb": "rgb(178, 174, 170)",
        "hsl": "hsl(30, 5%, 68%)",
        "red": 178,
        "green": 174,
        "blue": 170,
        "hue": 30,
        "saturation": 5,
        "lightness": 68
    }, {
        "hex": "#665C52",
        "rgb": "rgb(102, 92, 82)",
        "hsl": "hsl(30, 11%, 36%)",
        "red": 102,
        "green": 92,
        "blue": 82,
        "hue": 30,
        "saturation": 11,
        "lightness": 36
    }, {
        "hex": "#B7AEA5",
        "rgb": "rgb(183, 174, 165)",
        "hsl": "hsl(30, 11%, 68%)",
        "red": 183,
        "green": 174,
        "blue": 165,
        "hue": 30,
        "saturation": 11,
        "lightness": 68
    }, {
        "hex": "#332D27",
        "rgb": "rgb(51, 45, 39)",
        "hsl": "hsl(30, 13%, 18%)",
        "red": 51,
        "green": 45,
        "blue": 39,
        "hue": 30,
        "saturation": 13,
        "lightness": 18
    }, {
        "hex": "#211D19",
        "rgb": "rgb(33, 29, 25)",
        "hsl": "hsl(30, 14%, 11%)",
        "red": 33,
        "green": 29,
        "blue": 25,
        "hue": 30,
        "saturation": 14,
        "lightness": 11
    }, {
        "hex": "#574C41",
        "rgb": "rgb(87, 76, 65)",
        "hsl": "hsl(30, 14%, 30%)",
        "red": 87,
        "green": 76,
        "blue": 65,
        "hue": 30,
        "saturation": 14,
        "lightness": 30
    }, {
        "hex": "#A6988A",
        "rgb": "rgb(166, 152, 138)",
        "hsl": "hsl(30, 14%, 60%)",
        "red": 166,
        "green": 152,
        "blue": 138,
        "hue": 30,
        "saturation": 14,
        "lightness": 60
    }, {
        "hex": "#85725F",
        "rgb": "rgb(133, 114, 95)",
        "hsl": "hsl(30, 17%, 45%)",
        "red": 133,
        "green": 114,
        "blue": 95,
        "hue": 30,
        "saturation": 17,
        "lightness": 45
    }, {
        "hex": "#917C67",
        "rgb": "rgb(145, 124, 103)",
        "hsl": "hsl(30, 17%, 49%)",
        "red": 145,
        "green": 124,
        "blue": 103,
        "hue": 30,
        "saturation": 17,
        "lightness": 49
    }, {
        "hex": "#AB9A89",
        "rgb": "rgb(171, 154, 137)",
        "hsl": "hsl(30, 17%, 60%)",
        "red": 171,
        "green": 154,
        "blue": 137,
        "hue": 30,
        "saturation": 17,
        "lightness": 60
    }, {
        "hex": "#E4DDD6",
        "rgb": "rgb(228, 221, 214)",
        "hsl": "hsl(30, 21%, 87%)",
        "red": 228,
        "green": 221,
        "blue": 214,
        "hue": 30,
        "saturation": 21,
        "lightness": 87
    }, {
        "hex": "#4E3F30",
        "rgb": "rgb(78, 63, 48)",
        "hsl": "hsl(30, 24%, 25%)",
        "red": 78,
        "green": 63,
        "blue": 48,
        "hue": 30,
        "saturation": 24,
        "lightness": 25
    }, {
        "hex": "#30261C",
        "rgb": "rgb(48, 38, 28)",
        "hsl": "hsl(30, 26%, 15%)",
        "red": 48,
        "green": 38,
        "blue": 28,
        "hue": 30,
        "saturation": 26,
        "lightness": 15
    }, {
        "hex": "#9D7C5B",
        "rgb": "rgb(157, 124, 91)",
        "hsl": "hsl(30, 27%, 49%)",
        "red": 157,
        "green": 124,
        "blue": 91,
        "hue": 30,
        "saturation": 27,
        "lightness": 49
    }, {
        "hex": "#D8C8B8",
        "rgb": "rgb(216, 200, 184)",
        "hsl": "hsl(30, 29%, 78%)",
        "red": 216,
        "green": 200,
        "blue": 184,
        "hue": 30,
        "saturation": 29,
        "lightness": 78
    }, {
        "hex": "#E7DDD3",
        "rgb": "rgb(231, 221, 211)",
        "hsl": "hsl(30, 29%, 87%)",
        "red": 231,
        "green": 221,
        "blue": 211,
        "hue": 30,
        "saturation": 29,
        "lightness": 87
    }, {
        "hex": "#D8A878",
        "rgb": "rgb(216, 168, 120)",
        "hsl": "hsl(30, 55%, 66%)",
        "red": 216,
        "green": 168,
        "blue": 120,
        "hue": 30,
        "saturation": 55,
        "lightness": 66
    }, {
        "hex": "#E4B17D",
        "rgb": "rgb(228, 177, 125)",
        "hsl": "hsl(30, 66%, 69%)",
        "red": 228,
        "green": 177,
        "blue": 125,
        "hue": 30,
        "saturation": 66,
        "lightness": 69
    }, {
        "hex": "#E8B787",
        "rgb": "rgb(232, 183, 135)",
        "hsl": "hsl(30, 68%, 72%)",
        "red": 232,
        "green": 183,
        "blue": 135,
        "hue": 30,
        "saturation": 68,
        "lightness": 72
    }, {
        "hex": "#F0CDAB",
        "rgb": "rgb(240, 205, 171)",
        "hsl": "hsl(30, 70%, 81%)",
        "red": 240,
        "green": 205,
        "blue": 171,
        "hue": 30,
        "saturation": 70,
        "lightness": 81
    }, {
        "hex": "#EBB57F",
        "rgb": "rgb(235, 181, 127)",
        "hsl": "hsl(30, 73%, 71%)",
        "red": 235,
        "green": 181,
        "blue": 127,
        "hue": 30,
        "saturation": 73,
        "lightness": 71
    }, {
        "hex": "#F0C69C",
        "rgb": "rgb(240, 198, 156)",
        "hsl": "hsl(30, 74%, 78%)",
        "red": 240,
        "green": 198,
        "blue": 156,
        "hue": 30,
        "saturation": 74,
        "lightness": 78
    }, {
        "hex": "#E68A2E",
        "rgb": "rgb(230, 138, 46)",
        "hsl": "hsl(30, 79%, 54%)",
        "red": 230,
        "green": 138,
        "blue": 46,
        "hue": 30,
        "saturation": 79,
        "lightness": 54
    }, {
        "hex": "#EB9C4D",
        "rgb": "rgb(235, 156, 77)",
        "hsl": "hsl(30, 80%, 61%)",
        "red": 235,
        "green": 156,
        "blue": 77,
        "hue": 30,
        "saturation": 80,
        "lightness": 61
    }, {
        "hex": "#F7D0A9",
        "rgb": "rgb(247, 208, 169)",
        "hsl": "hsl(30, 83%, 82%)",
        "red": 247,
        "green": 208,
        "blue": 169,
        "hue": 30,
        "saturation": 83,
        "lightness": 82
    }, {
        "hex": "#F3B578",
        "rgb": "rgb(243, 181, 120)",
        "hsl": "hsl(30, 84%, 71%)",
        "red": 243,
        "green": 181,
        "blue": 120,
        "hue": 30,
        "saturation": 84,
        "lightness": 71
    }, {
        "hex": "#7F440A",
        "rgb": "rgb(127, 68, 10)",
        "hsl": "hsl(30, 85%, 27%)",
        "red": 127,
        "green": 68,
        "blue": 10,
        "hue": 30,
        "saturation": 85,
        "lightness": 27
    }, {
        "hex": "#DC7612",
        "rgb": "rgb(220, 118, 18)",
        "hsl": "hsl(30, 85%, 47%)",
        "red": 220,
        "green": 118,
        "blue": 18,
        "hue": 30,
        "saturation": 85,
        "lightness": 47
    }, {
        "hex": "#FCE7D2",
        "rgb": "rgb(252, 231, 210)",
        "hsl": "hsl(30, 88%, 91%)",
        "red": 252,
        "green": 231,
        "blue": 210,
        "hue": 30,
        "saturation": 88,
        "lightness": 91
    }, {
        "hex": "#F2861B",
        "rgb": "rgb(242, 134, 27)",
        "hsl": "hsl(30, 89%, 53%)",
        "red": 242,
        "green": 134,
        "blue": 27,
        "hue": 30,
        "saturation": 89,
        "lightness": 53
    }, {
        "hex": "#F59330",
        "rgb": "rgb(245, 147, 48)",
        "hsl": "hsl(30, 91%, 57%)",
        "red": 245,
        "green": 147,
        "blue": 48,
        "hue": 30,
        "saturation": 91,
        "lightness": 57
    }, {
        "hex": "#F8B068",
        "rgb": "rgb(248, 176, 104)",
        "hsl": "hsl(30, 91%, 69%)",
        "red": 248,
        "green": 176,
        "blue": 104,
        "hue": 30,
        "saturation": 91,
        "lightness": 69
    }, {
        "hex": "#FA9F43",
        "rgb": "rgb(250, 159, 67)",
        "hsl": "hsl(30, 95%, 62%)",
        "red": 250,
        "green": 159,
        "blue": 67,
        "hue": 30,
        "saturation": 95,
        "lightness": 62
    }, {
        "hex": "#FEDCBA",
        "rgb": "rgb(254, 220, 186)",
        "hsl": "hsl(30, 97%, 86%)",
        "red": 254,
        "green": 220,
        "blue": 186,
        "hue": 30,
        "saturation": 97,
        "lightness": 86
    }, {
        "hex": "#FC7F03",
        "rgb": "rgb(252, 127, 3)",
        "hsl": "hsl(30, 98%, 50%)",
        "red": 252,
        "green": 127,
        "blue": 3,
        "hue": 30,
        "saturation": 98,
        "lightness": 50
    }, {
        "hex": "#FF8207",
        "rgb": "rgb(255, 130, 7)",
        "hsl": "hsl(30, 100%, 51%)",
        "red": 255,
        "green": 130,
        "blue": 7,
        "hue": 30,
        "saturation": 100,
        "lightness": 51
    }, {
        "hex": "#FF9934",
        "rgb": "rgb(255, 153, 52)",
        "hsl": "hsl(30, 100%, 60%)",
        "red": 255,
        "green": 153,
        "blue": 52,
        "hue": 30,
        "saturation": 100,
        "lightness": 60
    }, {
        "hex": "#FFA446",
        "rgb": "rgb(255, 164, 70)",
        "hsl": "hsl(30, 100%, 64%)",
        "red": 255,
        "green": 164,
        "blue": 70,
        "hue": 30,
        "saturation": 100,
        "lightness": 64
    }, {
        "hex": "#FFB870",
        "rgb": "rgb(255, 184, 112)",
        "hsl": "hsl(30, 100%, 72%)",
        "red": 255,
        "green": 184,
        "blue": 112,
        "hue": 30,
        "saturation": 100,
        "lightness": 72
    }, {
        "hex": "#FFC994",
        "rgb": "rgb(255, 201, 148)",
        "hsl": "hsl(30, 100%, 79%)",
        "red": 255,
        "green": 201,
        "blue": 148,
        "hue": 30,
        "saturation": 100,
        "lightness": 79
    }, {
        "hex": "#876F55",
        "rgb": "rgb(135, 111, 85)",
        "hsl": "hsl(31, 23%, 43%)",
        "red": 135,
        "green": 111,
        "blue": 85,
        "hue": 31,
        "saturation": 23,
        "lightness": 43
    }, {
        "hex": "#7A6248",
        "rgb": "rgb(122, 98, 72)",
        "hsl": "hsl(31, 26%, 38%)",
        "red": 122,
        "green": 98,
        "blue": 72,
        "hue": 31,
        "saturation": 26,
        "lightness": 38
    }, {
        "hex": "#D3B390",
        "rgb": "rgb(211, 179, 144)",
        "hsl": "hsl(31, 43%, 70%)",
        "red": 211,
        "green": 179,
        "blue": 144,
        "hue": 31,
        "saturation": 43,
        "lightness": 70
    }, {
        "hex": "#F7EADC",
        "rgb": "rgb(247, 234, 220)",
        "hsl": "hsl(31, 63%, 92%)",
        "red": 247,
        "green": 234,
        "blue": 220,
        "hue": 31,
        "saturation": 63,
        "lightness": 92
    }, {
        "hex": "#EAC195",
        "rgb": "rgb(234, 193, 149)",
        "hsl": "hsl(31, 67%, 75%)",
        "red": 234,
        "green": 193,
        "blue": 149,
        "hue": 31,
        "saturation": 67,
        "lightness": 75
    }, {
        "hex": "#E3A868",
        "rgb": "rgb(227, 168, 104)",
        "hsl": "hsl(31, 69%, 65%)",
        "red": 227,
        "green": 168,
        "blue": 104,
        "hue": 31,
        "saturation": 69,
        "lightness": 65
    }, {
        "hex": "#FAEDDF",
        "rgb": "rgb(250, 237, 223)",
        "hsl": "hsl(31, 73%, 93%)",
        "red": 250,
        "green": 237,
        "blue": 223,
        "hue": 31,
        "saturation": 73,
        "lightness": 93
    }, {
        "hex": "#F5DABD",
        "rgb": "rgb(245, 218, 189)",
        "hsl": "hsl(31, 74%, 85%)",
        "red": 245,
        "green": 218,
        "blue": 189,
        "hue": 31,
        "saturation": 74,
        "lightness": 85
    }, {
        "hex": "#E88A25",
        "rgb": "rgb(232, 138, 37)",
        "hsl": "hsl(31, 81%, 53%)",
        "red": 232,
        "green": 138,
        "blue": 37,
        "hue": 31,
        "saturation": 81,
        "lightness": 53
    }, {
        "hex": "#D8770C",
        "rgb": "rgb(216, 119, 12)",
        "hsl": "hsl(31, 89%, 45%)",
        "red": 216,
        "green": 119,
        "blue": 12,
        "hue": 31,
        "saturation": 89,
        "lightness": 45
    }, {
        "hex": "#F7AF63",
        "rgb": "rgb(247, 175, 99)",
        "hsl": "hsl(31, 90%, 68%)",
        "red": 247,
        "green": 175,
        "blue": 99,
        "hue": 31,
        "saturation": 90,
        "lightness": 68
    }, {
        "hex": "#F8A348",
        "rgb": "rgb(248, 163, 72)",
        "hsl": "hsl(31, 93%, 63%)",
        "red": 248,
        "green": 163,
        "blue": 72,
        "hue": 31,
        "saturation": 93,
        "lightness": 63
    }, {
        "hex": "#D56F00",
        "rgb": "rgb(213, 111, 0)",
        "hsl": "hsl(31, 100%, 42%)",
        "red": 213,
        "green": 111,
        "blue": 0,
        "hue": 31,
        "saturation": 100,
        "lightness": 42
    }, {
        "hex": "#FFC27F",
        "rgb": "rgb(255, 194, 127)",
        "hsl": "hsl(31, 100%, 75%)",
        "red": 255,
        "green": 194,
        "blue": 127,
        "hue": 31,
        "saturation": 100,
        "lightness": 75
    }, {
        "hex": "#605951",
        "rgb": "rgb(96, 89, 81)",
        "hsl": "hsl(32, 8%, 35%)",
        "red": 96,
        "green": 89,
        "blue": 81,
        "hue": 32,
        "saturation": 8,
        "lightness": 35
    }, {
        "hex": "#575048",
        "rgb": "rgb(87, 80, 72)",
        "hsl": "hsl(32, 9%, 31%)",
        "red": 87,
        "green": 80,
        "blue": 72,
        "hue": 32,
        "saturation": 9,
        "lightness": 31
    }, {
        "hex": "#B3ACA4",
        "rgb": "rgb(179, 172, 164)",
        "hsl": "hsl(32, 9%, 67%)",
        "red": 179,
        "green": 172,
        "blue": 164,
        "hue": 32,
        "saturation": 9,
        "lightness": 67
    }, {
        "hex": "#D4CDC5",
        "rgb": "rgb(212, 205, 197)",
        "hsl": "hsl(32, 15%, 80%)",
        "red": 212,
        "green": 205,
        "blue": 197,
        "hue": 32,
        "saturation": 15,
        "lightness": 80
    }, {
        "hex": "#6B5D4D",
        "rgb": "rgb(107, 93, 77)",
        "hsl": "hsl(32, 16%, 36%)",
        "red": 107,
        "green": 93,
        "blue": 77,
        "hue": 32,
        "saturation": 16,
        "lightness": 36
    }, {
        "hex": "#B39C82",
        "rgb": "rgb(179, 156, 130)",
        "hsl": "hsl(32, 24%, 61%)",
        "red": 179,
        "green": 156,
        "blue": 130,
        "hue": 32,
        "saturation": 24,
        "lightness": 61
    }, {
        "hex": "#B8A38B",
        "rgb": "rgb(184, 163, 139)",
        "hsl": "hsl(32, 24%, 63%)",
        "red": 184,
        "green": 163,
        "blue": 139,
        "hue": 32,
        "saturation": 24,
        "lightness": 63
    }, {
        "hex": "#5C4B37",
        "rgb": "rgb(92, 75, 55)",
        "hsl": "hsl(32, 25%, 29%)",
        "red": 92,
        "green": 75,
        "blue": 55,
        "hue": 32,
        "saturation": 25,
        "lightness": 29
    }, {
        "hex": "#E9E2DA",
        "rgb": "rgb(233, 226, 218)",
        "hsl": "hsl(32, 25%, 88%)",
        "red": 233,
        "green": 226,
        "blue": 218,
        "hue": 32,
        "saturation": 25,
        "lightness": 88
    }, {
        "hex": "#9F7B51",
        "rgb": "rgb(159, 123, 81)",
        "hsl": "hsl(32, 33%, 47%)",
        "red": 159,
        "green": 123,
        "blue": 81,
        "hue": 32,
        "saturation": 33,
        "lightness": 47
    }, {
        "hex": "#CFB699",
        "rgb": "rgb(207, 182, 153)",
        "hsl": "hsl(32, 36%, 71%)",
        "red": 207,
        "green": 182,
        "blue": 153,
        "hue": 32,
        "saturation": 36,
        "lightness": 71
    }, {
        "hex": "#E6D5C1",
        "rgb": "rgb(230, 213, 193)",
        "hsl": "hsl(32, 43%, 83%)",
        "red": 230,
        "green": 213,
        "blue": 193,
        "hue": 32,
        "saturation": 43,
        "lightness": 83
    }, {
        "hex": "#EFE1D1",
        "rgb": "rgb(239, 225, 209)",
        "hsl": "hsl(32, 48%, 88%)",
        "red": 239,
        "green": 225,
        "blue": 209,
        "hue": 32,
        "saturation": 48,
        "lightness": 88
    }, {
        "hex": "#D4A979",
        "rgb": "rgb(212, 169, 121)",
        "hsl": "hsl(32, 51%, 65%)",
        "red": 212,
        "green": 169,
        "blue": 121,
        "hue": 32,
        "saturation": 51,
        "lightness": 65
    }, {
        "hex": "#F8F1E9",
        "rgb": "rgb(248, 241, 233)",
        "hsl": "hsl(32, 52%, 94%)",
        "red": 248,
        "green": 241,
        "blue": 233,
        "hue": 32,
        "saturation": 52,
        "lightness": 94
    }, {
        "hex": "#99662D",
        "rgb": "rgb(153, 102, 45)",
        "hsl": "hsl(32, 55%, 39%)",
        "red": 153,
        "green": 102,
        "blue": 45,
        "hue": 32,
        "saturation": 55,
        "lightness": 39
    }, {
        "hex": "#CC883A",
        "rgb": "rgb(204, 136, 58)",
        "hsl": "hsl(32, 59%, 51%)",
        "red": 204,
        "green": 136,
        "blue": 58,
        "hue": 32,
        "saturation": 59,
        "lightness": 51
    }, {
        "hex": "#D69E60",
        "rgb": "rgb(214, 158, 96)",
        "hsl": "hsl(32, 59%, 61%)",
        "red": 214,
        "green": 158,
        "blue": 96,
        "hue": 32,
        "saturation": 59,
        "lightness": 61
    }, {
        "hex": "#EEC290",
        "rgb": "rgb(238, 194, 144)",
        "hsl": "hsl(32, 73%, 75%)",
        "red": 238,
        "green": 194,
        "blue": 144,
        "hue": 32,
        "saturation": 73,
        "lightness": 75
    }, {
        "hex": "#F1C694",
        "rgb": "rgb(241, 198, 148)",
        "hsl": "hsl(32, 77%, 76%)",
        "red": 241,
        "green": 198,
        "blue": 148,
        "hue": 32,
        "saturation": 77,
        "lightness": 76
    }, {
        "hex": "#EAA353",
        "rgb": "rgb(234, 163, 83)",
        "hsl": "hsl(32, 78%, 62%)",
        "red": 234,
        "green": 163,
        "blue": 83,
        "hue": 32,
        "saturation": 78,
        "lightness": 62
    }, {
        "hex": "#F2AF60",
        "rgb": "rgb(242, 175, 96)",
        "hsl": "hsl(32, 85%, 66%)",
        "red": 242,
        "green": 175,
        "blue": 96,
        "hue": 32,
        "saturation": 85,
        "lightness": 66
    }, {
        "hex": "#F2AD5E",
        "rgb": "rgb(242, 173, 94)",
        "hsl": "hsl(32, 85%, 66%)",
        "red": 242,
        "green": 173,
        "blue": 94,
        "hue": 32,
        "saturation": 85,
        "lightness": 66
    }, {
        "hex": "#F4A854",
        "rgb": "rgb(244, 168, 84)",
        "hsl": "hsl(32, 88%, 64%)",
        "red": 244,
        "green": 168,
        "blue": 84,
        "hue": 32,
        "saturation": 88,
        "lightness": 64
    }, {
        "hex": "#F7C081",
        "rgb": "rgb(247, 192, 129)",
        "hsl": "hsl(32, 88%, 74%)",
        "red": 247,
        "green": 192,
        "blue": 129,
        "hue": 32,
        "saturation": 88,
        "lightness": 74
    }, {
        "hex": "#F7BB75",
        "rgb": "rgb(247, 187, 117)",
        "hsl": "hsl(32, 89%, 71%)",
        "red": 247,
        "green": 187,
        "blue": 117,
        "hue": 32,
        "saturation": 89,
        "lightness": 71
    }, {
        "hex": "#FACB97",
        "rgb": "rgb(250, 203, 151)",
        "hsl": "hsl(32, 91%, 79%)",
        "red": 250,
        "green": 203,
        "blue": 151,
        "hue": 32,
        "saturation": 91,
        "lightness": 79
    }, {
        "hex": "#FCDFBD",
        "rgb": "rgb(252, 223, 189)",
        "hsl": "hsl(32, 91%, 86%)",
        "red": 252,
        "green": 223,
        "blue": 189,
        "hue": 32,
        "saturation": 91,
        "lightness": 86
    }, {
        "hex": "#F6921D",
        "rgb": "rgb(246, 146, 29)",
        "hsl": "hsl(32, 92%, 54%)",
        "red": 246,
        "green": 146,
        "blue": 29,
        "hue": 32,
        "saturation": 92,
        "lightness": 54
    }, {
        "hex": "#F8A13F",
        "rgb": "rgb(248, 161, 63)",
        "hsl": "hsl(32, 93%, 61%)",
        "red": 248,
        "green": 161,
        "blue": 63,
        "hue": 32,
        "saturation": 93,
        "lightness": 61
    }, {
        "hex": "#FCD8AF",
        "rgb": "rgb(252, 216, 175)",
        "hsl": "hsl(32, 93%, 84%)",
        "red": 252,
        "green": 216,
        "blue": 175,
        "hue": 32,
        "saturation": 93,
        "lightness": 84
    }, {
        "hex": "#E97F02",
        "rgb": "rgb(233, 127, 2)",
        "hsl": "hsl(32, 98%, 46%)",
        "red": 233,
        "green": 127,
        "blue": 2,
        "hue": 32,
        "saturation": 98,
        "lightness": 46
    }, {
        "hex": "#FE8B05",
        "rgb": "rgb(254, 139, 5)",
        "hsl": "hsl(32, 99%, 51%)",
        "red": 254,
        "green": 139,
        "blue": 5,
        "hue": 32,
        "saturation": 99,
        "lightness": 51
    }, {
        "hex": "#FF8800",
        "rgb": "rgb(255, 136, 0)",
        "hsl": "hsl(32, 100%, 50%)",
        "red": 255,
        "green": 136,
        "blue": 0,
        "hue": 32,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF8A00",
        "rgb": "rgb(255, 138, 0)",
        "hsl": "hsl(32, 100%, 50%)",
        "red": 255,
        "green": 138,
        "blue": 0,
        "hue": 32,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF9317",
        "rgb": "rgb(255, 147, 23)",
        "hsl": "hsl(32, 100%, 55%)",
        "red": 255,
        "green": 147,
        "blue": 23,
        "hue": 32,
        "saturation": 100,
        "lightness": 55
    }, {
        "hex": "#FF9D2E",
        "rgb": "rgb(255, 157, 46)",
        "hsl": "hsl(32, 100%, 59%)",
        "red": 255,
        "green": 157,
        "blue": 46,
        "hue": 32,
        "saturation": 100,
        "lightness": 59
    }, {
        "hex": "#FFBA6B",
        "rgb": "rgb(255, 186, 107)",
        "hsl": "hsl(32, 100%, 71%)",
        "red": 255,
        "green": 186,
        "blue": 107,
        "hue": 32,
        "saturation": 100,
        "lightness": 71
    }, {
        "hex": "#FFB969",
        "rgb": "rgb(255, 185, 105)",
        "hsl": "hsl(32, 100%, 71%)",
        "red": 255,
        "green": 185,
        "blue": 105,
        "hue": 32,
        "saturation": 100,
        "lightness": 71
    }, {
        "hex": "#5E5953",
        "rgb": "rgb(94, 89, 83)",
        "hsl": "hsl(33, 6%, 35%)",
        "red": 94,
        "green": 89,
        "blue": 83,
        "hue": 33,
        "saturation": 6,
        "lightness": 35
    }, {
        "hex": "#A8A39D",
        "rgb": "rgb(168, 163, 157)",
        "hsl": "hsl(33, 6%, 64%)",
        "red": 168,
        "green": 163,
        "blue": 157,
        "hue": 33,
        "saturation": 6,
        "lightness": 64
    }, {
        "hex": "#3A352F",
        "rgb": "rgb(58, 53, 47)",
        "hsl": "hsl(33, 10%, 21%)",
        "red": 58,
        "green": 53,
        "blue": 47,
        "hue": 33,
        "saturation": 10,
        "lightness": 21
    }, {
        "hex": "#63594D",
        "rgb": "rgb(99, 89, 77)",
        "hsl": "hsl(33, 13%, 35%)",
        "red": 99,
        "green": 89,
        "blue": 77,
        "hue": 33,
        "saturation": 13,
        "lightness": 35
    }, {
        "hex": "#9B8E7E",
        "rgb": "rgb(155, 142, 126)",
        "hsl": "hsl(33, 13%, 55%)",
        "red": 155,
        "green": 142,
        "blue": 126,
        "hue": 33,
        "saturation": 13,
        "lightness": 55
    }, {
        "hex": "#A69785",
        "rgb": "rgb(166, 151, 133)",
        "hsl": "hsl(33, 16%, 59%)",
        "red": 166,
        "green": 151,
        "blue": 133,
        "hue": 33,
        "saturation": 16,
        "lightness": 59
    }, {
        "hex": "#A69682",
        "rgb": "rgb(166, 150, 130)",
        "hsl": "hsl(33, 17%, 58%)",
        "red": 166,
        "green": 150,
        "blue": 130,
        "hue": 33,
        "saturation": 17,
        "lightness": 58
    }, {
        "hex": "#B0A18F",
        "rgb": "rgb(176, 161, 143)",
        "hsl": "hsl(33, 17%, 63%)",
        "red": 176,
        "green": 161,
        "blue": 143,
        "hue": 33,
        "saturation": 17,
        "lightness": 63
    }, {
        "hex": "#B5A28B",
        "rgb": "rgb(181, 162, 139)",
        "hsl": "hsl(33, 22%, 63%)",
        "red": 181,
        "green": 162,
        "blue": 139,
        "hue": 33,
        "saturation": 22,
        "lightness": 63
    }, {
        "hex": "#B9A58D",
        "rgb": "rgb(185, 165, 141)",
        "hsl": "hsl(33, 24%, 64%)",
        "red": 185,
        "green": 165,
        "blue": 141,
        "hue": 33,
        "saturation": 24,
        "lightness": 64
    }, {
        "hex": "#BFAB93",
        "rgb": "rgb(191, 171, 147)",
        "hsl": "hsl(33, 26%, 66%)",
        "red": 191,
        "green": 171,
        "blue": 147,
        "hue": 33,
        "saturation": 26,
        "lightness": 66
    }, {
        "hex": "#EFEAE4",
        "rgb": "rgb(239, 234, 228)",
        "hsl": "hsl(33, 26%, 92%)",
        "red": 239,
        "green": 234,
        "blue": 228,
        "hue": 33,
        "saturation": 26,
        "lightness": 92
    }, {
        "hex": "#B19676",
        "rgb": "rgb(177, 150, 118)",
        "hsl": "hsl(33, 27%, 58%)",
        "red": 177,
        "green": 150,
        "blue": 118,
        "hue": 33,
        "saturation": 27,
        "lightness": 58
    }, {
        "hex": "#A2825C",
        "rgb": "rgb(162, 130, 92)",
        "hsl": "hsl(33, 28%, 50%)",
        "red": 162,
        "green": 130,
        "blue": 92,
        "hue": 33,
        "saturation": 28,
        "lightness": 50
    }, {
        "hex": "#C6B299",
        "rgb": "rgb(198, 178, 153)",
        "hsl": "hsl(33, 28%, 69%)",
        "red": 198,
        "green": 178,
        "blue": 153,
        "hue": 33,
        "saturation": 28,
        "lightness": 69
    }, {
        "hex": "#DACDBD",
        "rgb": "rgb(218, 205, 189)",
        "hsl": "hsl(33, 28%, 80%)",
        "red": 218,
        "green": 205,
        "blue": 189,
        "hue": 33,
        "saturation": 28,
        "lightness": 80
    }, {
        "hex": "#C7B299",
        "rgb": "rgb(199, 178, 153)",
        "hsl": "hsl(33, 29%, 69%)",
        "red": 199,
        "green": 178,
        "blue": 153,
        "hue": 33,
        "saturation": 29,
        "lightness": 69
    }, {
        "hex": "#D7C3AB",
        "rgb": "rgb(215, 195, 171)",
        "hsl": "hsl(33, 35%, 76%)",
        "red": 215,
        "green": 195,
        "blue": 171,
        "hue": 33,
        "saturation": 35,
        "lightness": 76
    }, {
        "hex": "#CFB698",
        "rgb": "rgb(207, 182, 152)",
        "hsl": "hsl(33, 36%, 70%)",
        "red": 207,
        "green": 182,
        "blue": 152,
        "hue": 33,
        "saturation": 36,
        "lightness": 70
    }, {
        "hex": "#926D40",
        "rgb": "rgb(146, 109, 64)",
        "hsl": "hsl(33, 39%, 41%)",
        "red": 146,
        "green": 109,
        "blue": 64,
        "hue": 33,
        "saturation": 39,
        "lightness": 41
    }, {
        "hex": "#855F30",
        "rgb": "rgb(133, 95, 48)",
        "hsl": "hsl(33, 47%, 35%)",
        "red": 133,
        "green": 95,
        "blue": 48,
        "hue": 33,
        "saturation": 47,
        "lightness": 35
    }, {
        "hex": "#D6B58C",
        "rgb": "rgb(214, 181, 140)",
        "hsl": "hsl(33, 47%, 69%)",
        "red": 214,
        "green": 181,
        "blue": 140,
        "hue": 33,
        "saturation": 47,
        "lightness": 69
    }, {
        "hex": "#BB8138",
        "rgb": "rgb(187, 129, 56)",
        "hsl": "hsl(33, 54%, 48%)",
        "red": 187,
        "green": 129,
        "blue": 56,
        "hue": 33,
        "saturation": 54,
        "lightness": 48
    }, {
        "hex": "#E8C8A1",
        "rgb": "rgb(232, 200, 161)",
        "hsl": "hsl(33, 61%, 77%)",
        "red": 232,
        "green": 200,
        "blue": 161,
        "hue": 33,
        "saturation": 61,
        "lightness": 77
    }, {
        "hex": "#CF872E",
        "rgb": "rgb(207, 135, 46)",
        "hsl": "hsl(33, 64%, 50%)",
        "red": 207,
        "green": 135,
        "blue": 46,
        "hue": 33,
        "saturation": 64,
        "lightness": 50
    }, {
        "hex": "#F1C691",
        "rgb": "rgb(241, 198, 145)",
        "hsl": "hsl(33, 77%, 76%)",
        "red": 241,
        "green": 198,
        "blue": 145,
        "hue": 33,
        "saturation": 77,
        "lightness": 76
    }, {
        "hex": "#F6D5AD",
        "rgb": "rgb(246, 213, 173)",
        "hsl": "hsl(33, 80%, 82%)",
        "red": 246,
        "green": 213,
        "blue": 173,
        "hue": 33,
        "saturation": 80,
        "lightness": 82
    }, {
        "hex": "#F4C790",
        "rgb": "rgb(244, 199, 144)",
        "hsl": "hsl(33, 82%, 76%)",
        "red": 244,
        "green": 199,
        "blue": 144,
        "hue": 33,
        "saturation": 82,
        "lightness": 76
    }, {
        "hex": "#F9D6AC",
        "rgb": "rgb(249, 214, 172)",
        "hsl": "hsl(33, 87%, 83%)",
        "red": 249,
        "green": 214,
        "blue": 172,
        "hue": 33,
        "saturation": 87,
        "lightness": 83
    }, {
        "hex": "#3D2304",
        "rgb": "rgb(61, 35, 4)",
        "hsl": "hsl(33, 88%, 13%)",
        "red": 61,
        "green": 35,
        "blue": 4,
        "hue": 33,
        "saturation": 88,
        "lightness": 13
    }, {
        "hex": "#F7A541",
        "rgb": "rgb(247, 165, 65)",
        "hsl": "hsl(33, 92%, 61%)",
        "red": 247,
        "green": 165,
        "blue": 65,
        "hue": 33,
        "saturation": 92,
        "lightness": 61
    }, {
        "hex": "#F9BF76",
        "rgb": "rgb(249, 191, 118)",
        "hsl": "hsl(33, 92%, 72%)",
        "red": 249,
        "green": 191,
        "blue": 118,
        "hue": 33,
        "saturation": 92,
        "lightness": 72
    }, {
        "hex": "#F18809",
        "rgb": "rgb(241, 136, 9)",
        "hsl": "hsl(33, 93%, 49%)",
        "red": 241,
        "green": 136,
        "blue": 9,
        "hue": 33,
        "saturation": 93,
        "lightness": 49
    }, {
        "hex": "#FAB96B",
        "rgb": "rgb(250, 185, 107)",
        "hsl": "hsl(33, 93%, 70%)",
        "red": 250,
        "green": 185,
        "blue": 107,
        "hue": 33,
        "saturation": 93,
        "lightness": 70
    }, {
        "hex": "#DE7C04",
        "rgb": "rgb(222, 124, 4)",
        "hsl": "hsl(33, 96%, 44%)",
        "red": 222,
        "green": 124,
        "blue": 4,
        "hue": 33,
        "saturation": 96,
        "lightness": 44
    }, {
        "hex": "#FEAE4B",
        "rgb": "rgb(254, 174, 75)",
        "hsl": "hsl(33, 99%, 65%)",
        "red": 254,
        "green": 174,
        "blue": 75,
        "hue": 33,
        "saturation": 99,
        "lightness": 65
    }, {
        "hex": "#FFA02E",
        "rgb": "rgb(255, 160, 46)",
        "hsl": "hsl(33, 100%, 59%)",
        "red": 255,
        "green": 160,
        "blue": 46,
        "hue": 33,
        "saturation": 100,
        "lightness": 59
    }, {
        "hex": "#FFA739",
        "rgb": "rgb(255, 167, 57)",
        "hsl": "hsl(33, 100%, 61%)",
        "red": 255,
        "green": 167,
        "blue": 57,
        "hue": 33,
        "saturation": 100,
        "lightness": 61
    }, {
        "hex": "#FFB353",
        "rgb": "rgb(255, 179, 83)",
        "hsl": "hsl(33, 100%, 66%)",
        "red": 255,
        "green": 179,
        "blue": 83,
        "hue": 33,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FFD6A3",
        "rgb": "rgb(255, 214, 163)",
        "hsl": "hsl(33, 100%, 82%)",
        "red": 255,
        "green": 214,
        "blue": 163,
        "hue": 33,
        "saturation": 100,
        "lightness": 82
    }, {
        "hex": "#85827E",
        "rgb": "rgb(133, 130, 126)",
        "hsl": "hsl(34, 3%, 51%)",
        "red": 133,
        "green": 130,
        "blue": 126,
        "hue": 34,
        "saturation": 3,
        "lightness": 51
    }, {
        "hex": "#655643",
        "rgb": "rgb(101, 86, 67)",
        "hsl": "hsl(34, 20%, 33%)",
        "red": 101,
        "green": 86,
        "blue": 67,
        "hue": 34,
        "saturation": 20,
        "lightness": 33
    }, {
        "hex": "#C0B19E",
        "rgb": "rgb(192, 177, 158)",
        "hsl": "hsl(34, 21%, 69%)",
        "red": 192,
        "green": 177,
        "blue": 158,
        "hue": 34,
        "saturation": 21,
        "lightness": 69
    }, {
        "hex": "#463A2A",
        "rgb": "rgb(70, 58, 42)",
        "hsl": "hsl(34, 25%, 22%)",
        "red": 70,
        "green": 58,
        "blue": 42,
        "hue": 34,
        "saturation": 25,
        "lightness": 22
    }, {
        "hex": "#7A6448",
        "rgb": "rgb(122, 100, 72)",
        "hsl": "hsl(34, 26%, 38%)",
        "red": 122,
        "green": 100,
        "blue": 72,
        "hue": 34,
        "saturation": 26,
        "lightness": 38
    }, {
        "hex": "#A68C69",
        "rgb": "rgb(166, 140, 105)",
        "hsl": "hsl(34, 26%, 53%)",
        "red": 166,
        "green": 140,
        "blue": 105,
        "hue": 34,
        "saturation": 26,
        "lightness": 53
    }, {
        "hex": "#C3B199",
        "rgb": "rgb(195, 177, 153)",
        "hsl": "hsl(34, 26%, 68%)",
        "red": 195,
        "green": 177,
        "blue": 153,
        "hue": 34,
        "saturation": 26,
        "lightness": 68
    }, {
        "hex": "#332717",
        "rgb": "rgb(51, 39, 23)",
        "hsl": "hsl(34, 38%, 15%)",
        "red": 51,
        "green": 39,
        "blue": 23,
        "hue": 34,
        "saturation": 38,
        "lightness": 15
    }, {
        "hex": "#C4975C",
        "rgb": "rgb(196, 151, 92)",
        "hsl": "hsl(34, 47%, 56%)",
        "red": 196,
        "green": 151,
        "blue": 92,
        "hue": 34,
        "saturation": 47,
        "lightness": 56
    }, {
        "hex": "#CC9E61",
        "rgb": "rgb(204, 158, 97)",
        "hsl": "hsl(34, 51%, 59%)",
        "red": 204,
        "green": 158,
        "blue": 97,
        "hue": 34,
        "saturation": 51,
        "lightness": 59
    }, {
        "hex": "#EDDBC4",
        "rgb": "rgb(237, 219, 196)",
        "hsl": "hsl(34, 53%, 85%)",
        "red": 237,
        "green": 219,
        "blue": 196,
        "hue": 34,
        "saturation": 53,
        "lightness": 85
    }, {
        "hex": "#F3E7D7",
        "rgb": "rgb(243, 231, 215)",
        "hsl": "hsl(34, 54%, 90%)",
        "red": 243,
        "green": 231,
        "blue": 215,
        "hue": 34,
        "saturation": 54,
        "lightness": 90
    }, {
        "hex": "#F6EBDD",
        "rgb": "rgb(246, 235, 221)",
        "hsl": "hsl(34, 58%, 92%)",
        "red": 246,
        "green": 235,
        "blue": 221,
        "hue": 34,
        "saturation": 58,
        "lightness": 92
    }, {
        "hex": "#DDB37D",
        "rgb": "rgb(221, 179, 125)",
        "hsl": "hsl(34, 59%, 68%)",
        "red": 221,
        "green": 179,
        "blue": 125,
        "hue": 34,
        "saturation": 59,
        "lightness": 68
    }, {
        "hex": "#E8CAA4",
        "rgb": "rgb(232, 202, 164)",
        "hsl": "hsl(34, 60%, 78%)",
        "red": 232,
        "green": 202,
        "blue": 164,
        "hue": 34,
        "saturation": 60,
        "lightness": 78
    }, {
        "hex": "#D89845",
        "rgb": "rgb(216, 152, 69)",
        "hsl": "hsl(34, 65%, 56%)",
        "red": 216,
        "green": 152,
        "blue": 69,
        "hue": 34,
        "saturation": 65,
        "lightness": 56
    }, {
        "hex": "#F7EAD9",
        "rgb": "rgb(247, 234, 217)",
        "hsl": "hsl(34, 65%, 91%)",
        "red": 247,
        "green": 234,
        "blue": 217,
        "hue": 34,
        "saturation": 65,
        "lightness": 91
    }, {
        "hex": "#F6E7D3",
        "rgb": "rgb(246, 231, 211)",
        "hsl": "hsl(34, 66%, 90%)",
        "red": 246,
        "green": 231,
        "blue": 211,
        "hue": 34,
        "saturation": 66,
        "lightness": 90
    }, {
        "hex": "#BD7A22",
        "rgb": "rgb(189, 122, 34)",
        "hsl": "hsl(34, 70%, 44%)",
        "red": 189,
        "green": 122,
        "blue": 34,
        "hue": 34,
        "saturation": 70,
        "lightness": 44
    }, {
        "hex": "#F1D4AF",
        "rgb": "rgb(241, 212, 175)",
        "hsl": "hsl(34, 70%, 82%)",
        "red": 241,
        "green": 212,
        "blue": 175,
        "hue": 34,
        "saturation": 70,
        "lightness": 82
    }, {
        "hex": "#F1D3AB",
        "rgb": "rgb(241, 211, 171)",
        "hsl": "hsl(34, 71%, 81%)",
        "red": 241,
        "green": 211,
        "blue": 171,
        "hue": 34,
        "saturation": 71,
        "lightness": 81
    }, {
        "hex": "#E8A249",
        "rgb": "rgb(232, 162, 73)",
        "hsl": "hsl(34, 78%, 60%)",
        "red": 232,
        "green": 162,
        "blue": 73,
        "hue": 34,
        "saturation": 78,
        "lightness": 60
    }, {
        "hex": "#ECB163",
        "rgb": "rgb(236, 177, 99)",
        "hsl": "hsl(34, 78%, 66%)",
        "red": 236,
        "green": 177,
        "blue": 99,
        "hue": 34,
        "saturation": 78,
        "lightness": 66
    }, {
        "hex": "#E79A32",
        "rgb": "rgb(231, 154, 50)",
        "hsl": "hsl(34, 79%, 55%)",
        "red": 231,
        "green": 154,
        "blue": 50,
        "hue": 34,
        "saturation": 79,
        "lightness": 55
    }, {
        "hex": "#E79022",
        "rgb": "rgb(231, 144, 34)",
        "hsl": "hsl(34, 80%, 52%)",
        "red": 231,
        "green": 144,
        "blue": 34,
        "hue": 34,
        "saturation": 80,
        "lightness": 52
    }, {
        "hex": "#DF8615",
        "rgb": "rgb(223, 134, 21)",
        "hsl": "hsl(34, 83%, 48%)",
        "red": 223,
        "green": 134,
        "blue": 21,
        "hue": 34,
        "saturation": 83,
        "lightness": 48
    }, {
        "hex": "#F2BD76",
        "rgb": "rgb(242, 189, 118)",
        "hsl": "hsl(34, 83%, 71%)",
        "red": 242,
        "green": 189,
        "blue": 118,
        "hue": 34,
        "saturation": 83,
        "lightness": 71
    }, {
        "hex": "#F7D3A3",
        "rgb": "rgb(247, 211, 163)",
        "hsl": "hsl(34, 84%, 80%)",
        "red": 247,
        "green": 211,
        "blue": 163,
        "hue": 34,
        "saturation": 84,
        "lightness": 80
    }, {
        "hex": "#FAE1C0",
        "rgb": "rgb(250, 225, 192)",
        "hsl": "hsl(34, 85%, 87%)",
        "red": 250,
        "green": 225,
        "blue": 192,
        "hue": 34,
        "saturation": 85,
        "lightness": 87
    }, {
        "hex": "#FCDCB3",
        "rgb": "rgb(252, 220, 179)",
        "hsl": "hsl(34, 92%, 85%)",
        "red": 252,
        "green": 220,
        "blue": 179,
        "hue": 34,
        "saturation": 92,
        "lightness": 85
    }, {
        "hex": "#FABA66",
        "rgb": "rgb(250, 186, 102)",
        "hsl": "hsl(34, 94%, 69%)",
        "red": 250,
        "green": 186,
        "blue": 102,
        "hue": 34,
        "saturation": 94,
        "lightness": 69
    }, {
        "hex": "#FEF1E0",
        "rgb": "rgb(254, 241, 224)",
        "hsl": "hsl(34, 94%, 94%)",
        "red": 254,
        "green": 241,
        "blue": 224,
        "hue": 34,
        "saturation": 94,
        "lightness": 94
    }, {
        "hex": "#FC930A",
        "rgb": "rgb(252, 147, 10)",
        "hsl": "hsl(34, 98%, 51%)",
        "red": 252,
        "green": 147,
        "blue": 10,
        "hue": 34,
        "saturation": 98,
        "lightness": 51
    }, {
        "hex": "#FD9407",
        "rgb": "rgb(253, 148, 7)",
        "hsl": "hsl(34, 98%, 51%)",
        "red": 253,
        "green": 148,
        "blue": 7,
        "hue": 34,
        "saturation": 98,
        "lightness": 51
    }, {
        "hex": "#361F00",
        "rgb": "rgb(54, 31, 0)",
        "hsl": "hsl(34, 100%, 11%)",
        "red": 54,
        "green": 31,
        "blue": 0,
        "hue": 34,
        "saturation": 100,
        "lightness": 11
    }, {
        "hex": "#FF9915",
        "rgb": "rgb(255, 153, 21)",
        "hsl": "hsl(34, 100%, 54%)",
        "red": 255,
        "green": 153,
        "blue": 21,
        "hue": 34,
        "saturation": 100,
        "lightness": 54
    }, {
        "hex": "#FFB350",
        "rgb": "rgb(255, 179, 80)",
        "hsl": "hsl(34, 100%, 66%)",
        "red": 255,
        "green": 179,
        "blue": 80,
        "hue": 34,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FFBD68",
        "rgb": "rgb(255, 189, 104)",
        "hsl": "hsl(34, 100%, 70%)",
        "red": 255,
        "green": 189,
        "blue": 104,
        "hue": 34,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#FFDAAB",
        "rgb": "rgb(255, 218, 171)",
        "hsl": "hsl(34, 100%, 84%)",
        "red": 255,
        "green": 218,
        "blue": 171,
        "hue": 34,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#FFDEB3",
        "rgb": "rgb(255, 222, 179)",
        "hsl": "hsl(34, 100%, 85%)",
        "red": 255,
        "green": 222,
        "blue": 179,
        "hue": 34,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#58534C",
        "rgb": "rgb(88, 83, 76)",
        "hsl": "hsl(35, 7%, 32%)",
        "red": 88,
        "green": 83,
        "blue": 76,
        "hue": 35,
        "saturation": 7,
        "lightness": 32
    }, {
        "hex": "#978F84",
        "rgb": "rgb(151, 143, 132)",
        "hsl": "hsl(35, 8%, 55%)",
        "red": 151,
        "green": 143,
        "blue": 132,
        "hue": 35,
        "saturation": 8,
        "lightness": 55
    }, {
        "hex": "#7A6A53",
        "rgb": "rgb(122, 106, 83)",
        "hsl": "hsl(35, 19%, 40%)",
        "red": 122,
        "green": 106,
        "blue": 83,
        "hue": 35,
        "saturation": 19,
        "lightness": 40
    }, {
        "hex": "#B29A78",
        "rgb": "rgb(178, 154, 120)",
        "hsl": "hsl(35, 27%, 58%)",
        "red": 178,
        "green": 154,
        "blue": 120,
        "hue": 35,
        "saturation": 27,
        "lightness": 58
    }, {
        "hex": "#2B2318",
        "rgb": "rgb(43, 35, 24)",
        "hsl": "hsl(35, 28%, 13%)",
        "red": 43,
        "green": 35,
        "blue": 24,
        "hue": 35,
        "saturation": 28,
        "lightness": 13
    }, {
        "hex": "#AC8C5E",
        "rgb": "rgb(172, 140, 94)",
        "hsl": "hsl(35, 32%, 52%)",
        "red": 172,
        "green": 140,
        "blue": 94,
        "hue": 35,
        "saturation": 32,
        "lightness": 52
    }, {
        "hex": "#CFB590",
        "rgb": "rgb(207, 181, 144)",
        "hsl": "hsl(35, 40%, 69%)",
        "red": 207,
        "green": 181,
        "blue": 144,
        "hue": 35,
        "saturation": 40,
        "lightness": 69
    }, {
        "hex": "#DFCDB4",
        "rgb": "rgb(223, 205, 180)",
        "hsl": "hsl(35, 40%, 79%)",
        "red": 223,
        "green": 205,
        "blue": 180,
        "hue": 35,
        "saturation": 40,
        "lightness": 79
    }, {
        "hex": "#E6D0B1",
        "rgb": "rgb(230, 208, 177)",
        "hsl": "hsl(35, 51%, 80%)",
        "red": 230,
        "green": 208,
        "blue": 177,
        "hue": 35,
        "saturation": 51,
        "lightness": 80
    }, {
        "hex": "#B7833A",
        "rgb": "rgb(183, 131, 58)",
        "hsl": "hsl(35, 52%, 47%)",
        "red": 183,
        "green": 131,
        "blue": 58,
        "hue": 35,
        "saturation": 52,
        "lightness": 47
    }, {
        "hex": "#E6CBA5",
        "rgb": "rgb(230, 203, 165)",
        "hsl": "hsl(35, 57%, 77%)",
        "red": 230,
        "green": 203,
        "blue": 165,
        "hue": 35,
        "saturation": 57,
        "lightness": 77
    }, {
        "hex": "#E7CBA4",
        "rgb": "rgb(231, 203, 164)",
        "hsl": "hsl(35, 58%, 77%)",
        "red": 231,
        "green": 203,
        "blue": 164,
        "hue": 35,
        "saturation": 58,
        "lightness": 77
    }, {
        "hex": "#EDD8BB",
        "rgb": "rgb(237, 216, 187)",
        "hsl": "hsl(35, 58%, 83%)",
        "red": 237,
        "green": 216,
        "blue": 187,
        "hue": 35,
        "saturation": 58,
        "lightness": 83
    }, {
        "hex": "#C78933",
        "rgb": "rgb(199, 137, 51)",
        "hsl": "hsl(35, 59%, 49%)",
        "red": 199,
        "green": 137,
        "blue": 51,
        "hue": 35,
        "saturation": 59,
        "lightness": 49
    }, {
        "hex": "#E9CFAA",
        "rgb": "rgb(233, 207, 170)",
        "hsl": "hsl(35, 59%, 79%)",
        "red": 233,
        "green": 207,
        "blue": 170,
        "hue": 35,
        "saturation": 59,
        "lightness": 79
    }, {
        "hex": "#E0AE67",
        "rgb": "rgb(224, 174, 103)",
        "hsl": "hsl(35, 66%, 64%)",
        "red": 224,
        "green": 174,
        "blue": 103,
        "hue": 35,
        "saturation": 66,
        "lightness": 64
    }, {
        "hex": "#EBC288",
        "rgb": "rgb(235, 194, 136)",
        "hsl": "hsl(35, 71%, 73%)",
        "red": 235,
        "green": 194,
        "blue": 136,
        "hue": 35,
        "saturation": 71,
        "lightness": 73
    }, {
        "hex": "#E19F41",
        "rgb": "rgb(225, 159, 65)",
        "hsl": "hsl(35, 73%, 57%)",
        "red": 225,
        "green": 159,
        "blue": 65,
        "hue": 35,
        "saturation": 73,
        "lightness": 57
    }, {
        "hex": "#EDC68E",
        "rgb": "rgb(237, 198, 142)",
        "hsl": "hsl(35, 73%, 74%)",
        "red": 237,
        "green": 198,
        "blue": 142,
        "hue": 35,
        "saturation": 73,
        "lightness": 74
    }, {
        "hex": "#F5DDBB",
        "rgb": "rgb(245, 221, 187)",
        "hsl": "hsl(35, 74%, 85%)",
        "red": 245,
        "green": 221,
        "blue": 187,
        "hue": 35,
        "saturation": 74,
        "lightness": 85
    }, {
        "hex": "#EAB05E",
        "rgb": "rgb(234, 176, 94)",
        "hsl": "hsl(35, 77%, 64%)",
        "red": 234,
        "green": 176,
        "blue": 94,
        "hue": 35,
        "saturation": 77,
        "lightness": 64
    }, {
        "hex": "#EEB15B",
        "rgb": "rgb(238, 177, 91)",
        "hsl": "hsl(35, 81%, 65%)",
        "red": 238,
        "green": 177,
        "blue": 91,
        "hue": 35,
        "saturation": 81,
        "lightness": 65
    }, {
        "hex": "#F8DFBD",
        "rgb": "rgb(248, 223, 189)",
        "hsl": "hsl(35, 81%, 86%)",
        "red": 248,
        "green": 223,
        "blue": 189,
        "hue": 35,
        "saturation": 81,
        "lightness": 86
    }, {
        "hex": "#F0B96B",
        "rgb": "rgb(240, 185, 107)",
        "hsl": "hsl(35, 82%, 68%)",
        "red": 240,
        "green": 185,
        "blue": 107,
        "hue": 35,
        "saturation": 82,
        "lightness": 68
    }, {
        "hex": "#EFAE54",
        "rgb": "rgb(239, 174, 84)",
        "hsl": "hsl(35, 83%, 63%)",
        "red": 239,
        "green": 174,
        "blue": 84,
        "hue": 35,
        "saturation": 83,
        "lightness": 63
    }, {
        "hex": "#F8DCB4",
        "rgb": "rgb(248, 220, 180)",
        "hsl": "hsl(35, 83%, 84%)",
        "red": 248,
        "green": 220,
        "blue": 180,
        "hue": 35,
        "saturation": 83,
        "lightness": 84
    }, {
        "hex": "#D07E0E",
        "rgb": "rgb(208, 126, 14)",
        "hsl": "hsl(35, 87%, 44%)",
        "red": 208,
        "green": 126,
        "blue": 14,
        "hue": 35,
        "saturation": 87,
        "lightness": 44
    }, {
        "hex": "#F2A73D",
        "rgb": "rgb(242, 167, 61)",
        "hsl": "hsl(35, 87%, 59%)",
        "red": 242,
        "green": 167,
        "blue": 61,
        "hue": 35,
        "saturation": 87,
        "lightness": 59
    }, {
        "hex": "#F9D9AC",
        "rgb": "rgb(249, 217, 172)",
        "hsl": "hsl(35, 87%, 83%)",
        "red": 249,
        "green": 217,
        "blue": 172,
        "hue": 35,
        "saturation": 87,
        "lightness": 83
    }, {
        "hex": "#F0971C",
        "rgb": "rgb(240, 151, 28)",
        "hsl": "hsl(35, 88%, 53%)",
        "red": 240,
        "green": 151,
        "blue": 28,
        "hue": 35,
        "saturation": 88,
        "lightness": 53
    }, {
        "hex": "#FADDB4",
        "rgb": "rgb(250, 221, 180)",
        "hsl": "hsl(35, 88%, 84%)",
        "red": 250,
        "green": 221,
        "blue": 180,
        "hue": 35,
        "saturation": 88,
        "lightness": 84
    }, {
        "hex": "#F8C681",
        "rgb": "rgb(248, 198, 129)",
        "hsl": "hsl(35, 89%, 74%)",
        "red": 248,
        "green": 198,
        "blue": 129,
        "hue": 35,
        "saturation": 89,
        "lightness": 74
    }, {
        "hex": "#FBDCB0",
        "rgb": "rgb(251, 220, 176)",
        "hsl": "hsl(35, 90%, 84%)",
        "red": 251,
        "green": 220,
        "blue": 176,
        "hue": 35,
        "saturation": 90,
        "lightness": 84
    }, {
        "hex": "#F6AA3D",
        "rgb": "rgb(246, 170, 61)",
        "hsl": "hsl(35, 91%, 60%)",
        "red": 246,
        "green": 170,
        "blue": 61,
        "hue": 35,
        "saturation": 91,
        "lightness": 60
    }, {
        "hex": "#FCBF6B",
        "rgb": "rgb(252, 191, 107)",
        "hsl": "hsl(35, 96%, 70%)",
        "red": 252,
        "green": 191,
        "blue": 107,
        "hue": 35,
        "saturation": 96,
        "lightness": 70
    }, {
        "hex": "#FCBF6B",
        "rgb": "rgb(252, 191, 107)",
        "hsl": "hsl(35, 96%, 70%)",
        "red": 252,
        "green": 191,
        "blue": 107,
        "hue": 35,
        "saturation": 96,
        "lightness": 70
    }, {
        "hex": "#FCB653",
        "rgb": "rgb(252, 182, 83)",
        "hsl": "hsl(35, 97%, 66%)",
        "red": 252,
        "green": 182,
        "blue": 83,
        "hue": 35,
        "saturation": 97,
        "lightness": 66
    }, {
        "hex": "#E88700",
        "rgb": "rgb(232, 135, 0)",
        "hsl": "hsl(35, 100%, 45%)",
        "red": 232,
        "green": 135,
        "blue": 0,
        "hue": 35,
        "saturation": 100,
        "lightness": 45
    }, {
        "hex": "#FE9600",
        "rgb": "rgb(254, 150, 0)",
        "hsl": "hsl(35, 100%, 50%)",
        "red": 254,
        "green": 150,
        "blue": 0,
        "hue": 35,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF9F15",
        "rgb": "rgb(255, 159, 21)",
        "hsl": "hsl(35, 100%, 54%)",
        "red": 255,
        "green": 159,
        "blue": 21,
        "hue": 35,
        "saturation": 100,
        "lightness": 54
    }, {
        "hex": "#FFB145",
        "rgb": "rgb(255, 177, 69)",
        "hsl": "hsl(35, 100%, 64%)",
        "red": 255,
        "green": 177,
        "blue": 69,
        "hue": 35,
        "saturation": 100,
        "lightness": 64
    }, {
        "hex": "#FFB752",
        "rgb": "rgb(255, 183, 82)",
        "hsl": "hsl(35, 100%, 66%)",
        "red": 255,
        "green": 183,
        "blue": 82,
        "hue": 35,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FFBB5E",
        "rgb": "rgb(255, 187, 94)",
        "hsl": "hsl(35, 100%, 68%)",
        "red": 255,
        "green": 187,
        "blue": 94,
        "hue": 35,
        "saturation": 100,
        "lightness": 68
    }, {
        "hex": "#FFDAA6",
        "rgb": "rgb(255, 218, 166)",
        "hsl": "hsl(35, 100%, 83%)",
        "red": 255,
        "green": 218,
        "blue": 166,
        "hue": 35,
        "saturation": 100,
        "lightness": 83
    }, {
        "hex": "#FFE2BA",
        "rgb": "rgb(255, 226, 186)",
        "hsl": "hsl(35, 100%, 86%)",
        "red": 255,
        "green": 226,
        "blue": 186,
        "hue": 35,
        "saturation": 100,
        "lightness": 86
    }, {
        "hex": "#FFE2BA",
        "rgb": "rgb(255, 226, 186)",
        "hsl": "hsl(35, 100%, 86%)",
        "red": 255,
        "green": 226,
        "blue": 186,
        "hue": 35,
        "saturation": 100,
        "lightness": 86
    }, {
        "hex": "#FFEACC",
        "rgb": "rgb(255, 234, 204)",
        "hsl": "hsl(35, 100%, 90%)",
        "red": 255,
        "green": 234,
        "blue": 204,
        "hue": 35,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#FFECD1",
        "rgb": "rgb(255, 236, 209)",
        "hsl": "hsl(35, 100%, 91%)",
        "red": 255,
        "green": 236,
        "blue": 209,
        "hue": 35,
        "saturation": 100,
        "lightness": 91
    }, {
        "hex": "#5E5A54",
        "rgb": "rgb(94, 90, 84)",
        "hsl": "hsl(36, 6%, 35%)",
        "red": 94,
        "green": 90,
        "blue": 84,
        "hue": 36,
        "saturation": 6,
        "lightness": 35
    }, {
        "hex": "#807462",
        "rgb": "rgb(128, 116, 98)",
        "hsl": "hsl(36, 13%, 44%)",
        "red": 128,
        "green": 116,
        "blue": 98,
        "hue": 36,
        "saturation": 13,
        "lightness": 44
    }, {
        "hex": "#4A4031",
        "rgb": "rgb(74, 64, 49)",
        "hsl": "hsl(36, 20%, 24%)",
        "red": 74,
        "green": 64,
        "blue": 49,
        "hue": 36,
        "saturation": 20,
        "lightness": 24
    }, {
        "hex": "#5A4E3C",
        "rgb": "rgb(90, 78, 60)",
        "hsl": "hsl(36, 20%, 29%)",
        "red": 90,
        "green": 78,
        "blue": 60,
        "hue": 36,
        "saturation": 20,
        "lightness": 29
    }, {
        "hex": "#B8AA95",
        "rgb": "rgb(184, 170, 149)",
        "hsl": "hsl(36, 20%, 65%)",
        "red": 184,
        "green": 170,
        "blue": 149,
        "hue": 36,
        "saturation": 20,
        "lightness": 65
    }, {
        "hex": "#E2D5C1",
        "rgb": "rgb(226, 213, 193)",
        "hsl": "hsl(36, 36%, 82%)",
        "red": 226,
        "green": 213,
        "blue": 193,
        "hue": 36,
        "saturation": 36,
        "lightness": 82
    }, {
        "hex": "#3A2D19",
        "rgb": "rgb(58, 45, 25)",
        "hsl": "hsl(36, 40%, 16%)",
        "red": 58,
        "green": 45,
        "blue": 25,
        "hue": 36,
        "saturation": 40,
        "lightness": 16
    }, {
        "hex": "#CDB28A",
        "rgb": "rgb(205, 178, 138)",
        "hsl": "hsl(36, 40%, 67%)",
        "red": 205,
        "green": 178,
        "blue": 138,
        "hue": 36,
        "saturation": 40,
        "lightness": 67
    }, {
        "hex": "#D1B68D",
        "rgb": "rgb(209, 182, 141)",
        "hsl": "hsl(36, 42%, 69%)",
        "red": 209,
        "green": 182,
        "blue": 141,
        "hue": 36,
        "saturation": 42,
        "lightness": 69
    }, {
        "hex": "#DABD90",
        "rgb": "rgb(218, 189, 144)",
        "hsl": "hsl(36, 50%, 71%)",
        "red": 218,
        "green": 189,
        "blue": 144,
        "hue": 36,
        "saturation": 50,
        "lightness": 71
    }, {
        "hex": "#E6D1B1",
        "rgb": "rgb(230, 209, 177)",
        "hsl": "hsl(36, 51%, 80%)",
        "red": 230,
        "green": 209,
        "blue": 177,
        "hue": 36,
        "saturation": 51,
        "lightness": 80
    }, {
        "hex": "#E8D5B9",
        "rgb": "rgb(232, 213, 185)",
        "hsl": "hsl(36, 51%, 82%)",
        "red": 232,
        "green": 213,
        "blue": 185,
        "hue": 36,
        "saturation": 51,
        "lightness": 82
    }, {
        "hex": "#D1A664",
        "rgb": "rgb(209, 166, 100)",
        "hsl": "hsl(36, 54%, 61%)",
        "red": 209,
        "green": 166,
        "blue": 100,
        "hue": 36,
        "saturation": 54,
        "lightness": 61
    }, {
        "hex": "#37260C",
        "rgb": "rgb(55, 38, 12)",
        "hsl": "hsl(36, 64%, 13%)",
        "red": 55,
        "green": 38,
        "blue": 12,
        "hue": 36,
        "saturation": 64,
        "lightness": 13
    }, {
        "hex": "#DEB069",
        "rgb": "rgb(222, 176, 105)",
        "hsl": "hsl(36, 64%, 64%)",
        "red": 222,
        "green": 176,
        "blue": 105,
        "hue": 36,
        "saturation": 64,
        "lightness": 64
    }, {
        "hex": "#DA9C3C",
        "rgb": "rgb(218, 156, 60)",
        "hsl": "hsl(36, 68%, 55%)",
        "red": 218,
        "green": 156,
        "blue": 60,
        "hue": 36,
        "saturation": 68,
        "lightness": 55
    }, {
        "hex": "#865A19",
        "rgb": "rgb(134, 90, 25)",
        "hsl": "hsl(36, 69%, 31%)",
        "red": 134,
        "green": 90,
        "blue": 25,
        "hue": 36,
        "saturation": 69,
        "lightness": 31
    }, {
        "hex": "#F6E6CE",
        "rgb": "rgb(246, 230, 206)",
        "hsl": "hsl(36, 69%, 89%)",
        "red": 246,
        "green": 230,
        "blue": 206,
        "hue": 36,
        "saturation": 69,
        "lightness": 89
    }, {
        "hex": "#EAC388",
        "rgb": "rgb(234, 195, 136)",
        "hsl": "hsl(36, 70%, 73%)",
        "red": 234,
        "green": 195,
        "blue": 136,
        "hue": 36,
        "saturation": 70,
        "lightness": 73
    }, {
        "hex": "#F6E5CB",
        "rgb": "rgb(246, 229, 203)",
        "hsl": "hsl(36, 70%, 88%)",
        "red": 246,
        "green": 229,
        "blue": 203,
        "hue": 36,
        "saturation": 70,
        "lightness": 88
    }, {
        "hex": "#EBB970",
        "rgb": "rgb(235, 185, 112)",
        "hsl": "hsl(36, 75%, 68%)",
        "red": 235,
        "green": 185,
        "blue": 112,
        "hue": 36,
        "saturation": 75,
        "lightness": 68
    }, {
        "hex": "#EBB667",
        "rgb": "rgb(235, 182, 103)",
        "hsl": "hsl(36, 77%, 66%)",
        "red": 235,
        "green": 182,
        "blue": 103,
        "hue": 36,
        "saturation": 77,
        "lightness": 66
    }, {
        "hex": "#FAEDD9",
        "rgb": "rgb(250, 237, 217)",
        "hsl": "hsl(36, 77%, 92%)",
        "red": 250,
        "green": 237,
        "blue": 217,
        "hue": 36,
        "saturation": 77,
        "lightness": 92
    }, {
        "hex": "#F5C273",
        "rgb": "rgb(245, 194, 115)",
        "hsl": "hsl(36, 87%, 71%)",
        "red": 245,
        "green": 194,
        "blue": 115,
        "hue": 36,
        "saturation": 87,
        "lightness": 71
    }, {
        "hex": "#F5B04B",
        "rgb": "rgb(245, 176, 75)",
        "hsl": "hsl(36, 89%, 63%)",
        "red": 245,
        "green": 176,
        "blue": 75,
        "hue": 36,
        "saturation": 89,
        "lightness": 63
    }, {
        "hex": "#FAD9A6",
        "rgb": "rgb(250, 217, 166)",
        "hsl": "hsl(36, 89%, 82%)",
        "red": 250,
        "green": 217,
        "blue": 166,
        "hue": 36,
        "saturation": 89,
        "lightness": 82
    }, {
        "hex": "#F6B149",
        "rgb": "rgb(246, 177, 73)",
        "hsl": "hsl(36, 91%, 63%)",
        "red": 246,
        "green": 177,
        "blue": 73,
        "hue": 36,
        "saturation": 91,
        "lightness": 63
    }, {
        "hex": "#FAB243",
        "rgb": "rgb(250, 178, 67)",
        "hsl": "hsl(36, 95%, 62%)",
        "red": 250,
        "green": 178,
        "blue": 67,
        "hue": 36,
        "saturation": 95,
        "lightness": 62
    }, {
        "hex": "#F99400",
        "rgb": "rgb(249, 148, 0)",
        "hsl": "hsl(36, 100%, 49%)",
        "red": 249,
        "green": 148,
        "blue": 0,
        "hue": 36,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FF9900",
        "rgb": "rgb(255, 153, 0)",
        "hsl": "hsl(36, 100%, 50%)",
        "red": 255,
        "green": 153,
        "blue": 0,
        "hue": 36,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FFA927",
        "rgb": "rgb(255, 169, 39)",
        "hsl": "hsl(36, 100%, 58%)",
        "red": 255,
        "green": 169,
        "blue": 39,
        "hue": 36,
        "saturation": 100,
        "lightness": 58
    }, {
        "hex": "#FFC978",
        "rgb": "rgb(255, 201, 120)",
        "hsl": "hsl(36, 100%, 74%)",
        "red": 255,
        "green": 201,
        "blue": 120,
        "hue": 36,
        "saturation": 100,
        "lightness": 74
    }, {
        "hex": "#FFF4E3",
        "rgb": "rgb(255, 244, 227)",
        "hsl": "hsl(36, 100%, 95%)",
        "red": 255,
        "green": 244,
        "blue": 227,
        "hue": 36,
        "saturation": 100,
        "lightness": 95
    }, {
        "hex": "#9C9994",
        "rgb": "rgb(156, 153, 148)",
        "hsl": "hsl(37, 4%, 60%)",
        "red": 156,
        "green": 153,
        "blue": 148,
        "hue": 37,
        "saturation": 4,
        "lightness": 60
    }, {
        "hex": "#2B2823",
        "rgb": "rgb(43, 40, 35)",
        "hsl": "hsl(37, 10%, 15%)",
        "red": 43,
        "green": 40,
        "blue": 35,
        "hue": 37,
        "saturation": 10,
        "lightness": 15
    }, {
        "hex": "#847B6D",
        "rgb": "rgb(132, 123, 109)",
        "hsl": "hsl(37, 10%, 47%)",
        "red": 132,
        "green": 123,
        "blue": 109,
        "hue": 37,
        "saturation": 10,
        "lightness": 47
    }, {
        "hex": "#403B33",
        "rgb": "rgb(64, 59, 51)",
        "hsl": "hsl(37, 11%, 23%)",
        "red": 64,
        "green": 59,
        "blue": 51,
        "hue": 37,
        "saturation": 11,
        "lightness": 23
    }, {
        "hex": "#7A6F5D",
        "rgb": "rgb(122, 111, 93)",
        "hsl": "hsl(37, 13%, 42%)",
        "red": 122,
        "green": 111,
        "blue": 93,
        "hue": 37,
        "saturation": 13,
        "lightness": 42
    }, {
        "hex": "#776C5A",
        "rgb": "rgb(119, 108, 90)",
        "hsl": "hsl(37, 14%, 41%)",
        "red": 119,
        "green": 108,
        "blue": 90,
        "hue": 37,
        "saturation": 14,
        "lightness": 41
    }, {
        "hex": "#52493A",
        "rgb": "rgb(82, 73, 58)",
        "hsl": "hsl(37, 17%, 27%)",
        "red": 82,
        "green": 73,
        "blue": 58,
        "hue": 37,
        "saturation": 17,
        "lightness": 27
    }, {
        "hex": "#8C7C62",
        "rgb": "rgb(140, 124, 98)",
        "hsl": "hsl(37, 18%, 47%)",
        "red": 140,
        "green": 124,
        "blue": 98,
        "hue": 37,
        "saturation": 18,
        "lightness": 47
    }, {
        "hex": "#8B7A5E",
        "rgb": "rgb(139, 122, 94)",
        "hsl": "hsl(37, 19%, 46%)",
        "red": 139,
        "green": 122,
        "blue": 94,
        "hue": 37,
        "saturation": 19,
        "lightness": 46
    }, {
        "hex": "#AD9978",
        "rgb": "rgb(173, 153, 120)",
        "hsl": "hsl(37, 24%, 57%)",
        "red": 173,
        "green": 153,
        "blue": 120,
        "hue": 37,
        "saturation": 24,
        "lightness": 57
    }, {
        "hex": "#DED6C9",
        "rgb": "rgb(222, 214, 201)",
        "hsl": "hsl(37, 24%, 83%)",
        "red": 222,
        "green": 214,
        "blue": 201,
        "hue": 37,
        "saturation": 24,
        "lightness": 83
    }, {
        "hex": "#967C52",
        "rgb": "rgb(150, 124, 82)",
        "hsl": "hsl(37, 29%, 45%)",
        "red": 150,
        "green": 124,
        "blue": 82,
        "hue": 37,
        "saturation": 29,
        "lightness": 45
    }, {
        "hex": "#E6DAC6",
        "rgb": "rgb(230, 218, 198)",
        "hsl": "hsl(37, 39%, 84%)",
        "red": 230,
        "green": 218,
        "blue": 198,
        "hue": 37,
        "saturation": 39,
        "lightness": 84
    }, {
        "hex": "#E8DDCB",
        "rgb": "rgb(232, 221, 203)",
        "hsl": "hsl(37, 39%, 85%)",
        "red": 232,
        "green": 221,
        "blue": 203,
        "hue": 37,
        "saturation": 39,
        "lightness": 85
    }, {
        "hex": "#EBDFCC",
        "rgb": "rgb(235, 223, 204)",
        "hsl": "hsl(37, 44%, 86%)",
        "red": 235,
        "green": 223,
        "blue": 204,
        "hue": 37,
        "saturation": 44,
        "lightness": 86
    }, {
        "hex": "#E8D5B7",
        "rgb": "rgb(232, 213, 183)",
        "hsl": "hsl(37, 52%, 81%)",
        "red": 232,
        "green": 213,
        "blue": 183,
        "hue": 37,
        "saturation": 52,
        "lightness": 81
    }, {
        "hex": "#5E4318",
        "rgb": "rgb(94, 67, 24)",
        "hsl": "hsl(37, 59%, 23%)",
        "red": 94,
        "green": 67,
        "blue": 24,
        "hue": 37,
        "saturation": 59,
        "lightness": 23
    }, {
        "hex": "#E2C18D",
        "rgb": "rgb(226, 193, 141)",
        "hsl": "hsl(37, 59%, 72%)",
        "red": 226,
        "green": 193,
        "blue": 141,
        "hue": 37,
        "saturation": 59,
        "lightness": 72
    }, {
        "hex": "#F9F2E7",
        "rgb": "rgb(249, 242, 231)",
        "hsl": "hsl(37, 60%, 94%)",
        "red": 249,
        "green": 242,
        "blue": 231,
        "hue": 37,
        "saturation": 60,
        "lightness": 94
    }, {
        "hex": "#EBCEA0",
        "rgb": "rgb(235, 206, 160)",
        "hsl": "hsl(37, 65%, 77%)",
        "red": 235,
        "green": 206,
        "blue": 160,
        "hue": 37,
        "saturation": 65,
        "lightness": 77
    }, {
        "hex": "#EBC588",
        "rgb": "rgb(235, 197, 136)",
        "hsl": "hsl(37, 71%, 73%)",
        "red": 235,
        "green": 197,
        "blue": 136,
        "hue": 37,
        "saturation": 71,
        "lightness": 73
    }, {
        "hex": "#E8B666",
        "rgb": "rgb(232, 182, 102)",
        "hsl": "hsl(37, 74%, 65%)",
        "red": 232,
        "green": 182,
        "blue": 102,
        "hue": 37,
        "saturation": 74,
        "lightness": 65
    }, {
        "hex": "#F7E4C6",
        "rgb": "rgb(247, 228, 198)",
        "hsl": "hsl(37, 75%, 87%)",
        "red": 247,
        "green": 228,
        "blue": 198,
        "hue": 37,
        "saturation": 75,
        "lightness": 87
    }, {
        "hex": "#F3D5A5",
        "rgb": "rgb(243, 213, 165)",
        "hsl": "hsl(37, 76%, 80%)",
        "red": 243,
        "green": 213,
        "blue": 165,
        "hue": 37,
        "saturation": 76,
        "lightness": 80
    }, {
        "hex": "#DF931B",
        "rgb": "rgb(223, 147, 27)",
        "hsl": "hsl(37, 78%, 49%)",
        "red": 223,
        "green": 147,
        "blue": 27,
        "hue": 37,
        "saturation": 78,
        "lightness": 49
    }, {
        "hex": "#EFAC41",
        "rgb": "rgb(239, 172, 65)",
        "hsl": "hsl(37, 84%, 60%)",
        "red": 239,
        "green": 172,
        "blue": 65,
        "hue": 37,
        "saturation": 84,
        "lightness": 60
    }, {
        "hex": "#F8D8A5",
        "rgb": "rgb(248, 216, 165)",
        "hsl": "hsl(37, 86%, 81%)",
        "red": 248,
        "green": 216,
        "blue": 165,
        "hue": 37,
        "saturation": 86,
        "lightness": 81
    }, {
        "hex": "#FBE2B9",
        "rgb": "rgb(251, 226, 185)",
        "hsl": "hsl(37, 89%, 85%)",
        "red": 251,
        "green": 226,
        "blue": 185,
        "hue": 37,
        "saturation": 89,
        "lightness": 85
    }, {
        "hex": "#F5B349",
        "rgb": "rgb(245, 179, 73)",
        "hsl": "hsl(37, 90%, 62%)",
        "red": 245,
        "green": 179,
        "blue": 73,
        "hue": 37,
        "saturation": 90,
        "lightness": 62
    }, {
        "hex": "#FCE4BE",
        "rgb": "rgb(252, 228, 190)",
        "hsl": "hsl(37, 91%, 87%)",
        "red": 252,
        "green": 228,
        "blue": 190,
        "hue": 37,
        "saturation": 91,
        "lightness": 87
    }, {
        "hex": "#F69A0B",
        "rgb": "rgb(246, 154, 11)",
        "hsl": "hsl(37, 93%, 50%)",
        "red": 246,
        "green": 154,
        "blue": 11,
        "hue": 37,
        "saturation": 93,
        "lightness": 50
    }, {
        "hex": "#F7A21B",
        "rgb": "rgb(247, 162, 27)",
        "hsl": "hsl(37, 93%, 54%)",
        "red": 247,
        "green": 162,
        "blue": 27,
        "hue": 37,
        "saturation": 93,
        "lightness": 54
    }, {
        "hex": "#F39708",
        "rgb": "rgb(243, 151, 8)",
        "hsl": "hsl(37, 94%, 49%)",
        "red": 243,
        "green": 151,
        "blue": 8,
        "hue": 37,
        "saturation": 94,
        "lightness": 49
    }, {
        "hex": "#F8A523",
        "rgb": "rgb(248, 165, 35)",
        "hsl": "hsl(37, 94%, 55%)",
        "red": 248,
        "green": 165,
        "blue": 35,
        "hue": 37,
        "saturation": 94,
        "lightness": 55
    }, {
        "hex": "#FBCF86",
        "rgb": "rgb(251, 207, 134)",
        "hsl": "hsl(37, 94%, 75%)",
        "red": 251,
        "green": 207,
        "blue": 134,
        "hue": 37,
        "saturation": 94,
        "lightness": 75
    }, {
        "hex": "#FDBF5C",
        "rgb": "rgb(253, 191, 92)",
        "hsl": "hsl(37, 98%, 68%)",
        "red": 253,
        "green": 191,
        "blue": 92,
        "hue": 37,
        "saturation": 98,
        "lightness": 68
    }, {
        "hex": "#FEDFAE",
        "rgb": "rgb(254, 223, 174)",
        "hsl": "hsl(37, 98%, 84%)",
        "red": 254,
        "green": 223,
        "blue": 174,
        "hue": 37,
        "saturation": 98,
        "lightness": 84
    }, {
        "hex": "#FFB238",
        "rgb": "rgb(255, 178, 56)",
        "hsl": "hsl(37, 100%, 61%)",
        "red": 255,
        "green": 178,
        "blue": 56,
        "hue": 37,
        "saturation": 100,
        "lightness": 61
    }, {
        "hex": "#FFB43E",
        "rgb": "rgb(255, 180, 62)",
        "hsl": "hsl(37, 100%, 62%)",
        "red": 255,
        "green": 180,
        "blue": 62,
        "hue": 37,
        "saturation": 100,
        "lightness": 62
    }, {
        "hex": "#FFC870",
        "rgb": "rgb(255, 200, 112)",
        "hsl": "hsl(37, 100%, 72%)",
        "red": 255,
        "green": 200,
        "blue": 112,
        "hue": 37,
        "saturation": 100,
        "lightness": 72
    }, {
        "hex": "#FFCC7A",
        "rgb": "rgb(255, 204, 122)",
        "hsl": "hsl(37, 100%, 74%)",
        "red": 255,
        "green": 204,
        "blue": 122,
        "hue": 37,
        "saturation": 100,
        "lightness": 74
    }, {
        "hex": "#FFDFAB",
        "rgb": "rgb(255, 223, 171)",
        "hsl": "hsl(37, 100%, 84%)",
        "red": 255,
        "green": 223,
        "blue": 171,
        "hue": 37,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#FFE4B8",
        "rgb": "rgb(255, 228, 184)",
        "hsl": "hsl(37, 100%, 86%)",
        "red": 255,
        "green": 228,
        "blue": 184,
        "hue": 37,
        "saturation": 100,
        "lightness": 86
    }, {
        "hex": "#FFE6BD",
        "rgb": "rgb(255, 230, 189)",
        "hsl": "hsl(37, 100%, 87%)",
        "red": 255,
        "green": 230,
        "blue": 189,
        "hue": 37,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#59554E",
        "rgb": "rgb(89, 85, 78)",
        "hsl": "hsl(38, 7%, 33%)",
        "red": 89,
        "green": 85,
        "blue": 78,
        "hue": 38,
        "saturation": 7,
        "lightness": 33
    }, {
        "hex": "#9D9382",
        "rgb": "rgb(157, 147, 130)",
        "hsl": "hsl(38, 12%, 56%)",
        "red": 157,
        "green": 147,
        "blue": 130,
        "hue": 38,
        "saturation": 12,
        "lightness": 56
    }, {
        "hex": "#302C25",
        "rgb": "rgb(48, 44, 37)",
        "hsl": "hsl(38, 13%, 17%)",
        "red": 48,
        "green": 44,
        "blue": 37,
        "hue": 38,
        "saturation": 13,
        "lightness": 17
    }, {
        "hex": "#B4A68E",
        "rgb": "rgb(180, 166, 142)",
        "hsl": "hsl(38, 20%, 63%)",
        "red": 180,
        "green": 166,
        "blue": 142,
        "hue": 38,
        "saturation": 20,
        "lightness": 63
    }, {
        "hex": "#EBE7E0",
        "rgb": "rgb(235, 231, 224)",
        "hsl": "hsl(38, 22%, 90%)",
        "red": 235,
        "green": 231,
        "blue": 224,
        "hue": 38,
        "saturation": 22,
        "lightness": 90
    }, {
        "hex": "#413726",
        "rgb": "rgb(65, 55, 38)",
        "hsl": "hsl(38, 26%, 20%)",
        "red": 65,
        "green": 55,
        "blue": 38,
        "hue": 38,
        "saturation": 26,
        "lightness": 20
    }, {
        "hex": "#A38A5F",
        "rgb": "rgb(163, 138, 95)",
        "hsl": "hsl(38, 27%, 51%)",
        "red": 163,
        "green": 138,
        "blue": 95,
        "hue": 38,
        "saturation": 27,
        "lightness": 51
    }, {
        "hex": "#BFAC8B",
        "rgb": "rgb(191, 172, 139)",
        "hsl": "hsl(38, 29%, 65%)",
        "red": 191,
        "green": 172,
        "blue": 139,
        "hue": 38,
        "saturation": 29,
        "lightness": 65
    }, {
        "hex": "#CCBCA1",
        "rgb": "rgb(204, 188, 161)",
        "hsl": "hsl(38, 30%, 72%)",
        "red": 204,
        "green": 188,
        "blue": 161,
        "hue": 38,
        "saturation": 30,
        "lightness": 72
    }, {
        "hex": "#E3DACB",
        "rgb": "rgb(227, 218, 203)",
        "hsl": "hsl(38, 30%, 84%)",
        "red": 227,
        "green": 218,
        "blue": 203,
        "hue": 38,
        "saturation": 30,
        "lightness": 84
    }, {
        "hex": "#E9E0D1",
        "rgb": "rgb(233, 224, 209)",
        "hsl": "hsl(38, 35%, 87%)",
        "red": 233,
        "green": 224,
        "blue": 209,
        "hue": 38,
        "saturation": 35,
        "lightness": 87
    }, {
        "hex": "#BFA374",
        "rgb": "rgb(191, 163, 116)",
        "hsl": "hsl(38, 37%, 60%)",
        "red": 191,
        "green": 163,
        "blue": 116,
        "hue": 38,
        "saturation": 37,
        "lightness": 60
    }, {
        "hex": "#D4BE99",
        "rgb": "rgb(212, 190, 153)",
        "hsl": "hsl(38, 41%, 72%)",
        "red": 212,
        "green": 190,
        "blue": 153,
        "hue": 38,
        "saturation": 41,
        "lightness": 72
    }, {
        "hex": "#EEE5D6",
        "rgb": "rgb(238, 229, 214)",
        "hsl": "hsl(38, 41%, 89%)",
        "red": 238,
        "green": 229,
        "blue": 214,
        "hue": 38,
        "saturation": 41,
        "lightness": 89
    }, {
        "hex": "#B99555",
        "rgb": "rgb(185, 149, 85)",
        "hsl": "hsl(38, 42%, 53%)",
        "red": 185,
        "green": 149,
        "blue": 85,
        "hue": 38,
        "saturation": 42,
        "lightness": 53
    }, {
        "hex": "#CDAF7B",
        "rgb": "rgb(205, 175, 123)",
        "hsl": "hsl(38, 45%, 64%)",
        "red": 205,
        "green": 175,
        "blue": 123,
        "hue": 38,
        "saturation": 45,
        "lightness": 64
    }, {
        "hex": "#DBC092",
        "rgb": "rgb(219, 192, 146)",
        "hsl": "hsl(38, 50%, 72%)",
        "red": 219,
        "green": 192,
        "blue": 146,
        "hue": 38,
        "saturation": 50,
        "lightness": 72
    }, {
        "hex": "#E7D3B0",
        "rgb": "rgb(231, 211, 176)",
        "hsl": "hsl(38, 53%, 80%)",
        "red": 231,
        "green": 211,
        "blue": 176,
        "hue": 38,
        "saturation": 53,
        "lightness": 80
    }, {
        "hex": "#CEA45C",
        "rgb": "rgb(206, 164, 92)",
        "hsl": "hsl(38, 54%, 58%)",
        "red": 206,
        "green": 164,
        "blue": 92,
        "hue": 38,
        "saturation": 54,
        "lightness": 58
    }, {
        "hex": "#E2C99F",
        "rgb": "rgb(226, 201, 159)",
        "hsl": "hsl(38, 54%, 75%)",
        "red": 226,
        "green": 201,
        "blue": 159,
        "hue": 38,
        "saturation": 54,
        "lightness": 75
    }, {
        "hex": "#F6EEE0",
        "rgb": "rgb(246, 238, 224)",
        "hsl": "hsl(38, 55%, 92%)",
        "red": 246,
        "green": 238,
        "blue": 224,
        "hue": 38,
        "saturation": 55,
        "lightness": 92
    }, {
        "hex": "#E8CC9C",
        "rgb": "rgb(232, 204, 156)",
        "hsl": "hsl(38, 62%, 76%)",
        "red": 232,
        "green": 204,
        "blue": 156,
        "hue": 38,
        "saturation": 62,
        "lightness": 76
    }, {
        "hex": "#F0DDBD",
        "rgb": "rgb(240, 221, 189)",
        "hsl": "hsl(38, 63%, 84%)",
        "red": 240,
        "green": 221,
        "blue": 189,
        "hue": 38,
        "saturation": 63,
        "lightness": 84
    }, {
        "hex": "#EFD9B4",
        "rgb": "rgb(239, 217, 180)",
        "hsl": "hsl(38, 65%, 82%)",
        "red": 239,
        "green": 217,
        "blue": 180,
        "hue": 38,
        "saturation": 65,
        "lightness": 82
    }, {
        "hex": "#F1DEBD",
        "rgb": "rgb(241, 222, 189)",
        "hsl": "hsl(38, 65%, 84%)",
        "red": 241,
        "green": 222,
        "blue": 189,
        "hue": 38,
        "saturation": 65,
        "lightness": 84
    }, {
        "hex": "#F1DDBA",
        "rgb": "rgb(241, 221, 186)",
        "hsl": "hsl(38, 66%, 84%)",
        "red": 241,
        "green": 221,
        "blue": 186,
        "hue": 38,
        "saturation": 66,
        "lightness": 84
    }, {
        "hex": "#E1B365",
        "rgb": "rgb(225, 179, 101)",
        "hsl": "hsl(38, 67%, 64%)",
        "red": 225,
        "green": 179,
        "blue": 101,
        "hue": 38,
        "saturation": 67,
        "lightness": 64
    }, {
        "hex": "#E8C382",
        "rgb": "rgb(232, 195, 130)",
        "hsl": "hsl(38, 69%, 71%)",
        "red": 232,
        "green": 195,
        "blue": 130,
        "hue": 38,
        "saturation": 69,
        "lightness": 71
    }, {
        "hex": "#F3DDB6",
        "rgb": "rgb(243, 221, 182)",
        "hsl": "hsl(38, 72%, 83%)",
        "red": 243,
        "green": 221,
        "blue": 182,
        "hue": 38,
        "saturation": 72,
        "lightness": 83
    }, {
        "hex": "#F4DDB4",
        "rgb": "rgb(244, 221, 180)",
        "hsl": "hsl(38, 74%, 83%)",
        "red": 244,
        "green": 221,
        "blue": 180,
        "hue": 38,
        "saturation": 74,
        "lightness": 83
    }, {
        "hex": "#EABA68",
        "rgb": "rgb(234, 186, 104)",
        "hsl": "hsl(38, 76%, 66%)",
        "red": 234,
        "green": 186,
        "blue": 104,
        "hue": 38,
        "saturation": 76,
        "lightness": 66
    }, {
        "hex": "#E7A83E",
        "rgb": "rgb(231, 168, 62)",
        "hsl": "hsl(38, 78%, 57%)",
        "red": 231,
        "green": 168,
        "blue": 62,
        "hue": 38,
        "saturation": 78,
        "lightness": 57
    }, {
        "hex": "#EEC276",
        "rgb": "rgb(238, 194, 118)",
        "hsl": "hsl(38, 78%, 70%)",
        "red": 238,
        "green": 194,
        "blue": 118,
        "hue": 38,
        "saturation": 78,
        "lightness": 70
    }, {
        "hex": "#F8E6C6",
        "rgb": "rgb(248, 230, 198)",
        "hsl": "hsl(38, 78%, 87%)",
        "red": 248,
        "green": 230,
        "blue": 198,
        "hue": 38,
        "saturation": 78,
        "lightness": 87
    }, {
        "hex": "#F8E4C1",
        "rgb": "rgb(248, 228, 193)",
        "hsl": "hsl(38, 80%, 86%)",
        "red": 248,
        "green": 228,
        "blue": 193,
        "hue": 38,
        "saturation": 80,
        "lightness": 86
    }, {
        "hex": "#EDB552",
        "rgb": "rgb(237, 181, 82)",
        "hsl": "hsl(38, 81%, 63%)",
        "red": 237,
        "green": 181,
        "blue": 82,
        "hue": 38,
        "saturation": 81,
        "lightness": 63
    }, {
        "hex": "#F6DAAB",
        "rgb": "rgb(246, 218, 171)",
        "hsl": "hsl(38, 81%, 82%)",
        "red": 246,
        "green": 218,
        "blue": 171,
        "hue": 38,
        "saturation": 81,
        "lightness": 82
    }, {
        "hex": "#FCF3E3",
        "rgb": "rgb(252, 243, 227)",
        "hsl": "hsl(38, 81%, 94%)",
        "red": 252,
        "green": 243,
        "blue": 227,
        "hue": 38,
        "saturation": 81,
        "lightness": 94
    }, {
        "hex": "#F4D092",
        "rgb": "rgb(244, 208, 146)",
        "hsl": "hsl(38, 82%, 76%)",
        "red": 244,
        "green": 208,
        "blue": 146,
        "hue": 38,
        "saturation": 82,
        "lightness": 76
    }, {
        "hex": "#F0A830",
        "rgb": "rgb(240, 168, 48)",
        "hsl": "hsl(38, 86%, 56%)",
        "red": 240,
        "green": 168,
        "blue": 48,
        "hue": 38,
        "saturation": 86,
        "lightness": 56
    }, {
        "hex": "#F6BE5F",
        "rgb": "rgb(246, 190, 95)",
        "hsl": "hsl(38, 89%, 67%)",
        "red": 246,
        "green": 190,
        "blue": 95,
        "hue": 38,
        "saturation": 89,
        "lightness": 67
    }, {
        "hex": "#FAD089",
        "rgb": "rgb(250, 208, 137)",
        "hsl": "hsl(38, 92%, 76%)",
        "red": 250,
        "green": 208,
        "blue": 137,
        "hue": 38,
        "saturation": 92,
        "lightness": 76
    }, {
        "hex": "#FDE6BD",
        "rgb": "rgb(253, 230, 189)",
        "hsl": "hsl(38, 94%, 87%)",
        "red": 253,
        "green": 230,
        "blue": 189,
        "hue": 38,
        "saturation": 94,
        "lightness": 87
    }, {
        "hex": "#EB9605",
        "rgb": "rgb(235, 150, 5)",
        "hsl": "hsl(38, 96%, 47%)",
        "red": 235,
        "green": 150,
        "blue": 5,
        "hue": 38,
        "saturation": 96,
        "lightness": 47
    }, {
        "hex": "#FEA304",
        "rgb": "rgb(254, 163, 4)",
        "hsl": "hsl(38, 99%, 51%)",
        "red": 254,
        "green": 163,
        "blue": 4,
        "hue": 38,
        "saturation": 99,
        "lightness": 51
    }, {
        "hex": "#FEAD26",
        "rgb": "rgb(254, 173, 38)",
        "hsl": "hsl(38, 99%, 57%)",
        "red": 254,
        "green": 173,
        "blue": 38,
        "hue": 38,
        "saturation": 99,
        "lightness": 57
    }, {
        "hex": "#FFC55F",
        "rgb": "rgb(255, 197, 95)",
        "hsl": "hsl(38, 100%, 69%)",
        "red": 255,
        "green": 197,
        "blue": 95,
        "hue": 38,
        "saturation": 100,
        "lightness": 69
    }, {
        "hex": "#FFD791",
        "rgb": "rgb(255, 215, 145)",
        "hsl": "hsl(38, 100%, 78%)",
        "red": 255,
        "green": 215,
        "blue": 145,
        "hue": 38,
        "saturation": 100,
        "lightness": 78
    }, {
        "hex": "#FFE3B3",
        "rgb": "rgb(255, 227, 179)",
        "hsl": "hsl(38, 100%, 85%)",
        "red": 255,
        "green": 227,
        "blue": 179,
        "hue": 38,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#FFE3B3",
        "rgb": "rgb(255, 227, 179)",
        "hsl": "hsl(38, 100%, 85%)",
        "red": 255,
        "green": 227,
        "blue": 179,
        "hue": 38,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#FFE7BF",
        "rgb": "rgb(255, 231, 191)",
        "hsl": "hsl(38, 100%, 87%)",
        "red": 255,
        "green": 231,
        "blue": 191,
        "hue": 38,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#FFECCB",
        "rgb": "rgb(255, 236, 203)",
        "hsl": "hsl(38, 100%, 90%)",
        "red": 255,
        "green": 236,
        "blue": 203,
        "hue": 38,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#FFEFD3",
        "rgb": "rgb(255, 239, 211)",
        "hsl": "hsl(38, 100%, 91%)",
        "red": 255,
        "green": 239,
        "blue": 211,
        "hue": 38,
        "saturation": 100,
        "lightness": 91
    }, {
        "hex": "#FFFCF7",
        "rgb": "rgb(255, 252, 247)",
        "hsl": "hsl(38, 100%, 98%)",
        "red": 255,
        "green": 252,
        "blue": 247,
        "hue": 38,
        "saturation": 100,
        "lightness": 98
    }, {
        "hex": "#837D72",
        "rgb": "rgb(131, 125, 114)",
        "hsl": "hsl(39, 7%, 48%)",
        "red": 131,
        "green": 125,
        "blue": 114,
        "hue": 39,
        "saturation": 7,
        "lightness": 48
    }, {
        "hex": "#635A49",
        "rgb": "rgb(99, 90, 73)",
        "hsl": "hsl(39, 15%, 34%)",
        "red": 99,
        "green": 90,
        "blue": 73,
        "hue": 39,
        "saturation": 15,
        "lightness": 34
    }, {
        "hex": "#BBB2A1",
        "rgb": "rgb(187, 178, 161)",
        "hsl": "hsl(39, 16%, 68%)",
        "red": 187,
        "green": 178,
        "blue": 161,
        "hue": 39,
        "saturation": 16,
        "lightness": 68
    }, {
        "hex": "#D1CBC0",
        "rgb": "rgb(209, 203, 192)",
        "hsl": "hsl(39, 16%, 79%)",
        "red": 209,
        "green": 203,
        "blue": 192,
        "hue": 39,
        "saturation": 16,
        "lightness": 79
    }, {
        "hex": "#665C49",
        "rgb": "rgb(102, 92, 73)",
        "hsl": "hsl(39, 17%, 34%)",
        "red": 102,
        "green": 92,
        "blue": 73,
        "hue": 39,
        "saturation": 17,
        "lightness": 34
    }, {
        "hex": "#524835",
        "rgb": "rgb(82, 72, 53)",
        "hsl": "hsl(39, 21%, 26%)",
        "red": 82,
        "green": 72,
        "blue": 53,
        "hue": 39,
        "saturation": 21,
        "lightness": 26
    }, {
        "hex": "#7A6949",
        "rgb": "rgb(122, 105, 73)",
        "hsl": "hsl(39, 25%, 38%)",
        "red": 122,
        "green": 105,
        "blue": 73,
        "hue": 39,
        "saturation": 25,
        "lightness": 38
    }, {
        "hex": "#C5B89F",
        "rgb": "rgb(197, 184, 159)",
        "hsl": "hsl(39, 25%, 70%)",
        "red": 197,
        "green": 184,
        "blue": 159,
        "hue": 39,
        "saturation": 25,
        "lightness": 70
    }, {
        "hex": "#D3C8B4",
        "rgb": "rgb(211, 200, 180)",
        "hsl": "hsl(39, 26%, 77%)",
        "red": 211,
        "green": 200,
        "blue": 180,
        "hue": 39,
        "saturation": 26,
        "lightness": 77
    }, {
        "hex": "#D3C8B4",
        "rgb": "rgb(211, 200, 180)",
        "hsl": "hsl(39, 26%, 77%)",
        "red": 211,
        "green": 200,
        "blue": 180,
        "hue": 39,
        "saturation": 26,
        "lightness": 77
    }, {
        "hex": "#B7A075",
        "rgb": "rgb(183, 160, 117)",
        "hsl": "hsl(39, 31%, 59%)",
        "red": 183,
        "green": 160,
        "blue": 117,
        "hue": 39,
        "saturation": 31,
        "lightness": 59
    }, {
        "hex": "#B9A173",
        "rgb": "rgb(185, 161, 115)",
        "hsl": "hsl(39, 33%, 59%)",
        "red": 185,
        "green": 161,
        "blue": 115,
        "hue": 39,
        "saturation": 33,
        "lightness": 59
    }, {
        "hex": "#BDA372",
        "rgb": "rgb(189, 163, 114)",
        "hsl": "hsl(39, 36%, 59%)",
        "red": 189,
        "green": 163,
        "blue": 114,
        "hue": 39,
        "saturation": 36,
        "lightness": 59
    }, {
        "hex": "#E9DFCC",
        "rgb": "rgb(233, 223, 204)",
        "hsl": "hsl(39, 40%, 86%)",
        "red": 233,
        "green": 223,
        "blue": 204,
        "hue": 39,
        "saturation": 40,
        "lightness": 86
    }, {
        "hex": "#D6BF93",
        "rgb": "rgb(214, 191, 147)",
        "hsl": "hsl(39, 45%, 71%)",
        "red": 214,
        "green": 191,
        "blue": 147,
        "hue": 39,
        "saturation": 45,
        "lightness": 71
    }, {
        "hex": "#674F23",
        "rgb": "rgb(103, 79, 35)",
        "hsl": "hsl(39, 49%, 27%)",
        "red": 103,
        "green": 79,
        "blue": 35,
        "hue": 39,
        "saturation": 49,
        "lightness": 27
    }, {
        "hex": "#F2E7D2",
        "rgb": "rgb(242, 231, 210)",
        "hsl": "hsl(39, 55%, 89%)",
        "red": 242,
        "green": 231,
        "blue": 210,
        "hue": 39,
        "saturation": 55,
        "lightness": 89
    }, {
        "hex": "#ECDBBC",
        "rgb": "rgb(236, 219, 188)",
        "hsl": "hsl(39, 56%, 83%)",
        "red": 236,
        "green": 219,
        "blue": 188,
        "hue": 39,
        "saturation": 56,
        "lightness": 83
    }, {
        "hex": "#F6EDDC",
        "rgb": "rgb(246, 237, 220)",
        "hsl": "hsl(39, 59%, 91%)",
        "red": 246,
        "green": 237,
        "blue": 220,
        "hue": 39,
        "saturation": 59,
        "lightness": 91
    }, {
        "hex": "#E0BE7E",
        "rgb": "rgb(224, 190, 126)",
        "hsl": "hsl(39, 61%, 69%)",
        "red": 224,
        "green": 190,
        "blue": 126,
        "hue": 39,
        "saturation": 61,
        "lightness": 69
    }, {
        "hex": "#EAD2A4",
        "rgb": "rgb(234, 210, 164)",
        "hsl": "hsl(39, 62%, 78%)",
        "red": 234,
        "green": 210,
        "blue": 164,
        "hue": 39,
        "saturation": 62,
        "lightness": 78
    }, {
        "hex": "#DFBA74",
        "rgb": "rgb(223, 186, 116)",
        "hsl": "hsl(39, 63%, 66%)",
        "red": 223,
        "green": 186,
        "blue": 116,
        "hue": 39,
        "saturation": 63,
        "lightness": 66
    }, {
        "hex": "#F3DCB2",
        "rgb": "rgb(243, 220, 178)",
        "hsl": "hsl(39, 73%, 83%)",
        "red": 243,
        "green": 220,
        "blue": 178,
        "hue": 39,
        "saturation": 73,
        "lightness": 83
    }, {
        "hex": "#F3DAAA",
        "rgb": "rgb(243, 218, 170)",
        "hsl": "hsl(39, 75%, 81%)",
        "red": 243,
        "green": 218,
        "blue": 170,
        "hue": 39,
        "saturation": 75,
        "lightness": 81
    }, {
        "hex": "#F5D393",
        "rgb": "rgb(245, 211, 147)",
        "hsl": "hsl(39, 83%, 77%)",
        "red": 245,
        "green": 211,
        "blue": 147,
        "hue": 39,
        "saturation": 83,
        "lightness": 77
    }, {
        "hex": "#F9E5C0",
        "rgb": "rgb(249, 229, 192)",
        "hsl": "hsl(39, 83%, 86%)",
        "red": 249,
        "green": 229,
        "blue": 192,
        "hue": 39,
        "saturation": 83,
        "lightness": 86
    }, {
        "hex": "#E89D10",
        "rgb": "rgb(232, 157, 16)",
        "hsl": "hsl(39, 87%, 49%)",
        "red": 232,
        "green": 157,
        "blue": 16,
        "hue": 39,
        "saturation": 87,
        "lightness": 49
    }, {
        "hex": "#EDA011",
        "rgb": "rgb(237, 160, 17)",
        "hsl": "hsl(39, 87%, 50%)",
        "red": 237,
        "green": 160,
        "blue": 17,
        "hue": 39,
        "saturation": 87,
        "lightness": 50
    }, {
        "hex": "#F5BE58",
        "rgb": "rgb(245, 190, 88)",
        "hsl": "hsl(39, 89%, 65%)",
        "red": 245,
        "green": 190,
        "blue": 88,
        "hue": 39,
        "saturation": 89,
        "lightness": 65
    }, {
        "hex": "#F8D28B",
        "rgb": "rgb(248, 210, 139)",
        "hsl": "hsl(39, 89%, 76%)",
        "red": 248,
        "green": 210,
        "blue": 139,
        "hue": 39,
        "saturation": 89,
        "lightness": 76
    }, {
        "hex": "#F4B036",
        "rgb": "rgb(244, 176, 54)",
        "hsl": "hsl(39, 90%, 58%)",
        "red": 244,
        "green": 176,
        "blue": 54,
        "hue": 39,
        "saturation": 90,
        "lightness": 58
    }, {
        "hex": "#F1A20B",
        "rgb": "rgb(241, 162, 11)",
        "hsl": "hsl(39, 91%, 49%)",
        "red": 241,
        "green": 162,
        "blue": 11,
        "hue": 39,
        "saturation": 91,
        "lightness": 49
    }, {
        "hex": "#FACF7D",
        "rgb": "rgb(250, 207, 125)",
        "hsl": "hsl(39, 93%, 74%)",
        "red": 250,
        "green": 207,
        "blue": 125,
        "hue": 39,
        "saturation": 93,
        "lightness": 74
    }, {
        "hex": "#FAC055",
        "rgb": "rgb(250, 192, 85)",
        "hsl": "hsl(39, 94%, 66%)",
        "red": 250,
        "green": 192,
        "blue": 85,
        "hue": 39,
        "saturation": 94,
        "lightness": 66
    }, {
        "hex": "#FCD487",
        "rgb": "rgb(252, 212, 135)",
        "hsl": "hsl(39, 95%, 76%)",
        "red": 252,
        "green": 212,
        "blue": 135,
        "hue": 39,
        "saturation": 95,
        "lightness": 76
    }, {
        "hex": "#FCCB6F",
        "rgb": "rgb(252, 203, 111)",
        "hsl": "hsl(39, 96%, 71%)",
        "red": 252,
        "green": 203,
        "blue": 111,
        "hue": 39,
        "saturation": 96,
        "lightness": 71
    }, {
        "hex": "#FCAB10",
        "rgb": "rgb(252, 171, 16)",
        "hsl": "hsl(39, 98%, 53%)",
        "red": 252,
        "green": 171,
        "blue": 16,
        "hue": 39,
        "saturation": 98,
        "lightness": 53
    }, {
        "hex": "#FFCA64",
        "rgb": "rgb(255, 202, 100)",
        "hsl": "hsl(39, 100%, 70%)",
        "red": 255,
        "green": 202,
        "blue": 100,
        "hue": 39,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#FFF1D7",
        "rgb": "rgb(255, 241, 215)",
        "hsl": "hsl(39, 100%, 92%)",
        "red": 255,
        "green": 241,
        "blue": 215,
        "hue": 39,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#353432",
        "rgb": "rgb(53, 52, 50)",
        "hsl": "hsl(40, 3%, 20%)",
        "red": 53,
        "green": 52,
        "blue": 50,
        "hue": 40,
        "saturation": 3,
        "lightness": 20
    }, {
        "hex": "#90856F",
        "rgb": "rgb(144, 133, 111)",
        "hsl": "hsl(40, 13%, 50%)",
        "red": 144,
        "green": 133,
        "blue": 111,
        "hue": 40,
        "saturation": 13,
        "lightness": 50
    }, {
        "hex": "#8A7E66",
        "rgb": "rgb(138, 126, 102)",
        "hsl": "hsl(40, 15%, 47%)",
        "red": 138,
        "green": 126,
        "blue": 102,
        "hue": 40,
        "saturation": 15,
        "lightness": 47
    }, {
        "hex": "#A89D87",
        "rgb": "rgb(168, 157, 135)",
        "hsl": "hsl(40, 16%, 59%)",
        "red": 168,
        "green": 157,
        "blue": 135,
        "hue": 40,
        "saturation": 16,
        "lightness": 59
    }, {
        "hex": "#A79B83",
        "rgb": "rgb(167, 155, 131)",
        "hsl": "hsl(40, 17%, 58%)",
        "red": 167,
        "green": 155,
        "blue": 131,
        "hue": 40,
        "saturation": 17,
        "lightness": 58
    }, {
        "hex": "#C1B398",
        "rgb": "rgb(193, 179, 152)",
        "hsl": "hsl(40, 25%, 68%)",
        "red": 193,
        "green": 179,
        "blue": 152,
        "hue": 40,
        "saturation": 25,
        "lightness": 68
    }, {
        "hex": "#C2B291",
        "rgb": "rgb(194, 178, 145)",
        "hsl": "hsl(40, 29%, 66%)",
        "red": 194,
        "green": 178,
        "blue": 145,
        "hue": 40,
        "saturation": 29,
        "lightness": 66
    }, {
        "hex": "#CCBD9E",
        "rgb": "rgb(204, 189, 158)",
        "hsl": "hsl(40, 31%, 71%)",
        "red": 204,
        "green": 189,
        "blue": 158,
        "hue": 40,
        "saturation": 31,
        "lightness": 71
    }, {
        "hex": "#CFBF9E",
        "rgb": "rgb(207, 191, 158)",
        "hsl": "hsl(40, 34%, 72%)",
        "red": 207,
        "green": 191,
        "blue": 158,
        "hue": 40,
        "saturation": 34,
        "lightness": 72
    }, {
        "hex": "#DED1B6",
        "rgb": "rgb(222, 209, 182)",
        "hsl": "hsl(40, 38%, 79%)",
        "red": 222,
        "green": 209,
        "blue": 182,
        "hue": 40,
        "saturation": 38,
        "lightness": 79
    }, {
        "hex": "#D1BD95",
        "rgb": "rgb(209, 189, 149)",
        "hsl": "hsl(40, 39%, 70%)",
        "red": 209,
        "green": 189,
        "blue": 149,
        "hue": 40,
        "saturation": 39,
        "lightness": 70
    }, {
        "hex": "#E0D3B8",
        "rgb": "rgb(224, 211, 184)",
        "hsl": "hsl(40, 39%, 80%)",
        "red": 224,
        "green": 211,
        "blue": 184,
        "hue": 40,
        "saturation": 39,
        "lightness": 80
    }, {
        "hex": "#C8B080",
        "rgb": "rgb(200, 176, 128)",
        "hsl": "hsl(40, 40%, 64%)",
        "red": 200,
        "green": 176,
        "blue": 128,
        "hue": 40,
        "saturation": 40,
        "lightness": 64
    }, {
        "hex": "#C9B180",
        "rgb": "rgb(201, 177, 128)",
        "hsl": "hsl(40, 40%, 65%)",
        "red": 201,
        "green": 177,
        "blue": 128,
        "hue": 40,
        "saturation": 40,
        "lightness": 65
    }, {
        "hex": "#D4C098",
        "rgb": "rgb(212, 192, 152)",
        "hsl": "hsl(40, 41%, 71%)",
        "red": 212,
        "green": 192,
        "blue": 152,
        "hue": 40,
        "saturation": 41,
        "lightness": 71
    }, {
        "hex": "#CDB380",
        "rgb": "rgb(205, 179, 128)",
        "hsl": "hsl(40, 44%, 65%)",
        "red": 205,
        "green": 179,
        "blue": 128,
        "hue": 40,
        "saturation": 44,
        "lightness": 65
    }, {
        "hex": "#CDB27B",
        "rgb": "rgb(205, 178, 123)",
        "hsl": "hsl(40, 45%, 64%)",
        "red": 205,
        "green": 178,
        "blue": 123,
        "hue": 40,
        "saturation": 45,
        "lightness": 64
    }, {
        "hex": "#E6D7B8",
        "rgb": "rgb(230, 215, 184)",
        "hsl": "hsl(40, 48%, 81%)",
        "red": 230,
        "green": 215,
        "blue": 184,
        "hue": 40,
        "saturation": 48,
        "lightness": 81
    }, {
        "hex": "#C59538",
        "rgb": "rgb(197, 149, 56)",
        "hsl": "hsl(40, 56%, 50%)",
        "red": 197,
        "green": 149,
        "blue": 56,
        "hue": 40,
        "saturation": 56,
        "lightness": 50
    }, {
        "hex": "#E9D6AF",
        "rgb": "rgb(233, 214, 175)",
        "hsl": "hsl(40, 57%, 80%)",
        "red": 233,
        "green": 214,
        "blue": 175,
        "hue": 40,
        "saturation": 57,
        "lightness": 80
    }, {
        "hex": "#E8D3A9",
        "rgb": "rgb(232, 211, 169)",
        "hsl": "hsl(40, 58%, 79%)",
        "red": 232,
        "green": 211,
        "blue": 169,
        "hue": 40,
        "saturation": 58,
        "lightness": 79
    }, {
        "hex": "#F2E3C6",
        "rgb": "rgb(242, 227, 198)",
        "hsl": "hsl(40, 63%, 86%)",
        "red": 242,
        "green": 227,
        "blue": 198,
        "hue": 40,
        "saturation": 63,
        "lightness": 86
    }, {
        "hex": "#F0DEBB",
        "rgb": "rgb(240, 222, 187)",
        "hsl": "hsl(40, 64%, 84%)",
        "red": 240,
        "green": 222,
        "blue": 187,
        "hue": 40,
        "saturation": 64,
        "lightness": 84
    }, {
        "hex": "#E1B866",
        "rgb": "rgb(225, 184, 102)",
        "hsl": "hsl(40, 67%, 64%)",
        "red": 225,
        "green": 184,
        "blue": 102,
        "hue": 40,
        "saturation": 67,
        "lightness": 64
    }, {
        "hex": "#E3BA6A",
        "rgb": "rgb(227, 186, 106)",
        "hsl": "hsl(40, 68%, 65%)",
        "red": 227,
        "green": 186,
        "blue": 106,
        "hue": 40,
        "saturation": 68,
        "lightness": 65
    }, {
        "hex": "#EFD8A9",
        "rgb": "rgb(239, 216, 169)",
        "hsl": "hsl(40, 69%, 80%)",
        "red": 239,
        "green": 216,
        "blue": 169,
        "hue": 40,
        "saturation": 69,
        "lightness": 80
    }, {
        "hex": "#F0D8A8",
        "rgb": "rgb(240, 216, 168)",
        "hsl": "hsl(40, 71%, 80%)",
        "red": 240,
        "green": 216,
        "blue": 168,
        "hue": 40,
        "saturation": 71,
        "lightness": 80
    }, {
        "hex": "#F0D8A8",
        "rgb": "rgb(240, 216, 168)",
        "hsl": "hsl(40, 71%, 80%)",
        "red": 240,
        "green": 216,
        "blue": 168,
        "hue": 40,
        "saturation": 71,
        "lightness": 80
    }, {
        "hex": "#F8ECD4",
        "rgb": "rgb(248, 236, 212)",
        "hsl": "hsl(40, 72%, 90%)",
        "red": 248,
        "green": 236,
        "blue": 212,
        "hue": 40,
        "saturation": 72,
        "lightness": 90
    }, {
        "hex": "#E2AC3F",
        "rgb": "rgb(226, 172, 63)",
        "hsl": "hsl(40, 74%, 57%)",
        "red": 226,
        "green": 172,
        "blue": 63,
        "hue": 40,
        "saturation": 74,
        "lightness": 57
    }, {
        "hex": "#E3AD40",
        "rgb": "rgb(227, 173, 64)",
        "hsl": "hsl(40, 74%, 57%)",
        "red": 227,
        "green": 173,
        "blue": 64,
        "hue": 40,
        "saturation": 74,
        "lightness": 57
    }, {
        "hex": "#F0D399",
        "rgb": "rgb(240, 211, 153)",
        "hsl": "hsl(40, 74%, 77%)",
        "red": 240,
        "green": 211,
        "blue": 153,
        "hue": 40,
        "saturation": 74,
        "lightness": 77
    }, {
        "hex": "#E3A72F",
        "rgb": "rgb(227, 167, 47)",
        "hsl": "hsl(40, 76%, 54%)",
        "red": 227,
        "green": 167,
        "blue": 47,
        "hue": 40,
        "saturation": 76,
        "lightness": 54
    }, {
        "hex": "#EEC77A",
        "rgb": "rgb(238, 199, 122)",
        "hsl": "hsl(40, 77%, 71%)",
        "red": 238,
        "green": 199,
        "blue": 122,
        "hue": 40,
        "saturation": 77,
        "lightness": 71
    }, {
        "hex": "#F6E2BB",
        "rgb": "rgb(246, 226, 187)",
        "hsl": "hsl(40, 77%, 85%)",
        "red": 246,
        "green": 226,
        "blue": 187,
        "hue": 40,
        "saturation": 77,
        "lightness": 85
    }, {
        "hex": "#F7E4BE",
        "rgb": "rgb(247, 228, 190)",
        "hsl": "hsl(40, 78%, 86%)",
        "red": 247,
        "green": 228,
        "blue": 190,
        "hue": 40,
        "saturation": 78,
        "lightness": 86
    }, {
        "hex": "#F3D597",
        "rgb": "rgb(243, 213, 151)",
        "hsl": "hsl(40, 79%, 77%)",
        "red": 243,
        "green": 213,
        "blue": 151,
        "hue": 40,
        "saturation": 79,
        "lightness": 77
    }, {
        "hex": "#E8A726",
        "rgb": "rgb(232, 167, 38)",
        "hsl": "hsl(40, 81%, 53%)",
        "red": 232,
        "green": 167,
        "blue": 38,
        "hue": 40,
        "saturation": 81,
        "lightness": 53
    }, {
        "hex": "#352504",
        "rgb": "rgb(53, 37, 4)",
        "hsl": "hsl(40, 86%, 11%)",
        "red": 53,
        "green": 37,
        "blue": 4,
        "hue": 40,
        "saturation": 86,
        "lightness": 11
    }, {
        "hex": "#F3C363",
        "rgb": "rgb(243, 195, 99)",
        "hsl": "hsl(40, 86%, 67%)",
        "red": 243,
        "green": 195,
        "blue": 99,
        "hue": 40,
        "saturation": 86,
        "lightness": 67
    }, {
        "hex": "#F0A818",
        "rgb": "rgb(240, 168, 24)",
        "hsl": "hsl(40, 88%, 52%)",
        "red": 240,
        "green": 168,
        "blue": 24,
        "hue": 40,
        "saturation": 88,
        "lightness": 52
    }, {
        "hex": "#F1AE2B",
        "rgb": "rgb(241, 174, 43)",
        "hsl": "hsl(40, 88%, 56%)",
        "red": 241,
        "green": 174,
        "blue": 43,
        "hue": 40,
        "saturation": 88,
        "lightness": 56
    }, {
        "hex": "#FDEECF",
        "rgb": "rgb(253, 238, 207)",
        "hsl": "hsl(40, 92%, 90%)",
        "red": 253,
        "green": 238,
        "blue": 207,
        "hue": 40,
        "saturation": 92,
        "lightness": 90
    }, {
        "hex": "#FCAF14",
        "rgb": "rgb(252, 175, 20)",
        "hsl": "hsl(40, 97%, 53%)",
        "red": 252,
        "green": 175,
        "blue": 20,
        "hue": 40,
        "saturation": 97,
        "lightness": 53
    }, {
        "hex": "#FCAE11",
        "rgb": "rgb(252, 174, 17)",
        "hsl": "hsl(40, 98%, 53%)",
        "red": 252,
        "green": 174,
        "blue": 17,
        "hue": 40,
        "saturation": 98,
        "lightness": 53
    }, {
        "hex": "#FFAA00",
        "rgb": "rgb(255, 170, 0)",
        "hsl": "hsl(40, 100%, 50%)",
        "red": 255,
        "green": 170,
        "blue": 0,
        "hue": 40,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FFAB07",
        "rgb": "rgb(255, 171, 7)",
        "hsl": "hsl(40, 100%, 51%)",
        "red": 255,
        "green": 171,
        "blue": 7,
        "hue": 40,
        "saturation": 100,
        "lightness": 51
    }, {
        "hex": "#FFAB03",
        "rgb": "rgb(255, 171, 3)",
        "hsl": "hsl(40, 100%, 51%)",
        "red": 255,
        "green": 171,
        "blue": 3,
        "hue": 40,
        "saturation": 100,
        "lightness": 51
    }, {
        "hex": "#FFAD08",
        "rgb": "rgb(255, 173, 8)",
        "hsl": "hsl(40, 100%, 52%)",
        "red": 255,
        "green": 173,
        "blue": 8,
        "hue": 40,
        "saturation": 100,
        "lightness": 52
    }, {
        "hex": "#FFB319",
        "rgb": "rgb(255, 179, 25)",
        "hsl": "hsl(40, 100%, 55%)",
        "red": 255,
        "green": 179,
        "blue": 25,
        "hue": 40,
        "saturation": 100,
        "lightness": 55
    }, {
        "hex": "#FFB727",
        "rgb": "rgb(255, 183, 39)",
        "hsl": "hsl(40, 100%, 58%)",
        "red": 255,
        "green": 183,
        "blue": 39,
        "hue": 40,
        "saturation": 100,
        "lightness": 58
    }, {
        "hex": "#FFBE40",
        "rgb": "rgb(255, 190, 64)",
        "hsl": "hsl(40, 100%, 63%)",
        "red": 255,
        "green": 190,
        "blue": 64,
        "hue": 40,
        "saturation": 100,
        "lightness": 63
    }, {
        "hex": "#FFCE6F",
        "rgb": "rgb(255, 206, 111)",
        "hsl": "hsl(40, 100%, 72%)",
        "red": 255,
        "green": 206,
        "blue": 111,
        "hue": 40,
        "saturation": 100,
        "lightness": 72
    }, {
        "hex": "#FFF3DB",
        "rgb": "rgb(255, 243, 219)",
        "hsl": "hsl(40, 100%, 93%)",
        "red": 255,
        "green": 243,
        "blue": 219,
        "hue": 40,
        "saturation": 100,
        "lightness": 93
    }, {
        "hex": "#BDB8AD",
        "rgb": "rgb(189, 184, 173)",
        "hsl": "hsl(41, 11%, 71%)",
        "red": 189,
        "green": 184,
        "blue": 173,
        "hue": 41,
        "saturation": 11,
        "lightness": 71
    }, {
        "hex": "#A69A81",
        "rgb": "rgb(166, 154, 129)",
        "hsl": "hsl(41, 17%, 58%)",
        "red": 166,
        "green": 154,
        "blue": 129,
        "hue": 41,
        "saturation": 17,
        "lightness": 58
    }, {
        "hex": "#D8CCB2",
        "rgb": "rgb(216, 204, 178)",
        "hsl": "hsl(41, 33%, 77%)",
        "red": 216,
        "green": 204,
        "blue": 178,
        "hue": 41,
        "saturation": 33,
        "lightness": 77
    }, {
        "hex": "#D2C29F",
        "rgb": "rgb(210, 194, 159)",
        "hsl": "hsl(41, 36%, 72%)",
        "red": 210,
        "green": 194,
        "blue": 159,
        "hue": 41,
        "saturation": 36,
        "lightness": 72
    }, {
        "hex": "#CDBB93",
        "rgb": "rgb(205, 187, 147)",
        "hsl": "hsl(41, 37%, 69%)",
        "red": 205,
        "green": 187,
        "blue": 147,
        "hue": 41,
        "saturation": 37,
        "lightness": 69
    }, {
        "hex": "#CDBB93",
        "rgb": "rgb(205, 187, 147)",
        "hsl": "hsl(41, 37%, 69%)",
        "red": 205,
        "green": 187,
        "blue": 147,
        "hue": 41,
        "saturation": 37,
        "lightness": 69
    }, {
        "hex": "#A08447",
        "rgb": "rgb(160, 132, 71)",
        "hsl": "hsl(41, 39%, 45%)",
        "red": 160,
        "green": 132,
        "blue": 71,
        "hue": 41,
        "saturation": 39,
        "lightness": 45
    }, {
        "hex": "#AC8D49",
        "rgb": "rgb(172, 141, 73)",
        "hsl": "hsl(41, 40%, 48%)",
        "red": 172,
        "green": 141,
        "blue": 73,
        "hue": 41,
        "saturation": 40,
        "lightness": 48
    }, {
        "hex": "#C3AA72",
        "rgb": "rgb(195, 170, 114)",
        "hsl": "hsl(41, 40%, 61%)",
        "red": 195,
        "green": 170,
        "blue": 114,
        "hue": 41,
        "saturation": 40,
        "lightness": 61
    }, {
        "hex": "#806835",
        "rgb": "rgb(128, 104, 53)",
        "hsl": "hsl(41, 41%, 35%)",
        "red": 128,
        "green": 104,
        "blue": 53,
        "hue": 41,
        "saturation": 41,
        "lightness": 35
    }, {
        "hex": "#9F8241",
        "rgb": "rgb(159, 130, 65)",
        "hsl": "hsl(41, 42%, 44%)",
        "red": 159,
        "green": 130,
        "blue": 65,
        "hue": 41,
        "saturation": 42,
        "lightness": 44
    }, {
        "hex": "#DFD0AF",
        "rgb": "rgb(223, 208, 175)",
        "hsl": "hsl(41, 43%, 78%)",
        "red": 223,
        "green": 208,
        "blue": 175,
        "hue": 41,
        "saturation": 43,
        "lightness": 78
    }, {
        "hex": "#DDCAA2",
        "rgb": "rgb(221, 202, 162)",
        "hsl": "hsl(41, 46%, 75%)",
        "red": 221,
        "green": 202,
        "blue": 162,
        "hue": 41,
        "saturation": 46,
        "lightness": 75
    }, {
        "hex": "#EBDFC6",
        "rgb": "rgb(235, 223, 198)",
        "hsl": "hsl(41, 48%, 85%)",
        "red": 235,
        "green": 223,
        "blue": 198,
        "hue": 41,
        "saturation": 48,
        "lightness": 85
    }, {
        "hex": "#C39738",
        "rgb": "rgb(195, 151, 56)",
        "hsl": "hsl(41, 55%, 49%)",
        "red": 195,
        "green": 151,
        "blue": 56,
        "hue": 41,
        "saturation": 55,
        "lightness": 49
    }, {
        "hex": "#F4EAD5",
        "rgb": "rgb(244, 234, 213)",
        "hsl": "hsl(41, 58%, 90%)",
        "red": 244,
        "green": 234,
        "blue": 213,
        "hue": 41,
        "saturation": 58,
        "lightness": 90
    }, {
        "hex": "#E3C88F",
        "rgb": "rgb(227, 200, 143)",
        "hsl": "hsl(41, 60%, 73%)",
        "red": 227,
        "green": 200,
        "blue": 143,
        "hue": 41,
        "saturation": 60,
        "lightness": 73
    }, {
        "hex": "#DFBA69",
        "rgb": "rgb(223, 186, 105)",
        "hsl": "hsl(41, 65%, 64%)",
        "red": 223,
        "green": 186,
        "blue": 105,
        "hue": 41,
        "saturation": 65,
        "lightness": 64
    }, {
        "hex": "#CC982A",
        "rgb": "rgb(204, 152, 42)",
        "hsl": "hsl(41, 66%, 48%)",
        "red": 204,
        "green": 152,
        "blue": 42,
        "hue": 41,
        "saturation": 66,
        "lightness": 48
    }, {
        "hex": "#F0DDB5",
        "rgb": "rgb(240, 221, 181)",
        "hsl": "hsl(41, 66%, 83%)",
        "red": 240,
        "green": 221,
        "blue": 181,
        "hue": 41,
        "saturation": 66,
        "lightness": 83
    }, {
        "hex": "#E2BB64",
        "rgb": "rgb(226, 187, 100)",
        "hsl": "hsl(41, 68%, 64%)",
        "red": 226,
        "green": 187,
        "blue": 100,
        "hue": 41,
        "saturation": 68,
        "lightness": 64
    }, {
        "hex": "#E2B24C",
        "rgb": "rgb(226, 178, 76)",
        "hsl": "hsl(41, 72%, 59%)",
        "red": 226,
        "green": 178,
        "blue": 76,
        "hue": 41,
        "saturation": 72,
        "lightness": 59
    }, {
        "hex": "#F4E1B8",
        "rgb": "rgb(244, 225, 184)",
        "hsl": "hsl(41, 73%, 84%)",
        "red": 244,
        "green": 225,
        "blue": 184,
        "hue": 41,
        "saturation": 73,
        "lightness": 84
    }, {
        "hex": "#F5E2B8",
        "rgb": "rgb(245, 226, 184)",
        "hsl": "hsl(41, 75%, 84%)",
        "red": 245,
        "green": 226,
        "blue": 184,
        "hue": 41,
        "saturation": 75,
        "lightness": 84
    }, {
        "hex": "#F7E5BF",
        "rgb": "rgb(247, 229, 191)",
        "hsl": "hsl(41, 78%, 86%)",
        "red": 247,
        "green": 229,
        "blue": 191,
        "hue": 41,
        "saturation": 78,
        "lightness": 86
    }, {
        "hex": "#F1C972",
        "rgb": "rgb(241, 201, 114)",
        "hsl": "hsl(41, 82%, 70%)",
        "red": 241,
        "green": 201,
        "blue": 114,
        "hue": 41,
        "saturation": 82,
        "lightness": 70
    }, {
        "hex": "#F7DEA8",
        "rgb": "rgb(247, 222, 168)",
        "hsl": "hsl(41, 83%, 81%)",
        "red": 247,
        "green": 222,
        "blue": 168,
        "hue": 41,
        "saturation": 83,
        "lightness": 81
    }, {
        "hex": "#FBEED3",
        "rgb": "rgb(251, 238, 211)",
        "hsl": "hsl(41, 83%, 91%)",
        "red": 251,
        "green": 238,
        "blue": 211,
        "hue": 41,
        "saturation": 83,
        "lightness": 91
    }, {
        "hex": "#F1C15D",
        "rgb": "rgb(241, 193, 93)",
        "hsl": "hsl(41, 84%, 65%)",
        "red": 241,
        "green": 193,
        "blue": 93,
        "hue": 41,
        "saturation": 84,
        "lightness": 65
    }, {
        "hex": "#FDEECD",
        "rgb": "rgb(253, 238, 205)",
        "hsl": "hsl(41, 92%, 90%)",
        "red": 253,
        "green": 238,
        "blue": 205,
        "hue": 41,
        "saturation": 92,
        "lightness": 90
    }, {
        "hex": "#FACA66",
        "rgb": "rgb(250, 202, 102)",
        "hsl": "hsl(41, 94%, 69%)",
        "red": 250,
        "green": 202,
        "blue": 102,
        "hue": 41,
        "saturation": 94,
        "lightness": 69
    }, {
        "hex": "#FABA32",
        "rgb": "rgb(250, 186, 50)",
        "hsl": "hsl(41, 95%, 59%)",
        "red": 250,
        "green": 186,
        "blue": 50,
        "hue": 41,
        "saturation": 95,
        "lightness": 59
    }, {
        "hex": "#FCDA90",
        "rgb": "rgb(252, 218, 144)",
        "hsl": "hsl(41, 95%, 78%)",
        "red": 252,
        "green": 218,
        "blue": 144,
        "hue": 41,
        "saturation": 95,
        "lightness": 78
    }, {
        "hex": "#FCC755",
        "rgb": "rgb(252, 199, 85)",
        "hsl": "hsl(41, 97%, 66%)",
        "red": 252,
        "green": 199,
        "blue": 85,
        "hue": 41,
        "saturation": 97,
        "lightness": 66
    }, {
        "hex": "#FCAC03",
        "rgb": "rgb(252, 172, 3)",
        "hsl": "hsl(41, 98%, 50%)",
        "red": 252,
        "green": 172,
        "blue": 3,
        "hue": 41,
        "saturation": 98,
        "lightness": 50
    }, {
        "hex": "#FEE5AD",
        "rgb": "rgb(254, 229, 173)",
        "hsl": "hsl(41, 98%, 84%)",
        "red": 254,
        "green": 229,
        "blue": 173,
        "hue": 41,
        "saturation": 98,
        "lightness": 84
    }, {
        "hex": "#FAAB00",
        "rgb": "rgb(250, 171, 0)",
        "hsl": "hsl(41, 100%, 49%)",
        "red": 250,
        "green": 171,
        "blue": 0,
        "hue": 41,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FFE4AA",
        "rgb": "rgb(255, 228, 170)",
        "hsl": "hsl(41, 100%, 83%)",
        "red": 255,
        "green": 228,
        "blue": 170,
        "hue": 41,
        "saturation": 100,
        "lightness": 83
    }, {
        "hex": "#FFEBBF",
        "rgb": "rgb(255, 235, 191)",
        "hsl": "hsl(41, 100%, 87%)",
        "red": 255,
        "green": 235,
        "blue": 191,
        "hue": 41,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#8A8780",
        "rgb": "rgb(138, 135, 128)",
        "hsl": "hsl(42, 4%, 52%)",
        "red": 138,
        "green": 135,
        "blue": 128,
        "hue": 42,
        "saturation": 4,
        "lightness": 52
    }, {
        "hex": "#7D7769",
        "rgb": "rgb(125, 119, 105)",
        "hsl": "hsl(42, 9%, 45%)",
        "red": 125,
        "green": 119,
        "blue": 105,
        "hue": 42,
        "saturation": 9,
        "lightness": 45
    }, {
        "hex": "#BCB7AB",
        "rgb": "rgb(188, 183, 171)",
        "hsl": "hsl(42, 11%, 70%)",
        "red": 188,
        "green": 183,
        "blue": 171,
        "hue": 42,
        "saturation": 11,
        "lightness": 70
    }, {
        "hex": "#24211A",
        "rgb": "rgb(36, 33, 26)",
        "hsl": "hsl(42, 16%, 12%)",
        "red": 36,
        "green": 33,
        "blue": 26,
        "hue": 42,
        "saturation": 16,
        "lightness": 12
    }, {
        "hex": "#29251C",
        "rgb": "rgb(41, 37, 28)",
        "hsl": "hsl(42, 19%, 14%)",
        "red": 41,
        "green": 37,
        "blue": 28,
        "hue": 42,
        "saturation": 19,
        "lightness": 14
    }, {
        "hex": "#9E906E",
        "rgb": "rgb(158, 144, 110)",
        "hsl": "hsl(42, 20%, 53%)",
        "red": 158,
        "green": 144,
        "blue": 110,
        "hue": 42,
        "saturation": 20,
        "lightness": 53
    }, {
        "hex": "#9E906E",
        "rgb": "rgb(158, 144, 110)",
        "hsl": "hsl(42, 20%, 53%)",
        "red": 158,
        "green": 144,
        "blue": 110,
        "hue": 42,
        "saturation": 20,
        "lightness": 53
    }, {
        "hex": "#312C20",
        "rgb": "rgb(49, 44, 32)",
        "hsl": "hsl(42, 21%, 16%)",
        "red": 49,
        "green": 44,
        "blue": 32,
        "hue": 42,
        "saturation": 21,
        "lightness": 16
    }, {
        "hex": "#988864",
        "rgb": "rgb(152, 136, 100)",
        "hsl": "hsl(42, 21%, 49%)",
        "red": 152,
        "green": 136,
        "blue": 100,
        "hue": 42,
        "saturation": 21,
        "lightness": 49
    }, {
        "hex": "#A59571",
        "rgb": "rgb(165, 149, 113)",
        "hsl": "hsl(42, 22%, 55%)",
        "red": 165,
        "green": 149,
        "blue": 113,
        "hue": 42,
        "saturation": 22,
        "lightness": 55
    }, {
        "hex": "#AD9A6F",
        "rgb": "rgb(173, 154, 111)",
        "hsl": "hsl(42, 27%, 56%)",
        "red": 173,
        "green": 154,
        "blue": 111,
        "hue": 42,
        "saturation": 27,
        "lightness": 56
    }, {
        "hex": "#E4DED0",
        "rgb": "rgb(228, 222, 208)",
        "hsl": "hsl(42, 27%, 85%)",
        "red": 228,
        "green": 222,
        "blue": 208,
        "hue": 42,
        "saturation": 27,
        "lightness": 85
    }, {
        "hex": "#E1DACA",
        "rgb": "rgb(225, 218, 202)",
        "hsl": "hsl(42, 28%, 84%)",
        "red": 225,
        "green": 218,
        "blue": 202,
        "hue": 42,
        "saturation": 28,
        "lightness": 84
    }, {
        "hex": "#B3A176",
        "rgb": "rgb(179, 161, 118)",
        "hsl": "hsl(42, 29%, 58%)",
        "red": 179,
        "green": 161,
        "blue": 118,
        "hue": 42,
        "saturation": 29,
        "lightness": 58
    }, {
        "hex": "#B39D69",
        "rgb": "rgb(179, 157, 105)",
        "hsl": "hsl(42, 33%, 56%)",
        "red": 179,
        "green": 157,
        "blue": 105,
        "hue": 42,
        "saturation": 33,
        "lightness": 56
    }, {
        "hex": "#E5DDCB",
        "rgb": "rgb(229, 221, 203)",
        "hsl": "hsl(42, 33%, 85%)",
        "red": 229,
        "green": 221,
        "blue": 203,
        "hue": 42,
        "saturation": 33,
        "lightness": 85
    }, {
        "hex": "#B59E67",
        "rgb": "rgb(181, 158, 103)",
        "hsl": "hsl(42, 35%, 56%)",
        "red": 181,
        "green": 158,
        "blue": 103,
        "hue": 42,
        "saturation": 35,
        "lightness": 56
    }, {
        "hex": "#EAE2CF",
        "rgb": "rgb(234, 226, 207)",
        "hsl": "hsl(42, 39%, 86%)",
        "red": 234,
        "green": 226,
        "blue": 207,
        "hue": 42,
        "saturation": 39,
        "lightness": 86
    }, {
        "hex": "#F5F1E8",
        "rgb": "rgb(245, 241, 232)",
        "hsl": "hsl(42, 39%, 94%)",
        "red": 245,
        "green": 241,
        "blue": 232,
        "hue": 42,
        "saturation": 39,
        "lightness": 94
    }, {
        "hex": "#D9C9A5",
        "rgb": "rgb(217, 201, 165)",
        "hsl": "hsl(42, 41%, 75%)",
        "red": 217,
        "green": 201,
        "blue": 165,
        "hue": 42,
        "saturation": 41,
        "lightness": 75
    }, {
        "hex": "#E5DAC0",
        "rgb": "rgb(229, 218, 192)",
        "hsl": "hsl(42, 42%, 83%)",
        "red": 229,
        "green": 218,
        "blue": 192,
        "hue": 42,
        "saturation": 42,
        "lightness": 83
    }, {
        "hex": "#C6AD71",
        "rgb": "rgb(198, 173, 113)",
        "hsl": "hsl(42, 43%, 61%)",
        "red": 198,
        "green": 173,
        "blue": 113,
        "hue": 42,
        "saturation": 43,
        "lightness": 61
    }, {
        "hex": "#D6C396",
        "rgb": "rgb(214, 195, 150)",
        "hsl": "hsl(42, 44%, 71%)",
        "red": 214,
        "green": 195,
        "blue": 150,
        "hue": 42,
        "saturation": 44,
        "lightness": 71
    }, {
        "hex": "#D6C292",
        "rgb": "rgb(214, 194, 146)",
        "hsl": "hsl(42, 45%, 71%)",
        "red": 214,
        "green": 194,
        "blue": 146,
        "hue": 42,
        "saturation": 45,
        "lightness": 71
    }, {
        "hex": "#DECBA0",
        "rgb": "rgb(222, 203, 160)",
        "hsl": "hsl(42, 48%, 75%)",
        "red": 222,
        "green": 203,
        "blue": 160,
        "hue": 42,
        "saturation": 48,
        "lightness": 75
    }, {
        "hex": "#DEC790",
        "rgb": "rgb(222, 199, 144)",
        "hsl": "hsl(42, 54%, 72%)",
        "red": 222,
        "green": 199,
        "blue": 144,
        "hue": 42,
        "saturation": 54,
        "lightness": 72
    }, {
        "hex": "#DABD7B",
        "rgb": "rgb(218, 189, 123)",
        "hsl": "hsl(42, 56%, 67%)",
        "red": 218,
        "green": 189,
        "blue": 123,
        "hue": 42,
        "saturation": 56,
        "lightness": 67
    }, {
        "hex": "#E1C78C",
        "rgb": "rgb(225, 199, 140)",
        "hsl": "hsl(42, 59%, 72%)",
        "red": 225,
        "green": 199,
        "blue": 140,
        "hue": 42,
        "saturation": 59,
        "lightness": 72
    }, {
        "hex": "#CC9B25",
        "rgb": "rgb(204, 155, 37)",
        "hsl": "hsl(42, 69%, 47%)",
        "red": 204,
        "green": 155,
        "blue": 37,
        "hue": 42,
        "saturation": 69,
        "lightness": 47
    }, {
        "hex": "#EFD8A4",
        "rgb": "rgb(239, 216, 164)",
        "hsl": "hsl(42, 70%, 79%)",
        "red": 239,
        "green": 216,
        "blue": 164,
        "hue": 42,
        "saturation": 70,
        "lightness": 79
    }, {
        "hex": "#ECCF8D",
        "rgb": "rgb(236, 207, 141)",
        "hsl": "hsl(42, 71%, 74%)",
        "red": 236,
        "green": 207,
        "blue": 141,
        "hue": 42,
        "saturation": 71,
        "lightness": 74
    }, {
        "hex": "#F2DFB1",
        "rgb": "rgb(242, 223, 177)",
        "hsl": "hsl(42, 71%, 82%)",
        "red": 242,
        "green": 223,
        "blue": 177,
        "hue": 42,
        "saturation": 71,
        "lightness": 82
    }, {
        "hex": "#F3E1B6",
        "rgb": "rgb(243, 225, 182)",
        "hsl": "hsl(42, 72%, 83%)",
        "red": 243,
        "green": 225,
        "blue": 182,
        "hue": 42,
        "saturation": 72,
        "lightness": 83
    }, {
        "hex": "#E6B33D",
        "rgb": "rgb(230, 179, 61)",
        "hsl": "hsl(42, 77%, 57%)",
        "red": 230,
        "green": 179,
        "blue": 61,
        "hue": 42,
        "saturation": 77,
        "lightness": 57
    }, {
        "hex": "#F2D694",
        "rgb": "rgb(242, 214, 148)",
        "hsl": "hsl(42, 78%, 76%)",
        "red": 242,
        "green": 214,
        "blue": 148,
        "hue": 42,
        "saturation": 78,
        "lightness": 76
    }, {
        "hex": "#F7E6BE",
        "rgb": "rgb(247, 230, 190)",
        "hsl": "hsl(42, 78%, 86%)",
        "red": 247,
        "green": 230,
        "blue": 190,
        "hue": 42,
        "saturation": 78,
        "lightness": 86
    }, {
        "hex": "#E6AC27",
        "rgb": "rgb(230, 172, 39)",
        "hsl": "hsl(42, 79%, 53%)",
        "red": 230,
        "green": 172,
        "blue": 39,
        "hue": 42,
        "saturation": 79,
        "lightness": 53
    }, {
        "hex": "#F2C45A",
        "rgb": "rgb(242, 196, 90)",
        "hsl": "hsl(42, 85%, 65%)",
        "red": 242,
        "green": 196,
        "blue": 90,
        "hue": 42,
        "saturation": 85,
        "lightness": 65
    }, {
        "hex": "#FDF6E6",
        "rgb": "rgb(253, 246, 230)",
        "hsl": "hsl(42, 85%, 95%)",
        "red": 253,
        "green": 246,
        "blue": 230,
        "hue": 42,
        "saturation": 85,
        "lightness": 95
    }, {
        "hex": "#F3C75F",
        "rgb": "rgb(243, 199, 95)",
        "hsl": "hsl(42, 86%, 66%)",
        "red": 243,
        "green": 199,
        "blue": 95,
        "hue": 42,
        "saturation": 86,
        "lightness": 66
    }, {
        "hex": "#FBE4AE",
        "rgb": "rgb(251, 228, 174)",
        "hsl": "hsl(42, 91%, 83%)",
        "red": 251,
        "green": 228,
        "blue": 174,
        "hue": 42,
        "saturation": 91,
        "lightness": 83
    }, {
        "hex": "#FAD889",
        "rgb": "rgb(250, 216, 137)",
        "hsl": "hsl(42, 92%, 76%)",
        "red": 250,
        "green": 216,
        "blue": 137,
        "hue": 42,
        "saturation": 92,
        "lightness": 76
    }, {
        "hex": "#FCE5B1",
        "rgb": "rgb(252, 229, 177)",
        "hsl": "hsl(42, 93%, 84%)",
        "red": 252,
        "green": 229,
        "blue": 177,
        "hue": 42,
        "saturation": 93,
        "lightness": 84
    }, {
        "hex": "#B88000",
        "rgb": "rgb(184, 128, 0)",
        "hsl": "hsl(42, 100%, 36%)",
        "red": 184,
        "green": 128,
        "blue": 0,
        "hue": 42,
        "saturation": 100,
        "lightness": 36
    }, {
        "hex": "#D59500",
        "rgb": "rgb(213, 149, 0)",
        "hsl": "hsl(42, 100%, 42%)",
        "red": 213,
        "green": 149,
        "blue": 0,
        "hue": 42,
        "saturation": 100,
        "lightness": 42
    }, {
        "hex": "#FFB300",
        "rgb": "rgb(255, 179, 0)",
        "hsl": "hsl(42, 100%, 50%)",
        "red": 255,
        "green": 179,
        "blue": 0,
        "hue": 42,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FFB300",
        "rgb": "rgb(255, 179, 0)",
        "hsl": "hsl(42, 100%, 50%)",
        "red": 255,
        "green": 179,
        "blue": 0,
        "hue": 42,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FFB914",
        "rgb": "rgb(255, 185, 20)",
        "hsl": "hsl(42, 100%, 54%)",
        "red": 255,
        "green": 185,
        "blue": 20,
        "hue": 42,
        "saturation": 100,
        "lightness": 54
    }, {
        "hex": "#FFCD57",
        "rgb": "rgb(255, 205, 87)",
        "hsl": "hsl(42, 100%, 67%)",
        "red": 255,
        "green": 205,
        "blue": 87,
        "hue": 42,
        "saturation": 100,
        "lightness": 67
    }, {
        "hex": "#FFDC8A",
        "rgb": "rgb(255, 220, 138)",
        "hsl": "hsl(42, 100%, 77%)",
        "red": 255,
        "green": 220,
        "blue": 138,
        "hue": 42,
        "saturation": 100,
        "lightness": 77
    }, {
        "hex": "#FFDD8C",
        "rgb": "rgb(255, 221, 140)",
        "hsl": "hsl(42, 100%, 77%)",
        "red": 255,
        "green": 221,
        "blue": 140,
        "hue": 42,
        "saturation": 100,
        "lightness": 77
    }, {
        "hex": "#FFE8B3",
        "rgb": "rgb(255, 232, 179)",
        "hsl": "hsl(42, 100%, 85%)",
        "red": 255,
        "green": 232,
        "blue": 179,
        "hue": 42,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#FFF1CF",
        "rgb": "rgb(255, 241, 207)",
        "hsl": "hsl(42, 100%, 91%)",
        "red": 255,
        "green": 241,
        "blue": 207,
        "hue": 42,
        "saturation": 100,
        "lightness": 91
    }, {
        "hex": "#FFF2D4",
        "rgb": "rgb(255, 242, 212)",
        "hsl": "hsl(42, 100%, 92%)",
        "red": 255,
        "green": 242,
        "blue": 212,
        "hue": 42,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#FFF5DE",
        "rgb": "rgb(255, 245, 222)",
        "hsl": "hsl(42, 100%, 94%)",
        "red": 255,
        "green": 245,
        "blue": 222,
        "hue": 42,
        "saturation": 100,
        "lightness": 94
    }, {
        "hex": "#FFF7E5",
        "rgb": "rgb(255, 247, 229)",
        "hsl": "hsl(42, 100%, 95%)",
        "red": 255,
        "green": 247,
        "blue": 229,
        "hue": 42,
        "saturation": 100,
        "lightness": 95
    }, {
        "hex": "#948A71",
        "rgb": "rgb(148, 138, 113)",
        "hsl": "hsl(43, 14%, 51%)",
        "red": 148,
        "green": 138,
        "blue": 113,
        "hue": 43,
        "saturation": 14,
        "lightness": 51
    }, {
        "hex": "#B7B09E",
        "rgb": "rgb(183, 176, 158)",
        "hsl": "hsl(43, 15%, 67%)",
        "red": 183,
        "green": 176,
        "blue": 158,
        "hue": 43,
        "saturation": 15,
        "lightness": 67
    }, {
        "hex": "#EDEBE6",
        "rgb": "rgb(237, 235, 230)",
        "hsl": "hsl(43, 16%, 92%)",
        "red": 237,
        "green": 235,
        "blue": 230,
        "hue": 43,
        "saturation": 16,
        "lightness": 92
    }, {
        "hex": "#7C7052",
        "rgb": "rgb(124, 112, 82)",
        "hsl": "hsl(43, 20%, 40%)",
        "red": 124,
        "green": 112,
        "blue": 82,
        "hue": 43,
        "saturation": 20,
        "lightness": 40
    }, {
        "hex": "#BCB091",
        "rgb": "rgb(188, 176, 145)",
        "hsl": "hsl(43, 24%, 65%)",
        "red": 188,
        "green": 176,
        "blue": 145,
        "hue": 43,
        "saturation": 24,
        "lightness": 65
    }, {
        "hex": "#C7BA99",
        "rgb": "rgb(199, 186, 153)",
        "hsl": "hsl(43, 29%, 69%)",
        "red": 199,
        "green": 186,
        "blue": 153,
        "hue": 43,
        "saturation": 29,
        "lightness": 69
    }, {
        "hex": "#3B331F",
        "rgb": "rgb(59, 51, 31)",
        "hsl": "hsl(43, 31%, 18%)",
        "red": 59,
        "green": 51,
        "blue": 31,
        "hue": 43,
        "saturation": 31,
        "lightness": 18
    }, {
        "hex": "#D4C9AD",
        "rgb": "rgb(212, 201, 173)",
        "hsl": "hsl(43, 31%, 75%)",
        "red": 212,
        "green": 201,
        "blue": 173,
        "hue": 43,
        "saturation": 31,
        "lightness": 75
    }, {
        "hex": "#D9CEB2",
        "rgb": "rgb(217, 206, 178)",
        "hsl": "hsl(43, 34%, 77%)",
        "red": 217,
        "green": 206,
        "blue": 178,
        "hue": 43,
        "saturation": 34,
        "lightness": 77
    }, {
        "hex": "#BCA875",
        "rgb": "rgb(188, 168, 117)",
        "hsl": "hsl(43, 35%, 60%)",
        "red": 188,
        "green": 168,
        "blue": 117,
        "hue": 43,
        "saturation": 35,
        "lightness": 60
    }, {
        "hex": "#594C2A",
        "rgb": "rgb(89, 76, 42)",
        "hsl": "hsl(43, 36%, 26%)",
        "red": 89,
        "green": 76,
        "blue": 42,
        "hue": 43,
        "saturation": 36,
        "lightness": 26
    }, {
        "hex": "#DCD1B4",
        "rgb": "rgb(220, 209, 180)",
        "hsl": "hsl(43, 36%, 78%)",
        "red": 220,
        "green": 209,
        "blue": 180,
        "hue": 43,
        "saturation": 36,
        "lightness": 78
    }, {
        "hex": "#E2D9C2",
        "rgb": "rgb(226, 217, 194)",
        "hsl": "hsl(43, 36%, 82%)",
        "red": 226,
        "green": 217,
        "blue": 194,
        "hue": 43,
        "saturation": 36,
        "lightness": 82
    }, {
        "hex": "#EAE3D1",
        "rgb": "rgb(234, 227, 209)",
        "hsl": "hsl(43, 37%, 87%)",
        "red": 234,
        "green": 227,
        "blue": 209,
        "hue": 43,
        "saturation": 37,
        "lightness": 87
    }, {
        "hex": "#DACDAC",
        "rgb": "rgb(218, 205, 172)",
        "hsl": "hsl(43, 38%, 76%)",
        "red": 218,
        "green": 205,
        "blue": 172,
        "hue": 43,
        "saturation": 38,
        "lightness": 76
    }, {
        "hex": "#F1ECDF",
        "rgb": "rgb(241, 236, 223)",
        "hsl": "hsl(43, 39%, 91%)",
        "red": 241,
        "green": 236,
        "blue": 223,
        "hue": 43,
        "saturation": 39,
        "lightness": 91
    }, {
        "hex": "#D6C496",
        "rgb": "rgb(214, 196, 150)",
        "hsl": "hsl(43, 44%, 71%)",
        "red": 214,
        "green": 196,
        "blue": 150,
        "hue": 43,
        "saturation": 44,
        "lightness": 71
    }, {
        "hex": "#DDC996",
        "rgb": "rgb(221, 201, 150)",
        "hsl": "hsl(43, 51%, 73%)",
        "red": 221,
        "green": 201,
        "blue": 150,
        "hue": 43,
        "saturation": 51,
        "lightness": 73
    }, {
        "hex": "#AD8B32",
        "rgb": "rgb(173, 139, 50)",
        "hsl": "hsl(43, 55%, 44%)",
        "red": 173,
        "green": 139,
        "blue": 50,
        "hue": 43,
        "saturation": 55,
        "lightness": 44
    }, {
        "hex": "#E3CF9E",
        "rgb": "rgb(227, 207, 158)",
        "hsl": "hsl(43, 55%, 75%)",
        "red": 227,
        "green": 207,
        "blue": 158,
        "hue": 43,
        "saturation": 55,
        "lightness": 75
    }, {
        "hex": "#F0E5C9",
        "rgb": "rgb(240, 229, 201)",
        "hsl": "hsl(43, 57%, 86%)",
        "red": 240,
        "green": 229,
        "blue": 201,
        "hue": 43,
        "saturation": 57,
        "lightness": 86
    }, {
        "hex": "#E2CB92",
        "rgb": "rgb(226, 203, 146)",
        "hsl": "hsl(43, 58%, 73%)",
        "red": 226,
        "green": 203,
        "blue": 146,
        "hue": 43,
        "saturation": 58,
        "lightness": 73
    }, {
        "hex": "#E9D7A9",
        "rgb": "rgb(233, 215, 169)",
        "hsl": "hsl(43, 59%, 79%)",
        "red": 233,
        "green": 215,
        "blue": 169,
        "hue": 43,
        "saturation": 59,
        "lightness": 79
    }, {
        "hex": "#F0E2BE",
        "rgb": "rgb(240, 226, 190)",
        "hsl": "hsl(43, 62%, 84%)",
        "red": 240,
        "green": 226,
        "blue": 190,
        "hue": 43,
        "saturation": 62,
        "lightness": 84
    }, {
        "hex": "#F5E8C6",
        "rgb": "rgb(245, 232, 198)",
        "hsl": "hsl(43, 70%, 87%)",
        "red": 245,
        "green": 232,
        "blue": 198,
        "hue": 43,
        "saturation": 70,
        "lightness": 87
    }, {
        "hex": "#E6BC56",
        "rgb": "rgb(230, 188, 86)",
        "hsl": "hsl(43, 74%, 62%)",
        "red": 230,
        "green": 188,
        "blue": 86,
        "hue": 43,
        "saturation": 74,
        "lightness": 62
    }, {
        "hex": "#F8EDD1",
        "rgb": "rgb(248, 237, 209)",
        "hsl": "hsl(43, 74%, 90%)",
        "red": 248,
        "green": 237,
        "blue": 209,
        "hue": 43,
        "saturation": 74,
        "lightness": 90
    }, {
        "hex": "#E8BF56",
        "rgb": "rgb(232, 191, 86)",
        "hsl": "hsl(43, 76%, 62%)",
        "red": 232,
        "green": 191,
        "blue": 86,
        "hue": 43,
        "saturation": 76,
        "lightness": 62
    }, {
        "hex": "#F7E3B2",
        "rgb": "rgb(247, 227, 178)",
        "hsl": "hsl(43, 81%, 83%)",
        "red": 247,
        "green": 227,
        "blue": 178,
        "hue": 43,
        "saturation": 81,
        "lightness": 83
    }, {
        "hex": "#B68810",
        "rgb": "rgb(182, 136, 16)",
        "hsl": "hsl(43, 84%, 39%)",
        "red": 182,
        "green": 136,
        "blue": 16,
        "hue": 43,
        "saturation": 84,
        "lightness": 39
    }, {
        "hex": "#F4D279",
        "rgb": "rgb(244, 210, 121)",
        "hsl": "hsl(43, 85%, 72%)",
        "red": 244,
        "green": 210,
        "blue": 121,
        "hue": 43,
        "saturation": 85,
        "lightness": 72
    }, {
        "hex": "#F7D683",
        "rgb": "rgb(247, 214, 131)",
        "hsl": "hsl(43, 88%, 74%)",
        "red": 247,
        "green": 214,
        "blue": 131,
        "hue": 43,
        "saturation": 88,
        "lightness": 74
    }, {
        "hex": "#F7CD67",
        "rgb": "rgb(247, 205, 103)",
        "hsl": "hsl(43, 90%, 69%)",
        "red": 247,
        "green": 205,
        "blue": 103,
        "hue": 43,
        "saturation": 90,
        "lightness": 69
    }, {
        "hex": "#FBE5AC",
        "rgb": "rgb(251, 229, 172)",
        "hsl": "hsl(43, 91%, 83%)",
        "red": 251,
        "green": 229,
        "blue": 172,
        "hue": 43,
        "saturation": 91,
        "lightness": 83
    }, {
        "hex": "#FABE28",
        "rgb": "rgb(250, 190, 40)",
        "hsl": "hsl(43, 95%, 57%)",
        "red": 250,
        "green": 190,
        "blue": 40,
        "hue": 43,
        "saturation": 95,
        "lightness": 57
    }, {
        "hex": "#FDCA49",
        "rgb": "rgb(253, 202, 73)",
        "hsl": "hsl(43, 98%, 64%)",
        "red": 253,
        "green": 202,
        "blue": 73,
        "hue": 43,
        "saturation": 98,
        "lightness": 64
    }, {
        "hex": "#FFBC11",
        "rgb": "rgb(255, 188, 17)",
        "hsl": "hsl(43, 100%, 53%)",
        "red": 255,
        "green": 188,
        "blue": 17,
        "hue": 43,
        "saturation": 100,
        "lightness": 53
    }, {
        "hex": "#FFE29A",
        "rgb": "rgb(255, 226, 154)",
        "hsl": "hsl(43, 100%, 80%)",
        "red": 255,
        "green": 226,
        "blue": 154,
        "hue": 43,
        "saturation": 100,
        "lightness": 80
    }, {
        "hex": "#FFE9AF",
        "rgb": "rgb(255, 233, 175)",
        "hsl": "hsl(43, 100%, 84%)",
        "red": 255,
        "green": 233,
        "blue": 175,
        "hue": 43,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#FFEBB9",
        "rgb": "rgb(255, 235, 185)",
        "hsl": "hsl(43, 100%, 86%)",
        "red": 255,
        "green": 235,
        "blue": 185,
        "hue": 43,
        "saturation": 100,
        "lightness": 86
    }, {
        "hex": "#FFEDBF",
        "rgb": "rgb(255, 237, 191)",
        "hsl": "hsl(43, 100%, 87%)",
        "red": 255,
        "green": 237,
        "blue": 191,
        "hue": 43,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#FFEEC2",
        "rgb": "rgb(255, 238, 194)",
        "hsl": "hsl(43, 100%, 88%)",
        "red": 255,
        "green": 238,
        "blue": 194,
        "hue": 43,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#FFF1CE",
        "rgb": "rgb(255, 241, 206)",
        "hsl": "hsl(43, 100%, 90%)",
        "red": 255,
        "green": 241,
        "blue": 206,
        "hue": 43,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#D1C5A5",
        "rgb": "rgb(209, 197, 165)",
        "hsl": "hsl(44, 32%, 73%)",
        "red": 209,
        "green": 197,
        "blue": 165,
        "hue": 44,
        "saturation": 32,
        "lightness": 73
    }, {
        "hex": "#C4B282",
        "rgb": "rgb(196, 178, 130)",
        "hsl": "hsl(44, 36%, 64%)",
        "red": 196,
        "green": 178,
        "blue": 130,
        "hue": 44,
        "saturation": 36,
        "lightness": 64
    }, {
        "hex": "#EAE3D0",
        "rgb": "rgb(234, 227, 208)",
        "hsl": "hsl(44, 38%, 87%)",
        "red": 234,
        "green": 227,
        "blue": 208,
        "hue": 44,
        "saturation": 38,
        "lightness": 87
    }, {
        "hex": "#F4F0E5",
        "rgb": "rgb(244, 240, 229)",
        "hsl": "hsl(44, 41%, 93%)",
        "red": 244,
        "green": 240,
        "blue": 229,
        "hue": 44,
        "saturation": 41,
        "lightness": 93
    }, {
        "hex": "#D0BC87",
        "rgb": "rgb(208, 188, 135)",
        "hsl": "hsl(44, 44%, 67%)",
        "red": 208,
        "green": 188,
        "blue": 135,
        "hue": 44,
        "saturation": 44,
        "lightness": 67
    }, {
        "hex": "#F2ECDC",
        "rgb": "rgb(242, 236, 220)",
        "hsl": "hsl(44, 46%, 91%)",
        "red": 242,
        "green": 236,
        "blue": 220,
        "hue": 44,
        "saturation": 46,
        "lightness": 91
    }, {
        "hex": "#E1D2A9",
        "rgb": "rgb(225, 210, 169)",
        "hsl": "hsl(44, 48%, 77%)",
        "red": 225,
        "green": 210,
        "blue": 169,
        "hue": 44,
        "saturation": 48,
        "lightness": 77
    }, {
        "hex": "#EBE1C5",
        "rgb": "rgb(235, 225, 197)",
        "hsl": "hsl(44, 49%, 85%)",
        "red": 235,
        "green": 225,
        "blue": 197,
        "hue": 44,
        "saturation": 49,
        "lightness": 85
    }, {
        "hex": "#E7D9B4",
        "rgb": "rgb(231, 217, 180)",
        "hsl": "hsl(44, 52%, 81%)",
        "red": 231,
        "green": 217,
        "blue": 180,
        "hue": 44,
        "saturation": 52,
        "lightness": 81
    }, {
        "hex": "#ECE1C3",
        "rgb": "rgb(236, 225, 195)",
        "hsl": "hsl(44, 52%, 85%)",
        "red": 236,
        "green": 225,
        "blue": 195,
        "hue": 44,
        "saturation": 52,
        "lightness": 85
    }, {
        "hex": "#E8D7A9",
        "rgb": "rgb(232, 215, 169)",
        "hsl": "hsl(44, 58%, 79%)",
        "red": 232,
        "green": 215,
        "blue": 169,
        "hue": 44,
        "saturation": 58,
        "lightness": 79
    }, {
        "hex": "#F7F1E1",
        "rgb": "rgb(247, 241, 225)",
        "hsl": "hsl(44, 58%, 93%)",
        "red": 247,
        "green": 241,
        "blue": 225,
        "hue": 44,
        "saturation": 58,
        "lightness": 93
    }, {
        "hex": "#EFE2BF",
        "rgb": "rgb(239, 226, 191)",
        "hsl": "hsl(44, 60%, 84%)",
        "red": 239,
        "green": 226,
        "blue": 191,
        "hue": 44,
        "saturation": 60,
        "lightness": 84
    }, {
        "hex": "#E3C77B",
        "rgb": "rgb(227, 199, 123)",
        "hsl": "hsl(44, 65%, 69%)",
        "red": 227,
        "green": 199,
        "blue": 123,
        "hue": 44,
        "saturation": 65,
        "lightness": 69
    }, {
        "hex": "#F0DDAA",
        "rgb": "rgb(240, 221, 170)",
        "hsl": "hsl(44, 70%, 80%)",
        "red": 240,
        "green": 221,
        "blue": 170,
        "hue": 44,
        "saturation": 70,
        "lightness": 80
    }, {
        "hex": "#A47F1A",
        "rgb": "rgb(164, 127, 26)",
        "hsl": "hsl(44, 73%, 37%)",
        "red": 164,
        "green": 127,
        "blue": 26,
        "hue": 44,
        "saturation": 73,
        "lightness": 37
    }, {
        "hex": "#EDD48E",
        "rgb": "rgb(237, 212, 142)",
        "hsl": "hsl(44, 73%, 74%)",
        "red": 237,
        "green": 212,
        "blue": 142,
        "hue": 44,
        "saturation": 73,
        "lightness": 74
    }, {
        "hex": "#F9EFD4",
        "rgb": "rgb(249, 239, 212)",
        "hsl": "hsl(44, 76%, 90%)",
        "red": 249,
        "green": 239,
        "blue": 212,
        "hue": 44,
        "saturation": 76,
        "lightness": 90
    }, {
        "hex": "#F5DD9D",
        "rgb": "rgb(245, 221, 157)",
        "hsl": "hsl(44, 81%, 79%)",
        "red": 245,
        "green": 221,
        "blue": 157,
        "hue": 44,
        "saturation": 81,
        "lightness": 79
    }, {
        "hex": "#F9EBC4",
        "rgb": "rgb(249, 235, 196)",
        "hsl": "hsl(44, 82%, 87%)",
        "red": 249,
        "green": 235,
        "blue": 196,
        "hue": 44,
        "saturation": 82,
        "lightness": 87
    }, {
        "hex": "#F9EABF",
        "rgb": "rgb(249, 234, 191)",
        "hsl": "hsl(44, 83%, 86%)",
        "red": 249,
        "green": 234,
        "blue": 191,
        "hue": 44,
        "saturation": 83,
        "lightness": 86
    }, {
        "hex": "#FAEDCA",
        "rgb": "rgb(250, 237, 202)",
        "hsl": "hsl(44, 83%, 89%)",
        "red": 250,
        "green": 237,
        "blue": 202,
        "hue": 44,
        "saturation": 83,
        "lightness": 89
    }, {
        "hex": "#EDB92E",
        "rgb": "rgb(237, 185, 46)",
        "hsl": "hsl(44, 84%, 55%)",
        "red": 237,
        "green": 185,
        "blue": 46,
        "hue": 44,
        "saturation": 84,
        "lightness": 55
    }, {
        "hex": "#F2CC67",
        "rgb": "rgb(242, 204, 103)",
        "hsl": "hsl(44, 84%, 68%)",
        "red": 242,
        "green": 204,
        "blue": 103,
        "hue": 44,
        "saturation": 84,
        "lightness": 68
    }, {
        "hex": "#F6D169",
        "rgb": "rgb(246, 209, 105)",
        "hsl": "hsl(44, 89%, 69%)",
        "red": 246,
        "green": 209,
        "blue": 105,
        "hue": 44,
        "saturation": 89,
        "lightness": 69
    }, {
        "hex": "#FACB4B",
        "rgb": "rgb(250, 203, 75)",
        "hsl": "hsl(44, 95%, 64%)",
        "red": 250,
        "green": 203,
        "blue": 75,
        "hue": 44,
        "saturation": 95,
        "lightness": 64
    }, {
        "hex": "#FDD86E",
        "rgb": "rgb(253, 216, 110)",
        "hsl": "hsl(44, 97%, 71%)",
        "red": 253,
        "green": 216,
        "blue": 110,
        "hue": 44,
        "saturation": 97,
        "lightness": 71
    }, {
        "hex": "#FEEDBF",
        "rgb": "rgb(254, 237, 191)",
        "hsl": "hsl(44, 97%, 87%)",
        "red": 254,
        "green": 237,
        "blue": 191,
        "hue": 44,
        "saturation": 97,
        "lightness": 87
    }, {
        "hex": "#FFC018",
        "rgb": "rgb(255, 192, 24)",
        "hsl": "hsl(44, 100%, 55%)",
        "red": 255,
        "green": 192,
        "blue": 24,
        "hue": 44,
        "saturation": 100,
        "lightness": 55
    }, {
        "hex": "#FFC219",
        "rgb": "rgb(255, 194, 25)",
        "hsl": "hsl(44, 100%, 55%)",
        "red": 255,
        "green": 194,
        "blue": 25,
        "hue": 44,
        "saturation": 100,
        "lightness": 55
    }, {
        "hex": "#FFC52C",
        "rgb": "rgb(255, 197, 44)",
        "hsl": "hsl(44, 100%, 59%)",
        "red": 255,
        "green": 197,
        "blue": 44,
        "hue": 44,
        "saturation": 100,
        "lightness": 59
    }, {
        "hex": "#FFE498",
        "rgb": "rgb(255, 228, 152)",
        "hsl": "hsl(44, 100%, 80%)",
        "red": 255,
        "green": 228,
        "blue": 152,
        "hue": 44,
        "saturation": 100,
        "lightness": 80
    }, {
        "hex": "#FFFBF0",
        "rgb": "rgb(255, 251, 240)",
        "hsl": "hsl(44, 100%, 97%)",
        "red": 255,
        "green": 251,
        "blue": 240,
        "hue": 44,
        "saturation": 100,
        "lightness": 97
    }, {
        "hex": "#4E4D4A",
        "rgb": "rgb(78, 77, 74)",
        "hsl": "hsl(45, 3%, 30%)",
        "red": 78,
        "green": 77,
        "blue": 74,
        "hue": 45,
        "saturation": 3,
        "lightness": 30
    }, {
        "hex": "#5C584C",
        "rgb": "rgb(92, 88, 76)",
        "hsl": "hsl(45, 10%, 33%)",
        "red": 92,
        "green": 88,
        "blue": 76,
        "hue": 45,
        "saturation": 10,
        "lightness": 33
    }, {
        "hex": "#948C75",
        "rgb": "rgb(148, 140, 117)",
        "hsl": "hsl(45, 13%, 52%)",
        "red": 148,
        "green": 140,
        "blue": 117,
        "hue": 45,
        "saturation": 13,
        "lightness": 52
    }, {
        "hex": "#9A927B",
        "rgb": "rgb(154, 146, 123)",
        "hsl": "hsl(45, 13%, 54%)",
        "red": 154,
        "green": 146,
        "blue": 123,
        "hue": 45,
        "saturation": 13,
        "lightness": 54
    }, {
        "hex": "#DAD6CA",
        "rgb": "rgb(218, 214, 202)",
        "hsl": "hsl(45, 18%, 82%)",
        "red": 218,
        "green": 214,
        "blue": 202,
        "hue": 45,
        "saturation": 18,
        "lightness": 82
    }, {
        "hex": "#BAB195",
        "rgb": "rgb(186, 177, 149)",
        "hsl": "hsl(45, 21%, 66%)",
        "red": 186,
        "green": 177,
        "blue": 149,
        "hue": 45,
        "saturation": 21,
        "lightness": 66
    }, {
        "hex": "#C0B698",
        "rgb": "rgb(192, 182, 152)",
        "hsl": "hsl(45, 24%, 67%)",
        "red": 192,
        "green": 182,
        "blue": 152,
        "hue": 45,
        "saturation": 24,
        "lightness": 67
    }, {
        "hex": "#96875A",
        "rgb": "rgb(150, 135, 90)",
        "hsl": "hsl(45, 25%, 47%)",
        "red": 150,
        "green": 135,
        "blue": 90,
        "hue": 45,
        "saturation": 25,
        "lightness": 47
    }, {
        "hex": "#C2B48A",
        "rgb": "rgb(194, 180, 138)",
        "hsl": "hsl(45, 31%, 65%)",
        "red": 194,
        "green": 180,
        "blue": 138,
        "hue": 45,
        "saturation": 31,
        "lightness": 65
    }, {
        "hex": "#DBD1B3",
        "rgb": "rgb(219, 209, 179)",
        "hsl": "hsl(45, 36%, 78%)",
        "red": 219,
        "green": 209,
        "blue": 179,
        "hue": 45,
        "saturation": 36,
        "lightness": 78
    }, {
        "hex": "#A89048",
        "rgb": "rgb(168, 144, 72)",
        "hsl": "hsl(45, 40%, 47%)",
        "red": 168,
        "green": 144,
        "blue": 72,
        "hue": 45,
        "saturation": 40,
        "lightness": 47
    }, {
        "hex": "#EDE7D5",
        "rgb": "rgb(237, 231, 213)",
        "hsl": "hsl(45, 40%, 88%)",
        "red": 237,
        "green": 231,
        "blue": 213,
        "hue": 45,
        "saturation": 40,
        "lightness": 88
    }, {
        "hex": "#EDE5CE",
        "rgb": "rgb(237, 229, 206)",
        "hsl": "hsl(45, 46%, 87%)",
        "red": 237,
        "green": 229,
        "blue": 206,
        "hue": 45,
        "saturation": 46,
        "lightness": 87
    }, {
        "hex": "#E8DDBD",
        "rgb": "rgb(232, 221, 189)",
        "hsl": "hsl(45, 48%, 83%)",
        "red": 232,
        "green": 221,
        "blue": 189,
        "hue": 45,
        "saturation": 48,
        "lightness": 83
    }, {
        "hex": "#392E0E",
        "rgb": "rgb(57, 46, 14)",
        "hsl": "hsl(45, 61%, 14%)",
        "red": 57,
        "green": 46,
        "blue": 14,
        "hue": 45,
        "saturation": 61,
        "lightness": 14
    }, {
        "hex": "#DBBF6B",
        "rgb": "rgb(219, 191, 107)",
        "hsl": "hsl(45, 61%, 64%)",
        "red": 219,
        "green": 191,
        "blue": 107,
        "hue": 45,
        "saturation": 61,
        "lightness": 64
    }, {
        "hex": "#EEE0B7",
        "rgb": "rgb(238, 224, 183)",
        "hsl": "hsl(45, 62%, 83%)",
        "red": 238,
        "green": 224,
        "blue": 183,
        "hue": 45,
        "saturation": 62,
        "lightness": 83
    }, {
        "hex": "#D1AA34",
        "rgb": "rgb(209, 170, 52)",
        "hsl": "hsl(45, 63%, 51%)",
        "red": 209,
        "green": 170,
        "blue": 52,
        "hue": 45,
        "saturation": 63,
        "lightness": 51
    }, {
        "hex": "#E8D18E",
        "rgb": "rgb(232, 209, 142)",
        "hsl": "hsl(45, 66%, 73%)",
        "red": 232,
        "green": 209,
        "blue": 142,
        "hue": 45,
        "saturation": 66,
        "lightness": 73
    }, {
        "hex": "#EEDEAD",
        "rgb": "rgb(238, 222, 173)",
        "hsl": "hsl(45, 66%, 81%)",
        "red": 238,
        "green": 222,
        "blue": 173,
        "hue": 45,
        "saturation": 66,
        "lightness": 81
    }, {
        "hex": "#F7EFD8",
        "rgb": "rgb(247, 239, 216)",
        "hsl": "hsl(45, 66%, 91%)",
        "red": 247,
        "green": 239,
        "blue": 216,
        "hue": 45,
        "saturation": 66,
        "lightness": 91
    }, {
        "hex": "#EBD592",
        "rgb": "rgb(235, 213, 146)",
        "hsl": "hsl(45, 69%, 75%)",
        "red": 235,
        "green": 213,
        "blue": 146,
        "hue": 45,
        "saturation": 69,
        "lightness": 75
    }, {
        "hex": "#F0DDA6",
        "rgb": "rgb(240, 221, 166)",
        "hsl": "hsl(45, 71%, 80%)",
        "red": 240,
        "green": 221,
        "blue": 166,
        "hue": 45,
        "saturation": 71,
        "lightness": 80
    }, {
        "hex": "#EDD58F",
        "rgb": "rgb(237, 213, 143)",
        "hsl": "hsl(45, 72%, 75%)",
        "red": 237,
        "green": 213,
        "blue": 143,
        "hue": 45,
        "saturation": 72,
        "lightness": 75
    }, {
        "hex": "#EBD07F",
        "rgb": "rgb(235, 208, 127)",
        "hsl": "hsl(45, 73%, 71%)",
        "red": 235,
        "green": 208,
        "blue": 127,
        "hue": 45,
        "saturation": 73,
        "lightness": 71
    }, {
        "hex": "#ECD079",
        "rgb": "rgb(236, 208, 121)",
        "hsl": "hsl(45, 75%, 70%)",
        "red": 236,
        "green": 208,
        "blue": 121,
        "hue": 45,
        "saturation": 75,
        "lightness": 70
    }, {
        "hex": "#EBCC6E",
        "rgb": "rgb(235, 204, 110)",
        "hsl": "hsl(45, 76%, 68%)",
        "red": 235,
        "green": 204,
        "blue": 110,
        "hue": 45,
        "saturation": 76,
        "lightness": 68
    }, {
        "hex": "#F0D890",
        "rgb": "rgb(240, 216, 144)",
        "hsl": "hsl(45, 76%, 75%)",
        "red": 240,
        "green": 216,
        "blue": 144,
        "hue": 45,
        "saturation": 76,
        "lightness": 75
    }, {
        "hex": "#E7C049",
        "rgb": "rgb(231, 192, 73)",
        "hsl": "hsl(45, 77%, 60%)",
        "red": 231,
        "green": 192,
        "blue": 73,
        "hue": 45,
        "saturation": 77,
        "lightness": 60
    }, {
        "hex": "#EAC761",
        "rgb": "rgb(234, 199, 97)",
        "hsl": "hsl(45, 77%, 65%)",
        "red": 234,
        "green": 199,
        "blue": 97,
        "hue": 45,
        "saturation": 77,
        "lightness": 65
    }, {
        "hex": "#F5E3AE",
        "rgb": "rgb(245, 227, 174)",
        "hsl": "hsl(45, 78%, 82%)",
        "red": 245,
        "green": 227,
        "blue": 174,
        "hue": 45,
        "saturation": 78,
        "lightness": 82
    }, {
        "hex": "#F5E1A4",
        "rgb": "rgb(245, 225, 164)",
        "hsl": "hsl(45, 80%, 80%)",
        "red": 245,
        "green": 225,
        "blue": 164,
        "hue": 45,
        "saturation": 80,
        "lightness": 80
    }, {
        "hex": "#F2D680",
        "rgb": "rgb(242, 214, 128)",
        "hsl": "hsl(45, 81%, 73%)",
        "red": 242,
        "green": 214,
        "blue": 128,
        "hue": 45,
        "saturation": 81,
        "lightness": 73
    }, {
        "hex": "#ECC039",
        "rgb": "rgb(236, 192, 57)",
        "hsl": "hsl(45, 82%, 57%)",
        "red": 236,
        "green": 192,
        "blue": 57,
        "hue": 45,
        "saturation": 82,
        "lightness": 57
    }, {
        "hex": "#FAEECA",
        "rgb": "rgb(250, 238, 202)",
        "hsl": "hsl(45, 83%, 89%)",
        "red": 250,
        "green": 238,
        "blue": 202,
        "hue": 45,
        "saturation": 83,
        "lightness": 89
    }, {
        "hex": "#F2C94E",
        "rgb": "rgb(242, 201, 78)",
        "hsl": "hsl(45, 86%, 63%)",
        "red": 242,
        "green": 201,
        "blue": 78,
        "hue": 45,
        "saturation": 86,
        "lightness": 63
    }, {
        "hex": "#F9DF94",
        "rgb": "rgb(249, 223, 148)",
        "hsl": "hsl(45, 89%, 78%)",
        "red": 249,
        "green": 223,
        "blue": 148,
        "hue": 45,
        "saturation": 89,
        "lightness": 78
    }, {
        "hex": "#795C06",
        "rgb": "rgb(121, 92, 6)",
        "hsl": "hsl(45, 91%, 25%)",
        "red": 121,
        "green": 92,
        "blue": 6,
        "hue": 45,
        "saturation": 91,
        "lightness": 25
    }, {
        "hex": "#FCEBB6",
        "rgb": "rgb(252, 235, 182)",
        "hsl": "hsl(45, 92%, 85%)",
        "red": 252,
        "green": 235,
        "blue": 182,
        "hue": 45,
        "saturation": 92,
        "lightness": 85
    }, {
        "hex": "#FDF1CC",
        "rgb": "rgb(253, 241, 204)",
        "hsl": "hsl(45, 92%, 90%)",
        "red": 253,
        "green": 241,
        "blue": 204,
        "hue": 45,
        "saturation": 92,
        "lightness": 90
    }, {
        "hex": "#F7BC05",
        "rgb": "rgb(247, 188, 5)",
        "hsl": "hsl(45, 96%, 49%)",
        "red": 247,
        "green": 188,
        "blue": 5,
        "hue": 45,
        "saturation": 96,
        "lightness": 49
    }, {
        "hex": "#7F6000",
        "rgb": "rgb(127, 96, 0)",
        "hsl": "hsl(45, 100%, 25%)",
        "red": 127,
        "green": 96,
        "blue": 0,
        "hue": 45,
        "saturation": 100,
        "lightness": 25
    }, {
        "hex": "#E6AE00",
        "rgb": "rgb(230, 174, 0)",
        "hsl": "hsl(45, 100%, 45%)",
        "red": 230,
        "green": 174,
        "blue": 0,
        "hue": 45,
        "saturation": 100,
        "lightness": 45
    }, {
        "hex": "#F0B300",
        "rgb": "rgb(240, 179, 0)",
        "hsl": "hsl(45, 100%, 47%)",
        "red": 240,
        "green": 179,
        "blue": 0,
        "hue": 45,
        "saturation": 100,
        "lightness": 47
    }, {
        "hex": "#FFCC33",
        "rgb": "rgb(255, 204, 51)",
        "hsl": "hsl(45, 100%, 60%)",
        "red": 255,
        "green": 204,
        "blue": 51,
        "hue": 45,
        "saturation": 100,
        "lightness": 60
    }, {
        "hex": "#FFCD37",
        "rgb": "rgb(255, 205, 55)",
        "hsl": "hsl(45, 100%, 61%)",
        "red": 255,
        "green": 205,
        "blue": 55,
        "hue": 45,
        "saturation": 100,
        "lightness": 61
    }, {
        "hex": "#FFD452",
        "rgb": "rgb(255, 212, 82)",
        "hsl": "hsl(45, 100%, 66%)",
        "red": 255,
        "green": 212,
        "blue": 82,
        "hue": 45,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FFEAAD",
        "rgb": "rgb(255, 234, 173)",
        "hsl": "hsl(45, 100%, 84%)",
        "red": 255,
        "green": 234,
        "blue": 173,
        "hue": 45,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#FFEFC1",
        "rgb": "rgb(255, 239, 193)",
        "hsl": "hsl(45, 100%, 88%)",
        "red": 255,
        "green": 239,
        "blue": 193,
        "hue": 45,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#FFF5D6",
        "rgb": "rgb(255, 245, 214)",
        "hsl": "hsl(45, 100%, 92%)",
        "red": 255,
        "green": 245,
        "blue": 214,
        "hue": 45,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#FFF5D6",
        "rgb": "rgb(255, 245, 214)",
        "hsl": "hsl(45, 100%, 92%)",
        "red": 255,
        "green": 245,
        "blue": 214,
        "hue": 45,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#FFFAEB",
        "rgb": "rgb(255, 250, 235)",
        "hsl": "hsl(45, 100%, 96%)",
        "red": 255,
        "green": 250,
        "blue": 235,
        "hue": 45,
        "saturation": 100,
        "lightness": 96
    }, {
        "hex": "#D5D2C8",
        "rgb": "rgb(213, 210, 200)",
        "hsl": "hsl(46, 13%, 81%)",
        "red": 213,
        "green": 210,
        "blue": 200,
        "hue": 46,
        "saturation": 13,
        "lightness": 81
    }, {
        "hex": "#93865A",
        "rgb": "rgb(147, 134, 90)",
        "hsl": "hsl(46, 24%, 46%)",
        "red": 147,
        "green": 134,
        "blue": 90,
        "hue": 46,
        "saturation": 24,
        "lightness": 46
    }, {
        "hex": "#403A26",
        "rgb": "rgb(64, 58, 38)",
        "hsl": "hsl(46, 25%, 20%)",
        "red": 64,
        "green": 58,
        "blue": 38,
        "hue": 46,
        "saturation": 25,
        "lightness": 20
    }, {
        "hex": "#83764C",
        "rgb": "rgb(131, 118, 76)",
        "hsl": "hsl(46, 27%, 41%)",
        "red": 131,
        "green": 118,
        "blue": 76,
        "hue": 46,
        "saturation": 27,
        "lightness": 41
    }, {
        "hex": "#332E1D",
        "rgb": "rgb(51, 46, 29)",
        "hsl": "hsl(46, 28%, 16%)",
        "red": 51,
        "green": 46,
        "blue": 29,
        "hue": 46,
        "saturation": 28,
        "lightness": 16
    }, {
        "hex": "#EFECE2",
        "rgb": "rgb(239, 236, 226)",
        "hsl": "hsl(46, 29%, 91%)",
        "red": 239,
        "green": 236,
        "blue": 226,
        "hue": 46,
        "saturation": 29,
        "lightness": 91
    }, {
        "hex": "#C3B68C",
        "rgb": "rgb(195, 182, 140)",
        "hsl": "hsl(46, 31%, 66%)",
        "red": 195,
        "green": 182,
        "blue": 140,
        "hue": 46,
        "saturation": 31,
        "lightness": 66
    }, {
        "hex": "#D2C8A7",
        "rgb": "rgb(210, 200, 167)",
        "hsl": "hsl(46, 32%, 74%)",
        "red": 210,
        "green": 200,
        "blue": 167,
        "hue": 46,
        "saturation": 32,
        "lightness": 74
    }, {
        "hex": "#B39E58",
        "rgb": "rgb(179, 158, 88)",
        "hsl": "hsl(46, 37%, 52%)",
        "red": 179,
        "green": 158,
        "blue": 88,
        "hue": 46,
        "saturation": 37,
        "lightness": 52
    }, {
        "hex": "#D1C089",
        "rgb": "rgb(209, 192, 137)",
        "hsl": "hsl(46, 44%, 68%)",
        "red": 209,
        "green": 192,
        "blue": 137,
        "hue": 46,
        "saturation": 44,
        "lightness": 68
    }, {
        "hex": "#ECE5CE",
        "rgb": "rgb(236, 229, 206)",
        "hsl": "hsl(46, 44%, 87%)",
        "red": 236,
        "green": 229,
        "blue": 206,
        "hue": 46,
        "saturation": 44,
        "lightness": 87
    }, {
        "hex": "#F9F6EC",
        "rgb": "rgb(249, 246, 236)",
        "hsl": "hsl(46, 52%, 95%)",
        "red": 249,
        "green": 246,
        "blue": 236,
        "hue": 46,
        "saturation": 52,
        "lightness": 95
    }, {
        "hex": "#F1E7C5",
        "rgb": "rgb(241, 231, 197)",
        "hsl": "hsl(46, 61%, 86%)",
        "red": 241,
        "green": 231,
        "blue": 197,
        "hue": 46,
        "saturation": 61,
        "lightness": 86
    }, {
        "hex": "#F9F4E3",
        "rgb": "rgb(249, 244, 227)",
        "hsl": "hsl(46, 65%, 93%)",
        "red": 249,
        "green": 244,
        "blue": 227,
        "hue": 46,
        "saturation": 65,
        "lightness": 93
    }, {
        "hex": "#F3E6BC",
        "rgb": "rgb(243, 230, 188)",
        "hsl": "hsl(46, 70%, 85%)",
        "red": 243,
        "green": 230,
        "blue": 188,
        "hue": 46,
        "saturation": 70,
        "lightness": 85
    }, {
        "hex": "#FAF4E0",
        "rgb": "rgb(250, 244, 224)",
        "hsl": "hsl(46, 72%, 93%)",
        "red": 250,
        "green": 244,
        "blue": 224,
        "hue": 46,
        "saturation": 72,
        "lightness": 93
    }, {
        "hex": "#ECD078",
        "rgb": "rgb(236, 208, 120)",
        "hsl": "hsl(46, 75%, 70%)",
        "red": 236,
        "green": 208,
        "blue": 120,
        "hue": 46,
        "saturation": 75,
        "lightness": 70
    }, {
        "hex": "#EED47F",
        "rgb": "rgb(238, 212, 127)",
        "hsl": "hsl(46, 77%, 72%)",
        "red": 238,
        "green": 212,
        "blue": 127,
        "hue": 46,
        "saturation": 77,
        "lightness": 72
    }, {
        "hex": "#EDC951",
        "rgb": "rgb(237, 201, 81)",
        "hsl": "hsl(46, 81%, 62%)",
        "red": 237,
        "green": 201,
        "blue": 81,
        "hue": 46,
        "saturation": 81,
        "lightness": 62
    }, {
        "hex": "#F5DF98",
        "rgb": "rgb(245, 223, 152)",
        "hsl": "hsl(46, 82%, 78%)",
        "red": 245,
        "green": 223,
        "blue": 152,
        "hue": 46,
        "saturation": 82,
        "lightness": 78
    }, {
        "hex": "#F2CD4F",
        "rgb": "rgb(242, 205, 79)",
        "hsl": "hsl(46, 86%, 63%)",
        "red": 242,
        "green": 205,
        "blue": 79,
        "hue": 46,
        "saturation": 86,
        "lightness": 63
    }, {
        "hex": "#FBEEC2",
        "rgb": "rgb(251, 238, 194)",
        "hsl": "hsl(46, 88%, 87%)",
        "red": 251,
        "green": 238,
        "blue": 194,
        "hue": 46,
        "saturation": 88,
        "lightness": 87
    }, {
        "hex": "#AD860A",
        "rgb": "rgb(173, 134, 10)",
        "hsl": "hsl(46, 89%, 36%)",
        "red": 173,
        "green": 134,
        "blue": 10,
        "hue": 46,
        "saturation": 89,
        "lightness": 36
    }, {
        "hex": "#F8DB7E",
        "rgb": "rgb(248, 219, 126)",
        "hsl": "hsl(46, 90%, 73%)",
        "red": 248,
        "green": 219,
        "blue": 126,
        "hue": 46,
        "saturation": 90,
        "lightness": 73
    }, {
        "hex": "#F7C41F",
        "rgb": "rgb(247, 196, 31)",
        "hsl": "hsl(46, 93%, 55%)",
        "red": 247,
        "green": 196,
        "blue": 31,
        "hue": 46,
        "saturation": 93,
        "lightness": 55
    }, {
        "hex": "#FEF7E1",
        "rgb": "rgb(254, 247, 225)",
        "hsl": "hsl(46, 94%, 94%)",
        "red": 254,
        "green": 247,
        "blue": 225,
        "hue": 46,
        "saturation": 94,
        "lightness": 94
    }, {
        "hex": "#FCE185",
        "rgb": "rgb(252, 225, 133)",
        "hsl": "hsl(46, 95%, 75%)",
        "red": 252,
        "green": 225,
        "blue": 133,
        "hue": 46,
        "saturation": 95,
        "lightness": 75
    }, {
        "hex": "#FEE9A6",
        "rgb": "rgb(254, 233, 166)",
        "hsl": "hsl(46, 98%, 82%)",
        "red": 254,
        "green": 233,
        "blue": 166,
        "hue": 46,
        "saturation": 98,
        "lightness": 82
    }, {
        "hex": "#F8BE00",
        "rgb": "rgb(248, 190, 0)",
        "hsl": "hsl(46, 100%, 49%)",
        "red": 248,
        "green": 190,
        "blue": 0,
        "hue": 46,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FFC300",
        "rgb": "rgb(255, 195, 0)",
        "hsl": "hsl(46, 100%, 50%)",
        "red": 255,
        "green": 195,
        "blue": 0,
        "hue": 46,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FFC501",
        "rgb": "rgb(255, 197, 1)",
        "hsl": "hsl(46, 100%, 50%)",
        "red": 255,
        "green": 197,
        "blue": 1,
        "hue": 46,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FFCA1B",
        "rgb": "rgb(255, 202, 27)",
        "hsl": "hsl(46, 100%, 55%)",
        "red": 255,
        "green": 202,
        "blue": 27,
        "hue": 46,
        "saturation": 100,
        "lightness": 55
    }, {
        "hex": "#FFDC68",
        "rgb": "rgb(255, 220, 104)",
        "hsl": "hsl(46, 100%, 70%)",
        "red": 255,
        "green": 220,
        "blue": 104,
        "hue": 46,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#FFE181",
        "rgb": "rgb(255, 225, 129)",
        "hsl": "hsl(46, 100%, 75%)",
        "red": 255,
        "green": 225,
        "blue": 129,
        "hue": 46,
        "saturation": 100,
        "lightness": 75
    }, {
        "hex": "#FFEFB9",
        "rgb": "rgb(255, 239, 185)",
        "hsl": "hsl(46, 100%, 86%)",
        "red": 255,
        "green": 239,
        "blue": 185,
        "hue": 46,
        "saturation": 100,
        "lightness": 86
    }, {
        "hex": "#FFF1C1",
        "rgb": "rgb(255, 241, 193)",
        "hsl": "hsl(46, 100%, 88%)",
        "red": 255,
        "green": 241,
        "blue": 193,
        "hue": 46,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#999175",
        "rgb": "rgb(153, 145, 117)",
        "hsl": "hsl(47, 15%, 53%)",
        "red": 153,
        "green": 145,
        "blue": 117,
        "hue": 47,
        "saturation": 15,
        "lightness": 53
    }, {
        "hex": "#A39B7E",
        "rgb": "rgb(163, 155, 126)",
        "hsl": "hsl(47, 17%, 57%)",
        "red": 163,
        "green": 155,
        "blue": 126,
        "hue": 47,
        "saturation": 17,
        "lightness": 57
    }, {
        "hex": "#A69E80",
        "rgb": "rgb(166, 158, 128)",
        "hsl": "hsl(47, 18%, 58%)",
        "red": 166,
        "green": 158,
        "blue": 128,
        "hue": 47,
        "saturation": 18,
        "lightness": 58
    }, {
        "hex": "#B7AE8F",
        "rgb": "rgb(183, 174, 143)",
        "hsl": "hsl(47, 22%, 64%)",
        "red": 183,
        "green": 174,
        "blue": 143,
        "hue": 47,
        "saturation": 22,
        "lightness": 64
    }, {
        "hex": "#BDB495",
        "rgb": "rgb(189, 180, 149)",
        "hsl": "hsl(47, 23%, 66%)",
        "red": 189,
        "green": 180,
        "blue": 149,
        "hue": 47,
        "saturation": 23,
        "lightness": 66
    }, {
        "hex": "#C2B895",
        "rgb": "rgb(194, 184, 149)",
        "hsl": "hsl(47, 27%, 67%)",
        "red": 194,
        "green": 184,
        "blue": 149,
        "hue": 47,
        "saturation": 27,
        "lightness": 67
    }, {
        "hex": "#9C8C51",
        "rgb": "rgb(156, 140, 81)",
        "hsl": "hsl(47, 32%, 46%)",
        "red": 156,
        "green": 140,
        "blue": 81,
        "hue": 47,
        "saturation": 32,
        "lightness": 46
    }, {
        "hex": "#E6E1CF",
        "rgb": "rgb(230, 225, 207)",
        "hsl": "hsl(47, 32%, 86%)",
        "red": 230,
        "green": 225,
        "blue": 207,
        "hue": 47,
        "saturation": 32,
        "lightness": 86
    }, {
        "hex": "#BCAC71",
        "rgb": "rgb(188, 172, 113)",
        "hsl": "hsl(47, 36%, 59%)",
        "red": 188,
        "green": 172,
        "blue": 113,
        "hue": 47,
        "saturation": 36,
        "lightness": 59
    }, {
        "hex": "#E6DDBC",
        "rgb": "rgb(230, 221, 188)",
        "hsl": "hsl(47, 46%, 82%)",
        "red": 230,
        "green": 221,
        "blue": 188,
        "hue": 47,
        "saturation": 46,
        "lightness": 82
    }, {
        "hex": "#897632",
        "rgb": "rgb(137, 118, 50)",
        "hsl": "hsl(47, 47%, 37%)",
        "red": 137,
        "green": 118,
        "blue": 50,
        "hue": 47,
        "saturation": 47,
        "lightness": 37
    }, {
        "hex": "#99822D",
        "rgb": "rgb(153, 130, 45)",
        "hsl": "hsl(47, 55%, 39%)",
        "red": 153,
        "green": 130,
        "blue": 45,
        "hue": 47,
        "saturation": 55,
        "lightness": 39
    }, {
        "hex": "#E3D49C",
        "rgb": "rgb(227, 212, 156)",
        "hsl": "hsl(47, 56%, 75%)",
        "red": 227,
        "green": 212,
        "blue": 156,
        "hue": 47,
        "saturation": 56,
        "lightness": 75
    }, {
        "hex": "#E8DBAD",
        "rgb": "rgb(232, 219, 173)",
        "hsl": "hsl(47, 56%, 79%)",
        "red": 232,
        "green": 219,
        "blue": 173,
        "hue": 47,
        "saturation": 56,
        "lightness": 79
    }, {
        "hex": "#F6F1DE",
        "rgb": "rgb(246, 241, 222)",
        "hsl": "hsl(47, 57%, 92%)",
        "red": 246,
        "green": 241,
        "blue": 222,
        "hue": 47,
        "saturation": 57,
        "lightness": 92
    }, {
        "hex": "#E1CE8A",
        "rgb": "rgb(225, 206, 138)",
        "hsl": "hsl(47, 59%, 71%)",
        "red": 225,
        "green": 206,
        "blue": 138,
        "hue": 47,
        "saturation": 59,
        "lightness": 71
    }, {
        "hex": "#E5D599",
        "rgb": "rgb(229, 213, 153)",
        "hsl": "hsl(47, 59%, 75%)",
        "red": 229,
        "green": 213,
        "blue": 153,
        "hue": 47,
        "saturation": 59,
        "lightness": 75
    }, {
        "hex": "#DEC87A",
        "rgb": "rgb(222, 200, 122)",
        "hsl": "hsl(47, 60%, 67%)",
        "red": 222,
        "green": 200,
        "blue": 122,
        "hue": 47,
        "saturation": 60,
        "lightness": 67
    }, {
        "hex": "#F5EED4",
        "rgb": "rgb(245, 238, 212)",
        "hsl": "hsl(47, 62%, 90%)",
        "red": 245,
        "green": 238,
        "blue": 212,
        "hue": 47,
        "saturation": 62,
        "lightness": 90
    }, {
        "hex": "#F2E8C4",
        "rgb": "rgb(242, 232, 196)",
        "hsl": "hsl(47, 64%, 86%)",
        "red": 242,
        "green": 232,
        "blue": 196,
        "hue": 47,
        "saturation": 64,
        "lightness": 86
    }, {
        "hex": "#EEDA95",
        "rgb": "rgb(238, 218, 149)",
        "hsl": "hsl(47, 72%, 76%)",
        "red": 238,
        "green": 218,
        "blue": 149,
        "hue": 47,
        "saturation": 72,
        "lightness": 76
    }, {
        "hex": "#F2E0A0",
        "rgb": "rgb(242, 224, 160)",
        "hsl": "hsl(47, 76%, 79%)",
        "red": 242,
        "green": 224,
        "blue": 160,
        "hue": 47,
        "saturation": 76,
        "lightness": 79
    }, {
        "hex": "#A88914",
        "rgb": "rgb(168, 137, 20)",
        "hsl": "hsl(47, 79%, 37%)",
        "red": 168,
        "green": 137,
        "blue": 20,
        "hue": 47,
        "saturation": 79,
        "lightness": 37
    }, {
        "hex": "#F8EBBE",
        "rgb": "rgb(248, 235, 190)",
        "hsl": "hsl(47, 81%, 86%)",
        "red": 248,
        "green": 235,
        "blue": 190,
        "hue": 47,
        "saturation": 81,
        "lightness": 86
    }, {
        "hex": "#F5E19C",
        "rgb": "rgb(245, 225, 156)",
        "hsl": "hsl(47, 82%, 79%)",
        "red": 245,
        "green": 225,
        "blue": 156,
        "hue": 47,
        "saturation": 82,
        "lightness": 79
    }, {
        "hex": "#F0CE4E",
        "rgb": "rgb(240, 206, 78)",
        "hsl": "hsl(47, 84%, 62%)",
        "red": 240,
        "green": 206,
        "blue": 78,
        "hue": 47,
        "saturation": 84,
        "lightness": 62
    }, {
        "hex": "#F7E6A6",
        "rgb": "rgb(247, 230, 166)",
        "hsl": "hsl(47, 84%, 81%)",
        "red": 247,
        "green": 230,
        "blue": 166,
        "hue": 47,
        "saturation": 84,
        "lightness": 81
    }, {
        "hex": "#ECBE13",
        "rgb": "rgb(236, 190, 19)",
        "hsl": "hsl(47, 85%, 50%)",
        "red": 236,
        "green": 190,
        "blue": 19,
        "hue": 47,
        "saturation": 85,
        "lightness": 50
    }, {
        "hex": "#ECBE13",
        "rgb": "rgb(236, 190, 19)",
        "hsl": "hsl(47, 85%, 50%)",
        "red": 236,
        "green": 190,
        "blue": 19,
        "hue": 47,
        "saturation": 85,
        "lightness": 50
    }, {
        "hex": "#F5DA7A",
        "rgb": "rgb(245, 218, 122)",
        "hsl": "hsl(47, 86%, 72%)",
        "red": 245,
        "green": 218,
        "blue": 122,
        "hue": 47,
        "saturation": 86,
        "lightness": 72
    }, {
        "hex": "#F2CC49",
        "rgb": "rgb(242, 204, 73)",
        "hsl": "hsl(47, 87%, 62%)",
        "red": 242,
        "green": 204,
        "blue": 73,
        "hue": 47,
        "saturation": 87,
        "lightness": 62
    }, {
        "hex": "#FCF3D2",
        "rgb": "rgb(252, 243, 210)",
        "hsl": "hsl(47, 88%, 91%)",
        "red": 252,
        "green": 243,
        "blue": 210,
        "hue": 47,
        "saturation": 88,
        "lightness": 91
    }, {
        "hex": "#F6D86B",
        "rgb": "rgb(246, 216, 107)",
        "hsl": "hsl(47, 89%, 69%)",
        "red": 246,
        "green": 216,
        "blue": 107,
        "hue": 47,
        "saturation": 89,
        "lightness": 69
    }, {
        "hex": "#F6D76B",
        "rgb": "rgb(246, 215, 107)",
        "hsl": "hsl(47, 89%, 69%)",
        "red": 246,
        "green": 215,
        "blue": 107,
        "hue": 47,
        "saturation": 89,
        "lightness": 69
    }, {
        "hex": "#F8DF82",
        "rgb": "rgb(248, 223, 130)",
        "hsl": "hsl(47, 89%, 74%)",
        "red": 248,
        "green": 223,
        "blue": 130,
        "hue": 47,
        "saturation": 89,
        "lightness": 74
    }, {
        "hex": "#FBEBAF",
        "rgb": "rgb(251, 235, 175)",
        "hsl": "hsl(47, 90%, 84%)",
        "red": 251,
        "green": 235,
        "blue": 175,
        "hue": 47,
        "saturation": 90,
        "lightness": 84
    }, {
        "hex": "#ECBA09",
        "rgb": "rgb(236, 186, 9)",
        "hsl": "hsl(47, 93%, 48%)",
        "red": 236,
        "green": 186,
        "blue": 9,
        "hue": 47,
        "saturation": 93,
        "lightness": 48
    }, {
        "hex": "#FCE07F",
        "rgb": "rgb(252, 224, 127)",
        "hsl": "hsl(47, 95%, 74%)",
        "red": 252,
        "green": 224,
        "blue": 127,
        "hue": 47,
        "saturation": 95,
        "lightness": 74
    }, {
        "hex": "#FDEBA9",
        "rgb": "rgb(253, 235, 169)",
        "hsl": "hsl(47, 95%, 83%)",
        "red": 253,
        "green": 235,
        "blue": 169,
        "hue": 47,
        "saturation": 95,
        "lightness": 83
    }, {
        "hex": "#FCD036",
        "rgb": "rgb(252, 208, 54)",
        "hsl": "hsl(47, 97%, 60%)",
        "red": 252,
        "green": 208,
        "blue": 54,
        "hue": 47,
        "saturation": 97,
        "lightness": 60
    }, {
        "hex": "#E4B302",
        "rgb": "rgb(228, 179, 2)",
        "hsl": "hsl(47, 98%, 45%)",
        "red": 228,
        "green": 179,
        "blue": 2,
        "hue": 47,
        "saturation": 98,
        "lightness": 45
    }, {
        "hex": "#FECD23",
        "rgb": "rgb(254, 205, 35)",
        "hsl": "hsl(47, 99%, 57%)",
        "red": 254,
        "green": 205,
        "blue": 35,
        "hue": 47,
        "saturation": 99,
        "lightness": 57
    }, {
        "hex": "#FFC803",
        "rgb": "rgb(255, 200, 3)",
        "hsl": "hsl(47, 100%, 51%)",
        "red": 255,
        "green": 200,
        "blue": 3,
        "hue": 47,
        "saturation": 100,
        "lightness": 51
    }, {
        "hex": "#FFD952",
        "rgb": "rgb(255, 217, 82)",
        "hsl": "hsl(47, 100%, 66%)",
        "red": 255,
        "green": 217,
        "blue": 82,
        "hue": 47,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FFE792",
        "rgb": "rgb(255, 231, 146)",
        "hsl": "hsl(47, 100%, 79%)",
        "red": 255,
        "green": 231,
        "blue": 146,
        "hue": 47,
        "saturation": 100,
        "lightness": 79
    }, {
        "hex": "#FFE999",
        "rgb": "rgb(255, 233, 153)",
        "hsl": "hsl(47, 100%, 80%)",
        "red": 255,
        "green": 233,
        "blue": 153,
        "hue": 47,
        "saturation": 100,
        "lightness": 80
    }, {
        "hex": "#FFEFB5",
        "rgb": "rgb(255, 239, 181)",
        "hsl": "hsl(47, 100%, 85%)",
        "red": 255,
        "green": 239,
        "blue": 181,
        "hue": 47,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#FFF0B8",
        "rgb": "rgb(255, 240, 184)",
        "hsl": "hsl(47, 100%, 86%)",
        "red": 255,
        "green": 240,
        "blue": 184,
        "hue": 47,
        "saturation": 100,
        "lightness": 86
    }, {
        "hex": "#FFF4CE",
        "rgb": "rgb(255, 244, 206)",
        "hsl": "hsl(47, 100%, 90%)",
        "red": 255,
        "green": 244,
        "blue": 206,
        "hue": 47,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#706F6B",
        "rgb": "rgb(112, 111, 107)",
        "hsl": "hsl(48, 2%, 43%)",
        "red": 112,
        "green": 111,
        "blue": 107,
        "hue": 48,
        "saturation": 2,
        "lightness": 43
    }, {
        "hex": "#9A947C",
        "rgb": "rgb(154, 148, 124)",
        "hsl": "hsl(48, 13%, 55%)",
        "red": 154,
        "green": 148,
        "blue": 124,
        "hue": 48,
        "saturation": 13,
        "lightness": 55
    }, {
        "hex": "#DCD7C2",
        "rgb": "rgb(220, 215, 194)",
        "hsl": "hsl(48, 27%, 81%)",
        "red": 220,
        "green": 215,
        "blue": 194,
        "hue": 48,
        "saturation": 27,
        "lightness": 81
    }, {
        "hex": "#EDEADE",
        "rgb": "rgb(237, 234, 222)",
        "hsl": "hsl(48, 29%, 90%)",
        "red": 237,
        "green": 234,
        "blue": 222,
        "hue": 48,
        "saturation": 29,
        "lightness": 90
    }, {
        "hex": "#A19153",
        "rgb": "rgb(161, 145, 83)",
        "hsl": "hsl(48, 32%, 48%)",
        "red": 161,
        "green": 145,
        "blue": 83,
        "hue": 48,
        "saturation": 32,
        "lightness": 48
    }, {
        "hex": "#C7BD93",
        "rgb": "rgb(199, 189, 147)",
        "hsl": "hsl(48, 32%, 68%)",
        "red": 199,
        "green": 189,
        "blue": 147,
        "hue": 48,
        "saturation": 32,
        "lightness": 68
    }, {
        "hex": "#D1C8A3",
        "rgb": "rgb(209, 200, 163)",
        "hsl": "hsl(48, 33%, 73%)",
        "red": 209,
        "green": 200,
        "blue": 163,
        "hue": 48,
        "saturation": 33,
        "lightness": 73
    }, {
        "hex": "#E6E1CD",
        "rgb": "rgb(230, 225, 205)",
        "hsl": "hsl(48, 33%, 85%)",
        "red": 230,
        "green": 225,
        "blue": 205,
        "hue": 48,
        "saturation": 33,
        "lightness": 85
    }, {
        "hex": "#D9D0AC",
        "rgb": "rgb(217, 208, 172)",
        "hsl": "hsl(48, 37%, 76%)",
        "red": 217,
        "green": 208,
        "blue": 172,
        "hue": 48,
        "saturation": 37,
        "lightness": 76
    }, {
        "hex": "#D3C795",
        "rgb": "rgb(211, 199, 149)",
        "hsl": "hsl(48, 41%, 71%)",
        "red": 211,
        "green": 199,
        "blue": 149,
        "hue": 48,
        "saturation": 41,
        "lightness": 71
    }, {
        "hex": "#BCA95B",
        "rgb": "rgb(188, 169, 91)",
        "hsl": "hsl(48, 42%, 55%)",
        "red": 188,
        "green": 169,
        "blue": 91,
        "hue": 48,
        "saturation": 42,
        "lightness": 55
    }, {
        "hex": "#EBE5CE",
        "rgb": "rgb(235, 229, 206)",
        "hsl": "hsl(48, 42%, 86%)",
        "red": 235,
        "green": 229,
        "blue": 206,
        "hue": 48,
        "saturation": 42,
        "lightness": 86
    }, {
        "hex": "#F7F4E8",
        "rgb": "rgb(247, 244, 232)",
        "hsl": "hsl(48, 48%, 94%)",
        "red": 247,
        "green": 244,
        "blue": 232,
        "hue": 48,
        "saturation": 48,
        "lightness": 94
    }, {
        "hex": "#C5AD4B",
        "rgb": "rgb(197, 173, 75)",
        "hsl": "hsl(48, 51%, 53%)",
        "red": 197,
        "green": 173,
        "blue": 75,
        "hue": 48,
        "saturation": 51,
        "lightness": 53
    }, {
        "hex": "#CCB24C",
        "rgb": "rgb(204, 178, 76)",
        "hsl": "hsl(48, 56%, 55%)",
        "red": 204,
        "green": 178,
        "blue": 76,
        "hue": 48,
        "saturation": 56,
        "lightness": 55
    }, {
        "hex": "#E2D397",
        "rgb": "rgb(226, 211, 151)",
        "hsl": "hsl(48, 56%, 74%)",
        "red": 226,
        "green": 211,
        "blue": 151,
        "hue": 48,
        "saturation": 56,
        "lightness": 74
    }, {
        "hex": "#E9DEB0",
        "rgb": "rgb(233, 222, 176)",
        "hsl": "hsl(48, 56%, 80%)",
        "red": 233,
        "green": 222,
        "blue": 176,
        "hue": 48,
        "saturation": 56,
        "lightness": 80
    }, {
        "hex": "#F8F4E4",
        "rgb": "rgb(248, 244, 228)",
        "hsl": "hsl(48, 59%, 93%)",
        "red": 248,
        "green": 244,
        "blue": 228,
        "hue": 48,
        "saturation": 59,
        "lightness": 93
    }, {
        "hex": "#D7BF5E",
        "rgb": "rgb(215, 191, 94)",
        "hsl": "hsl(48, 60%, 61%)",
        "red": 215,
        "green": 191,
        "blue": 94,
        "hue": 48,
        "saturation": 60,
        "lightness": 61
    }, {
        "hex": "#EEDD99",
        "rgb": "rgb(238, 221, 153)",
        "hsl": "hsl(48, 71%, 77%)",
        "red": 238,
        "green": 221,
        "blue": 153,
        "hue": 48,
        "saturation": 71,
        "lightness": 77
    }, {
        "hex": "#EDD269",
        "rgb": "rgb(237, 210, 105)",
        "hsl": "hsl(48, 79%, 67%)",
        "red": 237,
        "green": 210,
        "blue": 105,
        "hue": 48,
        "saturation": 79,
        "lightness": 67
    }, {
        "hex": "#F4E196",
        "rgb": "rgb(244, 225, 150)",
        "hsl": "hsl(48, 81%, 77%)",
        "red": 244,
        "green": 225,
        "blue": 150,
        "hue": 48,
        "saturation": 81,
        "lightness": 77
    }, {
        "hex": "#F2D974",
        "rgb": "rgb(242, 217, 116)",
        "hsl": "hsl(48, 83%, 70%)",
        "red": 242,
        "green": 217,
        "blue": 116,
        "hue": 48,
        "saturation": 83,
        "lightness": 70
    }, {
        "hex": "#FAEFC2",
        "rgb": "rgb(250, 239, 194)",
        "hsl": "hsl(48, 85%, 87%)",
        "red": 250,
        "green": 239,
        "blue": 194,
        "hue": 48,
        "saturation": 85,
        "lightness": 87
    }, {
        "hex": "#F5DD7E",
        "rgb": "rgb(245, 221, 126)",
        "hsl": "hsl(48, 86%, 73%)",
        "red": 245,
        "green": 221,
        "blue": 126,
        "hue": 48,
        "saturation": 86,
        "lightness": 73
    }, {
        "hex": "#151101",
        "rgb": "rgb(21, 17, 1)",
        "hsl": "hsl(48, 91%, 4%)",
        "red": 21,
        "green": 17,
        "blue": 1,
        "hue": 48,
        "saturation": 91,
        "lightness": 4
    }, {
        "hex": "#FDF2C5",
        "rgb": "rgb(253, 242, 197)",
        "hsl": "hsl(48, 93%, 88%)",
        "red": 253,
        "green": 242,
        "blue": 197,
        "hue": 48,
        "saturation": 93,
        "lightness": 88
    }, {
        "hex": "#1E1801",
        "rgb": "rgb(30, 24, 1)",
        "hsl": "hsl(48, 94%, 6%)",
        "red": 30,
        "green": 24,
        "blue": 1,
        "hue": 48,
        "saturation": 94,
        "lightness": 6
    }, {
        "hex": "#FEE78A",
        "rgb": "rgb(254, 231, 138)",
        "hsl": "hsl(48, 98%, 77%)",
        "red": 254,
        "green": 231,
        "blue": 138,
        "hue": 48,
        "saturation": 98,
        "lightness": 77
    }, {
        "hex": "#FEDC57",
        "rgb": "rgb(254, 220, 87)",
        "hsl": "hsl(48, 99%, 67%)",
        "red": 254,
        "green": 220,
        "blue": 87,
        "hue": 48,
        "saturation": 99,
        "lightness": 67
    }, {
        "hex": "#FFD41F",
        "rgb": "rgb(255, 212, 31)",
        "hsl": "hsl(48, 100%, 56%)",
        "red": 255,
        "green": 212,
        "blue": 31,
        "hue": 48,
        "saturation": 100,
        "lightness": 56
    }, {
        "hex": "#FFEEAC",
        "rgb": "rgb(255, 238, 172)",
        "hsl": "hsl(48, 100%, 84%)",
        "red": 255,
        "green": 238,
        "blue": 172,
        "hue": 48,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#C6BE9A",
        "rgb": "rgb(198, 190, 154)",
        "hsl": "hsl(49, 28%, 69%)",
        "red": 198,
        "green": 190,
        "blue": 154,
        "hue": 49,
        "saturation": 28,
        "lightness": 69
    }, {
        "hex": "#C5BD99",
        "rgb": "rgb(197, 189, 153)",
        "hsl": "hsl(49, 28%, 69%)",
        "red": 197,
        "green": 189,
        "blue": 153,
        "hue": 49,
        "saturation": 28,
        "lightness": 69
    }, {
        "hex": "#D4CDAD",
        "rgb": "rgb(212, 205, 173)",
        "hsl": "hsl(49, 31%, 75%)",
        "red": 212,
        "green": 205,
        "blue": 173,
        "hue": 49,
        "saturation": 31,
        "lightness": 75
    }, {
        "hex": "#D6CEAA",
        "rgb": "rgb(214, 206, 170)",
        "hsl": "hsl(49, 35%, 75%)",
        "red": 214,
        "green": 206,
        "blue": 170,
        "hue": 49,
        "saturation": 35,
        "lightness": 75
    }, {
        "hex": "#BAAB6A",
        "rgb": "rgb(186, 171, 106)",
        "hsl": "hsl(49, 37%, 57%)",
        "red": 186,
        "green": 171,
        "blue": 106,
        "hue": 49,
        "saturation": 37,
        "lightness": 57
    }, {
        "hex": "#E6E0C5",
        "rgb": "rgb(230, 224, 197)",
        "hsl": "hsl(49, 40%, 84%)",
        "red": 230,
        "green": 224,
        "blue": 197,
        "hue": 49,
        "saturation": 40,
        "lightness": 84
    }, {
        "hex": "#CCBF82",
        "rgb": "rgb(204, 191, 130)",
        "hsl": "hsl(49, 42%, 65%)",
        "red": 204,
        "green": 191,
        "blue": 130,
        "hue": 49,
        "saturation": 42,
        "lightness": 65
    }, {
        "hex": "#D5CA98",
        "rgb": "rgb(213, 202, 152)",
        "hsl": "hsl(49, 42%, 72%)",
        "red": 213,
        "green": 202,
        "blue": 152,
        "hue": 49,
        "saturation": 42,
        "lightness": 72
    }, {
        "hex": "#DACB8A",
        "rgb": "rgb(218, 203, 138)",
        "hsl": "hsl(49, 52%, 70%)",
        "red": 218,
        "green": 203,
        "blue": 138,
        "hue": 49,
        "saturation": 52,
        "lightness": 70
    }, {
        "hex": "#D9C777",
        "rgb": "rgb(217, 199, 119)",
        "hsl": "hsl(49, 56%, 66%)",
        "red": 217,
        "green": 199,
        "blue": 119,
        "hue": 49,
        "saturation": 56,
        "lightness": 66
    }, {
        "hex": "#F4EED4",
        "rgb": "rgb(244, 238, 212)",
        "hsl": "hsl(49, 59%, 89%)",
        "red": 244,
        "green": 238,
        "blue": 212,
        "hue": 49,
        "saturation": 59,
        "lightness": 89
    }, {
        "hex": "#EDE3B4",
        "rgb": "rgb(237, 227, 180)",
        "hsl": "hsl(49, 61%, 82%)",
        "red": 237,
        "green": 227,
        "blue": 180,
        "hue": 49,
        "saturation": 61,
        "lightness": 82
    }, {
        "hex": "#E9DB9C",
        "rgb": "rgb(233, 219, 156)",
        "hsl": "hsl(49, 64%, 76%)",
        "red": 233,
        "green": 219,
        "blue": 156,
        "hue": 49,
        "saturation": 64,
        "lightness": 76
    }, {
        "hex": "#E8D890",
        "rgb": "rgb(232, 216, 144)",
        "hsl": "hsl(49, 66%, 74%)",
        "red": 232,
        "green": 216,
        "blue": 144,
        "hue": 49,
        "saturation": 66,
        "lightness": 74
    }, {
        "hex": "#F4EBC3",
        "rgb": "rgb(244, 235, 195)",
        "hsl": "hsl(49, 69%, 86%)",
        "red": 244,
        "green": 235,
        "blue": 195,
        "hue": 49,
        "saturation": 69,
        "lightness": 86
    }, {
        "hex": "#F0E2A4",
        "rgb": "rgb(240, 226, 164)",
        "hsl": "hsl(49, 72%, 79%)",
        "red": 240,
        "green": 226,
        "blue": 164,
        "hue": 49,
        "saturation": 72,
        "lightness": 79
    }, {
        "hex": "#F7E9AA",
        "rgb": "rgb(247, 233, 170)",
        "hsl": "hsl(49, 83%, 82%)",
        "red": 247,
        "green": 233,
        "blue": 170,
        "hue": 49,
        "saturation": 83,
        "lightness": 82
    }, {
        "hex": "#F7E8A6",
        "rgb": "rgb(247, 232, 166)",
        "hsl": "hsl(49, 84%, 81%)",
        "red": 247,
        "green": 232,
        "blue": 166,
        "hue": 49,
        "saturation": 84,
        "lightness": 81
    }, {
        "hex": "#F5CC17",
        "rgb": "rgb(245, 204, 23)",
        "hsl": "hsl(49, 92%, 53%)",
        "red": 245,
        "green": 204,
        "blue": 23,
        "hue": 49,
        "saturation": 92,
        "lightness": 53
    }, {
        "hex": "#F9CE07",
        "rgb": "rgb(249, 206, 7)",
        "hsl": "hsl(49, 95%, 50%)",
        "red": 249,
        "green": 206,
        "blue": 7,
        "hue": 49,
        "saturation": 95,
        "lightness": 50
    }, {
        "hex": "#FDEFB0",
        "rgb": "rgb(253, 239, 176)",
        "hsl": "hsl(49, 95%, 84%)",
        "red": 253,
        "green": 239,
        "blue": 176,
        "hue": 49,
        "saturation": 95,
        "lightness": 84
    }, {
        "hex": "#F0C505",
        "rgb": "rgb(240, 197, 5)",
        "hsl": "hsl(49, 96%, 48%)",
        "red": 240,
        "green": 197,
        "blue": 5,
        "hue": 49,
        "saturation": 96,
        "lightness": 48
    }, {
        "hex": "#F8CA00",
        "rgb": "rgb(248, 202, 0)",
        "hsl": "hsl(49, 100%, 49%)",
        "red": 248,
        "green": 202,
        "blue": 0,
        "hue": 49,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FFEFA9",
        "rgb": "rgb(255, 239, 169)",
        "hsl": "hsl(49, 100%, 83%)",
        "red": 255,
        "green": 239,
        "blue": 169,
        "hue": 49,
        "saturation": 100,
        "lightness": 83
    }, {
        "hex": "#FFF9DE",
        "rgb": "rgb(255, 249, 222)",
        "hsl": "hsl(49, 100%, 94%)",
        "red": 255,
        "green": 249,
        "blue": 222,
        "hue": 49,
        "saturation": 100,
        "lightness": 94
    }, {
        "hex": "#FFFAE3",
        "rgb": "rgb(255, 250, 227)",
        "hsl": "hsl(49, 100%, 95%)",
        "red": 255,
        "green": 250,
        "blue": 227,
        "hue": 49,
        "saturation": 100,
        "lightness": 95
    }, {
        "hex": "#2C2B26",
        "rgb": "rgb(44, 43, 38)",
        "hsl": "hsl(50, 7%, 16%)",
        "red": 44,
        "green": 43,
        "blue": 38,
        "hue": 50,
        "saturation": 7,
        "lightness": 16
    }, {
        "hex": "#A9A17A",
        "rgb": "rgb(169, 161, 122)",
        "hsl": "hsl(50, 21%, 57%)",
        "red": 169,
        "green": 161,
        "blue": 122,
        "hue": 50,
        "saturation": 21,
        "lightness": 57
    }, {
        "hex": "#928854",
        "rgb": "rgb(146, 136, 84)",
        "hsl": "hsl(50, 27%, 45%)",
        "red": 146,
        "green": 136,
        "blue": 84,
        "hue": 50,
        "saturation": 27,
        "lightness": 45
    }, {
        "hex": "#E7E4D5",
        "rgb": "rgb(231, 228, 213)",
        "hsl": "hsl(50, 27%, 87%)",
        "red": 231,
        "green": 228,
        "blue": 213,
        "hue": 50,
        "saturation": 27,
        "lightness": 87
    }, {
        "hex": "#C5BC8E",
        "rgb": "rgb(197, 188, 142)",
        "hsl": "hsl(50, 32%, 66%)",
        "red": 197,
        "green": 188,
        "blue": 142,
        "hue": 50,
        "saturation": 32,
        "lightness": 66
    }, {
        "hex": "#1F1C0D",
        "rgb": "rgb(31, 28, 13)",
        "hsl": "hsl(50, 41%, 9%)",
        "red": 31,
        "green": 28,
        "blue": 13,
        "hue": 50,
        "saturation": 41,
        "lightness": 9
    }, {
        "hex": "#D9CC8C",
        "rgb": "rgb(217, 204, 140)",
        "hsl": "hsl(50, 50%, 70%)",
        "red": 217,
        "green": 204,
        "blue": 140,
        "hue": 50,
        "saturation": 50,
        "lightness": 70
    }, {
        "hex": "#C4AC30",
        "rgb": "rgb(196, 172, 48)",
        "hsl": "hsl(50, 61%, 48%)",
        "red": 196,
        "green": 172,
        "blue": 48,
        "hue": 50,
        "saturation": 61,
        "lightness": 48
    }, {
        "hex": "#D8C358",
        "rgb": "rgb(216, 195, 88)",
        "hsl": "hsl(50, 62%, 60%)",
        "red": 216,
        "green": 195,
        "blue": 88,
        "hue": 50,
        "saturation": 62,
        "lightness": 60
    }, {
        "hex": "#EEE097",
        "rgb": "rgb(238, 224, 151)",
        "hsl": "hsl(50, 72%, 76%)",
        "red": 238,
        "green": 224,
        "blue": 151,
        "hue": 50,
        "saturation": 72,
        "lightness": 76
    }, {
        "hex": "#EAD56C",
        "rgb": "rgb(234, 213, 108)",
        "hsl": "hsl(50, 75%, 67%)",
        "red": 234,
        "green": 213,
        "blue": 108,
        "hue": 50,
        "saturation": 75,
        "lightness": 67
    }, {
        "hex": "#FDFAEB",
        "rgb": "rgb(253, 250, 235)",
        "hsl": "hsl(50, 82%, 96%)",
        "red": 253,
        "green": 250,
        "blue": 235,
        "hue": 50,
        "saturation": 82,
        "lightness": 96
    }, {
        "hex": "#F0D442",
        "rgb": "rgb(240, 212, 66)",
        "hsl": "hsl(50, 85%, 60%)",
        "red": 240,
        "green": 212,
        "blue": 66,
        "hue": 50,
        "saturation": 85,
        "lightness": 60
    }, {
        "hex": "#F9D423",
        "rgb": "rgb(249, 212, 35)",
        "hsl": "hsl(50, 95%, 56%)",
        "red": 249,
        "green": 212,
        "blue": 35,
        "hue": 50,
        "saturation": 95,
        "lightness": 56
    }, {
        "hex": "#F9D423",
        "rgb": "rgb(249, 212, 35)",
        "hsl": "hsl(50, 95%, 56%)",
        "red": 249,
        "green": 212,
        "blue": 35,
        "hue": 50,
        "saturation": 95,
        "lightness": 56
    }, {
        "hex": "#FEF7D5",
        "rgb": "rgb(254, 247, 213)",
        "hsl": "hsl(50, 95%, 92%)",
        "red": 254,
        "green": 247,
        "blue": 213,
        "hue": 50,
        "saturation": 95,
        "lightness": 92
    }, {
        "hex": "#FEF7D5",
        "rgb": "rgb(254, 247, 213)",
        "hsl": "hsl(50, 95%, 92%)",
        "red": 254,
        "green": 247,
        "blue": 213,
        "hue": 50,
        "saturation": 95,
        "lightness": 92
    }, {
        "hex": "#FEF5C8",
        "rgb": "rgb(254, 245, 200)",
        "hsl": "hsl(50, 96%, 89%)",
        "red": 254,
        "green": 245,
        "blue": 200,
        "hue": 50,
        "saturation": 96,
        "lightness": 89
    }, {
        "hex": "#FEF5C6",
        "rgb": "rgb(254, 245, 198)",
        "hsl": "hsl(50, 97%, 89%)",
        "red": 254,
        "green": 245,
        "blue": 198,
        "hue": 50,
        "saturation": 97,
        "lightness": 89
    }, {
        "hex": "#FFE461",
        "rgb": "rgb(255, 228, 97)",
        "hsl": "hsl(50, 100%, 69%)",
        "red": 255,
        "green": 228,
        "blue": 97,
        "hue": 50,
        "saturation": 100,
        "lightness": 69
    }, {
        "hex": "#FFF2AF",
        "rgb": "rgb(255, 242, 175)",
        "hsl": "hsl(50, 100%, 84%)",
        "red": 255,
        "green": 242,
        "blue": 175,
        "hue": 50,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#FFF6C7",
        "rgb": "rgb(255, 246, 199)",
        "hsl": "hsl(50, 100%, 89%)",
        "red": 255,
        "green": 246,
        "blue": 199,
        "hue": 50,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#FFF8D4",
        "rgb": "rgb(255, 248, 212)",
        "hsl": "hsl(50, 100%, 92%)",
        "red": 255,
        "green": 248,
        "blue": 212,
        "hue": 50,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#85847E",
        "rgb": "rgb(133, 132, 126)",
        "hsl": "hsl(51, 3%, 51%)",
        "red": 133,
        "green": 132,
        "blue": 126,
        "hue": 51,
        "saturation": 3,
        "lightness": 51
    }, {
        "hex": "#939185",
        "rgb": "rgb(147, 145, 133)",
        "hsl": "hsl(51, 6%, 55%)",
        "red": 147,
        "green": 145,
        "blue": 133,
        "hue": 51,
        "saturation": 6,
        "lightness": 55
    }, {
        "hex": "#5B5847",
        "rgb": "rgb(91, 88, 71)",
        "hsl": "hsl(51, 12%, 32%)",
        "red": 91,
        "green": 88,
        "blue": 71,
        "hue": 51,
        "saturation": 12,
        "lightness": 32
    }, {
        "hex": "#A29D7F",
        "rgb": "rgb(162, 157, 127)",
        "hsl": "hsl(51, 16%, 57%)",
        "red": 162,
        "green": 157,
        "blue": 127,
        "hue": 51,
        "saturation": 16,
        "lightness": 57
    }, {
        "hex": "#A49E7E",
        "rgb": "rgb(164, 158, 126)",
        "hsl": "hsl(51, 17%, 57%)",
        "red": 164,
        "green": 158,
        "blue": 126,
        "hue": 51,
        "saturation": 17,
        "lightness": 57
    }, {
        "hex": "#CFCCBB",
        "rgb": "rgb(207, 204, 187)",
        "hsl": "hsl(51, 17%, 77%)",
        "red": 207,
        "green": 204,
        "blue": 187,
        "hue": 51,
        "saturation": 17,
        "lightness": 77
    }, {
        "hex": "#D4CEAA",
        "rgb": "rgb(212, 206, 170)",
        "hsl": "hsl(51, 33%, 75%)",
        "red": 212,
        "green": 206,
        "blue": 170,
        "hue": 51,
        "saturation": 33,
        "lightness": 75
    }, {
        "hex": "#E0DBBD",
        "rgb": "rgb(224, 219, 189)",
        "hsl": "hsl(51, 36%, 81%)",
        "red": 224,
        "green": 219,
        "blue": 189,
        "hue": 51,
        "saturation": 36,
        "lightness": 81
    }, {
        "hex": "#93842F",
        "rgb": "rgb(147, 132, 47)",
        "hsl": "hsl(51, 52%, 38%)",
        "red": 147,
        "green": 132,
        "blue": 47,
        "hue": 51,
        "saturation": 52,
        "lightness": 38
    }, {
        "hex": "#F1E9BB",
        "rgb": "rgb(241, 233, 187)",
        "hsl": "hsl(51, 66%, 84%)",
        "red": 241,
        "green": 233,
        "blue": 187,
        "hue": 51,
        "saturation": 66,
        "lightness": 84
    }, {
        "hex": "#F2EABC",
        "rgb": "rgb(242, 234, 188)",
        "hsl": "hsl(51, 67%, 84%)",
        "red": 242,
        "green": 234,
        "blue": 188,
        "hue": 51,
        "saturation": 67,
        "lightness": 84
    }, {
        "hex": "#F1E8B4",
        "rgb": "rgb(241, 232, 180)",
        "hsl": "hsl(51, 69%, 83%)",
        "red": 241,
        "green": 232,
        "blue": 180,
        "hue": 51,
        "saturation": 69,
        "lightness": 83
    }, {
        "hex": "#F7F1CD",
        "rgb": "rgb(247, 241, 205)",
        "hsl": "hsl(51, 72%, 89%)",
        "red": 247,
        "green": 241,
        "blue": 205,
        "hue": 51,
        "saturation": 72,
        "lightness": 89
    }, {
        "hex": "#F8F2CE",
        "rgb": "rgb(248, 242, 206)",
        "hsl": "hsl(51, 75%, 89%)",
        "red": 248,
        "green": 242,
        "blue": 206,
        "hue": 51,
        "saturation": 75,
        "lightness": 89
    }, {
        "hex": "#F5ECB7",
        "rgb": "rgb(245, 236, 183)",
        "hsl": "hsl(51, 76%, 84%)",
        "red": 245,
        "green": 236,
        "blue": 183,
        "hue": 51,
        "saturation": 76,
        "lightness": 84
    }, {
        "hex": "#F5EBB0",
        "rgb": "rgb(245, 235, 176)",
        "hsl": "hsl(51, 78%, 83%)",
        "red": 245,
        "green": 235,
        "blue": 176,
        "hue": 51,
        "saturation": 78,
        "lightness": 83
    }, {
        "hex": "#EDD75A",
        "rgb": "rgb(237, 215, 90)",
        "hsl": "hsl(51, 80%, 64%)",
        "red": 237,
        "green": 215,
        "blue": 90,
        "hue": 51,
        "saturation": 80,
        "lightness": 64
    }, {
        "hex": "#FCF6D2",
        "rgb": "rgb(252, 246, 210)",
        "hsl": "hsl(51, 88%, 91%)",
        "red": 252,
        "green": 246,
        "blue": 210,
        "hue": 51,
        "saturation": 88,
        "lightness": 91
    }, {
        "hex": "#FCF6D2",
        "rgb": "rgb(252, 246, 210)",
        "hsl": "hsl(51, 88%, 91%)",
        "red": 252,
        "green": 246,
        "blue": 210,
        "hue": 51,
        "saturation": 88,
        "lightness": 91
    }, {
        "hex": "#FAD928",
        "rgb": "rgb(250, 217, 40)",
        "hsl": "hsl(51, 95%, 57%)",
        "red": 250,
        "green": 217,
        "blue": 40,
        "hue": 51,
        "saturation": 95,
        "lightness": 57
    }, {
        "hex": "#FDF2B4",
        "rgb": "rgb(253, 242, 180)",
        "hsl": "hsl(51, 95%, 85%)",
        "red": 253,
        "green": 242,
        "blue": 180,
        "hue": 51,
        "saturation": 95,
        "lightness": 85
    }, {
        "hex": "#FEF0A5",
        "rgb": "rgb(254, 240, 165)",
        "hsl": "hsl(51, 98%, 82%)",
        "red": 254,
        "green": 240,
        "blue": 165,
        "hue": 51,
        "saturation": 98,
        "lightness": 82
    }, {
        "hex": "#FFF19E",
        "rgb": "rgb(255, 241, 158)",
        "hsl": "hsl(51, 100%, 81%)",
        "red": 255,
        "green": 241,
        "blue": 158,
        "hue": 51,
        "saturation": 100,
        "lightness": 81
    }, {
        "hex": "#FFF9D8",
        "rgb": "rgb(255, 249, 216)",
        "hsl": "hsl(51, 100%, 92%)",
        "red": 255,
        "green": 249,
        "blue": 216,
        "hue": 51,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#8C886F",
        "rgb": "rgb(140, 136, 111)",
        "hsl": "hsl(52, 12%, 49%)",
        "red": 140,
        "green": 136,
        "blue": 111,
        "hue": 52,
        "saturation": 12,
        "lightness": 49
    }, {
        "hex": "#595643",
        "rgb": "rgb(89, 86, 67)",
        "hsl": "hsl(52, 14%, 31%)",
        "red": 89,
        "green": 86,
        "blue": 67,
        "hue": 52,
        "saturation": 14,
        "lightness": 31
    }, {
        "hex": "#CBC8B5",
        "rgb": "rgb(203, 200, 181)",
        "hsl": "hsl(52, 17%, 75%)",
        "red": 203,
        "green": 200,
        "blue": 181,
        "hue": 52,
        "saturation": 17,
        "lightness": 75
    }, {
        "hex": "#D9D5BB",
        "rgb": "rgb(217, 213, 187)",
        "hsl": "hsl(52, 28%, 79%)",
        "red": 217,
        "green": 213,
        "blue": 187,
        "hue": 52,
        "saturation": 28,
        "lightness": 79
    }, {
        "hex": "#D6D1AF",
        "rgb": "rgb(214, 209, 175)",
        "hsl": "hsl(52, 32%, 76%)",
        "red": 214,
        "green": 209,
        "blue": 175,
        "hue": 52,
        "saturation": 32,
        "lightness": 76
    }, {
        "hex": "#CFC89A",
        "rgb": "rgb(207, 200, 154)",
        "hsl": "hsl(52, 36%, 71%)",
        "red": 207,
        "green": 200,
        "blue": 154,
        "hue": 52,
        "saturation": 36,
        "lightness": 71
    }, {
        "hex": "#E6E1C2",
        "rgb": "rgb(230, 225, 194)",
        "hsl": "hsl(52, 42%, 83%)",
        "red": 230,
        "green": 225,
        "blue": 194,
        "hue": 52,
        "saturation": 42,
        "lightness": 83
    }, {
        "hex": "#EEE9C7",
        "rgb": "rgb(238, 233, 199)",
        "hsl": "hsl(52, 53%, 86%)",
        "red": 238,
        "green": 233,
        "blue": 199,
        "hue": 52,
        "saturation": 53,
        "lightness": 86
    }, {
        "hex": "#C9B849",
        "rgb": "rgb(201, 184, 73)",
        "hsl": "hsl(52, 54%, 54%)",
        "red": 201,
        "green": 184,
        "blue": 73,
        "hue": 52,
        "saturation": 54,
        "lightness": 54
    }, {
        "hex": "#E8E0AE",
        "rgb": "rgb(232, 224, 174)",
        "hsl": "hsl(52, 56%, 80%)",
        "red": 232,
        "green": 224,
        "blue": 174,
        "hue": 52,
        "saturation": 56,
        "lightness": 80
    }, {
        "hex": "#DBCE79",
        "rgb": "rgb(219, 206, 121)",
        "hsl": "hsl(52, 58%, 67%)",
        "red": 219,
        "green": 206,
        "blue": 121,
        "hue": 52,
        "saturation": 58,
        "lightness": 67
    }, {
        "hex": "#F2ECC3",
        "rgb": "rgb(242, 236, 195)",
        "hsl": "hsl(52, 64%, 86%)",
        "red": 242,
        "green": 236,
        "blue": 195,
        "hue": 52,
        "saturation": 64,
        "lightness": 86
    }, {
        "hex": "#F2EAB7",
        "rgb": "rgb(242, 234, 183)",
        "hsl": "hsl(52, 69%, 83%)",
        "red": 242,
        "green": 234,
        "blue": 183,
        "hue": 52,
        "saturation": 69,
        "lightness": 83
    }, {
        "hex": "#F3ECBE",
        "rgb": "rgb(243, 236, 190)",
        "hsl": "hsl(52, 69%, 85%)",
        "red": 243,
        "green": 236,
        "blue": 190,
        "hue": 52,
        "saturation": 69,
        "lightness": 85
    }, {
        "hex": "#F5EEC3",
        "rgb": "rgb(245, 238, 195)",
        "hsl": "hsl(52, 71%, 86%)",
        "red": 245,
        "green": 238,
        "blue": 195,
        "hue": 52,
        "saturation": 71,
        "lightness": 86
    }, {
        "hex": "#F2E9B0",
        "rgb": "rgb(242, 233, 176)",
        "hsl": "hsl(52, 72%, 82%)",
        "red": 242,
        "green": 233,
        "blue": 176,
        "hue": 52,
        "saturation": 72,
        "lightness": 82
    }, {
        "hex": "#E9D558",
        "rgb": "rgb(233, 213, 88)",
        "hsl": "hsl(52, 77%, 63%)",
        "red": 233,
        "green": 213,
        "blue": 88,
        "hue": 52,
        "saturation": 77,
        "lightness": 63
    }, {
        "hex": "#F9F0B7",
        "rgb": "rgb(249, 240, 183)",
        "hsl": "hsl(52, 85%, 85%)",
        "red": 249,
        "green": 240,
        "blue": 183,
        "hue": 52,
        "saturation": 85,
        "lightness": 85
    }, {
        "hex": "#F1DB42",
        "rgb": "rgb(241, 219, 66)",
        "hsl": "hsl(52, 86%, 60%)",
        "red": 241,
        "green": 219,
        "blue": 66,
        "hue": 52,
        "saturation": 86,
        "lightness": 60
    }, {
        "hex": "#FCF7D7",
        "rgb": "rgb(252, 247, 215)",
        "hsl": "hsl(52, 86%, 92%)",
        "red": 252,
        "green": 247,
        "blue": 215,
        "hue": 52,
        "saturation": 86,
        "lightness": 92
    }, {
        "hex": "#F4DD51",
        "rgb": "rgb(244, 221, 81)",
        "hsl": "hsl(52, 88%, 64%)",
        "red": 244,
        "green": 221,
        "blue": 81,
        "hue": 52,
        "saturation": 88,
        "lightness": 64
    }, {
        "hex": "#F9E14B",
        "rgb": "rgb(249, 225, 75)",
        "hsl": "hsl(52, 94%, 64%)",
        "red": 249,
        "green": 225,
        "blue": 75,
        "hue": 52,
        "saturation": 94,
        "lightness": 64
    }, {
        "hex": "#FBEA80",
        "rgb": "rgb(251, 234, 128)",
        "hsl": "hsl(52, 94%, 74%)",
        "red": 251,
        "green": 234,
        "blue": 128,
        "hue": 52,
        "saturation": 94,
        "lightness": 74
    }, {
        "hex": "#FCEF9C",
        "rgb": "rgb(252, 239, 156)",
        "hsl": "hsl(52, 94%, 80%)",
        "red": 252,
        "green": 239,
        "blue": 156,
        "hue": 52,
        "saturation": 94,
        "lightness": 80
    }, {
        "hex": "#FCF09F",
        "rgb": "rgb(252, 240, 159)",
        "hsl": "hsl(52, 94%, 81%)",
        "red": 252,
        "green": 240,
        "blue": 159,
        "hue": 52,
        "saturation": 94,
        "lightness": 81
    }, {
        "hex": "#FCEE8C",
        "rgb": "rgb(252, 238, 140)",
        "hsl": "hsl(52, 95%, 77%)",
        "red": 252,
        "green": 238,
        "blue": 140,
        "hue": 52,
        "saturation": 95,
        "lightness": 77
    }, {
        "hex": "#696758",
        "rgb": "rgb(105, 103, 88)",
        "hsl": "hsl(53, 9%, 38%)",
        "red": 105,
        "green": 103,
        "blue": 88,
        "hue": 53,
        "saturation": 9,
        "lightness": 38
    }, {
        "hex": "#ACAA9B",
        "rgb": "rgb(172, 170, 155)",
        "hsl": "hsl(53, 9%, 64%)",
        "red": 172,
        "green": 170,
        "blue": 155,
        "hue": 53,
        "saturation": 9,
        "lightness": 64
    }, {
        "hex": "#A39C67",
        "rgb": "rgb(163, 156, 103)",
        "hsl": "hsl(53, 25%, 52%)",
        "red": 163,
        "green": 156,
        "blue": 103,
        "hue": 53,
        "saturation": 25,
        "lightness": 52
    }, {
        "hex": "#C5BE8B",
        "rgb": "rgb(197, 190, 139)",
        "hsl": "hsl(53, 33%, 66%)",
        "red": 197,
        "green": 190,
        "blue": 139,
        "hue": 53,
        "saturation": 33,
        "lightness": 66
    }, {
        "hex": "#CCC591",
        "rgb": "rgb(204, 197, 145)",
        "hsl": "hsl(53, 37%, 68%)",
        "red": 204,
        "green": 197,
        "blue": 145,
        "hue": 53,
        "saturation": 37,
        "lightness": 68
    }, {
        "hex": "#D8D3AB",
        "rgb": "rgb(216, 211, 171)",
        "hsl": "hsl(53, 37%, 76%)",
        "red": 216,
        "green": 211,
        "blue": 171,
        "hue": 53,
        "saturation": 37,
        "lightness": 76
    }, {
        "hex": "#928941",
        "rgb": "rgb(146, 137, 65)",
        "hsl": "hsl(53, 38%, 41%)",
        "red": 146,
        "green": 137,
        "blue": 65,
        "hue": 53,
        "saturation": 38,
        "lightness": 41
    }, {
        "hex": "#D4CE9E",
        "rgb": "rgb(212, 206, 158)",
        "hsl": "hsl(53, 39%, 73%)",
        "red": 212,
        "green": 206,
        "blue": 158,
        "hue": 53,
        "saturation": 39,
        "lightness": 73
    }, {
        "hex": "#CFC88F",
        "rgb": "rgb(207, 200, 143)",
        "hsl": "hsl(53, 40%, 69%)",
        "red": 207,
        "green": 200,
        "blue": 143,
        "hue": 53,
        "saturation": 40,
        "lightness": 69
    }, {
        "hex": "#BFB35A",
        "rgb": "rgb(191, 179, 90)",
        "hsl": "hsl(53, 44%, 55%)",
        "red": 191,
        "green": 179,
        "blue": 90,
        "hue": 53,
        "saturation": 44,
        "lightness": 55
    }, {
        "hex": "#DCD392",
        "rgb": "rgb(220, 211, 146)",
        "hsl": "hsl(53, 51%, 72%)",
        "red": 220,
        "green": 211,
        "blue": 146,
        "hue": 53,
        "saturation": 51,
        "lightness": 72
    }, {
        "hex": "#E9E4BB",
        "rgb": "rgb(233, 228, 187)",
        "hsl": "hsl(53, 51%, 82%)",
        "red": 233,
        "green": 228,
        "blue": 187,
        "hue": 53,
        "saturation": 51,
        "lightness": 82
    }, {
        "hex": "#D9CF85",
        "rgb": "rgb(217, 207, 133)",
        "hsl": "hsl(53, 53%, 69%)",
        "red": 217,
        "green": 207,
        "blue": 133,
        "hue": 53,
        "saturation": 53,
        "lightness": 69
    }, {
        "hex": "#F1EDD0",
        "rgb": "rgb(241, 237, 208)",
        "hsl": "hsl(53, 54%, 88%)",
        "red": 241,
        "green": 237,
        "blue": 208,
        "hue": 53,
        "saturation": 54,
        "lightness": 88
    }, {
        "hex": "#EFEAC5",
        "rgb": "rgb(239, 234, 197)",
        "hsl": "hsl(53, 57%, 85%)",
        "red": 239,
        "green": 234,
        "blue": 197,
        "hue": 53,
        "saturation": 57,
        "lightness": 85
    }, {
        "hex": "#9A8C29",
        "rgb": "rgb(154, 140, 41)",
        "hsl": "hsl(53, 58%, 38%)",
        "red": 154,
        "green": 140,
        "blue": 41,
        "hue": 53,
        "saturation": 58,
        "lightness": 38
    }, {
        "hex": "#DFD487",
        "rgb": "rgb(223, 212, 135)",
        "hsl": "hsl(53, 58%, 70%)",
        "red": 223,
        "green": 212,
        "blue": 135,
        "hue": 53,
        "saturation": 58,
        "lightness": 70
    }, {
        "hex": "#C4B432",
        "rgb": "rgb(196, 180, 50)",
        "hsl": "hsl(53, 59%, 48%)",
        "red": 196,
        "green": 180,
        "blue": 50,
        "hue": 53,
        "saturation": 59,
        "lightness": 48
    }, {
        "hex": "#E8DF9C",
        "rgb": "rgb(232, 223, 156)",
        "hsl": "hsl(53, 62%, 76%)",
        "red": 232,
        "green": 223,
        "blue": 156,
        "hue": 53,
        "saturation": 62,
        "lightness": 76
    }, {
        "hex": "#EBE3AA",
        "rgb": "rgb(235, 227, 170)",
        "hsl": "hsl(53, 62%, 79%)",
        "red": 235,
        "green": 227,
        "blue": 170,
        "hue": 53,
        "saturation": 62,
        "lightness": 79
    }, {
        "hex": "#E7DD96",
        "rgb": "rgb(231, 221, 150)",
        "hsl": "hsl(53, 63%, 75%)",
        "red": 231,
        "green": 221,
        "blue": 150,
        "hue": 53,
        "saturation": 63,
        "lightness": 75
    }, {
        "hex": "#E8DE92",
        "rgb": "rgb(232, 222, 146)",
        "hsl": "hsl(53, 65%, 74%)",
        "red": 232,
        "green": 222,
        "blue": 146,
        "hue": 53,
        "saturation": 65,
        "lightness": 74
    }, {
        "hex": "#EEE6AB",
        "rgb": "rgb(238, 230, 171)",
        "hsl": "hsl(53, 66%, 80%)",
        "red": 238,
        "green": 230,
        "blue": 171,
        "hue": 53,
        "saturation": 66,
        "lightness": 80
    }, {
        "hex": "#EFE8B2",
        "rgb": "rgb(239, 232, 178)",
        "hsl": "hsl(53, 66%, 82%)",
        "red": 239,
        "green": 232,
        "blue": 178,
        "hue": 53,
        "saturation": 66,
        "lightness": 82
    }, {
        "hex": "#E4D673",
        "rgb": "rgb(228, 214, 115)",
        "hsl": "hsl(53, 68%, 67%)",
        "red": 228,
        "green": 214,
        "blue": 115,
        "hue": 53,
        "saturation": 68,
        "lightness": 67
    }, {
        "hex": "#F7F3D5",
        "rgb": "rgb(247, 243, 213)",
        "hsl": "hsl(53, 68%, 90%)",
        "red": 247,
        "green": 243,
        "blue": 213,
        "hue": 53,
        "saturation": 68,
        "lightness": 90
    }, {
        "hex": "#F7F0BA",
        "rgb": "rgb(247, 240, 186)",
        "hsl": "hsl(53, 79%, 85%)",
        "red": 247,
        "green": 240,
        "blue": 186,
        "hue": 53,
        "saturation": 79,
        "lightness": 85
    }, {
        "hex": "#F5EA95",
        "rgb": "rgb(245, 234, 149)",
        "hsl": "hsl(53, 83%, 77%)",
        "red": 245,
        "green": 234,
        "blue": 149,
        "hue": 53,
        "saturation": 83,
        "lightness": 77
    }, {
        "hex": "#F7EEAA",
        "rgb": "rgb(247, 238, 170)",
        "hsl": "hsl(53, 83%, 82%)",
        "red": 247,
        "green": 238,
        "blue": 170,
        "hue": 53,
        "saturation": 83,
        "lightness": 82
    }, {
        "hex": "#F8F0AF",
        "rgb": "rgb(248, 240, 175)",
        "hsl": "hsl(53, 84%, 83%)",
        "red": 248,
        "green": 240,
        "blue": 175,
        "hue": 53,
        "saturation": 84,
        "lightness": 83
    }, {
        "hex": "#FBF6D0",
        "rgb": "rgb(251, 246, 208)",
        "hsl": "hsl(53, 84%, 90%)",
        "red": 251,
        "green": 246,
        "blue": 208,
        "hue": 53,
        "saturation": 84,
        "lightness": 90
    }, {
        "hex": "#FCF7D3",
        "rgb": "rgb(252, 247, 211)",
        "hsl": "hsl(53, 87%, 91%)",
        "red": 252,
        "green": 247,
        "blue": 211,
        "hue": 53,
        "saturation": 87,
        "lightness": 91
    }, {
        "hex": "#FCF7D1",
        "rgb": "rgb(252, 247, 209)",
        "hsl": "hsl(53, 88%, 90%)",
        "red": 252,
        "green": 247,
        "blue": 209,
        "hue": 53,
        "saturation": 88,
        "lightness": 90
    }, {
        "hex": "#F3D915",
        "rgb": "rgb(243, 217, 21)",
        "hsl": "hsl(53, 90%, 52%)",
        "red": 243,
        "green": 217,
        "blue": 21,
        "hue": 53,
        "saturation": 90,
        "lightness": 52
    }, {
        "hex": "#FCF4B6",
        "rgb": "rgb(252, 244, 182)",
        "hsl": "hsl(53, 92%, 85%)",
        "red": 252,
        "green": 244,
        "blue": 182,
        "hue": 53,
        "saturation": 92,
        "lightness": 85
    }, {
        "hex": "#F7DB15",
        "rgb": "rgb(247, 219, 21)",
        "hsl": "hsl(53, 93%, 53%)",
        "red": 247,
        "green": 219,
        "blue": 21,
        "hue": 53,
        "saturation": 93,
        "lightness": 53
    }, {
        "hex": "#FDF4B0",
        "rgb": "rgb(253, 244, 176)",
        "hsl": "hsl(53, 95%, 84%)",
        "red": 253,
        "green": 244,
        "blue": 176,
        "hue": 53,
        "saturation": 95,
        "lightness": 84
    }, {
        "hex": "#FDEC6F",
        "rgb": "rgb(253, 236, 111)",
        "hsl": "hsl(53, 97%, 71%)",
        "red": 253,
        "green": 236,
        "blue": 111,
        "hue": 53,
        "saturation": 97,
        "lightness": 71
    }, {
        "hex": "#FFEC5E",
        "rgb": "rgb(255, 236, 94)",
        "hsl": "hsl(53, 100%, 68%)",
        "red": 255,
        "green": 236,
        "blue": 94,
        "hue": 53,
        "saturation": 100,
        "lightness": 68
    }, {
        "hex": "#FFF18C",
        "rgb": "rgb(255, 241, 140)",
        "hsl": "hsl(53, 100%, 77%)",
        "red": 255,
        "green": 241,
        "blue": 140,
        "hue": 53,
        "saturation": 100,
        "lightness": 77
    }, {
        "hex": "#FFF7BD",
        "rgb": "rgb(255, 247, 189)",
        "hsl": "hsl(53, 100%, 87%)",
        "red": 255,
        "green": 247,
        "blue": 189,
        "hue": 53,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#FFF7BC",
        "rgb": "rgb(255, 247, 188)",
        "hsl": "hsl(53, 100%, 87%)",
        "red": 255,
        "green": 247,
        "blue": 188,
        "hue": 53,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#FFFAD3",
        "rgb": "rgb(255, 250, 211)",
        "hsl": "hsl(53, 100%, 91%)",
        "red": 255,
        "green": 250,
        "blue": 211,
        "hue": 53,
        "saturation": 100,
        "lightness": 91
    }, {
        "hex": "#26251C",
        "rgb": "rgb(38, 37, 28)",
        "hsl": "hsl(54, 15%, 13%)",
        "red": 38,
        "green": 37,
        "blue": 28,
        "hue": 54,
        "saturation": 15,
        "lightness": 13
    }, {
        "hex": "#BDBA9E",
        "rgb": "rgb(189, 186, 158)",
        "hsl": "hsl(54, 19%, 68%)",
        "red": 189,
        "green": 186,
        "blue": 158,
        "hue": 54,
        "saturation": 19,
        "lightness": 68
    }, {
        "hex": "#968F4B",
        "rgb": "rgb(150, 143, 75)",
        "hsl": "hsl(54, 33%, 44%)",
        "red": 150,
        "green": 143,
        "blue": 75,
        "hue": 54,
        "saturation": 33,
        "lightness": 44
    }, {
        "hex": "#D4CFA5",
        "rgb": "rgb(212, 207, 165)",
        "hsl": "hsl(54, 35%, 74%)",
        "red": 212,
        "green": 207,
        "blue": 165,
        "hue": 54,
        "saturation": 35,
        "lightness": 74
    }, {
        "hex": "#C6C085",
        "rgb": "rgb(198, 192, 133)",
        "hsl": "hsl(54, 36%, 65%)",
        "red": 198,
        "green": 192,
        "blue": 133,
        "hue": 54,
        "saturation": 36,
        "lightness": 65
    }, {
        "hex": "#CCC68D",
        "rgb": "rgb(204, 198, 141)",
        "hsl": "hsl(54, 38%, 68%)",
        "red": 204,
        "green": 198,
        "blue": 141,
        "hue": 54,
        "saturation": 38,
        "lightness": 68
    }, {
        "hex": "#D9D4A8",
        "rgb": "rgb(217, 212, 168)",
        "hsl": "hsl(54, 39%, 75%)",
        "red": 217,
        "green": 212,
        "blue": 168,
        "hue": 54,
        "saturation": 39,
        "lightness": 75
    }, {
        "hex": "#E0DCB8",
        "rgb": "rgb(224, 220, 184)",
        "hsl": "hsl(54, 39%, 80%)",
        "red": 224,
        "green": 220,
        "blue": 184,
        "hue": 54,
        "saturation": 39,
        "lightness": 80
    }, {
        "hex": "#E3DFBC",
        "rgb": "rgb(227, 223, 188)",
        "hsl": "hsl(54, 41%, 81%)",
        "red": 227,
        "green": 223,
        "blue": 188,
        "hue": 54,
        "saturation": 41,
        "lightness": 81
    }, {
        "hex": "#E3DFBA",
        "rgb": "rgb(227, 223, 186)",
        "hsl": "hsl(54, 42%, 81%)",
        "red": 227,
        "green": 223,
        "blue": 186,
        "hue": 54,
        "saturation": 42,
        "lightness": 81
    }, {
        "hex": "#ADA241",
        "rgb": "rgb(173, 162, 65)",
        "hsl": "hsl(54, 45%, 47%)",
        "red": 173,
        "green": 162,
        "blue": 65,
        "hue": 54,
        "saturation": 45,
        "lightness": 47
    }, {
        "hex": "#D6CE8B",
        "rgb": "rgb(214, 206, 139)",
        "hsl": "hsl(54, 48%, 69%)",
        "red": 214,
        "green": 206,
        "blue": 139,
        "hue": 54,
        "saturation": 48,
        "lightness": 69
    }, {
        "hex": "#E0DAA3",
        "rgb": "rgb(224, 218, 163)",
        "hsl": "hsl(54, 50%, 76%)",
        "red": 224,
        "green": 218,
        "blue": 163,
        "hue": 54,
        "saturation": 50,
        "lightness": 76
    }, {
        "hex": "#F0ECC9",
        "rgb": "rgb(240, 236, 201)",
        "hsl": "hsl(54, 57%, 86%)",
        "red": 240,
        "green": 236,
        "blue": 201,
        "hue": 54,
        "saturation": 57,
        "lightness": 86
    }, {
        "hex": "#EBE5B2",
        "rgb": "rgb(235, 229, 178)",
        "hsl": "hsl(54, 59%, 81%)",
        "red": 235,
        "green": 229,
        "blue": 178,
        "hue": 54,
        "saturation": 59,
        "lightness": 81
    }, {
        "hex": "#E5DB84",
        "rgb": "rgb(229, 219, 132)",
        "hsl": "hsl(54, 65%, 71%)",
        "red": 229,
        "green": 219,
        "blue": 132,
        "hue": 54,
        "saturation": 65,
        "lightness": 71
    }, {
        "hex": "#E9E199",
        "rgb": "rgb(233, 225, 153)",
        "hsl": "hsl(54, 65%, 76%)",
        "red": 233,
        "green": 225,
        "blue": 153,
        "hue": 54,
        "saturation": 65,
        "lightness": 76
    }, {
        "hex": "#CFBE27",
        "rgb": "rgb(207, 190, 39)",
        "hsl": "hsl(54, 68%, 48%)",
        "red": 207,
        "green": 190,
        "blue": 39,
        "hue": 54,
        "saturation": 68,
        "lightness": 48
    }, {
        "hex": "#F7F3CF",
        "rgb": "rgb(247, 243, 207)",
        "hsl": "hsl(54, 71%, 89%)",
        "red": 247,
        "green": 243,
        "blue": 207,
        "hue": 54,
        "saturation": 71,
        "lightness": 89
    }, {
        "hex": "#E8DA5E",
        "rgb": "rgb(232, 218, 94)",
        "hsl": "hsl(54, 75%, 64%)",
        "red": 232,
        "green": 218,
        "blue": 94,
        "hue": 54,
        "saturation": 75,
        "lightness": 64
    }, {
        "hex": "#E7D84B",
        "rgb": "rgb(231, 216, 75)",
        "hsl": "hsl(54, 76%, 60%)",
        "red": 231,
        "green": 216,
        "blue": 75,
        "hue": 54,
        "saturation": 76,
        "lightness": 60
    }, {
        "hex": "#F6F0BC",
        "rgb": "rgb(246, 240, 188)",
        "hsl": "hsl(54, 76%, 85%)",
        "red": 246,
        "green": 240,
        "blue": 188,
        "hue": 54,
        "saturation": 76,
        "lightness": 85
    }, {
        "hex": "#F4EB9E",
        "rgb": "rgb(244, 235, 158)",
        "hsl": "hsl(54, 80%, 79%)",
        "red": 244,
        "green": 235,
        "blue": 158,
        "hue": 54,
        "saturation": 80,
        "lightness": 79
    }, {
        "hex": "#FAF6D0",
        "rgb": "rgb(250, 246, 208)",
        "hsl": "hsl(54, 81%, 90%)",
        "red": 250,
        "green": 246,
        "blue": 208,
        "hue": 54,
        "saturation": 81,
        "lightness": 90
    }, {
        "hex": "#FAF5C8",
        "rgb": "rgb(250, 245, 200)",
        "hsl": "hsl(54, 83%, 88%)",
        "red": 250,
        "green": 245,
        "blue": 200,
        "hue": 54,
        "saturation": 83,
        "lightness": 88
    }, {
        "hex": "#F7EFA2",
        "rgb": "rgb(247, 239, 162)",
        "hsl": "hsl(54, 84%, 80%)",
        "red": 247,
        "green": 239,
        "blue": 162,
        "hue": 54,
        "saturation": 84,
        "lightness": 80
    }, {
        "hex": "#A89907",
        "rgb": "rgb(168, 153, 7)",
        "hsl": "hsl(54, 92%, 34%)",
        "red": 168,
        "green": 153,
        "blue": 7,
        "hue": 54,
        "saturation": 92,
        "lightness": 34
    }, {
        "hex": "#FFEE4A",
        "rgb": "rgb(255, 238, 74)",
        "hsl": "hsl(54, 100%, 65%)",
        "red": 255,
        "green": 238,
        "blue": 74,
        "hue": 54,
        "saturation": 100,
        "lightness": 65
    }, {
        "hex": "#FFF8BC",
        "rgb": "rgb(255, 248, 188)",
        "hsl": "hsl(54, 100%, 87%)",
        "red": 255,
        "green": 248,
        "blue": 188,
        "hue": 54,
        "saturation": 100,
        "lightness": 87
    }, {
        "hex": "#FFFBD4",
        "rgb": "rgb(255, 251, 212)",
        "hsl": "hsl(54, 100%, 92%)",
        "red": 255,
        "green": 251,
        "blue": 212,
        "hue": 54,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#96958A",
        "rgb": "rgb(150, 149, 138)",
        "hsl": "hsl(55, 5%, 56%)",
        "red": 150,
        "green": 149,
        "blue": 138,
        "hue": 55,
        "saturation": 5,
        "lightness": 56
    }, {
        "hex": "#CCC9AA",
        "rgb": "rgb(204, 201, 170)",
        "hsl": "hsl(55, 25%, 73%)",
        "red": 204,
        "green": 201,
        "blue": 170,
        "hue": 55,
        "saturation": 25,
        "lightness": 73
    }, {
        "hex": "#555231",
        "rgb": "rgb(85, 82, 49)",
        "hsl": "hsl(55, 27%, 26%)",
        "red": 85,
        "green": 82,
        "blue": 49,
        "hue": 55,
        "saturation": 27,
        "lightness": 26
    }, {
        "hex": "#CFCCA8",
        "rgb": "rgb(207, 204, 168)",
        "hsl": "hsl(55, 29%, 74%)",
        "red": 207,
        "green": 204,
        "blue": 168,
        "hue": 55,
        "saturation": 29,
        "lightness": 74
    }, {
        "hex": "#D9D5A7",
        "rgb": "rgb(217, 213, 167)",
        "hsl": "hsl(55, 40%, 75%)",
        "red": 217,
        "green": 213,
        "blue": 167,
        "hue": 55,
        "saturation": 40,
        "lightness": 75
    }, {
        "hex": "#DDD9AB",
        "rgb": "rgb(221, 217, 171)",
        "hsl": "hsl(55, 42%, 77%)",
        "red": 221,
        "green": 217,
        "blue": 171,
        "hue": 55,
        "saturation": 42,
        "lightness": 77
    }, {
        "hex": "#E0DBA4",
        "rgb": "rgb(224, 219, 164)",
        "hsl": "hsl(55, 49%, 76%)",
        "red": 224,
        "green": 219,
        "blue": 164,
        "hue": 55,
        "saturation": 49,
        "lightness": 76
    }, {
        "hex": "#E0DA96",
        "rgb": "rgb(224, 218, 150)",
        "hsl": "hsl(55, 54%, 73%)",
        "red": 224,
        "green": 218,
        "blue": 150,
        "hue": 55,
        "saturation": 54,
        "lightness": 73
    }, {
        "hex": "#DED787",
        "rgb": "rgb(222, 215, 135)",
        "hsl": "hsl(55, 57%, 70%)",
        "red": 222,
        "green": 215,
        "blue": 135,
        "hue": 55,
        "saturation": 57,
        "lightness": 70
    }, {
        "hex": "#EBE7B7",
        "rgb": "rgb(235, 231, 183)",
        "hsl": "hsl(55, 57%, 82%)",
        "red": 235,
        "green": 231,
        "blue": 183,
        "hue": 55,
        "saturation": 57,
        "lightness": 82
    }, {
        "hex": "#F2EFCE",
        "rgb": "rgb(242, 239, 206)",
        "hsl": "hsl(55, 58%, 88%)",
        "red": 242,
        "green": 239,
        "blue": 206,
        "hue": 55,
        "saturation": 58,
        "lightness": 88
    }, {
        "hex": "#DAD061",
        "rgb": "rgb(218, 208, 97)",
        "hsl": "hsl(55, 62%, 62%)",
        "red": 218,
        "green": 208,
        "blue": 97,
        "hue": 55,
        "saturation": 62,
        "lightness": 62
    }, {
        "hex": "#E1D772",
        "rgb": "rgb(225, 215, 114)",
        "hsl": "hsl(55, 65%, 66%)",
        "red": 225,
        "green": 215,
        "blue": 114,
        "hue": 55,
        "saturation": 65,
        "lightness": 66
    }, {
        "hex": "#EDE7A5",
        "rgb": "rgb(237, 231, 165)",
        "hsl": "hsl(55, 67%, 79%)",
        "red": 237,
        "green": 231,
        "blue": 165,
        "hue": 55,
        "saturation": 67,
        "lightness": 79
    }, {
        "hex": "#ECE488",
        "rgb": "rgb(236, 228, 136)",
        "hsl": "hsl(55, 72%, 73%)",
        "red": 236,
        "green": 228,
        "blue": 136,
        "hue": 55,
        "saturation": 72,
        "lightness": 73
    }, {
        "hex": "#F2ECB0",
        "rgb": "rgb(242, 236, 176)",
        "hsl": "hsl(55, 72%, 82%)",
        "red": 242,
        "green": 236,
        "blue": 176,
        "hue": 55,
        "saturation": 72,
        "lightness": 82
    }, {
        "hex": "#F0E999",
        "rgb": "rgb(240, 233, 153)",
        "hsl": "hsl(55, 74%, 77%)",
        "red": 240,
        "green": 233,
        "blue": 153,
        "hue": 55,
        "saturation": 74,
        "lightness": 77
    }, {
        "hex": "#E0D124",
        "rgb": "rgb(224, 209, 36)",
        "hsl": "hsl(55, 75%, 51%)",
        "red": 224,
        "green": 209,
        "blue": 36,
        "hue": 55,
        "saturation": 75,
        "lightness": 51
    }, {
        "hex": "#E6D839",
        "rgb": "rgb(230, 216, 57)",
        "hsl": "hsl(55, 78%, 56%)",
        "red": 230,
        "green": 216,
        "blue": 57,
        "hue": 55,
        "saturation": 78,
        "lightness": 56
    }, {
        "hex": "#F8F4C4",
        "rgb": "rgb(248, 244, 196)",
        "hsl": "hsl(55, 79%, 87%)",
        "red": 248,
        "green": 244,
        "blue": 196,
        "hue": 55,
        "saturation": 79,
        "lightness": 87
    }, {
        "hex": "#F8F3BF",
        "rgb": "rgb(248, 243, 191)",
        "hsl": "hsl(55, 80%, 86%)",
        "red": 248,
        "green": 243,
        "blue": 191,
        "hue": 55,
        "saturation": 80,
        "lightness": 86
    }, {
        "hex": "#E8D826",
        "rgb": "rgb(232, 216, 38)",
        "hsl": "hsl(55, 81%, 53%)",
        "red": 232,
        "green": 216,
        "blue": 38,
        "hue": 55,
        "saturation": 81,
        "lightness": 53
    }, {
        "hex": "#FCF9D8",
        "rgb": "rgb(252, 249, 216)",
        "hsl": "hsl(55, 86%, 92%)",
        "red": 252,
        "green": 249,
        "blue": 216,
        "hue": 55,
        "saturation": 86,
        "lightness": 92
    }, {
        "hex": "#FAF4B1",
        "rgb": "rgb(250, 244, 177)",
        "hsl": "hsl(55, 88%, 84%)",
        "red": 250,
        "green": 244,
        "blue": 177,
        "hue": 55,
        "saturation": 88,
        "lightness": 84
    }, {
        "hex": "#FCF7C5",
        "rgb": "rgb(252, 247, 197)",
        "hsl": "hsl(55, 90%, 88%)",
        "red": 252,
        "green": 247,
        "blue": 197,
        "hue": 55,
        "saturation": 90,
        "lightness": 88
    }, {
        "hex": "#FDF5A4",
        "rgb": "rgb(253, 245, 164)",
        "hsl": "hsl(55, 96%, 82%)",
        "red": 253,
        "green": 245,
        "blue": 164,
        "hue": 55,
        "saturation": 96,
        "lightness": 82
    }, {
        "hex": "#FDF37A",
        "rgb": "rgb(253, 243, 122)",
        "hsl": "hsl(55, 97%, 74%)",
        "red": 253,
        "green": 243,
        "blue": 122,
        "hue": 55,
        "saturation": 97,
        "lightness": 74
    }, {
        "hex": "#FFFCDD",
        "rgb": "rgb(255, 252, 221)",
        "hsl": "hsl(55, 100%, 93%)",
        "red": 255,
        "green": 252,
        "blue": 221,
        "hue": 55,
        "saturation": 100,
        "lightness": 93
    }, {
        "hex": "#7C7B6C",
        "rgb": "rgb(124, 123, 108)",
        "hsl": "hsl(56, 7%, 45%)",
        "red": 124,
        "green": 123,
        "blue": 108,
        "hue": 56,
        "saturation": 7,
        "lightness": 45
    }, {
        "hex": "#C2BF92",
        "rgb": "rgb(194, 191, 146)",
        "hsl": "hsl(56, 28%, 67%)",
        "red": 194,
        "green": 191,
        "blue": 146,
        "hue": 56,
        "saturation": 28,
        "lightness": 67
    }, {
        "hex": "#C6C39A",
        "rgb": "rgb(198, 195, 154)",
        "hsl": "hsl(56, 28%, 69%)",
        "red": 198,
        "green": 195,
        "blue": 154,
        "hue": 56,
        "saturation": 28,
        "lightness": 69
    }, {
        "hex": "#8C873E",
        "rgb": "rgb(140, 135, 62)",
        "hsl": "hsl(56, 39%, 40%)",
        "red": 140,
        "green": 135,
        "blue": 62,
        "hue": 56,
        "saturation": 39,
        "lightness": 40
    }, {
        "hex": "#E3E0B3",
        "rgb": "rgb(227, 224, 179)",
        "hsl": "hsl(56, 46%, 80%)",
        "red": 227,
        "green": 224,
        "blue": 179,
        "hue": 56,
        "saturation": 46,
        "lightness": 80
    }, {
        "hex": "#DFDB9C",
        "rgb": "rgb(223, 219, 156)",
        "hsl": "hsl(56, 51%, 74%)",
        "red": 223,
        "green": 219,
        "blue": 156,
        "hue": 56,
        "saturation": 51,
        "lightness": 74
    }, {
        "hex": "#EBE7A7",
        "rgb": "rgb(235, 231, 167)",
        "hsl": "hsl(56, 63%, 79%)",
        "red": 235,
        "green": 231,
        "blue": 167,
        "hue": 56,
        "saturation": 63,
        "lightness": 79
    }, {
        "hex": "#EBE7A7",
        "rgb": "rgb(235, 231, 167)",
        "hsl": "hsl(56, 63%, 79%)",
        "red": 235,
        "green": 231,
        "blue": 167,
        "hue": 56,
        "saturation": 63,
        "lightness": 79
    }, {
        "hex": "#EDE89D",
        "rgb": "rgb(237, 232, 157)",
        "hsl": "hsl(56, 69%, 77%)",
        "red": 237,
        "green": 232,
        "blue": 157,
        "hue": 56,
        "saturation": 69,
        "lightness": 77
    }, {
        "hex": "#A89F1D",
        "rgb": "rgb(168, 159, 29)",
        "hsl": "hsl(56, 71%, 39%)",
        "red": 168,
        "green": 159,
        "blue": 29,
        "hue": 56,
        "saturation": 71,
        "lightness": 39
    }, {
        "hex": "#EDE574",
        "rgb": "rgb(237, 229, 116)",
        "hsl": "hsl(56, 77%, 69%)",
        "red": 237,
        "green": 229,
        "blue": 116,
        "hue": 56,
        "saturation": 77,
        "lightness": 69
    }, {
        "hex": "#EDE574",
        "rgb": "rgb(237, 229, 116)",
        "hsl": "hsl(56, 77%, 69%)",
        "red": 237,
        "green": 229,
        "blue": 116,
        "hue": 56,
        "saturation": 77,
        "lightness": 69
    }, {
        "hex": "#E4D829",
        "rgb": "rgb(228, 216, 41)",
        "hsl": "hsl(56, 78%, 53%)",
        "red": 228,
        "green": 216,
        "blue": 41,
        "hue": 56,
        "saturation": 78,
        "lightness": 53
    }, {
        "hex": "#FCFADE",
        "rgb": "rgb(252, 250, 222)",
        "hsl": "hsl(56, 83%, 93%)",
        "red": 252,
        "green": 250,
        "blue": 222,
        "hue": 56,
        "saturation": 83,
        "lightness": 93
    }, {
        "hex": "#FCF9CE",
        "rgb": "rgb(252, 249, 206)",
        "hsl": "hsl(56, 88%, 90%)",
        "red": 252,
        "green": 249,
        "blue": 206,
        "hue": 56,
        "saturation": 88,
        "lightness": 90
    }, {
        "hex": "#FBF6B5",
        "rgb": "rgb(251, 246, 181)",
        "hsl": "hsl(56, 90%, 85%)",
        "red": 251,
        "green": 246,
        "blue": 181,
        "hue": 56,
        "saturation": 90,
        "lightness": 85
    }, {
        "hex": "#FCF59B",
        "rgb": "rgb(252, 245, 155)",
        "hsl": "hsl(56, 94%, 80%)",
        "red": 252,
        "green": 245,
        "blue": 155,
        "hue": 56,
        "saturation": 94,
        "lightness": 80
    }, {
        "hex": "#FDF57E",
        "rgb": "rgb(253, 245, 126)",
        "hsl": "hsl(56, 97%, 74%)",
        "red": 253,
        "green": 245,
        "blue": 126,
        "hue": 56,
        "saturation": 97,
        "lightness": 74
    }, {
        "hex": "#FEFAC2",
        "rgb": "rgb(254, 250, 194)",
        "hsl": "hsl(56, 97%, 88%)",
        "red": 254,
        "green": 250,
        "blue": 194,
        "hue": 56,
        "saturation": 97,
        "lightness": 88
    }, {
        "hex": "#B2A700",
        "rgb": "rgb(178, 167, 0)",
        "hsl": "hsl(56, 100%, 35%)",
        "red": 178,
        "green": 167,
        "blue": 0,
        "hue": 56,
        "saturation": 100,
        "lightness": 35
    }, {
        "hex": "#FFFAAC",
        "rgb": "rgb(255, 250, 172)",
        "hsl": "hsl(56, 100%, 84%)",
        "red": 255,
        "green": 250,
        "blue": 172,
        "hue": 56,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#FFFAB3",
        "rgb": "rgb(255, 250, 179)",
        "hsl": "hsl(56, 100%, 85%)",
        "red": 255,
        "green": 250,
        "blue": 179,
        "hue": 56,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#5D5C49",
        "rgb": "rgb(93, 92, 73)",
        "hsl": "hsl(57, 12%, 33%)",
        "red": 93,
        "green": 92,
        "blue": 73,
        "hue": 57,
        "saturation": 12,
        "lightness": 33
    }, {
        "hex": "#C1C0AE",
        "rgb": "rgb(193, 192, 174)",
        "hsl": "hsl(57, 13%, 72%)",
        "red": 193,
        "green": 192,
        "blue": 174,
        "hue": 57,
        "saturation": 13,
        "lightness": 72
    }, {
        "hex": "#9E9C71",
        "rgb": "rgb(158, 156, 113)",
        "hsl": "hsl(57, 19%, 53%)",
        "red": 158,
        "green": 156,
        "blue": 113,
        "hue": 57,
        "saturation": 19,
        "lightness": 53
    }, {
        "hex": "#E4E3CD",
        "rgb": "rgb(228, 227, 205)",
        "hsl": "hsl(57, 30%, 85%)",
        "red": 228,
        "green": 227,
        "blue": 205,
        "hue": 57,
        "saturation": 30,
        "lightness": 85
    }, {
        "hex": "#BFBC84",
        "rgb": "rgb(191, 188, 132)",
        "hsl": "hsl(57, 32%, 63%)",
        "red": 191,
        "green": 188,
        "blue": 132,
        "hue": 57,
        "saturation": 32,
        "lightness": 63
    }, {
        "hex": "#E8E7D2",
        "rgb": "rgb(232, 231, 210)",
        "hsl": "hsl(57, 32%, 87%)",
        "red": 232,
        "green": 231,
        "blue": 210,
        "hue": 57,
        "saturation": 32,
        "lightness": 87
    }, {
        "hex": "#DBD9B7",
        "rgb": "rgb(219, 217, 183)",
        "hsl": "hsl(57, 33%, 79%)",
        "red": 219,
        "green": 217,
        "blue": 183,
        "hue": 57,
        "saturation": 33,
        "lightness": 79
    }, {
        "hex": "#AFAB50",
        "rgb": "rgb(175, 171, 80)",
        "hsl": "hsl(57, 37%, 50%)",
        "red": 175,
        "green": 171,
        "blue": 80,
        "hue": 57,
        "saturation": 37,
        "lightness": 50
    }, {
        "hex": "#D1CE95",
        "rgb": "rgb(209, 206, 149)",
        "hsl": "hsl(57, 39%, 70%)",
        "red": 209,
        "green": 206,
        "blue": 149,
        "hue": 57,
        "saturation": 39,
        "lightness": 70
    }, {
        "hex": "#9E9A41",
        "rgb": "rgb(158, 154, 65)",
        "hsl": "hsl(57, 42%, 44%)",
        "red": 158,
        "green": 154,
        "blue": 65,
        "hue": 57,
        "saturation": 42,
        "lightness": 44
    }, {
        "hex": "#DBD8A2",
        "rgb": "rgb(219, 216, 162)",
        "hsl": "hsl(57, 44%, 75%)",
        "red": 219,
        "green": 216,
        "blue": 162,
        "hue": 57,
        "saturation": 44,
        "lightness": 75
    }, {
        "hex": "#D9D593",
        "rgb": "rgb(217, 213, 147)",
        "hsl": "hsl(57, 48%, 71%)",
        "red": 217,
        "green": 213,
        "blue": 147,
        "hue": 57,
        "saturation": 48,
        "lightness": 71
    }, {
        "hex": "#EDEBC9",
        "rgb": "rgb(237, 235, 201)",
        "hsl": "hsl(57, 50%, 86%)",
        "red": 237,
        "green": 235,
        "blue": 201,
        "hue": 57,
        "saturation": 50,
        "lightness": 86
    }, {
        "hex": "#F7F6E4",
        "rgb": "rgb(247, 246, 228)",
        "hsl": "hsl(57, 54%, 93%)",
        "red": 247,
        "green": 246,
        "blue": 228,
        "hue": 57,
        "saturation": 54,
        "lightness": 93
    }, {
        "hex": "#E0DC8B",
        "rgb": "rgb(224, 220, 139)",
        "hsl": "hsl(57, 58%, 71%)",
        "red": 224,
        "green": 220,
        "blue": 139,
        "hue": 57,
        "saturation": 58,
        "lightness": 71
    }, {
        "hex": "#E8E490",
        "rgb": "rgb(232, 228, 144)",
        "hsl": "hsl(57, 66%, 74%)",
        "red": 232,
        "green": 228,
        "blue": 144,
        "hue": 57,
        "saturation": 66,
        "lightness": 74
    }, {
        "hex": "#EFEBA9",
        "rgb": "rgb(239, 235, 169)",
        "hsl": "hsl(57, 69%, 80%)",
        "red": 239,
        "green": 235,
        "blue": 169,
        "hue": 57,
        "saturation": 69,
        "lightness": 80
    }, {
        "hex": "#EBE68D",
        "rgb": "rgb(235, 230, 141)",
        "hsl": "hsl(57, 70%, 74%)",
        "red": 235,
        "green": 230,
        "blue": 141,
        "hue": 57,
        "saturation": 70,
        "lightness": 74
    }, {
        "hex": "#F6F3C2",
        "rgb": "rgb(246, 243, 194)",
        "hsl": "hsl(57, 74%, 86%)",
        "red": 246,
        "green": 243,
        "blue": 194,
        "hue": 57,
        "saturation": 74,
        "lightness": 86
    }, {
        "hex": "#C4BC16",
        "rgb": "rgb(196, 188, 22)",
        "hsl": "hsl(57, 80%, 43%)",
        "red": 196,
        "green": 188,
        "blue": 22,
        "hue": 57,
        "saturation": 80,
        "lightness": 43
    }, {
        "hex": "#F8F5C1",
        "rgb": "rgb(248, 245, 193)",
        "hsl": "hsl(57, 80%, 86%)",
        "red": 248,
        "green": 245,
        "blue": 193,
        "hue": 57,
        "saturation": 80,
        "lightness": 86
    }, {
        "hex": "#FCF9C2",
        "rgb": "rgb(252, 249, 194)",
        "hsl": "hsl(57, 91%, 87%)",
        "red": 252,
        "green": 249,
        "blue": 194,
        "hue": 57,
        "saturation": 91,
        "lightness": 87
    }, {
        "hex": "#FDFAC7",
        "rgb": "rgb(253, 250, 199)",
        "hsl": "hsl(57, 93%, 89%)",
        "red": 253,
        "green": 250,
        "blue": 199,
        "hue": 57,
        "saturation": 93,
        "lightness": 89
    }, {
        "hex": "#FEFCD0",
        "rgb": "rgb(254, 252, 208)",
        "hsl": "hsl(57, 96%, 91%)",
        "red": 254,
        "green": 252,
        "blue": 208,
        "hue": 57,
        "saturation": 96,
        "lightness": 91
    }, {
        "hex": "#B8AF03",
        "rgb": "rgb(184, 175, 3)",
        "hsl": "hsl(57, 97%, 37%)",
        "red": 184,
        "green": 175,
        "blue": 3,
        "hue": 57,
        "saturation": 97,
        "lightness": 37
    }, {
        "hex": "#FEFAB6",
        "rgb": "rgb(254, 250, 182)",
        "hsl": "hsl(57, 97%, 85%)",
        "red": 254,
        "green": 250,
        "blue": 182,
        "hue": 57,
        "saturation": 97,
        "lightness": 85
    }, {
        "hex": "#B5AC01",
        "rgb": "rgb(181, 172, 1)",
        "hsl": "hsl(57, 99%, 36%)",
        "red": 181,
        "green": 172,
        "blue": 1,
        "hue": 57,
        "saturation": 99,
        "lightness": 36
    }, {
        "hex": "#BAB100",
        "rgb": "rgb(186, 177, 0)",
        "hsl": "hsl(57, 100%, 36%)",
        "red": 186,
        "green": 177,
        "blue": 0,
        "hue": 57,
        "saturation": 100,
        "lightness": 36
    }, {
        "hex": "#FFF538",
        "rgb": "rgb(255, 245, 56)",
        "hsl": "hsl(57, 100%, 61%)",
        "red": 255,
        "green": 245,
        "blue": 56,
        "hue": 57,
        "saturation": 100,
        "lightness": 61
    }, {
        "hex": "#FFFBB7",
        "rgb": "rgb(255, 251, 183)",
        "hsl": "hsl(57, 100%, 86%)",
        "red": 255,
        "green": 251,
        "blue": 183,
        "hue": 57,
        "saturation": 100,
        "lightness": 86
    }, {
        "hex": "#FFFDD1",
        "rgb": "rgb(255, 253, 209)",
        "hsl": "hsl(57, 100%, 91%)",
        "red": 255,
        "green": 253,
        "blue": 209,
        "hue": 57,
        "saturation": 100,
        "lightness": 91
    }, {
        "hex": "#FFFEEA",
        "rgb": "rgb(255, 254, 234)",
        "hsl": "hsl(57, 100%, 96%)",
        "red": 255,
        "green": 254,
        "blue": 234,
        "hue": 57,
        "saturation": 100,
        "lightness": 96
    }, {
        "hex": "#918F61",
        "rgb": "rgb(145, 143, 97)",
        "hsl": "hsl(58, 20%, 47%)",
        "red": 145,
        "green": 143,
        "blue": 97,
        "hue": 58,
        "saturation": 20,
        "lightness": 47
    }, {
        "hex": "#BAB997",
        "rgb": "rgb(186, 185, 151)",
        "hsl": "hsl(58, 20%, 66%)",
        "red": 186,
        "green": 185,
        "blue": 151,
        "hue": 58,
        "saturation": 20,
        "lightness": 66
    }, {
        "hex": "#535233",
        "rgb": "rgb(83, 82, 51)",
        "hsl": "hsl(58, 24%, 26%)",
        "red": 83,
        "green": 82,
        "blue": 51,
        "hue": 58,
        "saturation": 24,
        "lightness": 26
    }, {
        "hex": "#A5A36C",
        "rgb": "rgb(165, 163, 108)",
        "hsl": "hsl(58, 24%, 54%)",
        "red": 165,
        "green": 163,
        "blue": 108,
        "hue": 58,
        "saturation": 24,
        "lightness": 54
    }, {
        "hex": "#C2C092",
        "rgb": "rgb(194, 192, 146)",
        "hsl": "hsl(58, 28%, 67%)",
        "red": 194,
        "green": 192,
        "blue": 146,
        "hue": 58,
        "saturation": 28,
        "lightness": 67
    }, {
        "hex": "#DEDDC4",
        "rgb": "rgb(222, 221, 196)",
        "hsl": "hsl(58, 28%, 82%)",
        "red": 222,
        "green": 221,
        "blue": 196,
        "hue": 58,
        "saturation": 28,
        "lightness": 82
    }, {
        "hex": "#C8C696",
        "rgb": "rgb(200, 198, 150)",
        "hsl": "hsl(58, 31%, 69%)",
        "red": 200,
        "green": 198,
        "blue": 150,
        "hue": 58,
        "saturation": 31,
        "lightness": 69
    }, {
        "hex": "#D2D09F",
        "rgb": "rgb(210, 208, 159)",
        "hsl": "hsl(58, 36%, 72%)",
        "red": 210,
        "green": 208,
        "blue": 159,
        "hue": 58,
        "saturation": 36,
        "lightness": 72
    }, {
        "hex": "#E6E5C4",
        "rgb": "rgb(230, 229, 196)",
        "hsl": "hsl(58, 40%, 84%)",
        "red": 230,
        "green": 229,
        "blue": 196,
        "hue": 58,
        "saturation": 40,
        "lightness": 84
    }, {
        "hex": "#C5C376",
        "rgb": "rgb(197, 195, 118)",
        "hsl": "hsl(58, 41%, 62%)",
        "red": 197,
        "green": 195,
        "blue": 118,
        "hue": 58,
        "saturation": 41,
        "lightness": 62
    }, {
        "hex": "#DAD8A7",
        "rgb": "rgb(218, 216, 167)",
        "hsl": "hsl(58, 41%, 75%)",
        "red": 218,
        "green": 216,
        "blue": 167,
        "hue": 58,
        "saturation": 41,
        "lightness": 75
    }, {
        "hex": "#EDECCF",
        "rgb": "rgb(237, 236, 207)",
        "hsl": "hsl(58, 45%, 87%)",
        "red": 237,
        "green": 236,
        "blue": 207,
        "hue": 58,
        "saturation": 45,
        "lightness": 87
    }, {
        "hex": "#BBB749",
        "rgb": "rgb(187, 183, 73)",
        "hsl": "hsl(58, 46%, 51%)",
        "red": 187,
        "green": 183,
        "blue": 73,
        "hue": 58,
        "saturation": 46,
        "lightness": 51
    }, {
        "hex": "#E0DEAB",
        "rgb": "rgb(224, 222, 171)",
        "hsl": "hsl(58, 46%, 77%)",
        "red": 224,
        "green": 222,
        "blue": 171,
        "hue": 58,
        "saturation": 46,
        "lightness": 77
    }, {
        "hex": "#E3E1B1",
        "rgb": "rgb(227, 225, 177)",
        "hsl": "hsl(58, 47%, 79%)",
        "red": 227,
        "green": 225,
        "blue": 177,
        "hue": 58,
        "saturation": 47,
        "lightness": 79
    }, {
        "hex": "#E4E2AF",
        "rgb": "rgb(228, 226, 175)",
        "hsl": "hsl(58, 50%, 79%)",
        "red": 228,
        "green": 226,
        "blue": 175,
        "hue": 58,
        "saturation": 50,
        "lightness": 79
    }, {
        "hex": "#EFEECC",
        "rgb": "rgb(239, 238, 204)",
        "hsl": "hsl(58, 52%, 87%)",
        "red": 239,
        "green": 238,
        "blue": 204,
        "hue": 58,
        "saturation": 52,
        "lightness": 87
    }, {
        "hex": "#E2DF9A",
        "rgb": "rgb(226, 223, 154)",
        "hsl": "hsl(58, 55%, 75%)",
        "red": 226,
        "green": 223,
        "blue": 154,
        "hue": 58,
        "saturation": 55,
        "lightness": 75
    }, {
        "hex": "#F5F4D7",
        "rgb": "rgb(245, 244, 215)",
        "hsl": "hsl(58, 60%, 90%)",
        "red": 245,
        "green": 244,
        "blue": 215,
        "hue": 58,
        "saturation": 60,
        "lightness": 90
    }, {
        "hex": "#F6F5DA",
        "rgb": "rgb(246, 245, 218)",
        "hsl": "hsl(58, 61%, 91%)",
        "red": 246,
        "green": 245,
        "blue": 218,
        "hue": 58,
        "saturation": 61,
        "lightness": 91
    }, {
        "hex": "#D3CE3D",
        "rgb": "rgb(211, 206, 61)",
        "hsl": "hsl(58, 63%, 53%)",
        "red": 211,
        "green": 206,
        "blue": 61,
        "hue": 58,
        "saturation": 63,
        "lightness": 53
    }, {
        "hex": "#F1EFA5",
        "rgb": "rgb(241, 239, 165)",
        "hsl": "hsl(58, 73%, 80%)",
        "red": 241,
        "green": 239,
        "blue": 165,
        "hue": 58,
        "saturation": 73,
        "lightness": 80
    }, {
        "hex": "#4B490B",
        "rgb": "rgb(75, 73, 11)",
        "hsl": "hsl(58, 74%, 17%)",
        "red": 75,
        "green": 73,
        "blue": 11,
        "hue": 58,
        "saturation": 74,
        "lightness": 17
    }, {
        "hex": "#F6F4C2",
        "rgb": "rgb(246, 244, 194)",
        "hsl": "hsl(58, 74%, 86%)",
        "red": 246,
        "green": 244,
        "blue": 194,
        "hue": 58,
        "saturation": 74,
        "lightness": 86
    }, {
        "hex": "#EBE54D",
        "rgb": "rgb(235, 229, 77)",
        "hsl": "hsl(58, 80%, 61%)",
        "red": 235,
        "green": 229,
        "blue": 77,
        "hue": 58,
        "saturation": 80,
        "lightness": 61
    }, {
        "hex": "#FFFDC0",
        "rgb": "rgb(255, 253, 192)",
        "hsl": "hsl(58, 100%, 88%)",
        "red": 255,
        "green": 253,
        "blue": 192,
        "hue": 58,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#FFFDC0",
        "rgb": "rgb(255, 253, 192)",
        "hsl": "hsl(58, 100%, 88%)",
        "red": 255,
        "green": 253,
        "blue": 192,
        "hue": 58,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#FFFEDB",
        "rgb": "rgb(255, 254, 219)",
        "hsl": "hsl(58, 100%, 93%)",
        "red": 255,
        "green": 254,
        "blue": 219,
        "hue": 58,
        "saturation": 100,
        "lightness": 93
    }, {
        "hex": "#FFFEDF",
        "rgb": "rgb(255, 254, 223)",
        "hsl": "hsl(58, 100%, 94%)",
        "red": 255,
        "green": 254,
        "blue": 223,
        "hue": 58,
        "saturation": 100,
        "lightness": 94
    }, {
        "hex": "#FFFEE1",
        "rgb": "rgb(255, 254, 225)",
        "hsl": "hsl(58, 100%, 94%)",
        "red": 255,
        "green": 254,
        "blue": 225,
        "hue": 58,
        "saturation": 100,
        "lightness": 94
    }, {
        "hex": "#FFFEE4",
        "rgb": "rgb(255, 254, 228)",
        "hsl": "hsl(58, 100%, 95%)",
        "red": 255,
        "green": 254,
        "blue": 228,
        "hue": 58,
        "saturation": 100,
        "lightness": 95
    }, {
        "hex": "#757449",
        "rgb": "rgb(117, 116, 73)",
        "hsl": "hsl(59, 23%, 37%)",
        "red": 117,
        "green": 116,
        "blue": 73,
        "hue": 59,
        "saturation": 23,
        "lightness": 37
    }, {
        "hex": "#B1B080",
        "rgb": "rgb(177, 176, 128)",
        "hsl": "hsl(59, 24%, 60%)",
        "red": 177,
        "green": 176,
        "blue": 128,
        "hue": 59,
        "saturation": 24,
        "lightness": 60
    }, {
        "hex": "#BAB986",
        "rgb": "rgb(186, 185, 134)",
        "hsl": "hsl(59, 27%, 63%)",
        "red": 186,
        "green": 185,
        "blue": 134,
        "hue": 59,
        "saturation": 27,
        "lightness": 63
    }, {
        "hex": "#B5B479",
        "rgb": "rgb(181, 180, 121)",
        "hsl": "hsl(59, 29%, 59%)",
        "red": 181,
        "green": 180,
        "blue": 121,
        "hue": 59,
        "saturation": 29,
        "lightness": 59
    }, {
        "hex": "#DCDBAF",
        "rgb": "rgb(220, 219, 175)",
        "hsl": "hsl(59, 39%, 77%)",
        "red": 220,
        "green": 219,
        "blue": 175,
        "hue": 59,
        "saturation": 39,
        "lightness": 77
    }, {
        "hex": "#E0DFB1",
        "rgb": "rgb(224, 223, 177)",
        "hsl": "hsl(59, 43%, 79%)",
        "red": 224,
        "green": 223,
        "blue": 177,
        "hue": 59,
        "saturation": 43,
        "lightness": 79
    }, {
        "hex": "#D0CF75",
        "rgb": "rgb(208, 207, 117)",
        "hsl": "hsl(59, 49%, 64%)",
        "red": 208,
        "green": 207,
        "blue": 117,
        "hue": 59,
        "saturation": 49,
        "lightness": 64
    }, {
        "hex": "#DBDA97",
        "rgb": "rgb(219, 218, 151)",
        "hsl": "hsl(59, 49%, 73%)",
        "red": 219,
        "green": 218,
        "blue": 151,
        "hue": 59,
        "saturation": 49,
        "lightness": 73
    }, {
        "hex": "#E0DF9F",
        "rgb": "rgb(224, 223, 159)",
        "hsl": "hsl(59, 51%, 75%)",
        "red": 224,
        "green": 223,
        "blue": 159,
        "hue": 59,
        "saturation": 51,
        "lightness": 75
    }, {
        "hex": "#D6D578",
        "rgb": "rgb(214, 213, 120)",
        "hsl": "hsl(59, 53%, 65%)",
        "red": 214,
        "green": 213,
        "blue": 120,
        "hue": 59,
        "saturation": 53,
        "lightness": 65
    }, {
        "hex": "#D9D766",
        "rgb": "rgb(217, 215, 102)",
        "hsl": "hsl(59, 60%, 63%)",
        "red": 217,
        "green": 215,
        "blue": 102,
        "hue": 59,
        "saturation": 60,
        "lightness": 63
    }, {
        "hex": "#E4E391",
        "rgb": "rgb(228, 227, 145)",
        "hsl": "hsl(59, 61%, 73%)",
        "red": 228,
        "green": 227,
        "blue": 145,
        "hue": 59,
        "saturation": 61,
        "lightness": 73
    }, {
        "hex": "#EBEAA9",
        "rgb": "rgb(235, 234, 169)",
        "hsl": "hsl(59, 62%, 79%)",
        "red": 235,
        "green": 234,
        "blue": 169,
        "hue": 59,
        "saturation": 62,
        "lightness": 79
    }, {
        "hex": "#EDECB3",
        "rgb": "rgb(237, 236, 179)",
        "hsl": "hsl(59, 62%, 82%)",
        "red": 237,
        "green": 236,
        "blue": 179,
        "hue": 59,
        "saturation": 62,
        "lightness": 82
    }, {
        "hex": "#DEDB53",
        "rgb": "rgb(222, 219, 83)",
        "hsl": "hsl(59, 68%, 60%)",
        "red": 222,
        "green": 219,
        "blue": 83,
        "hue": 59,
        "saturation": 68,
        "lightness": 60
    }, {
        "hex": "#F6F5CD",
        "rgb": "rgb(246, 245, 205)",
        "hsl": "hsl(59, 69%, 88%)",
        "red": 246,
        "green": 245,
        "blue": 205,
        "hue": 59,
        "saturation": 69,
        "lightness": 88
    }, {
        "hex": "#EFED89",
        "rgb": "rgb(239, 237, 137)",
        "hsl": "hsl(59, 76%, 74%)",
        "red": 239,
        "green": 237,
        "blue": 137,
        "hue": 59,
        "saturation": 76,
        "lightness": 74
    }, {
        "hex": "#F8F69F",
        "rgb": "rgb(248, 246, 159)",
        "hsl": "hsl(59, 86%, 80%)",
        "red": 248,
        "green": 246,
        "blue": 159,
        "hue": 59,
        "saturation": 86,
        "lightness": 80
    }, {
        "hex": "#FDFCCE",
        "rgb": "rgb(253, 252, 206)",
        "hsl": "hsl(59, 92%, 90%)",
        "red": 253,
        "green": 252,
        "blue": 206,
        "hue": 59,
        "saturation": 92,
        "lightness": 90
    }, {
        "hex": "#FFFEC7",
        "rgb": "rgb(255, 254, 199)",
        "hsl": "hsl(59, 100%, 89%)",
        "red": 255,
        "green": 254,
        "blue": 199,
        "hue": 59,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#FFFEC8",
        "rgb": "rgb(255, 254, 200)",
        "hsl": "hsl(59, 100%, 89%)",
        "red": 255,
        "green": 254,
        "blue": 200,
        "hue": 59,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#FFFEC6",
        "rgb": "rgb(255, 254, 198)",
        "hsl": "hsl(59, 100%, 89%)",
        "red": 255,
        "green": 254,
        "blue": 198,
        "hue": 59,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#FFFEC7",
        "rgb": "rgb(255, 254, 199)",
        "hsl": "hsl(59, 100%, 89%)",
        "red": 255,
        "green": 254,
        "blue": 199,
        "hue": 59,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#10100F",
        "rgb": "rgb(16, 16, 15)",
        "hsl": "hsl(60, 3%, 6%)",
        "red": 16,
        "green": 16,
        "blue": 15,
        "hue": 60,
        "saturation": 3,
        "lightness": 6
    }, {
        "hex": "#DADAD8",
        "rgb": "rgb(218, 218, 216)",
        "hsl": "hsl(60, 3%, 85%)",
        "red": 218,
        "green": 218,
        "blue": 216,
        "hue": 60,
        "saturation": 3,
        "lightness": 85
    }, {
        "hex": "#2D2D29",
        "rgb": "rgb(45, 45, 41)",
        "hsl": "hsl(60, 5%, 17%)",
        "red": 45,
        "green": 45,
        "blue": 41,
        "hue": 60,
        "saturation": 5,
        "lightness": 17
    }, {
        "hex": "#848478",
        "rgb": "rgb(132, 132, 120)",
        "hsl": "hsl(60, 5%, 49%)",
        "red": 132,
        "green": 132,
        "blue": 120,
        "hue": 60,
        "saturation": 5,
        "lightness": 49
    }, {
        "hex": "#9D9D93",
        "rgb": "rgb(157, 157, 147)",
        "hsl": "hsl(60, 5%, 60%)",
        "red": 157,
        "green": 157,
        "blue": 147,
        "hue": 60,
        "saturation": 5,
        "lightness": 60
    }, {
        "hex": "#121210",
        "rgb": "rgb(18, 18, 16)",
        "hsl": "hsl(60, 6%, 7%)",
        "red": 18,
        "green": 18,
        "blue": 16,
        "hue": 60,
        "saturation": 6,
        "lightness": 7
    }, {
        "hex": "#161613",
        "rgb": "rgb(22, 22, 19)",
        "hsl": "hsl(60, 7%, 8%)",
        "red": 22,
        "green": 22,
        "blue": 19,
        "hue": 60,
        "saturation": 7,
        "lightness": 8
    }, {
        "hex": "#505045",
        "rgb": "rgb(80, 80, 69)",
        "hsl": "hsl(60, 7%, 29%)",
        "red": 80,
        "green": 80,
        "blue": 69,
        "hue": 60,
        "saturation": 7,
        "lightness": 29
    }, {
        "hex": "#3D3D34",
        "rgb": "rgb(61, 61, 52)",
        "hsl": "hsl(60, 8%, 22%)",
        "red": 61,
        "green": 61,
        "blue": 52,
        "hue": 60,
        "saturation": 8,
        "lightness": 22
    }, {
        "hex": "#F4F4F2",
        "rgb": "rgb(244, 244, 242)",
        "hsl": "hsl(60, 8%, 95%)",
        "red": 244,
        "green": 244,
        "blue": 242,
        "hue": 60,
        "saturation": 8,
        "lightness": 95
    }, {
        "hex": "#35352B",
        "rgb": "rgb(53, 53, 43)",
        "hsl": "hsl(60, 10%, 19%)",
        "red": 53,
        "green": 53,
        "blue": 43,
        "hue": 60,
        "saturation": 10,
        "lightness": 19
    }, {
        "hex": "#8B8B70",
        "rgb": "rgb(139, 139, 112)",
        "hsl": "hsl(60, 11%, 49%)",
        "red": 139,
        "green": 139,
        "blue": 112,
        "hue": 60,
        "saturation": 11,
        "lightness": 49
    }, {
        "hex": "#AAAA91",
        "rgb": "rgb(170, 170, 145)",
        "hsl": "hsl(60, 13%, 62%)",
        "red": 170,
        "green": 170,
        "blue": 145,
        "hue": 60,
        "saturation": 13,
        "lightness": 62
    }, {
        "hex": "#CCCCBB",
        "rgb": "rgb(204, 204, 187)",
        "hsl": "hsl(60, 14%, 77%)",
        "red": 204,
        "green": 204,
        "blue": 187,
        "hue": 60,
        "saturation": 14,
        "lightness": 77
    }, {
        "hex": "#ADAD8E",
        "rgb": "rgb(173, 173, 142)",
        "hsl": "hsl(60, 16%, 62%)",
        "red": 173,
        "green": 173,
        "blue": 142,
        "hue": 60,
        "saturation": 16,
        "lightness": 62
    }, {
        "hex": "#C0C0A8",
        "rgb": "rgb(192, 192, 168)",
        "hsl": "hsl(60, 16%, 71%)",
        "red": 192,
        "green": 192,
        "blue": 168,
        "hue": 60,
        "saturation": 16,
        "lightness": 71
    }, {
        "hex": "#070705",
        "rgb": "rgb(7, 7, 5)",
        "hsl": "hsl(60, 17%, 2%)",
        "red": 7,
        "green": 7,
        "blue": 5,
        "hue": 60,
        "saturation": 17,
        "lightness": 2
    }, {
        "hex": "#919167",
        "rgb": "rgb(145, 145, 103)",
        "hsl": "hsl(60, 17%, 49%)",
        "red": 145,
        "green": 145,
        "blue": 103,
        "hue": 60,
        "saturation": 17,
        "lightness": 49
    }, {
        "hex": "#919167",
        "rgb": "rgb(145, 145, 103)",
        "hsl": "hsl(60, 17%, 49%)",
        "red": 145,
        "green": 145,
        "blue": 103,
        "hue": 60,
        "saturation": 17,
        "lightness": 49
    }, {
        "hex": "#B0B087",
        "rgb": "rgb(176, 176, 135)",
        "hsl": "hsl(60, 21%, 61%)",
        "red": 176,
        "green": 176,
        "blue": 135,
        "hue": 60,
        "saturation": 21,
        "lightness": 61
    }, {
        "hex": "#A8A878",
        "rgb": "rgb(168, 168, 120)",
        "hsl": "hsl(60, 22%, 56%)",
        "red": 168,
        "green": 168,
        "blue": 120,
        "hue": 60,
        "saturation": 22,
        "lightness": 56
    }, {
        "hex": "#C8C8A9",
        "rgb": "rgb(200, 200, 169)",
        "hsl": "hsl(60, 22%, 72%)",
        "red": 200,
        "green": 200,
        "blue": 169,
        "hue": 60,
        "saturation": 22,
        "lightness": 72
    }, {
        "hex": "#C8C8A9",
        "rgb": "rgb(200, 200, 169)",
        "hsl": "hsl(60, 22%, 72%)",
        "red": 200,
        "green": 200,
        "blue": 169,
        "hue": 60,
        "saturation": 22,
        "lightness": 72
    }, {
        "hex": "#D8D8C0",
        "rgb": "rgb(216, 216, 192)",
        "hsl": "hsl(60, 24%, 80%)",
        "red": 216,
        "green": 216,
        "blue": 192,
        "hue": 60,
        "saturation": 24,
        "lightness": 80
    }, {
        "hex": "#D8D8C0",
        "rgb": "rgb(216, 216, 192)",
        "hsl": "hsl(60, 24%, 80%)",
        "red": 216,
        "green": 216,
        "blue": 192,
        "hue": 60,
        "saturation": 24,
        "lightness": 80
    }, {
        "hex": "#E3E3D1",
        "rgb": "rgb(227, 227, 209)",
        "hsl": "hsl(60, 24%, 85%)",
        "red": 227,
        "green": 227,
        "blue": 209,
        "hue": 60,
        "saturation": 24,
        "lightness": 85
    }, {
        "hex": "#B8B884",
        "rgb": "rgb(184, 184, 132)",
        "hsl": "hsl(60, 27%, 62%)",
        "red": 184,
        "green": 184,
        "blue": 132,
        "hue": 60,
        "saturation": 27,
        "lightness": 62
    }, {
        "hex": "#BBBB88",
        "rgb": "rgb(187, 187, 136)",
        "hsl": "hsl(60, 27%, 63%)",
        "red": 187,
        "green": 187,
        "blue": 136,
        "hue": 60,
        "saturation": 27,
        "lightness": 63
    }, {
        "hex": "#D7D7B8",
        "rgb": "rgb(215, 215, 184)",
        "hsl": "hsl(60, 28%, 78%)",
        "red": 215,
        "green": 215,
        "blue": 184,
        "hue": 60,
        "saturation": 28,
        "lightness": 78
    }, {
        "hex": "#DADABD",
        "rgb": "rgb(218, 218, 189)",
        "hsl": "hsl(60, 28%, 80%)",
        "red": 218,
        "green": 218,
        "blue": 189,
        "hue": 60,
        "saturation": 28,
        "lightness": 80
    }, {
        "hex": "#ECECDD",
        "rgb": "rgb(236, 236, 221)",
        "hsl": "hsl(60, 28%, 90%)",
        "red": 236,
        "green": 236,
        "blue": 221,
        "hue": 60,
        "saturation": 28,
        "lightness": 90
    }, {
        "hex": "#D8D8B2",
        "rgb": "rgb(216, 216, 178)",
        "hsl": "hsl(60, 33%, 77%)",
        "red": 216,
        "green": 216,
        "blue": 178,
        "hue": 60,
        "saturation": 33,
        "lightness": 77
    }, {
        "hex": "#E4E4C5",
        "rgb": "rgb(228, 228, 197)",
        "hsl": "hsl(60, 36%, 83%)",
        "red": 228,
        "green": 228,
        "blue": 197,
        "hue": 60,
        "saturation": 36,
        "lightness": 83
    }, {
        "hex": "#C9C987",
        "rgb": "rgb(201, 201, 135)",
        "hsl": "hsl(60, 38%, 66%)",
        "red": 201,
        "green": 201,
        "blue": 135,
        "hue": 60,
        "saturation": 38,
        "lightness": 66
    }, {
        "hex": "#C7C77F",
        "rgb": "rgb(199, 199, 127)",
        "hsl": "hsl(60, 39%, 64%)",
        "red": 199,
        "green": 199,
        "blue": 127,
        "hue": 60,
        "saturation": 39,
        "lightness": 64
    }, {
        "hex": "#E0E0B6",
        "rgb": "rgb(224, 224, 182)",
        "hsl": "hsl(60, 40%, 80%)",
        "red": 224,
        "green": 224,
        "blue": 182,
        "hue": 60,
        "saturation": 40,
        "lightness": 80
    }, {
        "hex": "#F9F9F1",
        "rgb": "rgb(249, 249, 241)",
        "hsl": "hsl(60, 40%, 96%)",
        "red": 249,
        "green": 249,
        "blue": 241,
        "hue": 60,
        "saturation": 40,
        "lightness": 96
    }, {
        "hex": "#F0F0D8",
        "rgb": "rgb(240, 240, 216)",
        "hsl": "hsl(60, 44%, 89%)",
        "red": 240,
        "green": 240,
        "blue": 216,
        "hue": 60,
        "saturation": 44,
        "lightness": 89
    }, {
        "hex": "#F0F0D8",
        "rgb": "rgb(240, 240, 216)",
        "hsl": "hsl(60, 44%, 89%)",
        "red": 240,
        "green": 240,
        "blue": 216,
        "hue": 60,
        "saturation": 44,
        "lightness": 89
    }, {
        "hex": "#F0F0D8",
        "rgb": "rgb(240, 240, 216)",
        "hsl": "hsl(60, 44%, 89%)",
        "red": 240,
        "green": 240,
        "blue": 216,
        "hue": 60,
        "saturation": 44,
        "lightness": 89
    }, {
        "hex": "#F0F0D8",
        "rgb": "rgb(240, 240, 216)",
        "hsl": "hsl(60, 44%, 89%)",
        "red": 240,
        "green": 240,
        "blue": 216,
        "hue": 60,
        "saturation": 44,
        "lightness": 89
    }, {
        "hex": "#F0F0D8",
        "rgb": "rgb(240, 240, 216)",
        "hsl": "hsl(60, 44%, 89%)",
        "red": 240,
        "green": 240,
        "blue": 216,
        "hue": 60,
        "saturation": 44,
        "lightness": 89
    }, {
        "hex": "#F0F0D8",
        "rgb": "rgb(240, 240, 216)",
        "hsl": "hsl(60, 44%, 89%)",
        "red": 240,
        "green": 240,
        "blue": 216,
        "hue": 60,
        "saturation": 44,
        "lightness": 89
    }, {
        "hex": "#F0F0D8",
        "rgb": "rgb(240, 240, 216)",
        "hsl": "hsl(60, 44%, 89%)",
        "red": 240,
        "green": 240,
        "blue": 216,
        "hue": 60,
        "saturation": 44,
        "lightness": 89
    }, {
        "hex": "#F0F0D8",
        "rgb": "rgb(240, 240, 216)",
        "hsl": "hsl(60, 44%, 89%)",
        "red": 240,
        "green": 240,
        "blue": 216,
        "hue": 60,
        "saturation": 44,
        "lightness": 89
    }, {
        "hex": "#E2E2B2",
        "rgb": "rgb(226, 226, 178)",
        "hsl": "hsl(60, 45%, 79%)",
        "red": 226,
        "green": 226,
        "blue": 178,
        "hue": 60,
        "saturation": 45,
        "lightness": 79
    }, {
        "hex": "#F8F8EC",
        "rgb": "rgb(248, 248, 236)",
        "hsl": "hsl(60, 46%, 95%)",
        "red": 248,
        "green": 248,
        "blue": 236,
        "hue": 60,
        "saturation": 46,
        "lightness": 95
    }, {
        "hex": "#F8F8EC",
        "rgb": "rgb(248, 248, 236)",
        "hsl": "hsl(60, 46%, 95%)",
        "red": 248,
        "green": 248,
        "blue": 236,
        "hue": 60,
        "saturation": 46,
        "lightness": 95
    }, {
        "hex": "#CDCD76",
        "rgb": "rgb(205, 205, 118)",
        "hsl": "hsl(60, 47%, 63%)",
        "red": 205,
        "green": 205,
        "blue": 118,
        "hue": 60,
        "saturation": 47,
        "lightness": 63
    }, {
        "hex": "#D4D489",
        "rgb": "rgb(212, 212, 137)",
        "hsl": "hsl(60, 47%, 68%)",
        "red": 212,
        "green": 212,
        "blue": 137,
        "hue": 60,
        "saturation": 47,
        "lightness": 68
    }, {
        "hex": "#E0E0A8",
        "rgb": "rgb(224, 224, 168)",
        "hsl": "hsl(60, 47%, 77%)",
        "red": 224,
        "green": 224,
        "blue": 168,
        "hue": 60,
        "saturation": 47,
        "lightness": 77
    }, {
        "hex": "#CCCC66",
        "rgb": "rgb(204, 204, 102)",
        "hsl": "hsl(60, 50%, 60%)",
        "red": 204,
        "green": 204,
        "blue": 102,
        "hue": 60,
        "saturation": 50,
        "lightness": 60
    }, {
        "hex": "#FEFEFC",
        "rgb": "rgb(254, 254, 252)",
        "hsl": "hsl(60, 50%, 99%)",
        "red": 254,
        "green": 254,
        "blue": 252,
        "hue": 60,
        "saturation": 50,
        "lightness": 99
    }, {
        "hex": "#F4F4DD",
        "rgb": "rgb(244, 244, 221)",
        "hsl": "hsl(60, 51%, 91%)",
        "red": 244,
        "green": 244,
        "blue": 221,
        "hue": 60,
        "saturation": 51,
        "lightness": 91
    }, {
        "hex": "#DDDD92",
        "rgb": "rgb(221, 221, 146)",
        "hsl": "hsl(60, 52%, 72%)",
        "red": 221,
        "green": 221,
        "blue": 146,
        "hue": 60,
        "saturation": 52,
        "lightness": 72
    }, {
        "hex": "#F6F6E2",
        "rgb": "rgb(246, 246, 226)",
        "hsl": "hsl(60, 53%, 93%)",
        "red": 246,
        "green": 246,
        "blue": 226,
        "hue": 60,
        "saturation": 53,
        "lightness": 93
    }, {
        "hex": "#EBEBBC",
        "rgb": "rgb(235, 235, 188)",
        "hsl": "hsl(60, 54%, 83%)",
        "red": 235,
        "green": 235,
        "blue": 188,
        "hue": 60,
        "saturation": 54,
        "lightness": 83
    }, {
        "hex": "#F9F9E7",
        "rgb": "rgb(249, 249, 231)",
        "hsl": "hsl(60, 60%, 94%)",
        "red": 249,
        "green": 249,
        "blue": 231,
        "hue": 60,
        "saturation": 60,
        "lightness": 94
    }, {
        "hex": "#C7C730",
        "rgb": "rgb(199, 199, 48)",
        "hsl": "hsl(60, 61%, 48%)",
        "red": 199,
        "green": 199,
        "blue": 48,
        "hue": 60,
        "saturation": 61,
        "lightness": 48
    }, {
        "hex": "#E7E79D",
        "rgb": "rgb(231, 231, 157)",
        "hsl": "hsl(60, 61%, 76%)",
        "red": 231,
        "green": 231,
        "blue": 157,
        "hue": 60,
        "saturation": 61,
        "lightness": 76
    }, {
        "hex": "#EBEBAB",
        "rgb": "rgb(235, 235, 171)",
        "hsl": "hsl(60, 62%, 80%)",
        "red": 235,
        "green": 235,
        "blue": 171,
        "hue": 60,
        "saturation": 62,
        "lightness": 80
    }, {
        "hex": "#F1F1C1",
        "rgb": "rgb(241, 241, 193)",
        "hsl": "hsl(60, 63%, 85%)",
        "red": 241,
        "green": 241,
        "blue": 193,
        "hue": 60,
        "saturation": 63,
        "lightness": 85
    }, {
        "hex": "#D6D644",
        "rgb": "rgb(214, 214, 68)",
        "hsl": "hsl(60, 64%, 55%)",
        "red": 214,
        "green": 214,
        "blue": 68,
        "hue": 60,
        "saturation": 64,
        "lightness": 55
    }, {
        "hex": "#E0E05A",
        "rgb": "rgb(224, 224, 90)",
        "hsl": "hsl(60, 68%, 62%)",
        "red": 224,
        "green": 224,
        "blue": 90,
        "hue": 60,
        "saturation": 68,
        "lightness": 62
    }, {
        "hex": "#F0F0AF",
        "rgb": "rgb(240, 240, 175)",
        "hsl": "hsl(60, 68%, 81%)",
        "red": 240,
        "green": 240,
        "blue": 175,
        "hue": 60,
        "saturation": 68,
        "lightness": 81
    }, {
        "hex": "#F8F8D6",
        "rgb": "rgb(248, 248, 214)",
        "hsl": "hsl(60, 71%, 91%)",
        "red": 248,
        "green": 248,
        "blue": 214,
        "hue": 60,
        "saturation": 71,
        "lightness": 91
    }, {
        "hex": "#D4D323",
        "rgb": "rgb(212, 211, 35)",
        "hsl": "hsl(60, 72%, 48%)",
        "red": 212,
        "green": 211,
        "blue": 35,
        "hue": 60,
        "saturation": 72,
        "lightness": 48
    }, {
        "hex": "#EBEB7F",
        "rgb": "rgb(235, 235, 127)",
        "hsl": "hsl(60, 73%, 71%)",
        "red": 235,
        "green": 235,
        "blue": 127,
        "hue": 60,
        "saturation": 73,
        "lightness": 71
    }, {
        "hex": "#F7F7C6",
        "rgb": "rgb(247, 247, 198)",
        "hsl": "hsl(60, 75%, 87%)",
        "red": 247,
        "green": 247,
        "blue": 198,
        "hue": 60,
        "saturation": 75,
        "lightness": 87
    }, {
        "hex": "#FAFAD7",
        "rgb": "rgb(250, 250, 215)",
        "hsl": "hsl(60, 78%, 91%)",
        "red": 250,
        "green": 250,
        "blue": 215,
        "hue": 60,
        "saturation": 78,
        "lightness": 91
    }, {
        "hex": "#FAFAD4",
        "rgb": "rgb(250, 250, 212)",
        "hsl": "hsl(60, 79%, 91%)",
        "red": 250,
        "green": 250,
        "blue": 212,
        "hue": 60,
        "saturation": 79,
        "lightness": 91
    }, {
        "hex": "#FCFCE2",
        "rgb": "rgb(252, 252, 226)",
        "hsl": "hsl(60, 81%, 94%)",
        "red": 252,
        "green": 252,
        "blue": 226,
        "hue": 60,
        "saturation": 81,
        "lightness": 94
    }, {
        "hex": "#F2F26F",
        "rgb": "rgb(242, 242, 111)",
        "hsl": "hsl(60, 83%, 69%)",
        "red": 242,
        "green": 242,
        "blue": 111,
        "hue": 60,
        "saturation": 83,
        "lightness": 69
    }, {
        "hex": "#F7F7A1",
        "rgb": "rgb(247, 247, 161)",
        "hsl": "hsl(60, 84%, 80%)",
        "red": 247,
        "green": 247,
        "blue": 161,
        "hue": 60,
        "saturation": 84,
        "lightness": 80
    }, {
        "hex": "#F7F799",
        "rgb": "rgb(247, 247, 153)",
        "hsl": "hsl(60, 85%, 78%)",
        "red": 247,
        "green": 247,
        "blue": 153,
        "hue": 60,
        "saturation": 85,
        "lightness": 78
    }, {
        "hex": "#FCFCD7",
        "rgb": "rgb(252, 252, 215)",
        "hsl": "hsl(60, 86%, 92%)",
        "red": 252,
        "green": 252,
        "blue": 215,
        "hue": 60,
        "saturation": 86,
        "lightness": 92
    }, {
        "hex": "#FEFEEB",
        "rgb": "rgb(254, 254, 235)",
        "hsl": "hsl(60, 90%, 96%)",
        "red": 254,
        "green": 254,
        "blue": 235,
        "hue": 60,
        "saturation": 90,
        "lightness": 96
    }, {
        "hex": "#FFFF00",
        "rgb": "rgb(255, 255, 0)",
        "hsl": "hsl(60, 100%, 50%)",
        "red": 255,
        "green": 255,
        "blue": 0,
        "hue": 60,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FFFF96",
        "rgb": "rgb(255, 255, 150)",
        "hsl": "hsl(60, 100%, 79%)",
        "red": 255,
        "green": 255,
        "blue": 150,
        "hue": 60,
        "saturation": 100,
        "lightness": 79
    }, {
        "hex": "#FFFF99",
        "rgb": "rgb(255, 255, 153)",
        "hsl": "hsl(60, 100%, 80%)",
        "red": 255,
        "green": 255,
        "blue": 153,
        "hue": 60,
        "saturation": 100,
        "lightness": 80
    }, {
        "hex": "#FFFF99",
        "rgb": "rgb(255, 255, 153)",
        "hsl": "hsl(60, 100%, 80%)",
        "red": 255,
        "green": 255,
        "blue": 153,
        "hue": 60,
        "saturation": 100,
        "lightness": 80
    }, {
        "hex": "#FFFFC0",
        "rgb": "rgb(255, 255, 192)",
        "hsl": "hsl(60, 100%, 88%)",
        "red": 255,
        "green": 255,
        "blue": 192,
        "hue": 60,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#FFFFC2",
        "rgb": "rgb(255, 255, 194)",
        "hsl": "hsl(60, 100%, 88%)",
        "red": 255,
        "green": 255,
        "blue": 194,
        "hue": 60,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#FFFFCC",
        "rgb": "rgb(255, 255, 204)",
        "hsl": "hsl(60, 100%, 90%)",
        "red": 255,
        "green": 255,
        "blue": 204,
        "hue": 60,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#FFFFDD",
        "rgb": "rgb(255, 255, 221)",
        "hsl": "hsl(60, 100%, 93%)",
        "red": 255,
        "green": 255,
        "blue": 221,
        "hue": 60,
        "saturation": 100,
        "lightness": 93
    }, {
        "hex": "#FFFFE5",
        "rgb": "rgb(255, 255, 229)",
        "hsl": "hsl(60, 100%, 95%)",
        "red": 255,
        "green": 255,
        "blue": 229,
        "hue": 60,
        "saturation": 100,
        "lightness": 95
    }, {
        "hex": "#FFFFE5",
        "rgb": "rgb(255, 255, 229)",
        "hsl": "hsl(60, 100%, 95%)",
        "red": 255,
        "green": 255,
        "blue": 229,
        "hue": 60,
        "saturation": 100,
        "lightness": 95
    }, {
        "hex": "#FFFFEA",
        "rgb": "rgb(255, 255, 234)",
        "hsl": "hsl(60, 100%, 96%)",
        "red": 255,
        "green": 255,
        "blue": 234,
        "hue": 60,
        "saturation": 100,
        "lightness": 96
    }, {
        "hex": "#FFFFF7",
        "rgb": "rgb(255, 255, 247)",
        "hsl": "hsl(60, 100%, 98%)",
        "red": 255,
        "green": 255,
        "blue": 247,
        "hue": 60,
        "saturation": 100,
        "lightness": 98
    }, {
        "hex": "#FFFFFD",
        "rgb": "rgb(255, 255, 253)",
        "hsl": "hsl(60, 100%, 100%)",
        "red": 255,
        "green": 255,
        "blue": 253,
        "hue": 60,
        "saturation": 100,
        "lightness": 100
    }, {
        "hex": "#8F9044",
        "rgb": "rgb(143, 144, 68)",
        "hsl": "hsl(61, 36%, 42%)",
        "red": 143,
        "green": 144,
        "blue": 68,
        "hue": 61,
        "saturation": 36,
        "lightness": 42
    }, {
        "hex": "#A7A844",
        "rgb": "rgb(167, 168, 68)",
        "hsl": "hsl(61, 42%, 46%)",
        "red": 167,
        "green": 168,
        "blue": 68,
        "hue": 61,
        "saturation": 42,
        "lightness": 46
    }, {
        "hex": "#DDDEAD",
        "rgb": "rgb(221, 222, 173)",
        "hsl": "hsl(61, 43%, 77%)",
        "red": 221,
        "green": 222,
        "blue": 173,
        "hue": 61,
        "saturation": 43,
        "lightness": 77
    }, {
        "hex": "#E5E6B8",
        "rgb": "rgb(229, 230, 184)",
        "hsl": "hsl(61, 48%, 81%)",
        "red": 229,
        "green": 230,
        "blue": 184,
        "hue": 61,
        "saturation": 48,
        "lightness": 81
    }, {
        "hex": "#D8D989",
        "rgb": "rgb(216, 217, 137)",
        "hsl": "hsl(61, 51%, 69%)",
        "red": 216,
        "green": 217,
        "blue": 137,
        "hue": 61,
        "saturation": 51,
        "lightness": 69
    }, {
        "hex": "#D0D26F",
        "rgb": "rgb(208, 210, 111)",
        "hsl": "hsl(61, 52%, 63%)",
        "red": 208,
        "green": 210,
        "blue": 111,
        "hue": 61,
        "saturation": 52,
        "lightness": 63
    }, {
        "hex": "#D0D167",
        "rgb": "rgb(208, 209, 103)",
        "hsl": "hsl(61, 54%, 61%)",
        "red": 208,
        "green": 209,
        "blue": 103,
        "hue": 61,
        "saturation": 54,
        "lightness": 61
    }, {
        "hex": "#F0F1BC",
        "rgb": "rgb(240, 241, 188)",
        "hsl": "hsl(61, 65%, 84%)",
        "red": 240,
        "green": 241,
        "blue": 188,
        "hue": 61,
        "saturation": 65,
        "lightness": 84
    }, {
        "hex": "#F6F7BD",
        "rgb": "rgb(246, 247, 189)",
        "hsl": "hsl(61, 78%, 85%)",
        "red": 246,
        "green": 247,
        "blue": 189,
        "hue": 61,
        "saturation": 78,
        "lightness": 85
    }, {
        "hex": "#F9FAD2",
        "rgb": "rgb(249, 250, 210)",
        "hsl": "hsl(61, 80%, 90%)",
        "red": 249,
        "green": 250,
        "blue": 210,
        "hue": 61,
        "saturation": 80,
        "lightness": 90
    }, {
        "hex": "#F9FAD2",
        "rgb": "rgb(249, 250, 210)",
        "hsl": "hsl(61, 80%, 90%)",
        "red": 249,
        "green": 250,
        "blue": 210,
        "hue": 61,
        "saturation": 80,
        "lightness": 90
    }, {
        "hex": "#FEFFD4",
        "rgb": "rgb(254, 255, 212)",
        "hsl": "hsl(61, 100%, 92%)",
        "red": 254,
        "green": 255,
        "blue": 212,
        "hue": 61,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#FEFFD6",
        "rgb": "rgb(254, 255, 214)",
        "hsl": "hsl(61, 100%, 92%)",
        "red": 254,
        "green": 255,
        "blue": 214,
        "hue": 61,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#939473",
        "rgb": "rgb(147, 148, 115)",
        "hsl": "hsl(62, 13%, 52%)",
        "red": 147,
        "green": 148,
        "blue": 115,
        "hue": 62,
        "saturation": 13,
        "lightness": 52
    }, {
        "hex": "#A2A384",
        "rgb": "rgb(162, 163, 132)",
        "hsl": "hsl(62, 14%, 58%)",
        "red": 162,
        "green": 163,
        "blue": 132,
        "hue": 62,
        "saturation": 14,
        "lightness": 58
    }, {
        "hex": "#D8D9C0",
        "rgb": "rgb(216, 217, 192)",
        "hsl": "hsl(62, 25%, 80%)",
        "red": 216,
        "green": 217,
        "blue": 192,
        "hue": 62,
        "saturation": 25,
        "lightness": 80
    }, {
        "hex": "#DEDFC5",
        "rgb": "rgb(222, 223, 197)",
        "hsl": "hsl(62, 29%, 82%)",
        "red": 222,
        "green": 223,
        "blue": 197,
        "hue": 62,
        "saturation": 29,
        "lightness": 82
    }, {
        "hex": "#E5E6C9",
        "rgb": "rgb(229, 230, 201)",
        "hsl": "hsl(62, 37%, 85%)",
        "red": 229,
        "green": 230,
        "blue": 201,
        "hue": 62,
        "saturation": 37,
        "lightness": 85
    }, {
        "hex": "#ECEDD5",
        "rgb": "rgb(236, 237, 213)",
        "hsl": "hsl(62, 40%, 88%)",
        "red": 236,
        "green": 237,
        "blue": 213,
        "hue": 62,
        "saturation": 40,
        "lightness": 88
    }, {
        "hex": "#C4C776",
        "rgb": "rgb(196, 199, 118)",
        "hsl": "hsl(62, 42%, 62%)",
        "red": 196,
        "green": 199,
        "blue": 118,
        "hue": 62,
        "saturation": 42,
        "lightness": 62
    }, {
        "hex": "#EFF0D5",
        "rgb": "rgb(239, 240, 213)",
        "hsl": "hsl(62, 47%, 89%)",
        "red": 239,
        "green": 240,
        "blue": 213,
        "hue": 62,
        "saturation": 47,
        "lightness": 89
    }, {
        "hex": "#CDD071",
        "rgb": "rgb(205, 208, 113)",
        "hsl": "hsl(62, 50%, 63%)",
        "red": 205,
        "green": 208,
        "blue": 113,
        "hue": 62,
        "saturation": 50,
        "lightness": 63
    }, {
        "hex": "#E1E3AC",
        "rgb": "rgb(225, 227, 172)",
        "hsl": "hsl(62, 50%, 78%)",
        "red": 225,
        "green": 227,
        "blue": 172,
        "hue": 62,
        "saturation": 50,
        "lightness": 78
    }, {
        "hex": "#D5D87D",
        "rgb": "rgb(213, 216, 125)",
        "hsl": "hsl(62, 54%, 67%)",
        "red": 213,
        "green": 216,
        "blue": 125,
        "hue": 62,
        "saturation": 54,
        "lightness": 67
    }, {
        "hex": "#F1F2CE",
        "rgb": "rgb(241, 242, 206)",
        "hsl": "hsl(62, 58%, 88%)",
        "red": 241,
        "green": 242,
        "blue": 206,
        "hue": 62,
        "saturation": 58,
        "lightness": 88
    }, {
        "hex": "#C8CD3B",
        "rgb": "rgb(200, 205, 59)",
        "hsl": "hsl(62, 59%, 52%)",
        "red": 200,
        "green": 205,
        "blue": 59,
        "hue": 62,
        "saturation": 59,
        "lightness": 52
    }, {
        "hex": "#909320",
        "rgb": "rgb(144, 147, 32)",
        "hsl": "hsl(62, 64%, 35%)",
        "red": 144,
        "green": 147,
        "blue": 32,
        "hue": 62,
        "saturation": 64,
        "lightness": 35
    }, {
        "hex": "#F9FADC",
        "rgb": "rgb(249, 250, 220)",
        "hsl": "hsl(62, 75%, 92%)",
        "red": 249,
        "green": 250,
        "blue": 220,
        "hue": 62,
        "saturation": 75,
        "lightness": 92
    }, {
        "hex": "#FAFBE3",
        "rgb": "rgb(250, 251, 227)",
        "hsl": "hsl(62, 75%, 94%)",
        "red": 250,
        "green": 251,
        "blue": 227,
        "hue": 62,
        "saturation": 75,
        "lightness": 94
    }, {
        "hex": "#F5F7BD",
        "rgb": "rgb(245, 247, 189)",
        "hsl": "hsl(62, 78%, 85%)",
        "red": 245,
        "green": 247,
        "blue": 189,
        "hue": 62,
        "saturation": 78,
        "lightness": 85
    }, {
        "hex": "#ECF081",
        "rgb": "rgb(236, 240, 129)",
        "hsl": "hsl(62, 79%, 72%)",
        "red": 236,
        "green": 240,
        "blue": 129,
        "hue": 62,
        "saturation": 79,
        "lightness": 72
    }, {
        "hex": "#83870E",
        "rgb": "rgb(131, 135, 14)",
        "hsl": "hsl(62, 81%, 29%)",
        "red": 131,
        "green": 135,
        "blue": 14,
        "hue": 62,
        "saturation": 81,
        "lightness": 29
    }, {
        "hex": "#C8CE13",
        "rgb": "rgb(200, 206, 19)",
        "hsl": "hsl(62, 83%, 44%)",
        "red": 200,
        "green": 206,
        "blue": 19,
        "hue": 62,
        "saturation": 83,
        "lightness": 44
    }, {
        "hex": "#C8CF02",
        "rgb": "rgb(200, 207, 2)",
        "hsl": "hsl(62, 98%, 41%)",
        "red": 200,
        "green": 207,
        "blue": 2,
        "hue": 62,
        "saturation": 98,
        "lightness": 41
    }, {
        "hex": "#B0B19F",
        "rgb": "rgb(176, 177, 159)",
        "hsl": "hsl(63, 10%, 66%)",
        "red": 176,
        "green": 177,
        "blue": 159,
        "hue": 63,
        "saturation": 10,
        "lightness": 66
    }, {
        "hex": "#B2B39F",
        "rgb": "rgb(178, 179, 159)",
        "hsl": "hsl(63, 12%, 66%)",
        "red": 178,
        "green": 179,
        "blue": 159,
        "hue": 63,
        "saturation": 12,
        "lightness": 66
    }, {
        "hex": "#C8C9B5",
        "rgb": "rgb(200, 201, 181)",
        "hsl": "hsl(63, 16%, 75%)",
        "red": 200,
        "green": 201,
        "blue": 181,
        "hue": 63,
        "saturation": 16,
        "lightness": 75
    }, {
        "hex": "#D7D8C5",
        "rgb": "rgb(215, 216, 197)",
        "hsl": "hsl(63, 20%, 81%)",
        "red": 215,
        "green": 216,
        "blue": 197,
        "hue": 63,
        "saturation": 20,
        "lightness": 81
    }, {
        "hex": "#696B46",
        "rgb": "rgb(105, 107, 70)",
        "hsl": "hsl(63, 21%, 35%)",
        "red": 105,
        "green": 107,
        "blue": 70,
        "hue": 63,
        "saturation": 21,
        "lightness": 35
    }, {
        "hex": "#BBBD91",
        "rgb": "rgb(187, 189, 145)",
        "hsl": "hsl(63, 25%, 65%)",
        "red": 187,
        "green": 189,
        "blue": 145,
        "hue": 63,
        "saturation": 25,
        "lightness": 65
    }, {
        "hex": "#BDBF90",
        "rgb": "rgb(189, 191, 144)",
        "hsl": "hsl(63, 27%, 66%)",
        "red": 189,
        "green": 191,
        "blue": 144,
        "hue": 63,
        "saturation": 27,
        "lightness": 66
    }, {
        "hex": "#D3D5B0",
        "rgb": "rgb(211, 213, 176)",
        "hsl": "hsl(63, 31%, 76%)",
        "red": 211,
        "green": 213,
        "blue": 176,
        "hue": 63,
        "saturation": 31,
        "lightness": 76
    }, {
        "hex": "#A6AA56",
        "rgb": "rgb(166, 170, 86)",
        "hsl": "hsl(63, 33%, 50%)",
        "red": 166,
        "green": 170,
        "blue": 86,
        "hue": 63,
        "saturation": 33,
        "lightness": 50
    }, {
        "hex": "#DBDDB4",
        "rgb": "rgb(219, 221, 180)",
        "hsl": "hsl(63, 38%, 79%)",
        "red": 219,
        "green": 221,
        "blue": 180,
        "hue": 63,
        "saturation": 38,
        "lightness": 79
    }, {
        "hex": "#E4E6C3",
        "rgb": "rgb(228, 230, 195)",
        "hsl": "hsl(63, 41%, 83%)",
        "red": 228,
        "green": 230,
        "blue": 195,
        "hue": 63,
        "saturation": 41,
        "lightness": 83
    }, {
        "hex": "#DBDEA6",
        "rgb": "rgb(219, 222, 166)",
        "hsl": "hsl(63, 46%, 76%)",
        "red": 219,
        "green": 222,
        "blue": 166,
        "hue": 63,
        "saturation": 46,
        "lightness": 76
    }, {
        "hex": "#E7E9C4",
        "rgb": "rgb(231, 233, 196)",
        "hsl": "hsl(63, 46%, 84%)",
        "red": 231,
        "green": 233,
        "blue": 196,
        "hue": 63,
        "saturation": 46,
        "lightness": 84
    }, {
        "hex": "#B4B943",
        "rgb": "rgb(180, 185, 67)",
        "hsl": "hsl(63, 47%, 49%)",
        "red": 180,
        "green": 185,
        "blue": 67,
        "hue": 63,
        "saturation": 47,
        "lightness": 49
    }, {
        "hex": "#E9EBBF",
        "rgb": "rgb(233, 235, 191)",
        "hsl": "hsl(63, 52%, 84%)",
        "red": 233,
        "green": 235,
        "blue": 191,
        "hue": 63,
        "saturation": 52,
        "lightness": 84
    }, {
        "hex": "#F4F5DE",
        "rgb": "rgb(244, 245, 222)",
        "hsl": "hsl(63, 53%, 92%)",
        "red": 244,
        "green": 245,
        "blue": 222,
        "hue": 63,
        "saturation": 53,
        "lightness": 92
    }, {
        "hex": "#8B911A",
        "rgb": "rgb(139, 145, 26)",
        "hsl": "hsl(63, 70%, 34%)",
        "red": 139,
        "green": 145,
        "blue": 26,
        "hue": 63,
        "saturation": 70,
        "lightness": 34
    }, {
        "hex": "#E8ED76",
        "rgb": "rgb(232, 237, 118)",
        "hsl": "hsl(63, 77%, 70%)",
        "red": 232,
        "green": 237,
        "blue": 118,
        "hue": 63,
        "saturation": 77,
        "lightness": 70
    }, {
        "hex": "#FCFDEB",
        "rgb": "rgb(252, 253, 235)",
        "hsl": "hsl(63, 82%, 96%)",
        "red": 252,
        "green": 253,
        "blue": 235,
        "hue": 63,
        "saturation": 82,
        "lightness": 96
    }, {
        "hex": "#FAFCD3",
        "rgb": "rgb(250, 252, 211)",
        "hsl": "hsl(63, 87%, 91%)",
        "red": 250,
        "green": 252,
        "blue": 211,
        "hue": 63,
        "saturation": 87,
        "lightness": 91
    }, {
        "hex": "#FDFFD9",
        "rgb": "rgb(253, 255, 217)",
        "hsl": "hsl(63, 100%, 93%)",
        "red": 253,
        "green": 255,
        "blue": 217,
        "hue": 63,
        "saturation": 100,
        "lightness": 93
    }, {
        "hex": "#FDFFD9",
        "rgb": "rgb(253, 255, 217)",
        "hsl": "hsl(63, 100%, 93%)",
        "red": 253,
        "green": 255,
        "blue": 217,
        "hue": 63,
        "saturation": 100,
        "lightness": 93
    }, {
        "hex": "#BCBDAC",
        "rgb": "rgb(188, 189, 172)",
        "hsl": "hsl(64, 11%, 71%)",
        "red": 188,
        "green": 189,
        "blue": 172,
        "hue": 64,
        "saturation": 11,
        "lightness": 71
    }, {
        "hex": "#A8AB7B",
        "rgb": "rgb(168, 171, 123)",
        "hsl": "hsl(64, 22%, 58%)",
        "red": 168,
        "green": 171,
        "blue": 123,
        "hue": 64,
        "saturation": 22,
        "lightness": 58
    }, {
        "hex": "#C6C99D",
        "rgb": "rgb(198, 201, 157)",
        "hsl": "hsl(64, 29%, 70%)",
        "red": 198,
        "green": 201,
        "blue": 157,
        "hue": 64,
        "saturation": 29,
        "lightness": 70
    }, {
        "hex": "#B4B969",
        "rgb": "rgb(180, 185, 105)",
        "hsl": "hsl(64, 36%, 57%)",
        "red": 180,
        "green": 185,
        "blue": 105,
        "hue": 64,
        "saturation": 36,
        "lightness": 57
    }, {
        "hex": "#E4E6C9",
        "rgb": "rgb(228, 230, 201)",
        "hsl": "hsl(64, 37%, 85%)",
        "red": 228,
        "green": 230,
        "blue": 201,
        "hue": 64,
        "saturation": 37,
        "lightness": 85
    }, {
        "hex": "#A3A948",
        "rgb": "rgb(163, 169, 72)",
        "hsl": "hsl(64, 40%, 47%)",
        "red": 163,
        "green": 169,
        "blue": 72,
        "hue": 64,
        "saturation": 40,
        "lightness": 47
    }, {
        "hex": "#F3F4E5",
        "rgb": "rgb(243, 244, 229)",
        "hsl": "hsl(64, 41%, 93%)",
        "red": 243,
        "green": 244,
        "blue": 229,
        "hue": 64,
        "saturation": 41,
        "lightness": 93
    }, {
        "hex": "#B7BE5F",
        "rgb": "rgb(183, 190, 95)",
        "hsl": "hsl(64, 42%, 56%)",
        "red": 183,
        "green": 190,
        "blue": 95,
        "hue": 64,
        "saturation": 42,
        "lightness": 56
    }, {
        "hex": "#DEE1B6",
        "rgb": "rgb(222, 225, 182)",
        "hsl": "hsl(64, 42%, 80%)",
        "red": 222,
        "green": 225,
        "blue": 182,
        "hue": 64,
        "saturation": 42,
        "lightness": 80
    }, {
        "hex": "#A6AD3C",
        "rgb": "rgb(166, 173, 60)",
        "hsl": "hsl(64, 48%, 46%)",
        "red": 166,
        "green": 173,
        "blue": 60,
        "hue": 64,
        "saturation": 48,
        "lightness": 46
    }, {
        "hex": "#DDE29F",
        "rgb": "rgb(221, 226, 159)",
        "hsl": "hsl(64, 54%, 75%)",
        "red": 221,
        "green": 226,
        "blue": 159,
        "hue": 64,
        "saturation": 54,
        "lightness": 75
    }, {
        "hex": "#D8DE7D",
        "rgb": "rgb(216, 222, 125)",
        "hsl": "hsl(64, 60%, 68%)",
        "red": 216,
        "green": 222,
        "blue": 125,
        "hue": 64,
        "saturation": 60,
        "lightness": 68
    }, {
        "hex": "#E7EBB0",
        "rgb": "rgb(231, 235, 176)",
        "hsl": "hsl(64, 60%, 81%)",
        "red": 231,
        "green": 235,
        "blue": 176,
        "hue": 64,
        "saturation": 60,
        "lightness": 81
    }, {
        "hex": "#E5EAA4",
        "rgb": "rgb(229, 234, 164)",
        "hsl": "hsl(64, 62%, 78%)",
        "red": 229,
        "green": 234,
        "blue": 164,
        "hue": 64,
        "saturation": 62,
        "lightness": 78
    }, {
        "hex": "#CCD91A",
        "rgb": "rgb(204, 217, 26)",
        "hsl": "hsl(64, 79%, 48%)",
        "red": 204,
        "green": 217,
        "blue": 26,
        "hue": 64,
        "saturation": 79,
        "lightness": 48
    }, {
        "hex": "#EAF27E",
        "rgb": "rgb(234, 242, 126)",
        "hsl": "hsl(64, 82%, 72%)",
        "red": 234,
        "green": 242,
        "blue": 126,
        "hue": 64,
        "saturation": 82,
        "lightness": 72
    }, {
        "hex": "#E5F04C",
        "rgb": "rgb(229, 240, 76)",
        "hsl": "hsl(64, 85%, 62%)",
        "red": 229,
        "green": 240,
        "blue": 76,
        "hue": 64,
        "saturation": 85,
        "lightness": 62
    }, {
        "hex": "#EBF74F",
        "rgb": "rgb(235, 247, 79)",
        "hsl": "hsl(64, 91%, 64%)",
        "red": 235,
        "green": 247,
        "blue": 79,
        "hue": 64,
        "saturation": 91,
        "lightness": 64
    }, {
        "hex": "#F8FCC1",
        "rgb": "rgb(248, 252, 193)",
        "hsl": "hsl(64, 91%, 87%)",
        "red": 248,
        "green": 252,
        "blue": 193,
        "hue": 64,
        "saturation": 91,
        "lightness": 87
    }, {
        "hex": "#C4D004",
        "rgb": "rgb(196, 208, 4)",
        "hsl": "hsl(64, 96%, 42%)",
        "red": 196,
        "green": 208,
        "blue": 4,
        "hue": 64,
        "saturation": 96,
        "lightness": 42
    }, {
        "hex": "#6A6B5F",
        "rgb": "rgb(106, 107, 95)",
        "hsl": "hsl(65, 6%, 40%)",
        "red": 106,
        "green": 107,
        "blue": 95,
        "hue": 65,
        "saturation": 6,
        "lightness": 40
    }, {
        "hex": "#898B75",
        "rgb": "rgb(137, 139, 117)",
        "hsl": "hsl(65, 9%, 50%)",
        "red": 137,
        "green": 139,
        "blue": 117,
        "hue": 65,
        "saturation": 9,
        "lightness": 50
    }, {
        "hex": "#9D9F89",
        "rgb": "rgb(157, 159, 137)",
        "hsl": "hsl(65, 10%, 58%)",
        "red": 157,
        "green": 159,
        "blue": 137,
        "hue": 65,
        "saturation": 10,
        "lightness": 58
    }, {
        "hex": "#AEB18E",
        "rgb": "rgb(174, 177, 142)",
        "hsl": "hsl(65, 18%, 63%)",
        "red": 174,
        "green": 177,
        "blue": 142,
        "hue": 65,
        "saturation": 18,
        "lightness": 63
    }, {
        "hex": "#A8AB84",
        "rgb": "rgb(168, 171, 132)",
        "hsl": "hsl(65, 19%, 59%)",
        "red": 168,
        "green": 171,
        "blue": 132,
        "hue": 65,
        "saturation": 19,
        "lightness": 59
    }, {
        "hex": "#CED0BA",
        "rgb": "rgb(206, 208, 186)",
        "hsl": "hsl(65, 19%, 77%)",
        "red": 206,
        "green": 208,
        "blue": 186,
        "hue": 65,
        "saturation": 19,
        "lightness": 77
    }, {
        "hex": "#CDCFB7",
        "rgb": "rgb(205, 207, 183)",
        "hsl": "hsl(65, 20%, 76%)",
        "red": 205,
        "green": 207,
        "blue": 183,
        "hue": 65,
        "saturation": 20,
        "lightness": 76
    }, {
        "hex": "#D2D5AF",
        "rgb": "rgb(210, 213, 175)",
        "hsl": "hsl(65, 31%, 76%)",
        "red": 210,
        "green": 213,
        "blue": 175,
        "hue": 65,
        "saturation": 31,
        "lightness": 76
    }, {
        "hex": "#BEC47E",
        "rgb": "rgb(190, 196, 126)",
        "hsl": "hsl(65, 37%, 63%)",
        "red": 190,
        "green": 196,
        "blue": 126,
        "hue": 65,
        "saturation": 37,
        "lightness": 63
    }, {
        "hex": "#F0F2DC",
        "rgb": "rgb(240, 242, 220)",
        "hsl": "hsl(65, 46%, 91%)",
        "red": 240,
        "green": 242,
        "blue": 220,
        "hue": 65,
        "saturation": 46,
        "lightness": 91
    }, {
        "hex": "#CAD17A",
        "rgb": "rgb(202, 209, 122)",
        "hsl": "hsl(65, 49%, 65%)",
        "red": 202,
        "green": 209,
        "blue": 122,
        "hue": 65,
        "saturation": 49,
        "lightness": 65
    }, {
        "hex": "#D6DD90",
        "rgb": "rgb(214, 221, 144)",
        "hsl": "hsl(65, 53%, 72%)",
        "red": 214,
        "green": 221,
        "blue": 144,
        "hue": 65,
        "saturation": 53,
        "lightness": 72
    }, {
        "hex": "#CDD56E",
        "rgb": "rgb(205, 213, 110)",
        "hsl": "hsl(65, 55%, 63%)",
        "red": 205,
        "green": 213,
        "blue": 110,
        "hue": 65,
        "saturation": 55,
        "lightness": 63
    }, {
        "hex": "#C0CC39",
        "rgb": "rgb(192, 204, 57)",
        "hsl": "hsl(65, 59%, 51%)",
        "red": 192,
        "green": 204,
        "blue": 57,
        "hue": 65,
        "saturation": 59,
        "lightness": 51
    }, {
        "hex": "#8F9924",
        "rgb": "rgb(143, 153, 36)",
        "hsl": "hsl(65, 62%, 37%)",
        "red": 143,
        "green": 153,
        "blue": 36,
        "hue": 65,
        "saturation": 62,
        "lightness": 37
    }, {
        "hex": "#E6EBA9",
        "rgb": "rgb(230, 235, 169)",
        "hsl": "hsl(65, 62%, 79%)",
        "red": 230,
        "green": 235,
        "blue": 169,
        "hue": 65,
        "saturation": 62,
        "lightness": 79
    }, {
        "hex": "#D1DC5A",
        "rgb": "rgb(209, 220, 90)",
        "hsl": "hsl(65, 65%, 61%)",
        "red": 209,
        "green": 220,
        "blue": 90,
        "hue": 65,
        "saturation": 65,
        "lightness": 61
    }, {
        "hex": "#0C0D02",
        "rgb": "rgb(12, 13, 2)",
        "hsl": "hsl(65, 73%, 3%)",
        "red": 12,
        "green": 13,
        "blue": 2,
        "hue": 65,
        "saturation": 73,
        "lightness": 3
    }, {
        "hex": "#FBFFCC",
        "rgb": "rgb(251, 255, 204)",
        "hsl": "hsl(65, 100%, 90%)",
        "red": 251,
        "green": 255,
        "blue": 204,
        "hue": 65,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#FBFFCD",
        "rgb": "rgb(251, 255, 205)",
        "hsl": "hsl(65, 100%, 90%)",
        "red": 251,
        "green": 255,
        "blue": 205,
        "hue": 65,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#FCFFD9",
        "rgb": "rgb(252, 255, 217)",
        "hsl": "hsl(65, 100%, 93%)",
        "red": 252,
        "green": 255,
        "blue": 217,
        "hue": 65,
        "saturation": 100,
        "lightness": 93
    }, {
        "hex": "#9D9E94",
        "rgb": "rgb(157, 158, 148)",
        "hsl": "hsl(66, 5%, 60%)",
        "red": 157,
        "green": 158,
        "blue": 148,
        "hue": 66,
        "saturation": 5,
        "lightness": 60
    }, {
        "hex": "#E2E3D9",
        "rgb": "rgb(226, 227, 217)",
        "hsl": "hsl(66, 15%, 87%)",
        "red": 226,
        "green": 227,
        "blue": 217,
        "hue": 66,
        "saturation": 15,
        "lightness": 87
    }, {
        "hex": "#BCBFA3",
        "rgb": "rgb(188, 191, 163)",
        "hsl": "hsl(66, 18%, 69%)",
        "red": 188,
        "green": 191,
        "blue": 163,
        "hue": 66,
        "saturation": 18,
        "lightness": 69
    }, {
        "hex": "#95A131",
        "rgb": "rgb(149, 161, 49)",
        "hsl": "hsl(66, 53%, 41%)",
        "red": 149,
        "green": 161,
        "blue": 49,
        "hue": 66,
        "saturation": 53,
        "lightness": 41
    }, {
        "hex": "#E0E6AE",
        "rgb": "rgb(224, 230, 174)",
        "hsl": "hsl(66, 53%, 79%)",
        "red": 224,
        "green": 230,
        "blue": 174,
        "hue": 66,
        "saturation": 53,
        "lightness": 79
    }, {
        "hex": "#EBEFC9",
        "rgb": "rgb(235, 239, 201)",
        "hsl": "hsl(66, 54%, 86%)",
        "red": 235,
        "green": 239,
        "blue": 201,
        "hue": 66,
        "saturation": 54,
        "lightness": 86
    }, {
        "hex": "#EFF3CD",
        "rgb": "rgb(239, 243, 205)",
        "hsl": "hsl(66, 61%, 88%)",
        "red": 239,
        "green": 243,
        "blue": 205,
        "hue": 66,
        "saturation": 61,
        "lightness": 88
    }, {
        "hex": "#D4E067",
        "rgb": "rgb(212, 224, 103)",
        "hsl": "hsl(66, 66%, 64%)",
        "red": 212,
        "green": 224,
        "blue": 103,
        "hue": 66,
        "saturation": 66,
        "lightness": 64
    }, {
        "hex": "#C4D428",
        "rgb": "rgb(196, 212, 40)",
        "hsl": "hsl(66, 68%, 49%)",
        "red": 196,
        "green": 212,
        "blue": 40,
        "hue": 66,
        "saturation": 68,
        "lightness": 49
    }, {
        "hex": "#D8E472",
        "rgb": "rgb(216, 228, 114)",
        "hsl": "hsl(66, 68%, 67%)",
        "red": 216,
        "green": 228,
        "blue": 114,
        "hue": 66,
        "saturation": 68,
        "lightness": 67
    }, {
        "hex": "#F0F6B9",
        "rgb": "rgb(240, 246, 185)",
        "hsl": "hsl(66, 77%, 85%)",
        "red": 240,
        "green": 246,
        "blue": 185,
        "hue": 66,
        "saturation": 77,
        "lightness": 85
    }, {
        "hex": "#849112",
        "rgb": "rgb(132, 145, 18)",
        "hsl": "hsl(66, 78%, 32%)",
        "red": 132,
        "green": 145,
        "blue": 18,
        "hue": 66,
        "saturation": 78,
        "lightness": 32
    }, {
        "hex": "#DCEB5B",
        "rgb": "rgb(220, 235, 91)",
        "hsl": "hsl(66, 78%, 64%)",
        "red": 220,
        "green": 235,
        "blue": 91,
        "hue": 66,
        "saturation": 78,
        "lightness": 64
    }, {
        "hex": "#8D9C09",
        "rgb": "rgb(141, 156, 9)",
        "hsl": "hsl(66, 89%, 32%)",
        "red": 141,
        "green": 156,
        "blue": 9,
        "hue": 66,
        "saturation": 89,
        "lightness": 32
    }, {
        "hex": "#DAF204",
        "rgb": "rgb(218, 242, 4)",
        "hsl": "hsl(66, 97%, 48%)",
        "red": 218,
        "green": 242,
        "blue": 4,
        "hue": 66,
        "saturation": 97,
        "lightness": 48
    }, {
        "hex": "#929867",
        "rgb": "rgb(146, 152, 103)",
        "hsl": "hsl(67, 19%, 50%)",
        "red": 146,
        "green": 152,
        "blue": 103,
        "hue": 67,
        "saturation": 19,
        "lightness": 50
    }, {
        "hex": "#7B8055",
        "rgb": "rgb(123, 128, 85)",
        "hsl": "hsl(67, 20%, 42%)",
        "red": 123,
        "green": 128,
        "blue": 85,
        "hue": 67,
        "saturation": 20,
        "lightness": 42
    }, {
        "hex": "#A2AB5E",
        "rgb": "rgb(162, 171, 94)",
        "hsl": "hsl(67, 31%, 52%)",
        "red": 162,
        "green": 171,
        "blue": 94,
        "hue": 67,
        "saturation": 31,
        "lightness": 52
    }, {
        "hex": "#CAD197",
        "rgb": "rgb(202, 209, 151)",
        "hsl": "hsl(67, 39%, 71%)",
        "red": 202,
        "green": 209,
        "blue": 151,
        "hue": 67,
        "saturation": 39,
        "lightness": 71
    }, {
        "hex": "#9DAB34",
        "rgb": "rgb(157, 171, 52)",
        "hsl": "hsl(67, 53%, 44%)",
        "red": 157,
        "green": 171,
        "blue": 52,
        "hue": 67,
        "saturation": 53,
        "lightness": 44
    }, {
        "hex": "#C0D23E",
        "rgb": "rgb(192, 210, 62)",
        "hsl": "hsl(67, 62%, 53%)",
        "red": 192,
        "green": 210,
        "blue": 62,
        "hue": 67,
        "saturation": 62,
        "lightness": 53
    }, {
        "hex": "#DAE681",
        "rgb": "rgb(218, 230, 129)",
        "hsl": "hsl(67, 67%, 70%)",
        "red": 218,
        "green": 230,
        "blue": 129,
        "hue": 67,
        "saturation": 67,
        "lightness": 70
    }, {
        "hex": "#808F12",
        "rgb": "rgb(128, 143, 18)",
        "hsl": "hsl(67, 78%, 32%)",
        "red": 128,
        "green": 143,
        "blue": 18,
        "hue": 67,
        "saturation": 78,
        "lightness": 32
    }, {
        "hex": "#B7CC18",
        "rgb": "rgb(183, 204, 24)",
        "hsl": "hsl(67, 79%, 45%)",
        "red": 183,
        "green": 204,
        "blue": 24,
        "hue": 67,
        "saturation": 79,
        "lightness": 45
    }, {
        "hex": "#D9EB52",
        "rgb": "rgb(217, 235, 82)",
        "hsl": "hsl(67, 79%, 62%)",
        "red": 217,
        "green": 235,
        "blue": 82,
        "hue": 67,
        "saturation": 79,
        "lightness": 62
    }, {
        "hex": "#8A9B0F",
        "rgb": "rgb(138, 155, 15)",
        "hsl": "hsl(67, 82%, 33%)",
        "red": 138,
        "green": 155,
        "blue": 15,
        "hue": 67,
        "saturation": 82,
        "lightness": 33
    }, {
        "hex": "#EDF79E",
        "rgb": "rgb(237, 247, 158)",
        "hsl": "hsl(67, 85%, 79%)",
        "red": 237,
        "green": 247,
        "blue": 158,
        "hue": 67,
        "saturation": 85,
        "lightness": 79
    }, {
        "hex": "#A3B808",
        "rgb": "rgb(163, 184, 8)",
        "hsl": "hsl(67, 92%, 38%)",
        "red": 163,
        "green": 184,
        "blue": 8,
        "hue": 67,
        "saturation": 92,
        "lightness": 38
    }, {
        "hex": "#F4FCB8",
        "rgb": "rgb(244, 252, 184)",
        "hsl": "hsl(67, 92%, 85%)",
        "red": 244,
        "green": 252,
        "blue": 184,
        "hue": 67,
        "saturation": 92,
        "lightness": 85
    }, {
        "hex": "#FBFEE5",
        "rgb": "rgb(251, 254, 229)",
        "hsl": "hsl(67, 93%, 95%)",
        "red": 251,
        "green": 254,
        "blue": 229,
        "hue": 67,
        "saturation": 93,
        "lightness": 95
    }, {
        "hex": "#F6FFB3",
        "rgb": "rgb(246, 255, 179)",
        "hsl": "hsl(67, 100%, 85%)",
        "red": 246,
        "green": 255,
        "blue": 179,
        "hue": 67,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#9BA657",
        "rgb": "rgb(155, 166, 87)",
        "hsl": "hsl(68, 31%, 50%)",
        "red": 155,
        "green": 166,
        "blue": 87,
        "hue": 68,
        "saturation": 31,
        "lightness": 50
    }, {
        "hex": "#C2C995",
        "rgb": "rgb(194, 201, 149)",
        "hsl": "hsl(68, 32%, 69%)",
        "red": 194,
        "green": 201,
        "blue": 149,
        "hue": 68,
        "saturation": 32,
        "lightness": 69
    }, {
        "hex": "#0C0D05",
        "rgb": "rgb(12, 13, 5)",
        "hsl": "hsl(68, 44%, 4%)",
        "red": 12,
        "green": 13,
        "blue": 5,
        "hue": 68,
        "saturation": 44,
        "lightness": 4
    }, {
        "hex": "#E5EBBC",
        "rgb": "rgb(229, 235, 188)",
        "hsl": "hsl(68, 54%, 83%)",
        "red": 229,
        "green": 235,
        "blue": 188,
        "hue": 68,
        "saturation": 54,
        "lightness": 83
    }, {
        "hex": "#93A42A",
        "rgb": "rgb(147, 164, 42)",
        "hsl": "hsl(68, 59%, 40%)",
        "red": 147,
        "green": 164,
        "blue": 42,
        "hue": 68,
        "saturation": 59,
        "lightness": 40
    }, {
        "hex": "#B3C631",
        "rgb": "rgb(179, 198, 49)",
        "hsl": "hsl(68, 60%, 48%)",
        "red": 179,
        "green": 198,
        "blue": 49,
        "hue": 68,
        "saturation": 60,
        "lightness": 48
    }, {
        "hex": "#EDF3C5",
        "rgb": "rgb(237, 243, 197)",
        "hsl": "hsl(68, 66%, 86%)",
        "red": 237,
        "green": 243,
        "blue": 197,
        "hue": 68,
        "saturation": 66,
        "lightness": 86
    }, {
        "hex": "#F1F6CE",
        "rgb": "rgb(241, 246, 206)",
        "hsl": "hsl(68, 69%, 89%)",
        "red": 241,
        "green": 246,
        "blue": 206,
        "hue": 68,
        "saturation": 69,
        "lightness": 89
    }, {
        "hex": "#E3E5D7",
        "rgb": "rgb(227, 229, 215)",
        "hsl": "hsl(69, 21%, 87%)",
        "red": 227,
        "green": 229,
        "blue": 215,
        "hue": 69,
        "saturation": 21,
        "lightness": 87
    }, {
        "hex": "#CBCFB4",
        "rgb": "rgb(203, 207, 180)",
        "hsl": "hsl(69, 22%, 76%)",
        "red": 203,
        "green": 207,
        "blue": 180,
        "hue": 69,
        "saturation": 22,
        "lightness": 76
    }, {
        "hex": "#C6CCA5",
        "rgb": "rgb(198, 204, 165)",
        "hsl": "hsl(69, 28%, 72%)",
        "red": 198,
        "green": 204,
        "blue": 165,
        "hue": 69,
        "saturation": 28,
        "lightness": 72
    }, {
        "hex": "#C8D197",
        "rgb": "rgb(200, 209, 151)",
        "hsl": "hsl(69, 39%, 71%)",
        "red": 200,
        "green": 209,
        "blue": 151,
        "hue": 69,
        "saturation": 39,
        "lightness": 71
    }, {
        "hex": "#B1BF63",
        "rgb": "rgb(177, 191, 99)",
        "hsl": "hsl(69, 42%, 57%)",
        "red": 177,
        "green": 191,
        "blue": 99,
        "hue": 69,
        "saturation": 42,
        "lightness": 57
    }, {
        "hex": "#A0B046",
        "rgb": "rgb(160, 176, 70)",
        "hsl": "hsl(69, 43%, 48%)",
        "red": 160,
        "green": 176,
        "blue": 70,
        "hue": 69,
        "saturation": 43,
        "lightness": 48
    }, {
        "hex": "#B3C262",
        "rgb": "rgb(179, 194, 98)",
        "hsl": "hsl(69, 44%, 57%)",
        "red": 179,
        "green": 194,
        "blue": 98,
        "hue": 69,
        "saturation": 44,
        "lightness": 57
    }, {
        "hex": "#9DAD42",
        "rgb": "rgb(157, 173, 66)",
        "hsl": "hsl(69, 45%, 47%)",
        "red": 157,
        "green": 173,
        "blue": 66,
        "hue": 69,
        "saturation": 45,
        "lightness": 47
    }, {
        "hex": "#DFE9A8",
        "rgb": "rgb(223, 233, 168)",
        "hsl": "hsl(69, 60%, 79%)",
        "red": 223,
        "green": 233,
        "blue": 168,
        "hue": 69,
        "saturation": 60,
        "lightness": 79
    }, {
        "hex": "#DAE98A",
        "rgb": "rgb(218, 233, 138)",
        "hsl": "hsl(69, 68%, 73%)",
        "red": 218,
        "green": 233,
        "blue": 138,
        "hue": 69,
        "saturation": 68,
        "lightness": 73
    }, {
        "hex": "#E6F0AF",
        "rgb": "rgb(230, 240, 175)",
        "hsl": "hsl(69, 68%, 81%)",
        "red": 230,
        "green": 240,
        "blue": 175,
        "hue": 69,
        "saturation": 68,
        "lightness": 81
    }, {
        "hex": "#F1F7CD",
        "rgb": "rgb(241, 247, 205)",
        "hsl": "hsl(69, 72%, 89%)",
        "red": 241,
        "green": 247,
        "blue": 205,
        "hue": 69,
        "saturation": 72,
        "lightness": 89
    }, {
        "hex": "#D1E751",
        "rgb": "rgb(209, 231, 81)",
        "hsl": "hsl(69, 76%, 61%)",
        "red": 209,
        "green": 231,
        "blue": 81,
        "hue": 69,
        "saturation": 76,
        "lightness": 61
    }, {
        "hex": "#F4FAD2",
        "rgb": "rgb(244, 250, 210)",
        "hsl": "hsl(69, 80%, 90%)",
        "red": 244,
        "green": 250,
        "blue": 210,
        "hue": 69,
        "saturation": 80,
        "lightness": 90
    }, {
        "hex": "#FAFDEA",
        "rgb": "rgb(250, 253, 234)",
        "hsl": "hsl(69, 83%, 95%)",
        "red": 250,
        "green": 253,
        "blue": 234,
        "hue": 69,
        "saturation": 83,
        "lightness": 95
    }, {
        "hex": "#EEFAA8",
        "rgb": "rgb(238, 250, 168)",
        "hsl": "hsl(69, 89%, 82%)",
        "red": 238,
        "green": 250,
        "blue": 168,
        "hue": 69,
        "saturation": 89,
        "lightness": 82
    }, {
        "hex": "#DBF73B",
        "rgb": "rgb(219, 247, 59)",
        "hsl": "hsl(69, 92%, 60%)",
        "red": 219,
        "green": 247,
        "blue": 59,
        "hue": 69,
        "saturation": 92,
        "lightness": 60
    }, {
        "hex": "#E8FF65",
        "rgb": "rgb(232, 255, 101)",
        "hsl": "hsl(69, 100%, 70%)",
        "red": 232,
        "green": 255,
        "blue": 101,
        "hue": 69,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#FBFFE3",
        "rgb": "rgb(251, 255, 227)",
        "hsl": "hsl(69, 100%, 95%)",
        "red": 251,
        "green": 255,
        "blue": 227,
        "hue": 69,
        "saturation": 100,
        "lightness": 95
    }, {
        "hex": "#A9AD94",
        "rgb": "rgb(169, 173, 148)",
        "hsl": "hsl(70, 13%, 63%)",
        "red": 169,
        "green": 173,
        "blue": 148,
        "hue": 70,
        "saturation": 13,
        "lightness": 63
    }, {
        "hex": "#AEB395",
        "rgb": "rgb(174, 179, 149)",
        "hsl": "hsl(70, 16%, 64%)",
        "red": 174,
        "green": 179,
        "blue": 149,
        "hue": 70,
        "saturation": 16,
        "lightness": 64
    }, {
        "hex": "#A4AB80",
        "rgb": "rgb(164, 171, 128)",
        "hsl": "hsl(70, 20%, 59%)",
        "red": 164,
        "green": 171,
        "blue": 128,
        "hue": 70,
        "saturation": 20,
        "lightness": 59
    }, {
        "hex": "#C5CBA6",
        "rgb": "rgb(197, 203, 166)",
        "hsl": "hsl(70, 26%, 72%)",
        "red": 197,
        "green": 203,
        "blue": 166,
        "hue": 70,
        "saturation": 26,
        "lightness": 72
    }, {
        "hex": "#E0E4CC",
        "rgb": "rgb(224, 228, 204)",
        "hsl": "hsl(70, 31%, 85%)",
        "red": 224,
        "green": 228,
        "blue": 204,
        "hue": 70,
        "saturation": 31,
        "lightness": 85
    }, {
        "hex": "#B7C27E",
        "rgb": "rgb(183, 194, 126)",
        "hsl": "hsl(70, 36%, 63%)",
        "red": 183,
        "green": 194,
        "blue": 126,
        "hue": 70,
        "saturation": 36,
        "lightness": 63
    }, {
        "hex": "#BECB7C",
        "rgb": "rgb(190, 203, 124)",
        "hsl": "hsl(70, 43%, 64%)",
        "red": 190,
        "green": 203,
        "blue": 124,
        "hue": 70,
        "saturation": 43,
        "lightness": 64
    }, {
        "hex": "#CED89D",
        "rgb": "rgb(206, 216, 157)",
        "hsl": "hsl(70, 43%, 73%)",
        "red": 206,
        "green": 216,
        "blue": 157,
        "hue": 70,
        "saturation": 43,
        "lightness": 73
    }, {
        "hex": "#E1EAB5",
        "rgb": "rgb(225, 234, 181)",
        "hsl": "hsl(70, 56%, 81%)",
        "red": 225,
        "green": 234,
        "blue": 181,
        "hue": 70,
        "saturation": 56,
        "lightness": 81
    }, {
        "hex": "#A8C030",
        "rgb": "rgb(168, 192, 48)",
        "hsl": "hsl(70, 60%, 47%)",
        "red": 168,
        "green": 192,
        "blue": 48,
        "hue": 70,
        "saturation": 60,
        "lightness": 47
    }, {
        "hex": "#D6E68A",
        "rgb": "rgb(214, 230, 138)",
        "hsl": "hsl(70, 65%, 72%)",
        "red": 214,
        "green": 230,
        "blue": 138,
        "hue": 70,
        "saturation": 65,
        "lightness": 72
    }, {
        "hex": "#9BB61B",
        "rgb": "rgb(155, 182, 27)",
        "hsl": "hsl(70, 74%, 41%)",
        "red": 155,
        "green": 182,
        "blue": 27,
        "hue": 70,
        "saturation": 74,
        "lightness": 41
    }, {
        "hex": "#CDE54E",
        "rgb": "rgb(205, 229, 78)",
        "hsl": "hsl(70, 74%, 60%)",
        "red": 205,
        "green": 229,
        "blue": 78,
        "hue": 70,
        "saturation": 74,
        "lightness": 60
    }, {
        "hex": "#8CA315",
        "rgb": "rgb(140, 163, 21)",
        "hsl": "hsl(70, 77%, 36%)",
        "red": 140,
        "green": 163,
        "blue": 21,
        "hue": 70,
        "saturation": 77,
        "lightness": 36
    }, {
        "hex": "#ECF6BB",
        "rgb": "rgb(236, 246, 187)",
        "hsl": "hsl(70, 77%, 85%)",
        "red": 236,
        "green": 246,
        "blue": 187,
        "hue": 70,
        "saturation": 77,
        "lightness": 85
    }, {
        "hex": "#CED1C0",
        "rgb": "rgb(206, 209, 192)",
        "hsl": "hsl(71, 16%, 79%)",
        "red": 206,
        "green": 209,
        "blue": 192,
        "hue": 71,
        "saturation": 16,
        "lightness": 79
    }, {
        "hex": "#D5D8C7",
        "rgb": "rgb(213, 216, 199)",
        "hsl": "hsl(71, 18%, 81%)",
        "red": 213,
        "green": 216,
        "blue": 199,
        "hue": 71,
        "saturation": 18,
        "lightness": 81
    }, {
        "hex": "#DDE0CF",
        "rgb": "rgb(221, 224, 207)",
        "hsl": "hsl(71, 22%, 85%)",
        "red": 221,
        "green": 224,
        "blue": 207,
        "hue": 71,
        "saturation": 22,
        "lightness": 85
    }, {
        "hex": "#BCC499",
        "rgb": "rgb(188, 196, 153)",
        "hsl": "hsl(71, 27%, 68%)",
        "red": 188,
        "green": 196,
        "blue": 153,
        "hue": 71,
        "saturation": 27,
        "lightness": 68
    }, {
        "hex": "#E0E4CE",
        "rgb": "rgb(224, 228, 206)",
        "hsl": "hsl(71, 29%, 85%)",
        "red": 224,
        "green": 228,
        "blue": 206,
        "hue": 71,
        "saturation": 29,
        "lightness": 85
    }, {
        "hex": "#E3E8CD",
        "rgb": "rgb(227, 232, 205)",
        "hsl": "hsl(71, 37%, 86%)",
        "red": 227,
        "green": 232,
        "blue": 205,
        "hue": 71,
        "saturation": 37,
        "lightness": 86
    }, {
        "hex": "#B6C474",
        "rgb": "rgb(182, 196, 116)",
        "hsl": "hsl(71, 40%, 61%)",
        "red": 182,
        "green": 196,
        "blue": 116,
        "hue": 71,
        "saturation": 40,
        "lightness": 61
    }, {
        "hex": "#DAE5AB",
        "rgb": "rgb(218, 229, 171)",
        "hsl": "hsl(71, 53%, 78%)",
        "red": 218,
        "green": 229,
        "blue": 171,
        "hue": 71,
        "saturation": 53,
        "lightness": 78
    }, {
        "hex": "#E9F0C9",
        "rgb": "rgb(233, 240, 201)",
        "hsl": "hsl(71, 57%, 86%)",
        "red": 233,
        "green": 240,
        "blue": 201,
        "hue": 71,
        "saturation": 57,
        "lightness": 86
    }, {
        "hex": "#758918",
        "rgb": "rgb(117, 137, 24)",
        "hsl": "hsl(71, 70%, 32%)",
        "red": 117,
        "green": 137,
        "blue": 24,
        "hue": 71,
        "saturation": 70,
        "lightness": 32
    }, {
        "hex": "#D4EE5E",
        "rgb": "rgb(212, 238, 94)",
        "hsl": "hsl(71, 81%, 65%)",
        "red": 212,
        "green": 238,
        "blue": 94,
        "hue": 71,
        "saturation": 81,
        "lightness": 65
    }, {
        "hex": "#EAFF87",
        "rgb": "rgb(234, 255, 135)",
        "hsl": "hsl(71, 100%, 76%)",
        "red": 234,
        "green": 255,
        "blue": 135,
        "hue": 71,
        "saturation": 100,
        "lightness": 76
    }, {
        "hex": "#82837E",
        "rgb": "rgb(130, 131, 126)",
        "hsl": "hsl(72, 2%, 50%)",
        "red": 130,
        "green": 131,
        "blue": 126,
        "hue": 72,
        "saturation": 2,
        "lightness": 50
    }, {
        "hex": "#474843",
        "rgb": "rgb(71, 72, 67)",
        "hsl": "hsl(72, 4%, 27%)",
        "red": 71,
        "green": 72,
        "blue": 67,
        "hue": 72,
        "saturation": 4,
        "lightness": 27
    }, {
        "hex": "#B1BA8E",
        "rgb": "rgb(177, 186, 142)",
        "hsl": "hsl(72, 24%, 64%)",
        "red": 177,
        "green": 186,
        "blue": 142,
        "hue": 72,
        "saturation": 24,
        "lightness": 64
    }, {
        "hex": "#899752",
        "rgb": "rgb(137, 151, 82)",
        "hsl": "hsl(72, 30%, 46%)",
        "red": 137,
        "green": 151,
        "blue": 82,
        "hue": 72,
        "saturation": 30,
        "lightness": 46
    }, {
        "hex": "#D4DDB1",
        "rgb": "rgb(212, 221, 177)",
        "hsl": "hsl(72, 39%, 78%)",
        "red": 212,
        "green": 221,
        "blue": 177,
        "hue": 72,
        "saturation": 39,
        "lightness": 78
    }, {
        "hex": "#A7BA59",
        "rgb": "rgb(167, 186, 89)",
        "hsl": "hsl(72, 41%, 54%)",
        "red": 167,
        "green": 186,
        "blue": 89,
        "hue": 72,
        "saturation": 41,
        "lightness": 54
    }, {
        "hex": "#F6F8EE",
        "rgb": "rgb(246, 248, 238)",
        "hsl": "hsl(72, 42%, 95%)",
        "red": 246,
        "green": 248,
        "blue": 238,
        "hue": 72,
        "saturation": 42,
        "lightness": 95
    }, {
        "hex": "#B0C65A",
        "rgb": "rgb(176, 198, 90)",
        "hsl": "hsl(72, 49%, 56%)",
        "red": 176,
        "green": 198,
        "blue": 90,
        "hue": 72,
        "saturation": 49,
        "lightness": 56
    }, {
        "hex": "#99B333",
        "rgb": "rgb(153, 179, 51)",
        "hsl": "hsl(72, 56%, 45%)",
        "red": 153,
        "green": 179,
        "blue": 51,
        "hue": 72,
        "saturation": 56,
        "lightness": 45
    }, {
        "hex": "#E2EDB7",
        "rgb": "rgb(226, 237, 183)",
        "hsl": "hsl(72, 60%, 82%)",
        "red": 226,
        "green": 237,
        "blue": 183,
        "hue": 72,
        "saturation": 60,
        "lightness": 82
    }, {
        "hex": "#C0D860",
        "rgb": "rgb(192, 216, 96)",
        "hsl": "hsl(72, 61%, 61%)",
        "red": 192,
        "green": 216,
        "blue": 96,
        "hue": 72,
        "saturation": 61,
        "lightness": 61
    }, {
        "hex": "#D1E389",
        "rgb": "rgb(209, 227, 137)",
        "hsl": "hsl(72, 62%, 71%)",
        "red": 209,
        "green": 227,
        "blue": 137,
        "hue": 72,
        "saturation": 62,
        "lightness": 71
    }, {
        "hex": "#CBE65B",
        "rgb": "rgb(203, 230, 91)",
        "hsl": "hsl(72, 74%, 63%)",
        "red": 203,
        "green": 230,
        "blue": 91,
        "hue": 72,
        "saturation": 74,
        "lightness": 63
    }, {
        "hex": "#A7CC15",
        "rgb": "rgb(167, 204, 21)",
        "hsl": "hsl(72, 81%, 44%)",
        "red": 167,
        "green": 204,
        "blue": 21,
        "hue": 72,
        "saturation": 81,
        "lightness": 44
    }, {
        "hex": "#D8F171",
        "rgb": "rgb(216, 241, 113)",
        "hsl": "hsl(72, 82%, 69%)",
        "red": 216,
        "green": 241,
        "blue": 113,
        "hue": 72,
        "saturation": 82,
        "lightness": 69
    }, {
        "hex": "#E6F99D",
        "rgb": "rgb(230, 249, 157)",
        "hsl": "hsl(72, 88%, 80%)",
        "red": 230,
        "green": 249,
        "blue": 157,
        "hue": 72,
        "saturation": 88,
        "lightness": 80
    }, {
        "hex": "#E8F9A2",
        "rgb": "rgb(232, 249, 162)",
        "hsl": "hsl(72, 88%, 81%)",
        "red": 232,
        "green": 249,
        "blue": 162,
        "hue": 72,
        "saturation": 88,
        "lightness": 81
    }, {
        "hex": "#B0DA09",
        "rgb": "rgb(176, 218, 9)",
        "hsl": "hsl(72, 92%, 45%)",
        "red": 176,
        "green": 218,
        "blue": 9,
        "hue": 72,
        "saturation": 92,
        "lightness": 45
    }, {
        "hex": "#BDEB07",
        "rgb": "rgb(189, 235, 7)",
        "hsl": "hsl(72, 94%, 47%)",
        "red": 189,
        "green": 235,
        "blue": 7,
        "hue": 72,
        "saturation": 94,
        "lightness": 47
    }, {
        "hex": "#83A300",
        "rgb": "rgb(131, 163, 0)",
        "hsl": "hsl(72, 100%, 32%)",
        "red": 131,
        "green": 163,
        "blue": 0,
        "hue": 72,
        "saturation": 100,
        "lightness": 32
    }, {
        "hex": "#D2FF1F",
        "rgb": "rgb(210, 255, 31)",
        "hsl": "hsl(72, 100%, 56%)",
        "red": 210,
        "green": 255,
        "blue": 31,
        "hue": 72,
        "saturation": 100,
        "lightness": 56
    }, {
        "hex": "#81876C",
        "rgb": "rgb(129, 135, 108)",
        "hsl": "hsl(73, 11%, 48%)",
        "red": 129,
        "green": 135,
        "blue": 108,
        "hue": 73,
        "saturation": 11,
        "lightness": 48
    }, {
        "hex": "#25271E",
        "rgb": "rgb(37, 39, 30)",
        "hsl": "hsl(73, 13%, 14%)",
        "red": 37,
        "green": 39,
        "blue": 30,
        "hue": 73,
        "saturation": 13,
        "lightness": 14
    }, {
        "hex": "#B2BB91",
        "rgb": "rgb(178, 187, 145)",
        "hsl": "hsl(73, 24%, 65%)",
        "red": 178,
        "green": 187,
        "blue": 145,
        "hue": 73,
        "saturation": 24,
        "lightness": 65
    }, {
        "hex": "#C8CFAE",
        "rgb": "rgb(200, 207, 174)",
        "hsl": "hsl(73, 26%, 75%)",
        "red": 200,
        "green": 207,
        "blue": 174,
        "hue": 73,
        "saturation": 26,
        "lightness": 75
    }, {
        "hex": "#D8DEC3",
        "rgb": "rgb(216, 222, 195)",
        "hsl": "hsl(73, 29%, 82%)",
        "red": 216,
        "green": 222,
        "blue": 195,
        "hue": 73,
        "saturation": 29,
        "lightness": 82
    }, {
        "hex": "#BBCD77",
        "rgb": "rgb(187, 205, 119)",
        "hsl": "hsl(73, 46%, 64%)",
        "red": 187,
        "green": 205,
        "blue": 119,
        "hue": 73,
        "saturation": 46,
        "lightness": 64
    }, {
        "hex": "#B3CC57",
        "rgb": "rgb(179, 204, 87)",
        "hsl": "hsl(73, 53%, 57%)",
        "red": 179,
        "green": 204,
        "blue": 87,
        "hue": 73,
        "saturation": 53,
        "lightness": 57
    }, {
        "hex": "#F4F8E6",
        "rgb": "rgb(244, 248, 230)",
        "hsl": "hsl(73, 56%, 94%)",
        "red": 244,
        "green": 248,
        "blue": 230,
        "hue": 73,
        "saturation": 56,
        "lightness": 94
    }, {
        "hex": "#191F04",
        "rgb": "rgb(25, 31, 4)",
        "hsl": "hsl(73, 77%, 7%)",
        "red": 25,
        "green": 31,
        "blue": 4,
        "hue": 73,
        "saturation": 77,
        "lightness": 7
    }, {
        "hex": "#FCFEF5",
        "rgb": "rgb(252, 254, 245)",
        "hsl": "hsl(73, 82%, 98%)",
        "red": 252,
        "green": 254,
        "blue": 245,
        "hue": 73,
        "saturation": 82,
        "lightness": 98
    }, {
        "hex": "#CAF729",
        "rgb": "rgb(202, 247, 41)",
        "hsl": "hsl(73, 93%, 56%)",
        "red": 202,
        "green": 247,
        "blue": 41,
        "hue": 73,
        "saturation": 93,
        "lightness": 56
    }, {
        "hex": "#BEF202",
        "rgb": "rgb(190, 242, 2)",
        "hsl": "hsl(73, 98%, 48%)",
        "red": 190,
        "green": 242,
        "blue": 2,
        "hue": 73,
        "saturation": 98,
        "lightness": 48
    }, {
        "hex": "#C8FF00",
        "rgb": "rgb(200, 255, 0)",
        "hsl": "hsl(73, 100%, 50%)",
        "red": 200,
        "green": 255,
        "blue": 0,
        "hue": 73,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#C4CAB0",
        "rgb": "rgb(196, 202, 176)",
        "hsl": "hsl(74, 20%, 74%)",
        "red": 196,
        "green": 202,
        "blue": 176,
        "hue": 74,
        "saturation": 20,
        "lightness": 74
    }, {
        "hex": "#99A66D",
        "rgb": "rgb(153, 166, 109)",
        "hsl": "hsl(74, 24%, 54%)",
        "red": 153,
        "green": 166,
        "blue": 109,
        "hue": 74,
        "saturation": 24,
        "lightness": 54
    }, {
        "hex": "#A7B381",
        "rgb": "rgb(167, 179, 129)",
        "hsl": "hsl(74, 25%, 60%)",
        "red": 167,
        "green": 179,
        "blue": 129,
        "hue": 74,
        "saturation": 25,
        "lightness": 60
    }, {
        "hex": "#DDE3CA",
        "rgb": "rgb(221, 227, 202)",
        "hsl": "hsl(74, 31%, 84%)",
        "red": 221,
        "green": 227,
        "blue": 202,
        "hue": 74,
        "saturation": 31,
        "lightness": 84
    }, {
        "hex": "#E5EAD4",
        "rgb": "rgb(229, 234, 212)",
        "hsl": "hsl(74, 34%, 87%)",
        "red": 229,
        "green": 234,
        "blue": 212,
        "hue": 74,
        "saturation": 34,
        "lightness": 87
    }, {
        "hex": "#A9BD68",
        "rgb": "rgb(169, 189, 104)",
        "hsl": "hsl(74, 39%, 57%)",
        "red": 169,
        "green": 189,
        "blue": 104,
        "hue": 74,
        "saturation": 39,
        "lightness": 57
    }, {
        "hex": "#BED084",
        "rgb": "rgb(190, 208, 132)",
        "hsl": "hsl(74, 45%, 67%)",
        "red": 190,
        "green": 208,
        "blue": 132,
        "hue": 74,
        "saturation": 45,
        "lightness": 67
    }, {
        "hex": "#E7EED0",
        "rgb": "rgb(231, 238, 208)",
        "hsl": "hsl(74, 47%, 87%)",
        "red": 231,
        "green": 238,
        "blue": 208,
        "hue": 74,
        "saturation": 47,
        "lightness": 87
    }, {
        "hex": "#DEE8BE",
        "rgb": "rgb(222, 232, 190)",
        "hsl": "hsl(74, 48%, 83%)",
        "red": 222,
        "green": 232,
        "blue": 190,
        "hue": 74,
        "saturation": 48,
        "lightness": 83
    }, {
        "hex": "#B5CC6A",
        "rgb": "rgb(181, 204, 106)",
        "hsl": "hsl(74, 49%, 61%)",
        "red": 181,
        "green": 204,
        "blue": 106,
        "hue": 74,
        "saturation": 49,
        "lightness": 61
    }, {
        "hex": "#DBE7B4",
        "rgb": "rgb(219, 231, 180)",
        "hsl": "hsl(74, 52%, 81%)",
        "red": 219,
        "green": 231,
        "blue": 180,
        "hue": 74,
        "saturation": 52,
        "lightness": 81
    }, {
        "hex": "#E1EDB9",
        "rgb": "rgb(225, 237, 185)",
        "hsl": "hsl(74, 59%, 83%)",
        "red": 225,
        "green": 237,
        "blue": 185,
        "hue": 74,
        "saturation": 59,
        "lightness": 83
    }, {
        "hex": "#CAE081",
        "rgb": "rgb(202, 224, 129)",
        "hsl": "hsl(74, 61%, 69%)",
        "red": 202,
        "green": 224,
        "blue": 129,
        "hue": 74,
        "saturation": 61,
        "lightness": 69
    }, {
        "hex": "#F0F7DA",
        "rgb": "rgb(240, 247, 218)",
        "hsl": "hsl(74, 64%, 91%)",
        "red": 240,
        "green": 247,
        "blue": 218,
        "hue": 74,
        "saturation": 64,
        "lightness": 91
    }, {
        "hex": "#F0F7DA",
        "rgb": "rgb(240, 247, 218)",
        "hsl": "hsl(74, 64%, 91%)",
        "red": 240,
        "green": 247,
        "blue": 218,
        "hue": 74,
        "saturation": 64,
        "lightness": 91
    }, {
        "hex": "#A7CD2C",
        "rgb": "rgb(167, 205, 44)",
        "hsl": "hsl(74, 65%, 49%)",
        "red": 167,
        "green": 205,
        "blue": 44,
        "hue": 74,
        "saturation": 65,
        "lightness": 49
    }, {
        "hex": "#C0DE5D",
        "rgb": "rgb(192, 222, 93)",
        "hsl": "hsl(74, 66%, 62%)",
        "red": 192,
        "green": 222,
        "blue": 93,
        "hue": 74,
        "saturation": 66,
        "lightness": 62
    }, {
        "hex": "#CEE879",
        "rgb": "rgb(206, 232, 121)",
        "hsl": "hsl(74, 71%, 69%)",
        "red": 206,
        "green": 232,
        "blue": 121,
        "hue": 74,
        "saturation": 71,
        "lightness": 69
    }, {
        "hex": "#C5E65C",
        "rgb": "rgb(197, 230, 92)",
        "hsl": "hsl(74, 73%, 63%)",
        "red": 197,
        "green": 230,
        "blue": 92,
        "hue": 74,
        "saturation": 73,
        "lightness": 63
    }, {
        "hex": "#CBE86B",
        "rgb": "rgb(203, 232, 107)",
        "hsl": "hsl(74, 73%, 66%)",
        "red": 203,
        "green": 232,
        "blue": 107,
        "hue": 74,
        "saturation": 73,
        "lightness": 66
    }, {
        "hex": "#CBE86B",
        "rgb": "rgb(203, 232, 107)",
        "hsl": "hsl(74, 73%, 66%)",
        "red": 203,
        "green": 232,
        "blue": 107,
        "hue": 74,
        "saturation": 73,
        "lightness": 66
    }, {
        "hex": "#EDFFB3",
        "rgb": "rgb(237, 255, 179)",
        "hsl": "hsl(74, 100%, 85%)",
        "red": 237,
        "green": 255,
        "blue": 179,
        "hue": 74,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#D4D6CE",
        "rgb": "rgb(212, 214, 206)",
        "hsl": "hsl(75, 9%, 82%)",
        "red": 212,
        "green": 214,
        "blue": 206,
        "hue": 75,
        "saturation": 9,
        "lightness": 82
    }, {
        "hex": "#E1E3DB",
        "rgb": "rgb(225, 227, 219)",
        "hsl": "hsl(75, 12%, 87%)",
        "red": 225,
        "green": 227,
        "blue": 219,
        "hue": 75,
        "saturation": 12,
        "lightness": 87
    }, {
        "hex": "#D9DDCD",
        "rgb": "rgb(217, 221, 205)",
        "hsl": "hsl(75, 19%, 84%)",
        "red": 217,
        "green": 221,
        "blue": 205,
        "hue": 75,
        "saturation": 19,
        "lightness": 84
    }, {
        "hex": "#C6D1A6",
        "rgb": "rgb(198, 209, 166)",
        "hsl": "hsl(75, 32%, 74%)",
        "red": 198,
        "green": 209,
        "blue": 166,
        "hue": 75,
        "saturation": 32,
        "lightness": 74
    }, {
        "hex": "#C3D297",
        "rgb": "rgb(195, 210, 151)",
        "hsl": "hsl(75, 40%, 71%)",
        "red": 195,
        "green": 210,
        "blue": 151,
        "hue": 75,
        "saturation": 40,
        "lightness": 71
    }, {
        "hex": "#D5E0B5",
        "rgb": "rgb(213, 224, 181)",
        "hsl": "hsl(75, 41%, 79%)",
        "red": 213,
        "green": 224,
        "blue": 181,
        "hue": 75,
        "saturation": 41,
        "lightness": 79
    }, {
        "hex": "#DCEBAF",
        "rgb": "rgb(220, 235, 175)",
        "hsl": "hsl(75, 60%, 80%)",
        "red": 220,
        "green": 235,
        "blue": 175,
        "hue": 75,
        "saturation": 60,
        "lightness": 80
    }, {
        "hex": "#E5F3BA",
        "rgb": "rgb(229, 243, 186)",
        "hsl": "hsl(75, 70%, 84%)",
        "red": 229,
        "green": 243,
        "blue": 186,
        "hue": 75,
        "saturation": 70,
        "lightness": 84
    }, {
        "hex": "#B4DF37",
        "rgb": "rgb(180, 223, 55)",
        "hsl": "hsl(75, 72%, 55%)",
        "red": 180,
        "green": 223,
        "blue": 55,
        "hue": 75,
        "saturation": 72,
        "lightness": 55
    }, {
        "hex": "#E4F5B1",
        "rgb": "rgb(228, 245, 177)",
        "hsl": "hsl(75, 77%, 83%)",
        "red": 228,
        "green": 245,
        "blue": 177,
        "hue": 75,
        "saturation": 77,
        "lightness": 83
    }, {
        "hex": "#E6F8B1",
        "rgb": "rgb(230, 248, 177)",
        "hsl": "hsl(75, 84%, 83%)",
        "red": 230,
        "green": 248,
        "blue": 177,
        "hue": 75,
        "saturation": 84,
        "lightness": 83
    }, {
        "hex": "#8FBE00",
        "rgb": "rgb(143, 190, 0)",
        "hsl": "hsl(75, 100%, 37%)",
        "red": 143,
        "green": 190,
        "blue": 0,
        "hue": 75,
        "saturation": 100,
        "lightness": 37
    }, {
        "hex": "#C4FF0D",
        "rgb": "rgb(196, 255, 13)",
        "hsl": "hsl(75, 100%, 53%)",
        "red": 196,
        "green": 255,
        "blue": 13,
        "hue": 75,
        "saturation": 100,
        "lightness": 53
    }, {
        "hex": "#CCFF33",
        "rgb": "rgb(204, 255, 51)",
        "hsl": "hsl(75, 100%, 60%)",
        "red": 204,
        "green": 255,
        "blue": 51,
        "hue": 75,
        "saturation": 100,
        "lightness": 60
    }, {
        "hex": "#F0FFC2",
        "rgb": "rgb(240, 255, 194)",
        "hsl": "hsl(75, 100%, 88%)",
        "red": 240,
        "green": 255,
        "blue": 194,
        "hue": 75,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#F3FFCF",
        "rgb": "rgb(243, 255, 207)",
        "hsl": "hsl(75, 100%, 91%)",
        "red": 243,
        "green": 255,
        "blue": 207,
        "hue": 75,
        "saturation": 100,
        "lightness": 91
    }, {
        "hex": "#7C8071",
        "rgb": "rgb(124, 128, 113)",
        "hsl": "hsl(76, 6%, 47%)",
        "red": 124,
        "green": 128,
        "blue": 113,
        "hue": 76,
        "saturation": 6,
        "lightness": 47
    }, {
        "hex": "#D7DACF",
        "rgb": "rgb(215, 218, 207)",
        "hsl": "hsl(76, 13%, 83%)",
        "red": 215,
        "green": 218,
        "blue": 207,
        "hue": 76,
        "saturation": 13,
        "lightness": 83
    }, {
        "hex": "#E1E6D3",
        "rgb": "rgb(225, 230, 211)",
        "hsl": "hsl(76, 28%, 86%)",
        "red": 225,
        "green": 230,
        "blue": 211,
        "hue": 76,
        "saturation": 28,
        "lightness": 86
    }, {
        "hex": "#D1DAB9",
        "rgb": "rgb(209, 218, 185)",
        "hsl": "hsl(76, 31%, 79%)",
        "red": 209,
        "green": 218,
        "blue": 185,
        "hue": 76,
        "saturation": 31,
        "lightness": 79
    }, {
        "hex": "#B3C67F",
        "rgb": "rgb(179, 198, 127)",
        "hsl": "hsl(76, 38%, 64%)",
        "red": 179,
        "green": 198,
        "blue": 127,
        "hue": 76,
        "saturation": 38,
        "lightness": 64
    }, {
        "hex": "#D2E1A7",
        "rgb": "rgb(210, 225, 167)",
        "hsl": "hsl(76, 49%, 77%)",
        "red": 210,
        "green": 225,
        "blue": 167,
        "hue": 76,
        "saturation": 49,
        "lightness": 77
    }, {
        "hex": "#ACC95F",
        "rgb": "rgb(172, 201, 95)",
        "hsl": "hsl(76, 50%, 58%)",
        "red": 172,
        "green": 201,
        "blue": 95,
        "hue": 76,
        "saturation": 50,
        "lightness": 58
    }, {
        "hex": "#D9E8AE",
        "rgb": "rgb(217, 232, 174)",
        "hsl": "hsl(76, 56%, 80%)",
        "red": 217,
        "green": 232,
        "blue": 174,
        "hue": 76,
        "saturation": 56,
        "lightness": 80
    }, {
        "hex": "#C9DF8A",
        "rgb": "rgb(201, 223, 138)",
        "hsl": "hsl(76, 57%, 71%)",
        "red": 201,
        "green": 223,
        "blue": 138,
        "hue": 76,
        "saturation": 57,
        "lightness": 71
    }, {
        "hex": "#BADA5F",
        "rgb": "rgb(186, 218, 95)",
        "hsl": "hsl(76, 62%, 61%)",
        "red": 186,
        "green": 218,
        "blue": 95,
        "hue": 76,
        "saturation": 62,
        "lightness": 61
    }, {
        "hex": "#BADE57",
        "rgb": "rgb(186, 222, 87)",
        "hsl": "hsl(76, 67%, 61%)",
        "red": 186,
        "green": 222,
        "blue": 87,
        "hue": 76,
        "saturation": 67,
        "lightness": 61
    }, {
        "hex": "#B9DE51",
        "rgb": "rgb(185, 222, 81)",
        "hsl": "hsl(76, 68%, 59%)",
        "red": 185,
        "green": 222,
        "blue": 81,
        "hue": 76,
        "saturation": 68,
        "lightness": 59
    }, {
        "hex": "#ABDB25",
        "rgb": "rgb(171, 219, 37)",
        "hsl": "hsl(76, 72%, 50%)",
        "red": 171,
        "green": 219,
        "blue": 37,
        "hue": 76,
        "saturation": 72,
        "lightness": 50
    }, {
        "hex": "#AEDD2B",
        "rgb": "rgb(174, 221, 43)",
        "hsl": "hsl(76, 72%, 52%)",
        "red": 174,
        "green": 221,
        "blue": 43,
        "hue": 76,
        "saturation": 72,
        "lightness": 52
    }, {
        "hex": "#C8EB6A",
        "rgb": "rgb(200, 235, 106)",
        "hsl": "hsl(76, 76%, 67%)",
        "red": 200,
        "green": 235,
        "blue": 106,
        "hue": 76,
        "saturation": 76,
        "lightness": 67
    }, {
        "hex": "#BEEE3B",
        "rgb": "rgb(190, 238, 59)",
        "hsl": "hsl(76, 84%, 58%)",
        "red": 190,
        "green": 238,
        "blue": 59,
        "hue": 76,
        "saturation": 84,
        "lightness": 58
    }, {
        "hex": "#6B8F0B",
        "rgb": "rgb(107, 143, 11)",
        "hsl": "hsl(76, 86%, 30%)",
        "red": 107,
        "green": 143,
        "blue": 11,
        "hue": 76,
        "saturation": 86,
        "lightness": 30
    }, {
        "hex": "#F3FFD2",
        "rgb": "rgb(243, 255, 210)",
        "hsl": "hsl(76, 100%, 91%)",
        "red": 243,
        "green": 255,
        "blue": 210,
        "hue": 76,
        "saturation": 100,
        "lightness": 91
    }, {
        "hex": "#939E78",
        "rgb": "rgb(147, 158, 120)",
        "hsl": "hsl(77, 16%, 55%)",
        "red": 147,
        "green": 158,
        "blue": 120,
        "hue": 77,
        "saturation": 16,
        "lightness": 55
    }, {
        "hex": "#F0F2EB",
        "rgb": "rgb(240, 242, 235)",
        "hsl": "hsl(77, 21%, 94%)",
        "red": 240,
        "green": 242,
        "blue": 235,
        "hue": 77,
        "saturation": 21,
        "lightness": 94
    }, {
        "hex": "#C5CEAE",
        "rgb": "rgb(197, 206, 174)",
        "hsl": "hsl(77, 25%, 75%)",
        "red": 197,
        "green": 206,
        "blue": 174,
        "hue": 77,
        "saturation": 25,
        "lightness": 75
    }, {
        "hex": "#97AA66",
        "rgb": "rgb(151, 170, 102)",
        "hsl": "hsl(77, 29%, 53%)",
        "red": 151,
        "green": 170,
        "blue": 102,
        "hue": 77,
        "saturation": 29,
        "lightness": 53
    }, {
        "hex": "#95AA61",
        "rgb": "rgb(149, 170, 97)",
        "hsl": "hsl(77, 30%, 52%)",
        "red": 149,
        "green": 170,
        "blue": 97,
        "hue": 77,
        "saturation": 30,
        "lightness": 52
    }, {
        "hex": "#D7DFC3",
        "rgb": "rgb(215, 223, 195)",
        "hsl": "hsl(77, 30%, 82%)",
        "red": 215,
        "green": 223,
        "blue": 195,
        "hue": 77,
        "saturation": 30,
        "lightness": 82
    }, {
        "hex": "#CAD5AD",
        "rgb": "rgb(202, 213, 173)",
        "hsl": "hsl(77, 32%, 76%)",
        "red": 202,
        "green": 213,
        "blue": 173,
        "hue": 77,
        "saturation": 32,
        "lightness": 76
    }, {
        "hex": "#E0EEBD",
        "rgb": "rgb(224, 238, 189)",
        "hsl": "hsl(77, 59%, 84%)",
        "red": 224,
        "green": 238,
        "blue": 189,
        "hue": 77,
        "saturation": 59,
        "lightness": 84
    }, {
        "hex": "#E3F5B7",
        "rgb": "rgb(227, 245, 183)",
        "hsl": "hsl(77, 76%, 84%)",
        "red": 227,
        "green": 245,
        "blue": 183,
        "hue": 77,
        "saturation": 76,
        "lightness": 84
    }, {
        "hex": "#B6FF00",
        "rgb": "rgb(182, 255, 0)",
        "hsl": "hsl(77, 100%, 50%)",
        "red": 182,
        "green": 255,
        "blue": 0,
        "hue": 77,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#CAFF42",
        "rgb": "rgb(202, 255, 66)",
        "hsl": "hsl(77, 100%, 63%)",
        "red": 202,
        "green": 255,
        "blue": 66,
        "hue": 77,
        "saturation": 100,
        "lightness": 63
    }, {
        "hex": "#F0FFC9",
        "rgb": "rgb(240, 255, 201)",
        "hsl": "hsl(77, 100%, 89%)",
        "red": 240,
        "green": 255,
        "blue": 201,
        "hue": 77,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#C8CBC1",
        "rgb": "rgb(200, 203, 193)",
        "hsl": "hsl(78, 9%, 78%)",
        "red": 200,
        "green": 203,
        "blue": 193,
        "hue": 78,
        "saturation": 9,
        "lightness": 78
    }, {
        "hex": "#A1AC88",
        "rgb": "rgb(161, 172, 136)",
        "hsl": "hsl(78, 18%, 60%)",
        "red": 161,
        "green": 172,
        "blue": 136,
        "hue": 78,
        "saturation": 18,
        "lightness": 60
    }, {
        "hex": "#B8C2A0",
        "rgb": "rgb(184, 194, 160)",
        "hsl": "hsl(78, 22%, 69%)",
        "red": 184,
        "green": 194,
        "blue": 160,
        "hue": 78,
        "saturation": 22,
        "lightness": 69
    }, {
        "hex": "#95A868",
        "rgb": "rgb(149, 168, 104)",
        "hsl": "hsl(78, 27%, 53%)",
        "red": 149,
        "green": 168,
        "blue": 104,
        "hue": 78,
        "saturation": 27,
        "lightness": 53
    }, {
        "hex": "#C7D1AF",
        "rgb": "rgb(199, 209, 175)",
        "hsl": "hsl(78, 27%, 75%)",
        "red": 199,
        "green": 209,
        "blue": 175,
        "hue": 78,
        "saturation": 27,
        "lightness": 75
    }, {
        "hex": "#94B053",
        "rgb": "rgb(148, 176, 83)",
        "hsl": "hsl(78, 37%, 51%)",
        "red": 148,
        "green": 176,
        "blue": 83,
        "hue": 78,
        "saturation": 37,
        "lightness": 51
    }, {
        "hex": "#D0DCB3",
        "rgb": "rgb(208, 220, 179)",
        "hsl": "hsl(78, 37%, 78%)",
        "red": 208,
        "green": 220,
        "blue": 179,
        "hue": 78,
        "saturation": 37,
        "lightness": 78
    }, {
        "hex": "#DCE9BE",
        "rgb": "rgb(220, 233, 190)",
        "hsl": "hsl(78, 49%, 83%)",
        "red": 220,
        "green": 233,
        "blue": 190,
        "hue": 78,
        "saturation": 49,
        "lightness": 83
    }, {
        "hex": "#D0E799",
        "rgb": "rgb(208, 231, 153)",
        "hsl": "hsl(78, 62%, 75%)",
        "red": 208,
        "green": 231,
        "blue": 153,
        "hue": 78,
        "saturation": 62,
        "lightness": 75
    }, {
        "hex": "#DCEEB1",
        "rgb": "rgb(220, 238, 177)",
        "hsl": "hsl(78, 64%, 81%)",
        "red": 220,
        "green": 238,
        "blue": 177,
        "hue": 78,
        "saturation": 64,
        "lightness": 81
    }, {
        "hex": "#CEE891",
        "rgb": "rgb(206, 232, 145)",
        "hsl": "hsl(78, 65%, 74%)",
        "red": 206,
        "green": 232,
        "blue": 145,
        "hue": 78,
        "saturation": 65,
        "lightness": 74
    }, {
        "hex": "#E0F3B2",
        "rgb": "rgb(224, 243, 178)",
        "hsl": "hsl(78, 73%, 83%)",
        "red": 224,
        "green": 243,
        "blue": 178,
        "hue": 78,
        "saturation": 73,
        "lightness": 83
    }, {
        "hex": "#AEE239",
        "rgb": "rgb(174, 226, 57)",
        "hsl": "hsl(78, 74%, 55%)",
        "red": 174,
        "green": 226,
        "blue": 57,
        "hue": 78,
        "saturation": 74,
        "lightness": 55
    }, {
        "hex": "#F4FCE2",
        "rgb": "rgb(244, 252, 226)",
        "hsl": "hsl(78, 81%, 94%)",
        "red": 244,
        "green": 252,
        "blue": 226,
        "hue": 78,
        "saturation": 81,
        "lightness": 94
    }, {
        "hex": "#BFFA37",
        "rgb": "rgb(191, 250, 55)",
        "hsl": "hsl(78, 95%, 60%)",
        "red": 191,
        "green": 250,
        "blue": 55,
        "hue": 78,
        "saturation": 95,
        "lightness": 60
    }, {
        "hex": "#88C100",
        "rgb": "rgb(136, 193, 0)",
        "hsl": "hsl(78, 100%, 38%)",
        "red": 136,
        "green": 193,
        "blue": 0,
        "hue": 78,
        "saturation": 100,
        "lightness": 38
    }, {
        "hex": "#F1FFCF",
        "rgb": "rgb(241, 255, 207)",
        "hsl": "hsl(78, 100%, 91%)",
        "red": 241,
        "green": 255,
        "blue": 207,
        "hue": 78,
        "saturation": 100,
        "lightness": 91
    }, {
        "hex": "#7C8569",
        "rgb": "rgb(124, 133, 105)",
        "hsl": "hsl(79, 12%, 47%)",
        "red": 124,
        "green": 133,
        "blue": 105,
        "hue": 79,
        "saturation": 12,
        "lightness": 47
    }, {
        "hex": "#8F9E6F",
        "rgb": "rgb(143, 158, 111)",
        "hsl": "hsl(79, 20%, 53%)",
        "red": 143,
        "green": 158,
        "blue": 111,
        "hue": 79,
        "saturation": 20,
        "lightness": 53
    }, {
        "hex": "#C3CCAF",
        "rgb": "rgb(195, 204, 175)",
        "hsl": "hsl(79, 22%, 74%)",
        "red": 195,
        "green": 204,
        "blue": 175,
        "hue": 79,
        "saturation": 22,
        "lightness": 74
    }, {
        "hex": "#91A566",
        "rgb": "rgb(145, 165, 102)",
        "hsl": "hsl(79, 26%, 52%)",
        "red": 145,
        "green": 165,
        "blue": 102,
        "hue": 79,
        "saturation": 26,
        "lightness": 52
    }, {
        "hex": "#BAC99A",
        "rgb": "rgb(186, 201, 154)",
        "hsl": "hsl(79, 30%, 70%)",
        "red": 186,
        "green": 201,
        "blue": 154,
        "hue": 79,
        "saturation": 30,
        "lightness": 70
    }, {
        "hex": "#657A38",
        "rgb": "rgb(101, 122, 56)",
        "hsl": "hsl(79, 37%, 35%)",
        "red": 101,
        "green": 122,
        "blue": 56,
        "hue": 79,
        "saturation": 37,
        "lightness": 35
    }, {
        "hex": "#C6D7A0",
        "rgb": "rgb(198, 215, 160)",
        "hsl": "hsl(79, 41%, 74%)",
        "red": 198,
        "green": 215,
        "blue": 160,
        "hue": 79,
        "saturation": 41,
        "lightness": 74
    }, {
        "hex": "#C9DAA4",
        "rgb": "rgb(201, 218, 164)",
        "hsl": "hsl(79, 42%, 75%)",
        "red": 201,
        "green": 218,
        "blue": 164,
        "hue": 79,
        "saturation": 42,
        "lightness": 75
    }, {
        "hex": "#D4E2B6",
        "rgb": "rgb(212, 226, 182)",
        "hsl": "hsl(79, 43%, 80%)",
        "red": 212,
        "green": 226,
        "blue": 182,
        "hue": 79,
        "saturation": 43,
        "lightness": 80
    }, {
        "hex": "#B1CF72",
        "rgb": "rgb(177, 207, 114)",
        "hsl": "hsl(79, 49%, 63%)",
        "red": 177,
        "green": 207,
        "blue": 114,
        "hue": 79,
        "saturation": 49,
        "lightness": 63
    }, {
        "hex": "#C0D88C",
        "rgb": "rgb(192, 216, 140)",
        "hsl": "hsl(79, 49%, 70%)",
        "red": 192,
        "green": 216,
        "blue": 140,
        "hue": 79,
        "saturation": 49,
        "lightness": 70
    }, {
        "hex": "#BADB73",
        "rgb": "rgb(186, 219, 115)",
        "hsl": "hsl(79, 59%, 65%)",
        "red": 186,
        "green": 219,
        "blue": 115,
        "hue": 79,
        "saturation": 59,
        "lightness": 65
    }, {
        "hex": "#AEE637",
        "rgb": "rgb(174, 230, 55)",
        "hsl": "hsl(79, 78%, 56%)",
        "red": 174,
        "green": 230,
        "blue": 55,
        "hue": 79,
        "saturation": 78,
        "lightness": 56
    }, {
        "hex": "#E6F9BC",
        "rgb": "rgb(230, 249, 188)",
        "hsl": "hsl(79, 84%, 86%)",
        "red": 230,
        "green": 249,
        "blue": 188,
        "hue": 79,
        "saturation": 84,
        "lightness": 86
    }, {
        "hex": "#C7F464",
        "rgb": "rgb(199, 244, 100)",
        "hsl": "hsl(79, 87%, 67%)",
        "red": 199,
        "green": 244,
        "blue": 100,
        "hue": 79,
        "saturation": 87,
        "lightness": 67
    }, {
        "hex": "#EFFFCD",
        "rgb": "rgb(239, 255, 205)",
        "hsl": "hsl(79, 100%, 90%)",
        "red": 239,
        "green": 255,
        "blue": 205,
        "hue": 79,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#121310",
        "rgb": "rgb(18, 19, 16)",
        "hsl": "hsl(80, 9%, 7%)",
        "red": 18,
        "green": 19,
        "blue": 16,
        "hue": 80,
        "saturation": 9,
        "lightness": 7
    }, {
        "hex": "#C4CEB0",
        "rgb": "rgb(196, 206, 176)",
        "hsl": "hsl(80, 23%, 75%)",
        "red": 196,
        "green": 206,
        "blue": 176,
        "hue": 80,
        "saturation": 23,
        "lightness": 75
    }, {
        "hex": "#768A4F",
        "rgb": "rgb(118, 138, 79)",
        "hsl": "hsl(80, 27%, 43%)",
        "red": 118,
        "green": 138,
        "blue": 79,
        "hue": 80,
        "saturation": 27,
        "lightness": 43
    }, {
        "hex": "#789048",
        "rgb": "rgb(120, 144, 72)",
        "hsl": "hsl(80, 33%, 42%)",
        "red": 120,
        "green": 144,
        "blue": 72,
        "hue": 80,
        "saturation": 33,
        "lightness": 42
    }, {
        "hex": "#A8C078",
        "rgb": "rgb(168, 192, 120)",
        "hsl": "hsl(80, 36%, 61%)",
        "red": 168,
        "green": 192,
        "blue": 120,
        "hue": 80,
        "saturation": 36,
        "lightness": 61
    }, {
        "hex": "#A6BF73",
        "rgb": "rgb(166, 191, 115)",
        "hsl": "hsl(80, 37%, 60%)",
        "red": 166,
        "green": 191,
        "blue": 115,
        "hue": 80,
        "saturation": 37,
        "lightness": 60
    }, {
        "hex": "#C0D890",
        "rgb": "rgb(192, 216, 144)",
        "hsl": "hsl(80, 48%, 71%)",
        "red": 192,
        "green": 216,
        "blue": 144,
        "hue": 80,
        "saturation": 48,
        "lightness": 71
    }, {
        "hex": "#D6E6B7",
        "rgb": "rgb(214, 230, 183)",
        "hsl": "hsl(80, 48%, 81%)",
        "red": 214,
        "green": 230,
        "blue": 183,
        "hue": 80,
        "saturation": 48,
        "lightness": 81
    }, {
        "hex": "#ECF8D4",
        "rgb": "rgb(236, 248, 212)",
        "hsl": "hsl(80, 72%, 90%)",
        "red": 236,
        "green": 248,
        "blue": 212,
        "hue": 80,
        "saturation": 72,
        "lightness": 90
    }, {
        "hex": "#AAFF00",
        "rgb": "rgb(170, 255, 0)",
        "hsl": "hsl(80, 100%, 50%)",
        "red": 170,
        "green": 255,
        "blue": 0,
        "hue": 80,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#F1FFD5",
        "rgb": "rgb(241, 255, 213)",
        "hsl": "hsl(80, 100%, 92%)",
        "red": 241,
        "green": 255,
        "blue": 213,
        "hue": 80,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#AFB7A0",
        "rgb": "rgb(175, 183, 160)",
        "hsl": "hsl(81, 14%, 67%)",
        "red": 175,
        "green": 183,
        "blue": 160,
        "hue": 81,
        "saturation": 14,
        "lightness": 67
    }, {
        "hex": "#C4CBB7",
        "rgb": "rgb(196, 203, 183)",
        "hsl": "hsl(81, 16%, 76%)",
        "red": 196,
        "green": 203,
        "blue": 183,
        "hue": 81,
        "saturation": 16,
        "lightness": 76
    }, {
        "hex": "#A5B090",
        "rgb": "rgb(165, 176, 144)",
        "hsl": "hsl(81, 17%, 63%)",
        "red": 165,
        "green": 176,
        "blue": 144,
        "hue": 81,
        "saturation": 17,
        "lightness": 63
    }, {
        "hex": "#DAE2CB",
        "rgb": "rgb(218, 226, 203)",
        "hsl": "hsl(81, 28%, 84%)",
        "red": 218,
        "green": 226,
        "blue": 203,
        "hue": 81,
        "saturation": 28,
        "lightness": 84
    }, {
        "hex": "#CAD7B2",
        "rgb": "rgb(202, 215, 178)",
        "hsl": "hsl(81, 32%, 77%)",
        "red": 202,
        "green": 215,
        "blue": 178,
        "hue": 81,
        "saturation": 32,
        "lightness": 77
    }, {
        "hex": "#D2E7AA",
        "rgb": "rgb(210, 231, 170)",
        "hsl": "hsl(81, 56%, 79%)",
        "red": 210,
        "green": 231,
        "blue": 170,
        "hue": 81,
        "saturation": 56,
        "lightness": 79
    }, {
        "hex": "#CCEE8D",
        "rgb": "rgb(204, 238, 141)",
        "hsl": "hsl(81, 74%, 74%)",
        "red": 204,
        "green": 238,
        "blue": 141,
        "hue": 81,
        "saturation": 74,
        "lightness": 74
    }, {
        "hex": "#CEF781",
        "rgb": "rgb(206, 247, 129)",
        "hsl": "hsl(81, 88%, 74%)",
        "red": 206,
        "green": 247,
        "blue": 129,
        "hue": 81,
        "saturation": 88,
        "lightness": 74
    }, {
        "hex": "#E0FBAC",
        "rgb": "rgb(224, 251, 172)",
        "hsl": "hsl(81, 91%, 83%)",
        "red": 224,
        "green": 251,
        "blue": 172,
        "hue": 81,
        "saturation": 91,
        "lightness": 83
    }, {
        "hex": "#D8FD94",
        "rgb": "rgb(216, 253, 148)",
        "hsl": "hsl(81, 96%, 79%)",
        "red": 216,
        "green": 253,
        "blue": 148,
        "hue": 81,
        "saturation": 96,
        "lightness": 79
    }, {
        "hex": "#DFFDA7",
        "rgb": "rgb(223, 253, 167)",
        "hsl": "hsl(81, 96%, 82%)",
        "red": 223,
        "green": 253,
        "blue": 167,
        "hue": 81,
        "saturation": 96,
        "lightness": 82
    }, {
        "hex": "#A6B985",
        "rgb": "rgb(166, 185, 133)",
        "hsl": "hsl(82, 27%, 62%)",
        "red": 166,
        "green": 185,
        "blue": 133,
        "hue": 82,
        "saturation": 27,
        "lightness": 62
    }, {
        "hex": "#92B35A",
        "rgb": "rgb(146, 179, 90)",
        "hsl": "hsl(82, 37%, 53%)",
        "red": 146,
        "green": 179,
        "blue": 90,
        "hue": 82,
        "saturation": 37,
        "lightness": 53
    }, {
        "hex": "#D0DEB8",
        "rgb": "rgb(208, 222, 184)",
        "hsl": "hsl(82, 37%, 80%)",
        "red": 208,
        "green": 222,
        "blue": 184,
        "hue": 82,
        "saturation": 37,
        "lightness": 80
    }, {
        "hex": "#647E37",
        "rgb": "rgb(100, 126, 55)",
        "hsl": "hsl(82, 39%, 35%)",
        "red": 100,
        "green": 126,
        "blue": 55,
        "hue": 82,
        "saturation": 39,
        "lightness": 35
    }, {
        "hex": "#CCDEAD",
        "rgb": "rgb(204, 222, 173)",
        "hsl": "hsl(82, 43%, 77%)",
        "red": 204,
        "green": 222,
        "blue": 173,
        "hue": 82,
        "saturation": 43,
        "lightness": 77
    }, {
        "hex": "#E3EDD2",
        "rgb": "rgb(227, 237, 210)",
        "hsl": "hsl(82, 43%, 88%)",
        "red": 227,
        "green": 237,
        "blue": 210,
        "hue": 82,
        "saturation": 43,
        "lightness": 88
    }, {
        "hex": "#B9D48B",
        "rgb": "rgb(185, 212, 139)",
        "hsl": "hsl(82, 46%, 69%)",
        "red": 185,
        "green": 212,
        "blue": 139,
        "hue": 82,
        "saturation": 46,
        "lightness": 69
    }, {
        "hex": "#A0C55F",
        "rgb": "rgb(160, 197, 95)",
        "hsl": "hsl(82, 47%, 57%)",
        "red": 160,
        "green": 197,
        "blue": 95,
        "hue": 82,
        "saturation": 47,
        "lightness": 57
    }, {
        "hex": "#BDDB88",
        "rgb": "rgb(189, 219, 136)",
        "hsl": "hsl(82, 54%, 70%)",
        "red": 189,
        "green": 219,
        "blue": 136,
        "hue": 82,
        "saturation": 54,
        "lightness": 70
    }, {
        "hex": "#D0EAA3",
        "rgb": "rgb(208, 234, 163)",
        "hsl": "hsl(82, 63%, 78%)",
        "red": 208,
        "green": 234,
        "blue": 163,
        "hue": 82,
        "saturation": 63,
        "lightness": 78
    }, {
        "hex": "#C8E98E",
        "rgb": "rgb(200, 233, 142)",
        "hsl": "hsl(82, 67%, 74%)",
        "red": 200,
        "green": 233,
        "blue": 142,
        "hue": 82,
        "saturation": 67,
        "lightness": 74
    }, {
        "hex": "#7AB317",
        "rgb": "rgb(122, 179, 23)",
        "hsl": "hsl(82, 77%, 40%)",
        "red": 122,
        "green": 179,
        "blue": 23,
        "hue": 82,
        "saturation": 77,
        "lightness": 40
    }, {
        "hex": "#9EAF83",
        "rgb": "rgb(158, 175, 131)",
        "hsl": "hsl(83, 22%, 60%)",
        "red": 158,
        "green": 175,
        "blue": 131,
        "hue": 83,
        "saturation": 22,
        "lightness": 60
    }, {
        "hex": "#C0CEAA",
        "rgb": "rgb(192, 206, 170)",
        "hsl": "hsl(83, 27%, 74%)",
        "red": 192,
        "green": 206,
        "blue": 170,
        "hue": 83,
        "saturation": 27,
        "lightness": 74
    }, {
        "hex": "#B8C99D",
        "rgb": "rgb(184, 201, 157)",
        "hsl": "hsl(83, 29%, 70%)",
        "red": 184,
        "green": 201,
        "blue": 157,
        "hue": 83,
        "saturation": 29,
        "lightness": 70
    }, {
        "hex": "#B8C99D",
        "rgb": "rgb(184, 201, 157)",
        "hsl": "hsl(83, 29%, 70%)",
        "red": 184,
        "green": 201,
        "blue": 157,
        "hue": 83,
        "saturation": 29,
        "lightness": 70
    }, {
        "hex": "#C4D4AB",
        "rgb": "rgb(196, 212, 171)",
        "hsl": "hsl(83, 32%, 75%)",
        "red": 196,
        "green": 212,
        "blue": 171,
        "hue": 83,
        "saturation": 32,
        "lightness": 75
    }, {
        "hex": "#C7D8AB",
        "rgb": "rgb(199, 216, 171)",
        "hsl": "hsl(83, 37%, 76%)",
        "red": 199,
        "green": 216,
        "blue": 171,
        "hue": 83,
        "saturation": 37,
        "lightness": 76
    }, {
        "hex": "#88C425",
        "rgb": "rgb(136, 196, 37)",
        "hsl": "hsl(83, 68%, 46%)",
        "red": 136,
        "green": 196,
        "blue": 37,
        "hue": 83,
        "saturation": 68,
        "lightness": 46
    }, {
        "hex": "#C2FC63",
        "rgb": "rgb(194, 252, 99)",
        "hsl": "hsl(83, 96%, 69%)",
        "red": 194,
        "green": 252,
        "blue": 99,
        "hue": 83,
        "saturation": 96,
        "lightness": 69
    }, {
        "hex": "#C0C2BD",
        "rgb": "rgb(192, 194, 189)",
        "hsl": "hsl(84, 4%, 75%)",
        "red": 192,
        "green": 194,
        "blue": 189,
        "hue": 84,
        "saturation": 4,
        "lightness": 75
    }, {
        "hex": "#E6E8E3",
        "rgb": "rgb(230, 232, 227)",
        "hsl": "hsl(84, 10%, 90%)",
        "red": 230,
        "green": 232,
        "blue": 227,
        "hue": 84,
        "saturation": 10,
        "lightness": 90
    }, {
        "hex": "#11130E",
        "rgb": "rgb(17, 19, 14)",
        "hsl": "hsl(84, 15%, 6%)",
        "red": 17,
        "green": 19,
        "blue": 14,
        "hue": 84,
        "saturation": 15,
        "lightness": 6
    }, {
        "hex": "#CCD6BD",
        "rgb": "rgb(204, 214, 189)",
        "hsl": "hsl(84, 23%, 79%)",
        "red": 204,
        "green": 214,
        "blue": 189,
        "hue": 84,
        "saturation": 23,
        "lightness": 79
    }, {
        "hex": "#B1C592",
        "rgb": "rgb(177, 197, 146)",
        "hsl": "hsl(84, 31%, 67%)",
        "red": 177,
        "green": 197,
        "blue": 146,
        "hue": 84,
        "saturation": 31,
        "lightness": 67
    }, {
        "hex": "#92B55F",
        "rgb": "rgb(146, 181, 95)",
        "hsl": "hsl(84, 37%, 54%)",
        "red": 146,
        "green": 181,
        "blue": 95,
        "hue": 84,
        "saturation": 37,
        "lightness": 54
    }, {
        "hex": "#DCEDC2",
        "rgb": "rgb(220, 237, 194)",
        "hsl": "hsl(84, 54%, 85%)",
        "red": 220,
        "green": 237,
        "blue": 194,
        "hue": 84,
        "saturation": 54,
        "lightness": 85
    }, {
        "hex": "#E1F5C4",
        "rgb": "rgb(225, 245, 196)",
        "hsl": "hsl(84, 71%, 86%)",
        "red": 225,
        "green": 245,
        "blue": 196,
        "hue": 84,
        "saturation": 71,
        "lightness": 86
    }, {
        "hex": "#E1F5C4",
        "rgb": "rgb(225, 245, 196)",
        "hsl": "hsl(84, 71%, 86%)",
        "red": 225,
        "green": 245,
        "blue": 196,
        "hue": 84,
        "saturation": 71,
        "lightness": 86
    }, {
        "hex": "#E1F5C4",
        "rgb": "rgb(225, 245, 196)",
        "hsl": "hsl(84, 71%, 86%)",
        "red": 225,
        "green": 245,
        "blue": 196,
        "hue": 84,
        "saturation": 71,
        "lightness": 86
    }, {
        "hex": "#E1F5C4",
        "rgb": "rgb(225, 245, 196)",
        "hsl": "hsl(84, 71%, 86%)",
        "red": 225,
        "green": 245,
        "blue": 196,
        "hue": 84,
        "saturation": 71,
        "lightness": 86
    }, {
        "hex": "#CCF390",
        "rgb": "rgb(204, 243, 144)",
        "hsl": "hsl(84, 80%, 76%)",
        "red": 204,
        "green": 243,
        "blue": 144,
        "hue": 84,
        "saturation": 80,
        "lightness": 76
    }, {
        "hex": "#E5FCC2",
        "rgb": "rgb(229, 252, 194)",
        "hsl": "hsl(84, 91%, 87%)",
        "red": 229,
        "green": 252,
        "blue": 194,
        "hue": 84,
        "saturation": 91,
        "lightness": 87
    }, {
        "hex": "#DDFFAB",
        "rgb": "rgb(221, 255, 171)",
        "hsl": "hsl(84, 100%, 84%)",
        "red": 221,
        "green": 255,
        "blue": 171,
        "hue": 84,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#A3AB98",
        "rgb": "rgb(163, 171, 152)",
        "hsl": "hsl(85, 10%, 63%)",
        "red": 163,
        "green": 171,
        "blue": 152,
        "hue": 85,
        "saturation": 10,
        "lightness": 63
    }, {
        "hex": "#88A65E",
        "rgb": "rgb(136, 166, 94)",
        "hsl": "hsl(85, 29%, 51%)",
        "red": 136,
        "green": 166,
        "blue": 94,
        "hue": 85,
        "saturation": 29,
        "lightness": 51
    }, {
        "hex": "#D6E1C7",
        "rgb": "rgb(214, 225, 199)",
        "hsl": "hsl(85, 30%, 83%)",
        "red": 214,
        "green": 225,
        "blue": 199,
        "hue": 85,
        "saturation": 30,
        "lightness": 83
    }, {
        "hex": "#D6E4C3",
        "rgb": "rgb(214, 228, 195)",
        "hsl": "hsl(85, 38%, 83%)",
        "red": 214,
        "green": 228,
        "blue": 195,
        "hue": 85,
        "saturation": 38,
        "lightness": 83
    }, {
        "hex": "#DBEDC2",
        "rgb": "rgb(219, 237, 194)",
        "hsl": "hsl(85, 54%, 85%)",
        "red": 219,
        "green": 237,
        "blue": 194,
        "hue": 85,
        "saturation": 54,
        "lightness": 85
    }, {
        "hex": "#CDEDA1",
        "rgb": "rgb(205, 237, 161)",
        "hsl": "hsl(85, 68%, 78%)",
        "red": 205,
        "green": 237,
        "blue": 161,
        "hue": 85,
        "saturation": 68,
        "lightness": 78
    }, {
        "hex": "#E9FCCF",
        "rgb": "rgb(233, 252, 207)",
        "hsl": "hsl(85, 88%, 90%)",
        "red": 233,
        "green": 252,
        "blue": 207,
        "hue": 85,
        "saturation": 88,
        "lightness": 90
    }, {
        "hex": "#3B3E37",
        "rgb": "rgb(59, 62, 55)",
        "hsl": "hsl(86, 6%, 23%)",
        "red": 59,
        "green": 62,
        "blue": 55,
        "hue": 86,
        "saturation": 6,
        "lightness": 23
    }, {
        "hex": "#697060",
        "rgb": "rgb(105, 112, 96)",
        "hsl": "hsl(86, 8%, 41%)",
        "red": 105,
        "green": 112,
        "blue": 96,
        "hue": 86,
        "saturation": 8,
        "lightness": 41
    }, {
        "hex": "#E1EDD1",
        "rgb": "rgb(225, 237, 209)",
        "hsl": "hsl(86, 44%, 87%)",
        "red": 225,
        "green": 237,
        "blue": 209,
        "hue": 86,
        "saturation": 44,
        "lightness": 87
    }, {
        "hex": "#A4C972",
        "rgb": "rgb(164, 201, 114)",
        "hsl": "hsl(86, 45%, 62%)",
        "red": 164,
        "green": 201,
        "blue": 114,
        "hue": 86,
        "saturation": 45,
        "lightness": 62
    }, {
        "hex": "#A3D95B",
        "rgb": "rgb(163, 217, 91)",
        "hsl": "hsl(86, 62%, 60%)",
        "red": 163,
        "green": 217,
        "blue": 91,
        "hue": 86,
        "saturation": 62,
        "lightness": 60
    }, {
        "hex": "#BEED80",
        "rgb": "rgb(190, 237, 128)",
        "hsl": "hsl(86, 75%, 72%)",
        "red": 190,
        "green": 237,
        "blue": 128,
        "hue": 86,
        "saturation": 75,
        "lightness": 72
    }, {
        "hex": "#BDED7E",
        "rgb": "rgb(189, 237, 126)",
        "hsl": "hsl(86, 76%, 71%)",
        "red": 189,
        "green": 237,
        "blue": 126,
        "hue": 86,
        "saturation": 76,
        "lightness": 71
    }, {
        "hex": "#D9F5B5",
        "rgb": "rgb(217, 245, 181)",
        "hsl": "hsl(86, 76%, 84%)",
        "red": 217,
        "green": 245,
        "blue": 181,
        "hue": 86,
        "saturation": 76,
        "lightness": 84
    }, {
        "hex": "#A9F04D",
        "rgb": "rgb(169, 240, 77)",
        "hsl": "hsl(86, 84%, 62%)",
        "red": 169,
        "green": 240,
        "blue": 77,
        "hue": 86,
        "saturation": 84,
        "lightness": 62
    }, {
        "hex": "#AEF055",
        "rgb": "rgb(174, 240, 85)",
        "hsl": "hsl(86, 84%, 64%)",
        "red": 174,
        "green": 240,
        "blue": 85,
        "hue": 86,
        "saturation": 84,
        "lightness": 64
    }, {
        "hex": "#CCFC8E",
        "rgb": "rgb(204, 252, 142)",
        "hsl": "hsl(86, 95%, 77%)",
        "red": 204,
        "green": 252,
        "blue": 142,
        "hue": 86,
        "saturation": 95,
        "lightness": 77
    }, {
        "hex": "#E5FEC5",
        "rgb": "rgb(229, 254, 197)",
        "hsl": "hsl(86, 97%, 88%)",
        "red": 229,
        "green": 254,
        "blue": 197,
        "hue": 86,
        "saturation": 97,
        "lightness": 88
    }, {
        "hex": "#AAB69B",
        "rgb": "rgb(170, 182, 155)",
        "hsl": "hsl(87, 16%, 66%)",
        "red": 170,
        "green": 182,
        "blue": 155,
        "hue": 87,
        "saturation": 16,
        "lightness": 66
    }, {
        "hex": "#AAB69B",
        "rgb": "rgb(170, 182, 155)",
        "hsl": "hsl(87, 16%, 66%)",
        "red": 170,
        "green": 182,
        "blue": 155,
        "hue": 87,
        "saturation": 16,
        "lightness": 66
    }, {
        "hex": "#9EAE8A",
        "rgb": "rgb(158, 174, 138)",
        "hsl": "hsl(87, 18%, 61%)",
        "red": 158,
        "green": 174,
        "blue": 138,
        "hue": 87,
        "saturation": 18,
        "lightness": 61
    }, {
        "hex": "#9EAE8A",
        "rgb": "rgb(158, 174, 138)",
        "hsl": "hsl(87, 18%, 61%)",
        "red": 158,
        "green": 174,
        "blue": 138,
        "hue": 87,
        "saturation": 18,
        "lightness": 61
    }, {
        "hex": "#BACCA4",
        "rgb": "rgb(186, 204, 164)",
        "hsl": "hsl(87, 28%, 72%)",
        "red": 186,
        "green": 204,
        "blue": 164,
        "hue": 87,
        "saturation": 28,
        "lightness": 72
    }, {
        "hex": "#94BA65",
        "rgb": "rgb(148, 186, 101)",
        "hsl": "hsl(87, 38%, 56%)",
        "red": 148,
        "green": 186,
        "blue": 101,
        "hue": 87,
        "saturation": 38,
        "lightness": 56
    }, {
        "hex": "#D6E6C3",
        "rgb": "rgb(214, 230, 195)",
        "hsl": "hsl(87, 41%, 83%)",
        "red": 214,
        "green": 230,
        "blue": 195,
        "hue": 87,
        "saturation": 41,
        "lightness": 83
    }, {
        "hex": "#99DB49",
        "rgb": "rgb(153, 219, 73)",
        "hsl": "hsl(87, 67%, 57%)",
        "red": 153,
        "green": 219,
        "blue": 73,
        "hue": 87,
        "saturation": 67,
        "lightness": 57
    }, {
        "hex": "#7A8370",
        "rgb": "rgb(122, 131, 112)",
        "hsl": "hsl(88, 8%, 48%)",
        "red": 122,
        "green": 131,
        "blue": 112,
        "hue": 88,
        "saturation": 8,
        "lightness": 48
    }, {
        "hex": "#839074",
        "rgb": "rgb(131, 144, 116)",
        "hsl": "hsl(88, 11%, 51%)",
        "red": 131,
        "green": 144,
        "blue": 116,
        "hue": 88,
        "saturation": 11,
        "lightness": 51
    }, {
        "hex": "#879676",
        "rgb": "rgb(135, 150, 118)",
        "hsl": "hsl(88, 13%, 53%)",
        "red": 135,
        "green": 150,
        "blue": 118,
        "hue": 88,
        "saturation": 13,
        "lightness": 53
    }, {
        "hex": "#96A782",
        "rgb": "rgb(150, 167, 130)",
        "hsl": "hsl(88, 17%, 58%)",
        "red": 150,
        "green": 167,
        "blue": 130,
        "hue": 88,
        "saturation": 17,
        "lightness": 58
    }, {
        "hex": "#BAC9A9",
        "rgb": "rgb(186, 201, 169)",
        "hsl": "hsl(88, 23%, 73%)",
        "red": 186,
        "green": 201,
        "blue": 169,
        "hue": 88,
        "saturation": 23,
        "lightness": 73
    }, {
        "hex": "#9FB982",
        "rgb": "rgb(159, 185, 130)",
        "hsl": "hsl(88, 28%, 62%)",
        "red": 159,
        "green": 185,
        "blue": 130,
        "hue": 88,
        "saturation": 28,
        "lightness": 62
    }, {
        "hex": "#94BB68",
        "rgb": "rgb(148, 187, 104)",
        "hsl": "hsl(88, 38%, 57%)",
        "red": 148,
        "green": 187,
        "blue": 104,
        "hue": 88,
        "saturation": 38,
        "lightness": 57
    }, {
        "hex": "#CDE4B3",
        "rgb": "rgb(205, 228, 179)",
        "hsl": "hsl(88, 48%, 80%)",
        "red": 205,
        "green": 228,
        "blue": 179,
        "hue": 88,
        "saturation": 48,
        "lightness": 80
    }, {
        "hex": "#E7FCCF",
        "rgb": "rgb(231, 252, 207)",
        "hsl": "hsl(88, 88%, 90%)",
        "red": 231,
        "green": 252,
        "blue": 207,
        "hue": 88,
        "saturation": 88,
        "lightness": 90
    }, {
        "hex": "#EEFFDB",
        "rgb": "rgb(238, 255, 219)",
        "hsl": "hsl(88, 100%, 93%)",
        "red": 238,
        "green": 255,
        "blue": 219,
        "hue": 88,
        "saturation": 100,
        "lightness": 93
    }, {
        "hex": "#A0AB94",
        "rgb": "rgb(160, 171, 148)",
        "hsl": "hsl(89, 12%, 63%)",
        "red": 160,
        "green": 171,
        "blue": 148,
        "hue": 89,
        "saturation": 12,
        "lightness": 63
    }, {
        "hex": "#ACBA9D",
        "rgb": "rgb(172, 186, 157)",
        "hsl": "hsl(89, 17%, 67%)",
        "red": 172,
        "green": 186,
        "blue": 157,
        "hue": 89,
        "saturation": 17,
        "lightness": 67
    }, {
        "hex": "#A6C288",
        "rgb": "rgb(166, 194, 136)",
        "hsl": "hsl(89, 32%, 65%)",
        "red": 166,
        "green": 194,
        "blue": 136,
        "hue": 89,
        "saturation": 32,
        "lightness": 65
    }, {
        "hex": "#A7C686",
        "rgb": "rgb(167, 198, 134)",
        "hsl": "hsl(89, 36%, 65%)",
        "red": 167,
        "green": 198,
        "blue": 134,
        "hue": 89,
        "saturation": 36,
        "lightness": 65
    }, {
        "hex": "#A5CC7A",
        "rgb": "rgb(165, 204, 122)",
        "hsl": "hsl(89, 45%, 64%)",
        "red": 165,
        "green": 204,
        "blue": 122,
        "hue": 89,
        "saturation": 45,
        "lightness": 64
    }, {
        "hex": "#C4E0A6",
        "rgb": "rgb(196, 224, 166)",
        "hsl": "hsl(89, 48%, 76%)",
        "red": 196,
        "green": 224,
        "blue": 166,
        "hue": 89,
        "saturation": 48,
        "lightness": 76
    }, {
        "hex": "#90FF17",
        "rgb": "rgb(144, 255, 23)",
        "hsl": "hsl(89, 100%, 55%)",
        "red": 144,
        "green": 255,
        "blue": 23,
        "hue": 89,
        "saturation": 100,
        "lightness": 55
    }, {
        "hex": "#DCFFB6",
        "rgb": "rgb(220, 255, 182)",
        "hsl": "hsl(89, 100%, 86%)",
        "red": 220,
        "green": 255,
        "blue": 182,
        "hue": 89,
        "saturation": 100,
        "lightness": 86
    }, {
        "hex": "#2D2E2C",
        "rgb": "rgb(45, 46, 44)",
        "hsl": "hsl(90, 2%, 18%)",
        "red": 45,
        "green": 46,
        "blue": 44,
        "hue": 90,
        "saturation": 2,
        "lightness": 18
    }, {
        "hex": "#353634",
        "rgb": "rgb(53, 54, 52)",
        "hsl": "hsl(90, 2%, 21%)",
        "red": 53,
        "green": 54,
        "blue": 52,
        "hue": 90,
        "saturation": 2,
        "lightness": 21
    }, {
        "hex": "#949A8E",
        "rgb": "rgb(148, 154, 142)",
        "hsl": "hsl(90, 6%, 58%)",
        "red": 148,
        "green": 154,
        "blue": 142,
        "hue": 90,
        "saturation": 6,
        "lightness": 58
    }, {
        "hex": "#7C8A6E",
        "rgb": "rgb(124, 138, 110)",
        "hsl": "hsl(90, 11%, 49%)",
        "red": 124,
        "green": 138,
        "blue": 110,
        "hue": 90,
        "saturation": 11,
        "lightness": 49
    }, {
        "hex": "#CAD1C3",
        "rgb": "rgb(202, 209, 195)",
        "hsl": "hsl(90, 13%, 79%)",
        "red": 202,
        "green": 209,
        "blue": 195,
        "hue": 90,
        "saturation": 13,
        "lightness": 79
    }, {
        "hex": "#384030",
        "rgb": "rgb(56, 64, 48)",
        "hsl": "hsl(90, 14%, 22%)",
        "red": 56,
        "green": 64,
        "blue": 48,
        "hue": 90,
        "saturation": 14,
        "lightness": 22
    }, {
        "hex": "#607848",
        "rgb": "rgb(96, 120, 72)",
        "hsl": "hsl(90, 25%, 38%)",
        "red": 96,
        "green": 120,
        "blue": 72,
        "hue": 90,
        "saturation": 25,
        "lightness": 38
    }, {
        "hex": "#C6D4B8",
        "rgb": "rgb(198, 212, 184)",
        "hsl": "hsl(90, 25%, 78%)",
        "red": 198,
        "green": 212,
        "blue": 184,
        "hue": 90,
        "saturation": 25,
        "lightness": 78
    }, {
        "hex": "#A8C090",
        "rgb": "rgb(168, 192, 144)",
        "hsl": "hsl(90, 28%, 66%)",
        "red": 168,
        "green": 192,
        "blue": 144,
        "hue": 90,
        "saturation": 28,
        "lightness": 66
    }, {
        "hex": "#E1ECD6",
        "rgb": "rgb(225, 236, 214)",
        "hsl": "hsl(90, 37%, 88%)",
        "red": 225,
        "green": 236,
        "blue": 214,
        "hue": 90,
        "saturation": 37,
        "lightness": 88
    }, {
        "hex": "#BAF77C",
        "rgb": "rgb(186, 247, 124)",
        "hsl": "hsl(90, 88%, 73%)",
        "red": 186,
        "green": 247,
        "blue": 124,
        "hue": 90,
        "saturation": 88,
        "lightness": 73
    }, {
        "hex": "#D8FCB3",
        "rgb": "rgb(216, 252, 179)",
        "hsl": "hsl(90, 92%, 85%)",
        "red": 216,
        "green": 252,
        "blue": 179,
        "hue": 90,
        "saturation": 92,
        "lightness": 85
    }, {
        "hex": "#E0FFC2",
        "rgb": "rgb(224, 255, 194)",
        "hsl": "hsl(90, 100%, 88%)",
        "red": 224,
        "green": 255,
        "blue": 194,
        "hue": 90,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#718063",
        "rgb": "rgb(113, 128, 99)",
        "hsl": "hsl(91, 13%, 45%)",
        "red": 113,
        "green": 128,
        "blue": 99,
        "hue": 91,
        "saturation": 13,
        "lightness": 45
    }, {
        "hex": "#89A46F",
        "rgb": "rgb(137, 164, 111)",
        "hsl": "hsl(91, 23%, 54%)",
        "red": 137,
        "green": 164,
        "blue": 111,
        "hue": 91,
        "saturation": 23,
        "lightness": 54
    }, {
        "hex": "#BCD9A0",
        "rgb": "rgb(188, 217, 160)",
        "hsl": "hsl(91, 43%, 74%)",
        "red": 188,
        "green": 217,
        "blue": 160,
        "hue": 91,
        "saturation": 43,
        "lightness": 74
    }, {
        "hex": "#C9E5AF",
        "rgb": "rgb(201, 229, 175)",
        "hsl": "hsl(91, 51%, 79%)",
        "red": 201,
        "green": 229,
        "blue": 175,
        "hue": 91,
        "saturation": 51,
        "lightness": 79
    }, {
        "hex": "#8FD053",
        "rgb": "rgb(143, 208, 83)",
        "hsl": "hsl(91, 57%, 57%)",
        "red": 143,
        "green": 208,
        "blue": 83,
        "hue": 91,
        "saturation": 57,
        "lightness": 57
    }, {
        "hex": "#9FD86B",
        "rgb": "rgb(159, 216, 107)",
        "hsl": "hsl(91, 58%, 63%)",
        "red": 159,
        "green": 216,
        "blue": 107,
        "hue": 91,
        "saturation": 58,
        "lightness": 63
    }, {
        "hex": "#E2F7CE",
        "rgb": "rgb(226, 247, 206)",
        "hsl": "hsl(91, 72%, 89%)",
        "red": 226,
        "green": 247,
        "blue": 206,
        "hue": 91,
        "saturation": 72,
        "lightness": 89
    }, {
        "hex": "#E0FFC3",
        "rgb": "rgb(224, 255, 195)",
        "hsl": "hsl(91, 100%, 88%)",
        "red": 224,
        "green": 255,
        "blue": 195,
        "hue": 91,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#A4AC9D",
        "rgb": "rgb(164, 172, 157)",
        "hsl": "hsl(92, 8%, 65%)",
        "red": 164,
        "green": 172,
        "blue": 157,
        "hue": 92,
        "saturation": 8,
        "lightness": 65
    }, {
        "hex": "#8FA080",
        "rgb": "rgb(143, 160, 128)",
        "hsl": "hsl(92, 14%, 56%)",
        "red": 143,
        "green": 160,
        "blue": 128,
        "hue": 92,
        "saturation": 14,
        "lightness": 56
    }, {
        "hex": "#D1DBC8",
        "rgb": "rgb(209, 219, 200)",
        "hsl": "hsl(92, 21%, 82%)",
        "red": 209,
        "green": 219,
        "blue": 200,
        "hue": 92,
        "saturation": 21,
        "lightness": 82
    }, {
        "hex": "#A8BD95",
        "rgb": "rgb(168, 189, 149)",
        "hsl": "hsl(92, 23%, 66%)",
        "red": 168,
        "green": 189,
        "blue": 149,
        "hue": 92,
        "saturation": 23,
        "lightness": 66
    }, {
        "hex": "#C6D6B8",
        "rgb": "rgb(198, 214, 184)",
        "hsl": "hsl(92, 27%, 78%)",
        "red": 198,
        "green": 214,
        "blue": 184,
        "hue": 92,
        "saturation": 27,
        "lightness": 78
    }, {
        "hex": "#BFD4AD",
        "rgb": "rgb(191, 212, 173)",
        "hsl": "hsl(92, 31%, 75%)",
        "red": 191,
        "green": 212,
        "blue": 173,
        "hue": 92,
        "saturation": 31,
        "lightness": 75
    }, {
        "hex": "#B6D0A0",
        "rgb": "rgb(182, 208, 160)",
        "hsl": "hsl(92, 34%, 72%)",
        "red": 182,
        "green": 208,
        "blue": 160,
        "hue": 92,
        "saturation": 34,
        "lightness": 72
    }, {
        "hex": "#9FB38F",
        "rgb": "rgb(159, 179, 143)",
        "hsl": "hsl(93, 19%, 63%)",
        "red": 159,
        "green": 179,
        "blue": 143,
        "hue": 93,
        "saturation": 19,
        "lightness": 63
    }, {
        "hex": "#A6BF91",
        "rgb": "rgb(166, 191, 145)",
        "hsl": "hsl(93, 26%, 66%)",
        "red": 166,
        "green": 191,
        "blue": 145,
        "hue": 93,
        "saturation": 26,
        "lightness": 66
    }, {
        "hex": "#BED6AB",
        "rgb": "rgb(190, 214, 171)",
        "hsl": "hsl(93, 34%, 75%)",
        "red": 190,
        "green": 214,
        "blue": 171,
        "hue": 93,
        "saturation": 34,
        "lightness": 75
    }, {
        "hex": "#D3E4C5",
        "rgb": "rgb(211, 228, 197)",
        "hsl": "hsl(93, 36%, 83%)",
        "red": 211,
        "green": 228,
        "blue": 197,
        "hue": 93,
        "saturation": 36,
        "lightness": 83
    }, {
        "hex": "#ACCE91",
        "rgb": "rgb(172, 206, 145)",
        "hsl": "hsl(93, 38%, 69%)",
        "red": 172,
        "green": 206,
        "blue": 145,
        "hue": 93,
        "saturation": 38,
        "lightness": 69
    }, {
        "hex": "#B9D7A1",
        "rgb": "rgb(185, 215, 161)",
        "hsl": "hsl(93, 40%, 74%)",
        "red": 185,
        "green": 215,
        "blue": 161,
        "hue": 93,
        "saturation": 40,
        "lightness": 74
    }, {
        "hex": "#E4F3D8",
        "rgb": "rgb(228, 243, 216)",
        "hsl": "hsl(93, 53%, 90%)",
        "red": 228,
        "green": 243,
        "blue": 216,
        "hue": 93,
        "saturation": 53,
        "lightness": 90
    }, {
        "hex": "#A9B79E",
        "rgb": "rgb(169, 183, 158)",
        "hsl": "hsl(94, 15%, 67%)",
        "red": 169,
        "green": 183,
        "blue": 158,
        "hue": 94,
        "saturation": 15,
        "lightness": 67
    }, {
        "hex": "#ABBB9F",
        "rgb": "rgb(171, 187, 159)",
        "hsl": "hsl(94, 17%, 68%)",
        "red": 171,
        "green": 187,
        "blue": 159,
        "hue": 94,
        "saturation": 17,
        "lightness": 68
    }, {
        "hex": "#BFCDB4",
        "rgb": "rgb(191, 205, 180)",
        "hsl": "hsl(94, 20%, 75%)",
        "red": 191,
        "green": 205,
        "blue": 180,
        "hue": 94,
        "saturation": 20,
        "lightness": 75
    }, {
        "hex": "#AABE9B",
        "rgb": "rgb(170, 190, 155)",
        "hsl": "hsl(94, 21%, 68%)",
        "red": 170,
        "green": 190,
        "blue": 155,
        "hue": 94,
        "saturation": 21,
        "lightness": 68
    }, {
        "hex": "#B7C9A9",
        "rgb": "rgb(183, 201, 169)",
        "hsl": "hsl(94, 23%, 73%)",
        "red": 183,
        "green": 201,
        "blue": 169,
        "hue": 94,
        "saturation": 23,
        "lightness": 73
    }, {
        "hex": "#CDDBC2",
        "rgb": "rgb(205, 219, 194)",
        "hsl": "hsl(94, 26%, 81%)",
        "red": 205,
        "green": 219,
        "blue": 194,
        "hue": 94,
        "saturation": 26,
        "lightness": 81
    }, {
        "hex": "#D2DFC8",
        "rgb": "rgb(210, 223, 200)",
        "hsl": "hsl(94, 26%, 83%)",
        "red": 210,
        "green": 223,
        "blue": 200,
        "hue": 94,
        "saturation": 26,
        "lightness": 83
    }, {
        "hex": "#B7D1A3",
        "rgb": "rgb(183, 209, 163)",
        "hsl": "hsl(94, 33%, 73%)",
        "red": 183,
        "green": 209,
        "blue": 163,
        "hue": 94,
        "saturation": 33,
        "lightness": 73
    }, {
        "hex": "#A6C88C",
        "rgb": "rgb(166, 200, 140)",
        "hsl": "hsl(94, 35%, 67%)",
        "red": 166,
        "green": 200,
        "blue": 140,
        "hue": 94,
        "saturation": 35,
        "lightness": 67
    }, {
        "hex": "#C0DBAB",
        "rgb": "rgb(192, 219, 171)",
        "hsl": "hsl(94, 40%, 76%)",
        "red": 192,
        "green": 219,
        "blue": 171,
        "hue": 94,
        "saturation": 40,
        "lightness": 76
    }, {
        "hex": "#B6D89C",
        "rgb": "rgb(182, 216, 156)",
        "hsl": "hsl(94, 43%, 73%)",
        "red": 182,
        "green": 216,
        "blue": 156,
        "hue": 94,
        "saturation": 43,
        "lightness": 73
    }, {
        "hex": "#9EB48E",
        "rgb": "rgb(158, 180, 142)",
        "hsl": "hsl(95, 20%, 63%)",
        "red": 158,
        "green": 180,
        "blue": 142,
        "hue": 95,
        "saturation": 20,
        "lightness": 63
    }, {
        "hex": "#A8BB9A",
        "rgb": "rgb(168, 187, 154)",
        "hsl": "hsl(95, 20%, 67%)",
        "red": 168,
        "green": 187,
        "blue": 154,
        "hue": 95,
        "saturation": 20,
        "lightness": 67
    }, {
        "hex": "#C4DBB4",
        "rgb": "rgb(196, 219, 180)",
        "hsl": "hsl(95, 35%, 78%)",
        "red": 196,
        "green": 219,
        "blue": 180,
        "hue": 95,
        "saturation": 35,
        "lightness": 78
    }, {
        "hex": "#CDE0BF",
        "rgb": "rgb(205, 224, 191)",
        "hsl": "hsl(95, 35%, 81%)",
        "red": 205,
        "green": 224,
        "blue": 191,
        "hue": 95,
        "saturation": 35,
        "lightness": 81
    }, {
        "hex": "#BFD8AD",
        "rgb": "rgb(191, 216, 173)",
        "hsl": "hsl(95, 36%, 76%)",
        "red": 191,
        "green": 216,
        "blue": 173,
        "hue": 95,
        "saturation": 36,
        "lightness": 76
    }, {
        "hex": "#9ACC77",
        "rgb": "rgb(154, 204, 119)",
        "hsl": "hsl(95, 45%, 63%)",
        "red": 154,
        "green": 204,
        "blue": 119,
        "hue": 95,
        "saturation": 45,
        "lightness": 63
    }, {
        "hex": "#B2DE93",
        "rgb": "rgb(178, 222, 147)",
        "hsl": "hsl(95, 53%, 72%)",
        "red": 178,
        "green": 222,
        "blue": 147,
        "hue": 95,
        "saturation": 53,
        "lightness": 72
    }, {
        "hex": "#BFFF91",
        "rgb": "rgb(191, 255, 145)",
        "hsl": "hsl(95, 100%, 78%)",
        "red": 191,
        "green": 255,
        "blue": 145,
        "hue": 95,
        "saturation": 100,
        "lightness": 78
    }, {
        "hex": "#AEBEA3",
        "rgb": "rgb(174, 190, 163)",
        "hsl": "hsl(96, 17%, 69%)",
        "red": 174,
        "green": 190,
        "blue": 163,
        "hue": 96,
        "saturation": 17,
        "lightness": 69
    }, {
        "hex": "#668C4D",
        "rgb": "rgb(102, 140, 77)",
        "hsl": "hsl(96, 29%, 43%)",
        "red": 102,
        "green": 140,
        "blue": 77,
        "hue": 96,
        "saturation": 29,
        "lightness": 43
    }, {
        "hex": "#B5CEA4",
        "rgb": "rgb(181, 206, 164)",
        "hsl": "hsl(96, 30%, 73%)",
        "red": 181,
        "green": 206,
        "blue": 164,
        "hue": 96,
        "saturation": 30,
        "lightness": 73
    }, {
        "hex": "#A3C68C",
        "rgb": "rgb(163, 198, 140)",
        "hsl": "hsl(96, 34%, 66%)",
        "red": 163,
        "green": 198,
        "blue": 140,
        "hue": 96,
        "saturation": 34,
        "lightness": 66
    }, {
        "hex": "#A4CA8B",
        "rgb": "rgb(164, 202, 139)",
        "hsl": "hsl(96, 37%, 67%)",
        "red": 164,
        "green": 202,
        "blue": 139,
        "hue": 96,
        "saturation": 37,
        "lightness": 67
    }, {
        "hex": "#BADDA3",
        "rgb": "rgb(186, 221, 163)",
        "hsl": "hsl(96, 46%, 75%)",
        "red": 186,
        "green": 221,
        "blue": 163,
        "hue": 96,
        "saturation": 46,
        "lightness": 75
    }, {
        "hex": "#BCDEA5",
        "rgb": "rgb(188, 222, 165)",
        "hsl": "hsl(96, 46%, 76%)",
        "red": 188,
        "green": 222,
        "blue": 165,
        "hue": 96,
        "saturation": 46,
        "lightness": 76
    }, {
        "hex": "#A9DA88",
        "rgb": "rgb(169, 218, 136)",
        "hsl": "hsl(96, 53%, 69%)",
        "red": 169,
        "green": 218,
        "blue": 136,
        "hue": 96,
        "saturation": 53,
        "lightness": 69
    }, {
        "hex": "#F8FEF4",
        "rgb": "rgb(248, 254, 244)",
        "hsl": "hsl(96, 83%, 98%)",
        "red": 248,
        "green": 254,
        "blue": 244,
        "hue": 96,
        "saturation": 83,
        "lightness": 98
    }, {
        "hex": "#E0FFCC",
        "rgb": "rgb(224, 255, 204)",
        "hsl": "hsl(96, 100%, 90%)",
        "red": 224,
        "green": 255,
        "blue": 204,
        "hue": 96,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#F3FFEB",
        "rgb": "rgb(243, 255, 235)",
        "hsl": "hsl(96, 100%, 96%)",
        "red": 243,
        "green": 255,
        "blue": 235,
        "hue": 96,
        "saturation": 100,
        "lightness": 96
    }, {
        "hex": "#708066",
        "rgb": "rgb(112, 128, 102)",
        "hsl": "hsl(97, 11%, 45%)",
        "red": 112,
        "green": 128,
        "blue": 102,
        "hue": 97,
        "saturation": 11,
        "lightness": 45
    }, {
        "hex": "#C8D6BF",
        "rgb": "rgb(200, 214, 191)",
        "hsl": "hsl(97, 22%, 79%)",
        "red": 200,
        "green": 214,
        "blue": 191,
        "hue": 97,
        "saturation": 22,
        "lightness": 79
    }, {
        "hex": "#2A5C0B",
        "rgb": "rgb(42, 92, 11)",
        "hsl": "hsl(97, 79%, 20%)",
        "red": 42,
        "green": 92,
        "blue": 11,
        "hue": 97,
        "saturation": 79,
        "lightness": 20
    }, {
        "hex": "#D1F7BA",
        "rgb": "rgb(209, 247, 186)",
        "hsl": "hsl(97, 79%, 85%)",
        "red": 209,
        "green": 247,
        "blue": 186,
        "hue": 97,
        "saturation": 79,
        "lightness": 85
    }, {
        "hex": "#7F9473",
        "rgb": "rgb(127, 148, 115)",
        "hsl": "hsl(98, 13%, 52%)",
        "red": 127,
        "green": 148,
        "blue": 115,
        "hue": 98,
        "saturation": 13,
        "lightness": 52
    }, {
        "hex": "#B3C8A7",
        "rgb": "rgb(179, 200, 167)",
        "hsl": "hsl(98, 23%, 72%)",
        "red": 179,
        "green": 200,
        "blue": 167,
        "hue": 98,
        "saturation": 23,
        "lightness": 72
    }, {
        "hex": "#ACC59D",
        "rgb": "rgb(172, 197, 157)",
        "hsl": "hsl(98, 26%, 69%)",
        "red": 172,
        "green": 197,
        "blue": 157,
        "hue": 98,
        "saturation": 26,
        "lightness": 69
    }, {
        "hex": "#B2CBA3",
        "rgb": "rgb(178, 203, 163)",
        "hsl": "hsl(98, 28%, 72%)",
        "red": 178,
        "green": 203,
        "blue": 163,
        "hue": 98,
        "saturation": 28,
        "lightness": 72
    }, {
        "hex": "#A8C896",
        "rgb": "rgb(168, 200, 150)",
        "hsl": "hsl(98, 31%, 69%)",
        "red": 168,
        "green": 200,
        "blue": 150,
        "hue": 98,
        "saturation": 31,
        "lightness": 69
    }, {
        "hex": "#77AB59",
        "rgb": "rgb(119, 171, 89)",
        "hsl": "hsl(98, 33%, 51%)",
        "red": 119,
        "green": 171,
        "blue": 89,
        "hue": 98,
        "saturation": 33,
        "lightness": 51
    }, {
        "hex": "#B6D3A5",
        "rgb": "rgb(182, 211, 165)",
        "hsl": "hsl(98, 34%, 74%)",
        "red": 182,
        "green": 211,
        "blue": 165,
        "hue": 98,
        "saturation": 34,
        "lightness": 74
    }, {
        "hex": "#B3E099",
        "rgb": "rgb(179, 224, 153)",
        "hsl": "hsl(98, 53%, 74%)",
        "red": 179,
        "green": 224,
        "blue": 153,
        "hue": 98,
        "saturation": 53,
        "lightness": 74
    }, {
        "hex": "#E6FCD9",
        "rgb": "rgb(230, 252, 217)",
        "hsl": "hsl(98, 85%, 92%)",
        "red": 230,
        "green": 252,
        "blue": 217,
        "hue": 98,
        "saturation": 85,
        "lightness": 92
    }, {
        "hex": "#E4FFD4",
        "rgb": "rgb(228, 255, 212)",
        "hsl": "hsl(98, 100%, 92%)",
        "red": 228,
        "green": 255,
        "blue": 212,
        "hue": 98,
        "saturation": 100,
        "lightness": 92
    }, {
        "hex": "#C8D9BF",
        "rgb": "rgb(200, 217, 191)",
        "hsl": "hsl(99, 25%, 80%)",
        "red": 200,
        "green": 217,
        "blue": 191,
        "hue": 99,
        "saturation": 25,
        "lightness": 80
    }, {
        "hex": "#B7E1A1",
        "rgb": "rgb(183, 225, 161)",
        "hsl": "hsl(99, 52%, 76%)",
        "red": 183,
        "green": 225,
        "blue": 161,
        "hue": 99,
        "saturation": 52,
        "lightness": 76
    }, {
        "hex": "#A4F479",
        "rgb": "rgb(164, 244, 121)",
        "hsl": "hsl(99, 85%, 72%)",
        "red": 164,
        "green": 244,
        "blue": 121,
        "hue": 99,
        "saturation": 85,
        "lightness": 72
    }, {
        "hex": "#829D74",
        "rgb": "rgb(130, 157, 116)",
        "hsl": "hsl(100, 17%, 54%)",
        "red": 130,
        "green": 157,
        "blue": 116,
        "hue": 100,
        "saturation": 17,
        "lightness": 54
    }, {
        "hex": "#A2CA8E",
        "rgb": "rgb(162, 202, 142)",
        "hsl": "hsl(100, 36%, 67%)",
        "red": 162,
        "green": 202,
        "blue": 142,
        "hue": 100,
        "saturation": 36,
        "lightness": 67
    }, {
        "hex": "#D3EBC7",
        "rgb": "rgb(211, 235, 199)",
        "hsl": "hsl(100, 47%, 85%)",
        "red": 211,
        "green": 235,
        "blue": 199,
        "hue": 100,
        "saturation": 47,
        "lightness": 85
    }, {
        "hex": "#010300",
        "rgb": "rgb(1, 3, 0)",
        "hsl": "hsl(100, 100%, 1%)",
        "red": 1,
        "green": 3,
        "blue": 0,
        "hue": 100,
        "saturation": 100,
        "lightness": 1
    }, {
        "hex": "#85AE72",
        "rgb": "rgb(133, 174, 114)",
        "hsl": "hsl(101, 27%, 56%)",
        "red": 133,
        "green": 174,
        "blue": 114,
        "hue": 101,
        "saturation": 27,
        "lightness": 56
    }, {
        "hex": "#9ABC8A",
        "rgb": "rgb(154, 188, 138)",
        "hsl": "hsl(101, 27%, 64%)",
        "red": 154,
        "green": 188,
        "blue": 138,
        "hue": 101,
        "saturation": 27,
        "lightness": 64
    }, {
        "hex": "#BCE1AB",
        "rgb": "rgb(188, 225, 171)",
        "hsl": "hsl(101, 47%, 78%)",
        "red": 188,
        "green": 225,
        "blue": 171,
        "hue": 101,
        "saturation": 47,
        "lightness": 78
    }, {
        "hex": "#6ECF42",
        "rgb": "rgb(110, 207, 66)",
        "hsl": "hsl(101, 59%, 54%)",
        "red": 110,
        "green": 207,
        "blue": 66,
        "hue": 101,
        "saturation": 59,
        "lightness": 54
    }, {
        "hex": "#B8FD99",
        "rgb": "rgb(184, 253, 153)",
        "hsl": "hsl(101, 96%, 80%)",
        "red": 184,
        "green": 253,
        "blue": 153,
        "hue": 101,
        "saturation": 96,
        "lightness": 80
    }, {
        "hex": "#56704B",
        "rgb": "rgb(86, 112, 75)",
        "hsl": "hsl(102, 20%, 37%)",
        "red": 86,
        "green": 112,
        "blue": 75,
        "hue": 102,
        "saturation": 20,
        "lightness": 37
    }, {
        "hex": "#D0DCCB",
        "rgb": "rgb(208, 220, 203)",
        "hsl": "hsl(102, 20%, 83%)",
        "red": 208,
        "green": 220,
        "blue": 203,
        "hue": 102,
        "saturation": 20,
        "lightness": 83
    }, {
        "hex": "#9BB78F",
        "rgb": "rgb(155, 183, 143)",
        "hsl": "hsl(102, 22%, 64%)",
        "red": 155,
        "green": 183,
        "blue": 143,
        "hue": 102,
        "saturation": 22,
        "lightness": 64
    }, {
        "hex": "#A2BC97",
        "rgb": "rgb(162, 188, 151)",
        "hsl": "hsl(102, 22%, 66%)",
        "red": 162,
        "green": 188,
        "blue": 151,
        "hue": 102,
        "saturation": 22,
        "lightness": 66
    }, {
        "hex": "#CBE5C0",
        "rgb": "rgb(203, 229, 192)",
        "hsl": "hsl(102, 42%, 83%)",
        "red": 203,
        "green": 229,
        "blue": 192,
        "hue": 102,
        "saturation": 42,
        "lightness": 83
    }, {
        "hex": "#9AE07D",
        "rgb": "rgb(154, 224, 125)",
        "hsl": "hsl(102, 61%, 68%)",
        "red": 154,
        "green": 224,
        "blue": 125,
        "hue": 102,
        "saturation": 61,
        "lightness": 68
    }, {
        "hex": "#BEC3BC",
        "rgb": "rgb(190, 195, 188)",
        "hsl": "hsl(103, 6%, 75%)",
        "red": 190,
        "green": 195,
        "blue": 188,
        "hue": 103,
        "saturation": 6,
        "lightness": 75
    }, {
        "hex": "#92A68A",
        "rgb": "rgb(146, 166, 138)",
        "hsl": "hsl(103, 14%, 60%)",
        "red": 146,
        "green": 166,
        "blue": 138,
        "hue": 103,
        "saturation": 14,
        "lightness": 60
    }, {
        "hex": "#BFD4B7",
        "rgb": "rgb(191, 212, 183)",
        "hsl": "hsl(103, 25%, 77%)",
        "red": 191,
        "green": 212,
        "blue": 183,
        "hue": 103,
        "saturation": 25,
        "lightness": 77
    }, {
        "hex": "#78AE62",
        "rgb": "rgb(120, 174, 98)",
        "hsl": "hsl(103, 32%, 53%)",
        "red": 120,
        "green": 174,
        "blue": 98,
        "hue": 103,
        "saturation": 32,
        "lightness": 53
    }, {
        "hex": "#BBDEAD",
        "rgb": "rgb(187, 222, 173)",
        "hsl": "hsl(103, 43%, 77%)",
        "red": 187,
        "green": 222,
        "blue": 173,
        "hue": 103,
        "saturation": 43,
        "lightness": 77
    }, {
        "hex": "#6D756A",
        "rgb": "rgb(109, 117, 106)",
        "hsl": "hsl(104, 5%, 44%)",
        "red": 109,
        "green": 117,
        "blue": 106,
        "hue": 104,
        "saturation": 5,
        "lightness": 44
    }, {
        "hex": "#93BA85",
        "rgb": "rgb(147, 186, 133)",
        "hsl": "hsl(104, 28%, 63%)",
        "red": 147,
        "green": 186,
        "blue": 133,
        "hue": 104,
        "saturation": 28,
        "lightness": 63
    }, {
        "hex": "#ABEE93",
        "rgb": "rgb(171, 238, 147)",
        "hsl": "hsl(104, 73%, 75%)",
        "red": 171,
        "green": 238,
        "blue": 147,
        "hue": 104,
        "saturation": 73,
        "lightness": 75
    }, {
        "hex": "#E9FFE1",
        "rgb": "rgb(233, 255, 225)",
        "hsl": "hsl(104, 100%, 94%)",
        "red": 233,
        "green": 255,
        "blue": 225,
        "hue": 104,
        "saturation": 100,
        "lightness": 94
    }, {
        "hex": "#84967E",
        "rgb": "rgb(132, 150, 126)",
        "hsl": "hsl(105, 10%, 54%)",
        "red": 132,
        "green": 150,
        "blue": 126,
        "hue": 105,
        "saturation": 10,
        "lightness": 54
    }, {
        "hex": "#7B9971",
        "rgb": "rgb(123, 153, 113)",
        "hsl": "hsl(105, 16%, 52%)",
        "red": 123,
        "green": 153,
        "blue": 113,
        "hue": 105,
        "saturation": 16,
        "lightness": 52
    }, {
        "hex": "#C6D8C0",
        "rgb": "rgb(198, 216, 192)",
        "hsl": "hsl(105, 24%, 80%)",
        "red": 198,
        "green": 216,
        "blue": 192,
        "hue": 105,
        "saturation": 24,
        "lightness": 80
    }, {
        "hex": "#B9D3B0",
        "rgb": "rgb(185, 211, 176)",
        "hsl": "hsl(105, 28%, 76%)",
        "red": 185,
        "green": 211,
        "blue": 176,
        "hue": 105,
        "saturation": 28,
        "lightness": 76
    }, {
        "hex": "#34502B",
        "rgb": "rgb(52, 80, 43)",
        "hsl": "hsl(105, 30%, 24%)",
        "red": 52,
        "green": 80,
        "blue": 43,
        "hue": 105,
        "saturation": 30,
        "lightness": 24
    }, {
        "hex": "#D1FFC2",
        "rgb": "rgb(209, 255, 194)",
        "hsl": "hsl(105, 100%, 88%)",
        "red": 209,
        "green": 255,
        "blue": 194,
        "hue": 105,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#BDD3B6",
        "rgb": "rgb(189, 211, 182)",
        "hsl": "hsl(106, 25%, 77%)",
        "red": 189,
        "green": 211,
        "blue": 182,
        "hue": 106,
        "saturation": 25,
        "lightness": 77
    }, {
        "hex": "#A8C99E",
        "rgb": "rgb(168, 201, 158)",
        "hsl": "hsl(106, 28%, 70%)",
        "red": 168,
        "green": 201,
        "blue": 158,
        "hue": 106,
        "saturation": 28,
        "lightness": 70
    }, {
        "hex": "#A6E094",
        "rgb": "rgb(166, 224, 148)",
        "hsl": "hsl(106, 55%, 73%)",
        "red": 166,
        "green": 224,
        "blue": 148,
        "hue": 106,
        "saturation": 55,
        "lightness": 73
    }, {
        "hex": "#CAF2BE",
        "rgb": "rgb(202, 242, 190)",
        "hsl": "hsl(106, 67%, 85%)",
        "red": 202,
        "green": 242,
        "blue": 190,
        "hue": 106,
        "saturation": 67,
        "lightness": 85
    }, {
        "hex": "#D8FFCC",
        "rgb": "rgb(216, 255, 204)",
        "hsl": "hsl(106, 100%, 90%)",
        "red": 216,
        "green": 255,
        "blue": 204,
        "hue": 106,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#575E55",
        "rgb": "rgb(87, 94, 85)",
        "hsl": "hsl(107, 5%, 35%)",
        "red": 87,
        "green": 94,
        "blue": 85,
        "hue": 107,
        "saturation": 5,
        "lightness": 35
    }, {
        "hex": "#496940",
        "rgb": "rgb(73, 105, 64)",
        "hsl": "hsl(107, 24%, 33%)",
        "red": 73,
        "green": 105,
        "blue": 64,
        "hue": 107,
        "saturation": 24,
        "lightness": 33
    }, {
        "hex": "#B8D6B0",
        "rgb": "rgb(184, 214, 176)",
        "hsl": "hsl(107, 32%, 76%)",
        "red": 184,
        "green": 214,
        "blue": 176,
        "hue": 107,
        "saturation": 32,
        "lightness": 76
    }, {
        "hex": "#7ABF66",
        "rgb": "rgb(122, 191, 102)",
        "hsl": "hsl(107, 41%, 57%)",
        "red": 122,
        "green": 191,
        "blue": 102,
        "hue": 107,
        "saturation": 41,
        "lightness": 57
    }, {
        "hex": "#7CD164",
        "rgb": "rgb(124, 209, 100)",
        "hsl": "hsl(107, 54%, 61%)",
        "red": 124,
        "green": 209,
        "blue": 100,
        "hue": 107,
        "saturation": 54,
        "lightness": 61
    }, {
        "hex": "#AFCCA8",
        "rgb": "rgb(175, 204, 168)",
        "hsl": "hsl(108, 26%, 73%)",
        "red": 175,
        "green": 204,
        "blue": 168,
        "hue": 108,
        "saturation": 26,
        "lightness": 73
    }, {
        "hex": "#79B36B",
        "rgb": "rgb(121, 179, 107)",
        "hsl": "hsl(108, 32%, 56%)",
        "red": 121,
        "green": 179,
        "blue": 107,
        "hue": 108,
        "saturation": 32,
        "lightness": 56
    }, {
        "hex": "#D8F5D1",
        "rgb": "rgb(216, 245, 209)",
        "hsl": "hsl(108, 64%, 89%)",
        "red": 216,
        "green": 245,
        "blue": 209,
        "hue": 108,
        "saturation": 64,
        "lightness": 89
    }, {
        "hex": "#394736",
        "rgb": "rgb(57, 71, 54)",
        "hsl": "hsl(109, 14%, 25%)",
        "red": 57,
        "green": 71,
        "blue": 54,
        "hue": 109,
        "saturation": 14,
        "lightness": 25
    }, {
        "hex": "#A8C4A2",
        "rgb": "rgb(168, 196, 162)",
        "hsl": "hsl(109, 22%, 70%)",
        "red": 168,
        "green": 196,
        "blue": 162,
        "hue": 109,
        "saturation": 22,
        "lightness": 70
    }, {
        "hex": "#3D423C",
        "rgb": "rgb(61, 66, 60)",
        "hsl": "hsl(110, 5%, 25%)",
        "red": 61,
        "green": 66,
        "blue": 60,
        "hue": 110,
        "saturation": 5,
        "lightness": 25
    }, {
        "hex": "#9FB39B",
        "rgb": "rgb(159, 179, 155)",
        "hsl": "hsl(110, 14%, 65%)",
        "red": 159,
        "green": 179,
        "blue": 155,
        "hue": 110,
        "saturation": 14,
        "lightness": 65
    }, {
        "hex": "#6E9167",
        "rgb": "rgb(110, 145, 103)",
        "hsl": "hsl(110, 17%, 49%)",
        "red": 110,
        "green": 145,
        "blue": 103,
        "hue": 110,
        "saturation": 17,
        "lightness": 49
    }, {
        "hex": "#EAFDE6",
        "rgb": "rgb(234, 253, 230)",
        "hsl": "hsl(110, 85%, 95%)",
        "red": 234,
        "green": 253,
        "blue": 230,
        "hue": 110,
        "saturation": 85,
        "lightness": 95
    }, {
        "hex": "#8CCC81",
        "rgb": "rgb(140, 204, 129)",
        "hsl": "hsl(111, 42%, 65%)",
        "red": 140,
        "green": 204,
        "blue": 129,
        "hue": 111,
        "saturation": 42,
        "lightness": 65
    }, {
        "hex": "#D3F7CD",
        "rgb": "rgb(211, 247, 205)",
        "hsl": "hsl(111, 72%, 89%)",
        "red": 211,
        "green": 247,
        "blue": 205,
        "hue": 111,
        "saturation": 72,
        "lightness": 89
    }, {
        "hex": "#AEC2AB",
        "rgb": "rgb(174, 194, 171)",
        "hsl": "hsl(112, 16%, 72%)",
        "red": 174,
        "green": 194,
        "blue": 171,
        "hue": 112,
        "saturation": 16,
        "lightness": 72
    }, {
        "hex": "#B2CBAE",
        "rgb": "rgb(178, 203, 174)",
        "hsl": "hsl(112, 22%, 74%)",
        "red": 178,
        "green": 203,
        "blue": 174,
        "hue": 112,
        "saturation": 22,
        "lightness": 74
    }, {
        "hex": "#8DB986",
        "rgb": "rgb(141, 185, 134)",
        "hsl": "hsl(112, 27%, 63%)",
        "red": 141,
        "green": 185,
        "blue": 134,
        "hue": 112,
        "saturation": 27,
        "lightness": 63
    }, {
        "hex": "#B9D9B4",
        "rgb": "rgb(185, 217, 180)",
        "hsl": "hsl(112, 33%, 78%)",
        "red": 185,
        "green": 217,
        "blue": 180,
        "hue": 112,
        "saturation": 33,
        "lightness": 78
    }, {
        "hex": "#95C68F",
        "rgb": "rgb(149, 198, 143)",
        "hsl": "hsl(113, 33%, 67%)",
        "red": 149,
        "green": 198,
        "blue": 143,
        "hue": 113,
        "saturation": 33,
        "lightness": 67
    }, {
        "hex": "#519548",
        "rgb": "rgb(81, 149, 72)",
        "hsl": "hsl(113, 35%, 43%)",
        "red": 81,
        "green": 149,
        "blue": 72,
        "hue": 113,
        "saturation": 35,
        "lightness": 43
    }, {
        "hex": "#36802D",
        "rgb": "rgb(54, 128, 45)",
        "hsl": "hsl(113, 48%, 34%)",
        "red": 54,
        "green": 128,
        "blue": 45,
        "hue": 113,
        "saturation": 48,
        "lightness": 34
    }, {
        "hex": "#8E978D",
        "rgb": "rgb(142, 151, 141)",
        "hsl": "hsl(114, 5%, 57%)",
        "red": 142,
        "green": 151,
        "blue": 141,
        "hue": 114,
        "saturation": 5,
        "lightness": 57
    }, {
        "hex": "#9CAD9A",
        "rgb": "rgb(156, 173, 154)",
        "hsl": "hsl(114, 10%, 64%)",
        "red": 156,
        "green": 173,
        "blue": 154,
        "hue": 114,
        "saturation": 10,
        "lightness": 64
    }, {
        "hex": "#B2CCAF",
        "rgb": "rgb(178, 204, 175)",
        "hsl": "hsl(114, 22%, 74%)",
        "red": 178,
        "green": 204,
        "blue": 175,
        "hue": 114,
        "saturation": 22,
        "lightness": 74
    }, {
        "hex": "#D7E8D5",
        "rgb": "rgb(215, 232, 213)",
        "hsl": "hsl(114, 29%, 87%)",
        "red": 215,
        "green": 232,
        "blue": 213,
        "hue": 114,
        "saturation": 29,
        "lightness": 87
    }, {
        "hex": "#C8E3C5",
        "rgb": "rgb(200, 227, 197)",
        "hsl": "hsl(114, 35%, 83%)",
        "red": 200,
        "green": 227,
        "blue": 197,
        "hue": 114,
        "saturation": 35,
        "lightness": 83
    }, {
        "hex": "#CDE9CA",
        "rgb": "rgb(205, 233, 202)",
        "hsl": "hsl(114, 41%, 85%)",
        "red": 205,
        "green": 233,
        "blue": 202,
        "hue": 114,
        "saturation": 41,
        "lightness": 85
    }, {
        "hex": "#CDE9CA",
        "rgb": "rgb(205, 233, 202)",
        "hsl": "hsl(114, 41%, 85%)",
        "red": 205,
        "green": 233,
        "blue": 202,
        "hue": 114,
        "saturation": 41,
        "lightness": 85
    }, {
        "hex": "#A9CBA6",
        "rgb": "rgb(169, 203, 166)",
        "hsl": "hsl(115, 26%, 72%)",
        "red": 169,
        "green": 203,
        "blue": 166,
        "hue": 115,
        "saturation": 26,
        "lightness": 72
    }, {
        "hex": "#CAE0C8",
        "rgb": "rgb(202, 224, 200)",
        "hsl": "hsl(115, 28%, 83%)",
        "red": 202,
        "green": 224,
        "blue": 200,
        "hue": 115,
        "saturation": 28,
        "lightness": 83
    }, {
        "hex": "#9EC89A",
        "rgb": "rgb(158, 200, 154)",
        "hsl": "hsl(115, 29%, 69%)",
        "red": 158,
        "green": 200,
        "blue": 154,
        "hue": 115,
        "saturation": 29,
        "lightness": 69
    }, {
        "hex": "#B1CEAF",
        "rgb": "rgb(177, 206, 175)",
        "hsl": "hsl(116, 24%, 75%)",
        "red": 177,
        "green": 206,
        "blue": 175,
        "hue": 116,
        "saturation": 24,
        "lightness": 75
    }, {
        "hex": "#73B06F",
        "rgb": "rgb(115, 176, 111)",
        "hsl": "hsl(116, 29%, 56%)",
        "red": 115,
        "green": 176,
        "blue": 111,
        "hue": 116,
        "saturation": 29,
        "lightness": 56
    }, {
        "hex": "#91C68D",
        "rgb": "rgb(145, 198, 141)",
        "hsl": "hsl(116, 33%, 66%)",
        "red": 145,
        "green": 198,
        "blue": 141,
        "hue": 116,
        "saturation": 33,
        "lightness": 66
    }, {
        "hex": "#234D20",
        "rgb": "rgb(35, 77, 32)",
        "hsl": "hsl(116, 41%, 21%)",
        "red": 35,
        "green": 77,
        "blue": 32,
        "hue": 116,
        "saturation": 41,
        "lightness": 21
    }, {
        "hex": "#95DE90",
        "rgb": "rgb(149, 222, 144)",
        "hsl": "hsl(116, 54%, 72%)",
        "red": 149,
        "green": 222,
        "blue": 144,
        "hue": 116,
        "saturation": 54,
        "lightness": 72
    }, {
        "hex": "#8CA38B",
        "rgb": "rgb(140, 163, 139)",
        "hsl": "hsl(117, 12%, 59%)",
        "red": 140,
        "green": 163,
        "blue": 139,
        "hue": 117,
        "saturation": 12,
        "lightness": 59
    }, {
        "hex": "#A3B6A2",
        "rgb": "rgb(163, 182, 162)",
        "hsl": "hsl(117, 12%, 67%)",
        "red": 163,
        "green": 182,
        "blue": 162,
        "hue": 117,
        "saturation": 12,
        "lightness": 67
    }, {
        "hex": "#8EA88D",
        "rgb": "rgb(142, 168, 141)",
        "hsl": "hsl(118, 13%, 61%)",
        "red": 142,
        "green": 168,
        "blue": 141,
        "hue": 118,
        "saturation": 13,
        "lightness": 61
    }, {
        "hex": "#99B898",
        "rgb": "rgb(153, 184, 152)",
        "hsl": "hsl(118, 18%, 66%)",
        "red": 153,
        "green": 184,
        "blue": 152,
        "hue": 118,
        "saturation": 18,
        "lightness": 66
    }, {
        "hex": "#CDECCC",
        "rgb": "rgb(205, 236, 204)",
        "hsl": "hsl(118, 46%, 86%)",
        "red": 205,
        "green": 236,
        "blue": 204,
        "hue": 118,
        "saturation": 46,
        "lightness": 86
    }, {
        "hex": "#4F784E",
        "rgb": "rgb(79, 120, 78)",
        "hsl": "hsl(119, 21%, 39%)",
        "red": 79,
        "green": 120,
        "blue": 78,
        "hue": 119,
        "saturation": 21,
        "lightness": 39
    }, {
        "hex": "#B4DFB3",
        "rgb": "rgb(180, 223, 179)",
        "hsl": "hsl(119, 41%, 79%)",
        "red": 180,
        "green": 223,
        "blue": 179,
        "hue": 119,
        "saturation": 41,
        "lightness": 79
    }, {
        "hex": "#A4D9A3",
        "rgb": "rgb(164, 217, 163)",
        "hsl": "hsl(119, 42%, 75%)",
        "red": 164,
        "green": 217,
        "blue": 163,
        "hue": 119,
        "saturation": 42,
        "lightness": 75
    }, {
        "hex": "#BFEDBE",
        "rgb": "rgb(191, 237, 190)",
        "hsl": "hsl(119, 57%, 84%)",
        "red": 191,
        "green": 237,
        "blue": 190,
        "hue": 119,
        "saturation": 57,
        "lightness": 84
    }, {
        "hex": "#4F504F",
        "rgb": "rgb(79, 80, 79)",
        "hsl": "hsl(120, 1%, 31%)",
        "red": 79,
        "green": 80,
        "blue": 79,
        "hue": 120,
        "saturation": 1,
        "lightness": 31
    }, {
        "hex": "#8C998C",
        "rgb": "rgb(140, 153, 140)",
        "hsl": "hsl(120, 6%, 57%)",
        "red": 140,
        "green": 153,
        "blue": 140,
        "hue": 120,
        "saturation": 6,
        "lightness": 57
    }, {
        "hex": "#AABFAA",
        "rgb": "rgb(170, 191, 170)",
        "hsl": "hsl(120, 14%, 71%)",
        "red": 170,
        "green": 191,
        "blue": 170,
        "hue": 120,
        "saturation": 14,
        "lightness": 71
    }, {
        "hex": "#648A64",
        "rgb": "rgb(100, 138, 100)",
        "hsl": "hsl(120, 16%, 47%)",
        "red": 100,
        "green": 138,
        "blue": 100,
        "hue": 120,
        "saturation": 16,
        "lightness": 47
    }, {
        "hex": "#CAD9CA",
        "rgb": "rgb(202, 217, 202)",
        "hsl": "hsl(120, 16%, 82%)",
        "red": 202,
        "green": 217,
        "blue": 202,
        "hue": 120,
        "saturation": 16,
        "lightness": 82
    }, {
        "hex": "#A1C0A1",
        "rgb": "rgb(161, 192, 161)",
        "hsl": "hsl(120, 20%, 69%)",
        "red": 161,
        "green": 192,
        "blue": 161,
        "hue": 120,
        "saturation": 20,
        "lightness": 69
    }, {
        "hex": "#9DC19D",
        "rgb": "rgb(157, 193, 157)",
        "hsl": "hsl(120, 22%, 69%)",
        "red": 157,
        "green": 193,
        "blue": 157,
        "hue": 120,
        "saturation": 22,
        "lightness": 69
    }, {
        "hex": "#CDDFCD",
        "rgb": "rgb(205, 223, 205)",
        "hsl": "hsl(120, 22%, 84%)",
        "red": 205,
        "green": 223,
        "blue": 205,
        "hue": 120,
        "saturation": 22,
        "lightness": 84
    }, {
        "hex": "#DDEADD",
        "rgb": "rgb(221, 234, 221)",
        "hsl": "hsl(120, 24%, 89%)",
        "red": 221,
        "green": 234,
        "blue": 221,
        "hue": 120,
        "saturation": 24,
        "lightness": 89
    }, {
        "hex": "#80B380",
        "rgb": "rgb(128, 179, 128)",
        "hsl": "hsl(120, 25%, 60%)",
        "red": 128,
        "green": 179,
        "blue": 128,
        "hue": 120,
        "saturation": 25,
        "lightness": 60
    }, {
        "hex": "#9ED99E",
        "rgb": "rgb(158, 217, 158)",
        "hsl": "hsl(120, 44%, 74%)",
        "red": 158,
        "green": 217,
        "blue": 158,
        "hue": 120,
        "saturation": 44,
        "lightness": 74
    }, {
        "hex": "#E0F7E0",
        "rgb": "rgb(224, 247, 224)",
        "hsl": "hsl(120, 59%, 92%)",
        "red": 224,
        "green": 247,
        "blue": 224,
        "hue": 120,
        "saturation": 59,
        "lightness": 92
    }, {
        "hex": "#C2FFC2",
        "rgb": "rgb(194, 255, 194)",
        "hsl": "hsl(120, 100%, 88%)",
        "red": 194,
        "green": 255,
        "blue": 194,
        "hue": 120,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#AAE3AB",
        "rgb": "rgb(170, 227, 171)",
        "hsl": "hsl(121, 50%, 78%)",
        "red": 170,
        "green": 227,
        "blue": 171,
        "hue": 121,
        "saturation": 50,
        "lightness": 78
    }, {
        "hex": "#C5FEC6",
        "rgb": "rgb(197, 254, 198)",
        "hsl": "hsl(121, 97%, 88%)",
        "red": 197,
        "green": 254,
        "blue": 198,
        "hue": 121,
        "saturation": 97,
        "lightness": 88
    }, {
        "hex": "#96B397",
        "rgb": "rgb(150, 179, 151)",
        "hsl": "hsl(122, 16%, 65%)",
        "red": 150,
        "green": 179,
        "blue": 151,
        "hue": 122,
        "saturation": 16,
        "lightness": 65
    }, {
        "hex": "#BFE0C0",
        "rgb": "rgb(191, 224, 192)",
        "hsl": "hsl(122, 35%, 81%)",
        "red": 191,
        "green": 224,
        "blue": 192,
        "hue": 122,
        "saturation": 35,
        "lightness": 81
    }, {
        "hex": "#BFE3C0",
        "rgb": "rgb(191, 227, 192)",
        "hsl": "hsl(122, 39%, 82%)",
        "red": 191,
        "green": 227,
        "blue": 192,
        "hue": 122,
        "saturation": 39,
        "lightness": 82
    }, {
        "hex": "#B1FCB3",
        "rgb": "rgb(177, 252, 179)",
        "hsl": "hsl(122, 93%, 84%)",
        "red": 177,
        "green": 252,
        "blue": 179,
        "hue": 122,
        "saturation": 93,
        "lightness": 84
    }, {
        "hex": "#72AD75",
        "rgb": "rgb(114, 173, 117)",
        "hsl": "hsl(123, 26%, 56%)",
        "red": 114,
        "green": 173,
        "blue": 117,
        "hue": 123,
        "saturation": 26,
        "lightness": 56
    }, {
        "hex": "#AADEAD",
        "rgb": "rgb(170, 222, 173)",
        "hsl": "hsl(123, 44%, 77%)",
        "red": 170,
        "green": 222,
        "blue": 173,
        "hue": 123,
        "saturation": 44,
        "lightness": 77
    }, {
        "hex": "#79DD7E",
        "rgb": "rgb(121, 221, 126)",
        "hsl": "hsl(123, 60%, 67%)",
        "red": 121,
        "green": 221,
        "blue": 126,
        "hue": 123,
        "saturation": 60,
        "lightness": 67
    }, {
        "hex": "#AEBFAF",
        "rgb": "rgb(174, 191, 175)",
        "hsl": "hsl(124, 12%, 72%)",
        "red": 174,
        "green": 191,
        "blue": 175,
        "hue": 124,
        "saturation": 12,
        "lightness": 72
    }, {
        "hex": "#A5C3A7",
        "rgb": "rgb(165, 195, 167)",
        "hsl": "hsl(124, 20%, 71%)",
        "red": 165,
        "green": 195,
        "blue": 167,
        "hue": 124,
        "saturation": 20,
        "lightness": 71
    }, {
        "hex": "#B0D1B2",
        "rgb": "rgb(176, 209, 178)",
        "hsl": "hsl(124, 26%, 75%)",
        "red": 176,
        "green": 209,
        "blue": 178,
        "hue": 124,
        "saturation": 26,
        "lightness": 75
    }, {
        "hex": "#A2CCA5",
        "rgb": "rgb(162, 204, 165)",
        "hsl": "hsl(124, 29%, 72%)",
        "red": 162,
        "green": 204,
        "blue": 165,
        "hue": 124,
        "saturation": 29,
        "lightness": 72
    }, {
        "hex": "#91C494",
        "rgb": "rgb(145, 196, 148)",
        "hsl": "hsl(124, 30%, 67%)",
        "red": 145,
        "green": 196,
        "blue": 148,
        "hue": 124,
        "saturation": 30,
        "lightness": 67
    }, {
        "hex": "#53AC59",
        "rgb": "rgb(83, 172, 89)",
        "hsl": "hsl(124, 35%, 50%)",
        "red": 83,
        "green": 172,
        "blue": 89,
        "hue": 124,
        "saturation": 35,
        "lightness": 50
    }, {
        "hex": "#B6DEB9",
        "rgb": "rgb(182, 222, 185)",
        "hsl": "hsl(124, 38%, 79%)",
        "red": 182,
        "green": 222,
        "blue": 185,
        "hue": 124,
        "saturation": 38,
        "lightness": 79
    }, {
        "hex": "#7A907C",
        "rgb": "rgb(122, 144, 124)",
        "hsl": "hsl(125, 9%, 52%)",
        "red": 122,
        "green": 144,
        "blue": 124,
        "hue": 125,
        "saturation": 9,
        "lightness": 52
    }, {
        "hex": "#5C735E",
        "rgb": "rgb(92, 115, 94)",
        "hsl": "hsl(125, 11%, 41%)",
        "red": 92,
        "green": 115,
        "blue": 94,
        "hue": 125,
        "saturation": 11,
        "lightness": 41
    }, {
        "hex": "#8FA691",
        "rgb": "rgb(143, 166, 145)",
        "hsl": "hsl(125, 11%, 61%)",
        "red": 143,
        "green": 166,
        "blue": 145,
        "hue": 125,
        "saturation": 11,
        "lightness": 61
    }, {
        "hex": "#92B395",
        "rgb": "rgb(146, 179, 149)",
        "hsl": "hsl(125, 18%, 64%)",
        "red": 146,
        "green": 179,
        "blue": 149,
        "hue": 125,
        "saturation": 18,
        "lightness": 64
    }, {
        "hex": "#91BE95",
        "rgb": "rgb(145, 190, 149)",
        "hsl": "hsl(125, 26%, 66%)",
        "red": 145,
        "green": 190,
        "blue": 149,
        "hue": 125,
        "saturation": 26,
        "lightness": 66
    }, {
        "hex": "#A2CAA5",
        "rgb": "rgb(162, 202, 165)",
        "hsl": "hsl(125, 27%, 71%)",
        "red": 162,
        "green": 202,
        "blue": 165,
        "hue": 125,
        "saturation": 27,
        "lightness": 71
    }, {
        "hex": "#86C28B",
        "rgb": "rgb(134, 194, 139)",
        "hsl": "hsl(125, 33%, 64%)",
        "red": 134,
        "green": 194,
        "blue": 139,
        "hue": 125,
        "saturation": 33,
        "lightness": 64
    }, {
        "hex": "#A7DBAB",
        "rgb": "rgb(167, 219, 171)",
        "hsl": "hsl(125, 42%, 76%)",
        "red": 167,
        "green": 219,
        "blue": 171,
        "hue": 125,
        "saturation": 42,
        "lightness": 76
    }, {
        "hex": "#8EE696",
        "rgb": "rgb(142, 230, 150)",
        "hsl": "hsl(125, 64%, 73%)",
        "red": 142,
        "green": 230,
        "blue": 150,
        "hue": 125,
        "saturation": 64,
        "lightness": 73
    }, {
        "hex": "#C4FFC9",
        "rgb": "rgb(196, 255, 201)",
        "hsl": "hsl(125, 100%, 88%)",
        "red": 196,
        "green": 255,
        "blue": 201,
        "hue": 125,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#859987",
        "rgb": "rgb(133, 153, 135)",
        "hsl": "hsl(126, 9%, 56%)",
        "red": 133,
        "green": 153,
        "blue": 135,
        "hue": 126,
        "saturation": 9,
        "lightness": 56
    }, {
        "hex": "#C5CFC6",
        "rgb": "rgb(197, 207, 198)",
        "hsl": "hsl(126, 9%, 79%)",
        "red": 197,
        "green": 207,
        "blue": 198,
        "hue": 126,
        "saturation": 9,
        "lightness": 79
    }, {
        "hex": "#A3C9A7",
        "rgb": "rgb(163, 201, 167)",
        "hsl": "hsl(126, 26%, 71%)",
        "red": 163,
        "green": 201,
        "blue": 167,
        "hue": 126,
        "saturation": 26,
        "lightness": 71
    }, {
        "hex": "#BCD8BF",
        "rgb": "rgb(188, 216, 191)",
        "hsl": "hsl(126, 26%, 79%)",
        "red": 188,
        "green": 216,
        "blue": 191,
        "hue": 126,
        "saturation": 26,
        "lightness": 79
    }, {
        "hex": "#CEEBD1",
        "rgb": "rgb(206, 235, 209)",
        "hsl": "hsl(126, 42%, 86%)",
        "red": 206,
        "green": 235,
        "blue": 209,
        "hue": 126,
        "saturation": 42,
        "lightness": 86
    }, {
        "hex": "#AAB3AB",
        "rgb": "rgb(170, 179, 171)",
        "hsl": "hsl(127, 6%, 68%)",
        "red": 170,
        "green": 179,
        "blue": 171,
        "hue": 127,
        "saturation": 6,
        "lightness": 68
    }, {
        "hex": "#C0D1C2",
        "rgb": "rgb(192, 209, 194)",
        "hsl": "hsl(127, 16%, 79%)",
        "red": 192,
        "green": 209,
        "blue": 194,
        "hue": 127,
        "saturation": 16,
        "lightness": 79
    }, {
        "hex": "#B1CCB4",
        "rgb": "rgb(177, 204, 180)",
        "hsl": "hsl(127, 21%, 75%)",
        "red": 177,
        "green": 204,
        "blue": 180,
        "hue": 127,
        "saturation": 21,
        "lightness": 75
    }, {
        "hex": "#EDF6EE",
        "rgb": "rgb(237, 246, 238)",
        "hsl": "hsl(127, 33%, 95%)",
        "red": 237,
        "green": 246,
        "blue": 238,
        "hue": 127,
        "saturation": 33,
        "lightness": 95
    }, {
        "hex": "#BFE3C3",
        "rgb": "rgb(191, 227, 195)",
        "hsl": "hsl(127, 39%, 82%)",
        "red": 191,
        "green": 227,
        "blue": 195,
        "hue": 127,
        "saturation": 39,
        "lightness": 82
    }, {
        "hex": "#ACDEB2",
        "rgb": "rgb(172, 222, 178)",
        "hsl": "hsl(127, 43%, 77%)",
        "red": 172,
        "green": 222,
        "blue": 178,
        "hue": 127,
        "saturation": 43,
        "lightness": 77
    }, {
        "hex": "#7FDA89",
        "rgb": "rgb(127, 218, 137)",
        "hsl": "hsl(127, 55%, 68%)",
        "red": 127,
        "green": 218,
        "blue": 137,
        "hue": 127,
        "saturation": 55,
        "lightness": 68
    }, {
        "hex": "#B5F4BC",
        "rgb": "rgb(181, 244, 188)",
        "hsl": "hsl(127, 74%, 83%)",
        "red": 181,
        "green": 244,
        "blue": 188,
        "hue": 127,
        "saturation": 74,
        "lightness": 83
    }, {
        "hex": "#042608",
        "rgb": "rgb(4, 38, 8)",
        "hsl": "hsl(127, 81%, 8%)",
        "red": 4,
        "green": 38,
        "blue": 8,
        "hue": 127,
        "saturation": 81,
        "lightness": 8
    }, {
        "hex": "#A6F6AF",
        "rgb": "rgb(166, 246, 175)",
        "hsl": "hsl(127, 82%, 81%)",
        "red": 166,
        "green": 246,
        "blue": 175,
        "hue": 127,
        "saturation": 82,
        "lightness": 81
    }, {
        "hex": "#BAFDC2",
        "rgb": "rgb(186, 253, 194)",
        "hsl": "hsl(127, 94%, 86%)",
        "red": 186,
        "green": 253,
        "blue": 194,
        "hue": 127,
        "saturation": 94,
        "lightness": 86
    }, {
        "hex": "#678D6C",
        "rgb": "rgb(103, 141, 108)",
        "hsl": "hsl(128, 16%, 48%)",
        "red": 103,
        "green": 141,
        "blue": 108,
        "hue": 128,
        "saturation": 16,
        "lightness": 48
    }, {
        "hex": "#8EBE94",
        "rgb": "rgb(142, 190, 148)",
        "hsl": "hsl(128, 27%, 65%)",
        "red": 142,
        "green": 190,
        "blue": 148,
        "hue": 128,
        "saturation": 27,
        "lightness": 65
    }, {
        "hex": "#A6ADA7",
        "rgb": "rgb(166, 173, 167)",
        "hsl": "hsl(129, 4%, 66%)",
        "red": 166,
        "green": 173,
        "blue": 167,
        "hue": 129,
        "saturation": 4,
        "lightness": 66
    }, {
        "hex": "#7C917F",
        "rgb": "rgb(124, 145, 127)",
        "hsl": "hsl(129, 9%, 53%)",
        "red": 124,
        "green": 145,
        "blue": 127,
        "hue": 129,
        "saturation": 9,
        "lightness": 53
    }, {
        "hex": "#5D7E62",
        "rgb": "rgb(93, 126, 98)",
        "hsl": "hsl(129, 15%, 43%)",
        "red": 93,
        "green": 126,
        "blue": 98,
        "hue": 129,
        "saturation": 15,
        "lightness": 43
    }, {
        "hex": "#C7DCCA",
        "rgb": "rgb(199, 220, 202)",
        "hsl": "hsl(129, 23%, 82%)",
        "red": 199,
        "green": 220,
        "blue": 202,
        "hue": 129,
        "saturation": 23,
        "lightness": 82
    }, {
        "hex": "#B1D4B6",
        "rgb": "rgb(177, 212, 182)",
        "hsl": "hsl(129, 29%, 76%)",
        "red": 177,
        "green": 212,
        "blue": 182,
        "hue": 129,
        "saturation": 29,
        "lightness": 76
    }, {
        "hex": "#ADE4B5",
        "rgb": "rgb(173, 228, 181)",
        "hsl": "hsl(129, 50%, 79%)",
        "red": 173,
        "green": 228,
        "blue": 181,
        "hue": 129,
        "saturation": 50,
        "lightness": 79
    }, {
        "hex": "#637566",
        "rgb": "rgb(99, 117, 102)",
        "hsl": "hsl(130, 8%, 42%)",
        "red": 99,
        "green": 117,
        "blue": 102,
        "hue": 130,
        "saturation": 8,
        "lightness": 42
    }, {
        "hex": "#79927D",
        "rgb": "rgb(121, 146, 125)",
        "hsl": "hsl(130, 10%, 52%)",
        "red": 121,
        "green": 146,
        "blue": 125,
        "hue": 130,
        "saturation": 10,
        "lightness": 52
    }, {
        "hex": "#79927D",
        "rgb": "rgb(121, 146, 125)",
        "hsl": "hsl(130, 10%, 52%)",
        "red": 121,
        "green": 146,
        "blue": 125,
        "hue": 130,
        "saturation": 10,
        "lightness": 52
    }, {
        "hex": "#829B86",
        "rgb": "rgb(130, 155, 134)",
        "hsl": "hsl(130, 11%, 56%)",
        "red": 130,
        "green": 155,
        "blue": 134,
        "hue": 130,
        "saturation": 11,
        "lightness": 56
    }, {
        "hex": "#93BD9A",
        "rgb": "rgb(147, 189, 154)",
        "hsl": "hsl(130, 24%, 66%)",
        "red": 147,
        "green": 189,
        "blue": 154,
        "hue": 130,
        "saturation": 24,
        "lightness": 66
    }, {
        "hex": "#B6D4BB",
        "rgb": "rgb(182, 212, 187)",
        "hsl": "hsl(130, 26%, 77%)",
        "red": 182,
        "green": 212,
        "blue": 187,
        "hue": 130,
        "saturation": 26,
        "lightness": 77
    }, {
        "hex": "#ABCCB1",
        "rgb": "rgb(171, 204, 177)",
        "hsl": "hsl(131, 24%, 74%)",
        "red": 171,
        "green": 204,
        "blue": 177,
        "hue": 131,
        "saturation": 24,
        "lightness": 74
    }, {
        "hex": "#909A92",
        "rgb": "rgb(144, 154, 146)",
        "hsl": "hsl(132, 5%, 58%)",
        "red": 144,
        "green": 154,
        "blue": 146,
        "hue": 132,
        "saturation": 5,
        "lightness": 58
    }, {
        "hex": "#96B49C",
        "rgb": "rgb(150, 180, 156)",
        "hsl": "hsl(132, 17%, 65%)",
        "red": 150,
        "green": 180,
        "blue": 156,
        "hue": 132,
        "saturation": 17,
        "lightness": 65
    }, {
        "hex": "#97B59D",
        "rgb": "rgb(151, 181, 157)",
        "hsl": "hsl(132, 17%, 65%)",
        "red": 151,
        "green": 181,
        "blue": 157,
        "hue": 132,
        "saturation": 17,
        "lightness": 65
    }, {
        "hex": "#B4CCB9",
        "rgb": "rgb(180, 204, 185)",
        "hsl": "hsl(132, 19%, 75%)",
        "red": 180,
        "green": 204,
        "blue": 185,
        "hue": 132,
        "saturation": 19,
        "lightness": 75
    }, {
        "hex": "#9DBFA4",
        "rgb": "rgb(157, 191, 164)",
        "hsl": "hsl(132, 21%, 68%)",
        "red": 157,
        "green": 191,
        "blue": 164,
        "hue": 132,
        "saturation": 21,
        "lightness": 68
    }, {
        "hex": "#CCE4D1",
        "rgb": "rgb(204, 228, 209)",
        "hsl": "hsl(132, 31%, 85%)",
        "red": 204,
        "green": 228,
        "blue": 209,
        "hue": 132,
        "saturation": 31,
        "lightness": 85
    }, {
        "hex": "#D4DDD6",
        "rgb": "rgb(212, 221, 214)",
        "hsl": "hsl(133, 12%, 85%)",
        "red": 212,
        "green": 221,
        "blue": 214,
        "hue": 133,
        "saturation": 12,
        "lightness": 85
    }, {
        "hex": "#8EAA94",
        "rgb": "rgb(142, 170, 148)",
        "hsl": "hsl(133, 14%, 61%)",
        "red": 142,
        "green": 170,
        "blue": 148,
        "hue": 133,
        "saturation": 14,
        "lightness": 61
    }, {
        "hex": "#98C3A1",
        "rgb": "rgb(152, 195, 161)",
        "hsl": "hsl(133, 26%, 68%)",
        "red": 152,
        "green": 195,
        "blue": 161,
        "hue": 133,
        "saturation": 26,
        "lightness": 68
    }, {
        "hex": "#3E6B48",
        "rgb": "rgb(62, 107, 72)",
        "hsl": "hsl(133, 27%, 33%)",
        "red": 62,
        "green": 107,
        "blue": 72,
        "hue": 133,
        "saturation": 27,
        "lightness": 33
    }, {
        "hex": "#C1DDC7",
        "rgb": "rgb(193, 221, 199)",
        "hsl": "hsl(133, 29%, 81%)",
        "red": 193,
        "green": 221,
        "blue": 199,
        "hue": 133,
        "saturation": 29,
        "lightness": 81
    }, {
        "hex": "#77B885",
        "rgb": "rgb(119, 184, 133)",
        "hsl": "hsl(133, 31%, 59%)",
        "red": 119,
        "green": 184,
        "blue": 133,
        "hue": 133,
        "saturation": 31,
        "lightness": 59
    }, {
        "hex": "#A3E3B1",
        "rgb": "rgb(163, 227, 177)",
        "hsl": "hsl(133, 53%, 76%)",
        "red": 163,
        "green": 227,
        "blue": 177,
        "hue": 133,
        "saturation": 53,
        "lightness": 76
    }, {
        "hex": "#38C958",
        "rgb": "rgb(56, 201, 88)",
        "hsl": "hsl(133, 57%, 50%)",
        "red": 56,
        "green": 201,
        "blue": 88,
        "hue": 133,
        "saturation": 57,
        "lightness": 50
    }, {
        "hex": "#738C79",
        "rgb": "rgb(115, 140, 121)",
        "hsl": "hsl(134, 10%, 50%)",
        "red": 115,
        "green": 140,
        "blue": 121,
        "hue": 134,
        "saturation": 10,
        "lightness": 50
    }, {
        "hex": "#75A480",
        "rgb": "rgb(117, 164, 128)",
        "hsl": "hsl(134, 21%, 55%)",
        "red": 117,
        "green": 164,
        "blue": 128,
        "hue": 134,
        "saturation": 21,
        "lightness": 55
    }, {
        "hex": "#6DA67A",
        "rgb": "rgb(109, 166, 122)",
        "hsl": "hsl(134, 24%, 54%)",
        "red": 109,
        "green": 166,
        "blue": 122,
        "hue": 134,
        "saturation": 24,
        "lightness": 54
    }, {
        "hex": "#6DA67A",
        "rgb": "rgb(109, 166, 122)",
        "hsl": "hsl(134, 24%, 54%)",
        "red": 109,
        "green": 166,
        "blue": 122,
        "hue": 134,
        "saturation": 24,
        "lightness": 54
    }, {
        "hex": "#B2D5BA",
        "rgb": "rgb(178, 213, 186)",
        "hsl": "hsl(134, 29%, 77%)",
        "red": 178,
        "green": 213,
        "blue": 186,
        "hue": 134,
        "saturation": 29,
        "lightness": 77
    }, {
        "hex": "#B4DEBE",
        "rgb": "rgb(180, 222, 190)",
        "hsl": "hsl(134, 39%, 79%)",
        "red": 180,
        "green": 222,
        "blue": 190,
        "hue": 134,
        "saturation": 39,
        "lightness": 79
    }, {
        "hex": "#BCE3C5",
        "rgb": "rgb(188, 227, 197)",
        "hsl": "hsl(134, 41%, 81%)",
        "red": 188,
        "green": 227,
        "blue": 197,
        "hue": 134,
        "saturation": 41,
        "lightness": 81
    }, {
        "hex": "#D4F1DB",
        "rgb": "rgb(212, 241, 219)",
        "hsl": "hsl(134, 51%, 89%)",
        "red": 212,
        "green": 241,
        "blue": 219,
        "hue": 134,
        "saturation": 51,
        "lightness": 89
    }, {
        "hex": "#9DE0AD",
        "rgb": "rgb(157, 224, 173)",
        "hsl": "hsl(134, 52%, 75%)",
        "red": 157,
        "green": 224,
        "blue": 173,
        "hue": 134,
        "saturation": 52,
        "lightness": 75
    }, {
        "hex": "#58CE74",
        "rgb": "rgb(88, 206, 116)",
        "hsl": "hsl(134, 55%, 58%)",
        "red": 88,
        "green": 206,
        "blue": 116,
        "hue": 134,
        "saturation": 55,
        "lightness": 58
    }, {
        "hex": "#D4F7DC",
        "rgb": "rgb(212, 247, 220)",
        "hsl": "hsl(134, 69%, 90%)",
        "red": 212,
        "green": 247,
        "blue": 220,
        "hue": 134,
        "saturation": 69,
        "lightness": 90
    }, {
        "hex": "#C4C8C5",
        "rgb": "rgb(196, 200, 197)",
        "hsl": "hsl(135, 4%, 78%)",
        "red": 196,
        "green": 200,
        "blue": 197,
        "hue": 135,
        "saturation": 4,
        "lightness": 78
    }, {
        "hex": "#8CAB94",
        "rgb": "rgb(140, 171, 148)",
        "hsl": "hsl(135, 16%, 61%)",
        "red": 140,
        "green": 171,
        "blue": 148,
        "hue": 135,
        "saturation": 16,
        "lightness": 61
    }, {
        "hex": "#87B091",
        "rgb": "rgb(135, 176, 145)",
        "hsl": "hsl(135, 21%, 61%)",
        "red": 135,
        "green": 176,
        "blue": 145,
        "hue": 135,
        "saturation": 21,
        "lightness": 61
    }, {
        "hex": "#65A675",
        "rgb": "rgb(101, 166, 117)",
        "hsl": "hsl(135, 27%, 52%)",
        "red": 101,
        "green": 166,
        "blue": 117,
        "hue": 135,
        "saturation": 27,
        "lightness": 52
    }, {
        "hex": "#8CBF99",
        "rgb": "rgb(140, 191, 153)",
        "hsl": "hsl(135, 28%, 65%)",
        "red": 140,
        "green": 191,
        "blue": 153,
        "hue": 135,
        "saturation": 28,
        "lightness": 65
    }, {
        "hex": "#8CD19D",
        "rgb": "rgb(140, 209, 157)",
        "hsl": "hsl(135, 43%, 68%)",
        "red": 140,
        "green": 209,
        "blue": 157,
        "hue": 135,
        "saturation": 43,
        "lightness": 68
    }, {
        "hex": "#CDF2D6",
        "rgb": "rgb(205, 242, 214)",
        "hsl": "hsl(135, 59%, 88%)",
        "red": 205,
        "green": 242,
        "blue": 214,
        "hue": 135,
        "saturation": 59,
        "lightness": 88
    }, {
        "hex": "#7CF49A",
        "rgb": "rgb(124, 244, 154)",
        "hsl": "hsl(135, 85%, 72%)",
        "red": 124,
        "green": 244,
        "blue": 154,
        "hue": 135,
        "saturation": 85,
        "lightness": 72
    }, {
        "hex": "#5E8C6A",
        "rgb": "rgb(94, 140, 106)",
        "hsl": "hsl(136, 20%, 46%)",
        "red": 94,
        "green": 140,
        "blue": 106,
        "hue": 136,
        "saturation": 20,
        "lightness": 46
    }, {
        "hex": "#C2E4CB",
        "rgb": "rgb(194, 228, 203)",
        "hsl": "hsl(136, 39%, 83%)",
        "red": 194,
        "green": 228,
        "blue": 203,
        "hue": 136,
        "saturation": 39,
        "lightness": 83
    }, {
        "hex": "#B5E8C3",
        "rgb": "rgb(181, 232, 195)",
        "hsl": "hsl(136, 53%, 81%)",
        "red": 181,
        "green": 232,
        "blue": 195,
        "hue": 136,
        "saturation": 53,
        "lightness": 81
    }, {
        "hex": "#6D8D76",
        "rgb": "rgb(109, 141, 118)",
        "hsl": "hsl(137, 13%, 49%)",
        "red": 109,
        "green": 141,
        "blue": 118,
        "hue": 137,
        "saturation": 13,
        "lightness": 49
    }, {
        "hex": "#A1C5AB",
        "rgb": "rgb(161, 197, 171)",
        "hsl": "hsl(137, 24%, 70%)",
        "red": 161,
        "green": 197,
        "blue": 171,
        "hue": 137,
        "saturation": 24,
        "lightness": 70
    }, {
        "hex": "#92BF9F",
        "rgb": "rgb(146, 191, 159)",
        "hsl": "hsl(137, 26%, 66%)",
        "red": 146,
        "green": 191,
        "blue": 159,
        "hue": 137,
        "saturation": 26,
        "lightness": 66
    }, {
        "hex": "#91C09E",
        "rgb": "rgb(145, 192, 158)",
        "hsl": "hsl(137, 27%, 66%)",
        "red": 145,
        "green": 192,
        "blue": 158,
        "hue": 137,
        "saturation": 27,
        "lightness": 66
    }, {
        "hex": "#8BC59B",
        "rgb": "rgb(139, 197, 155)",
        "hsl": "hsl(137, 33%, 66%)",
        "red": 139,
        "green": 197,
        "blue": 155,
        "hue": 137,
        "saturation": 33,
        "lightness": 66
    }, {
        "hex": "#B6DEC1",
        "rgb": "rgb(182, 222, 193)",
        "hsl": "hsl(137, 38%, 79%)",
        "red": 182,
        "green": 222,
        "blue": 193,
        "hue": 137,
        "saturation": 38,
        "lightness": 79
    }, {
        "hex": "#BDEBCA",
        "rgb": "rgb(189, 235, 202)",
        "hsl": "hsl(137, 53%, 83%)",
        "red": 189,
        "green": 235,
        "blue": 202,
        "hue": 137,
        "saturation": 53,
        "lightness": 83
    }, {
        "hex": "#A9BAAE",
        "rgb": "rgb(169, 186, 174)",
        "hsl": "hsl(138, 11%, 70%)",
        "red": 169,
        "green": 186,
        "blue": 174,
        "hue": 138,
        "saturation": 11,
        "lightness": 70
    }, {
        "hex": "#6D997A",
        "rgb": "rgb(109, 153, 122)",
        "hsl": "hsl(138, 18%, 51%)",
        "red": 109,
        "green": 153,
        "blue": 122,
        "hue": 138,
        "saturation": 18,
        "lightness": 51
    }, {
        "hex": "#A3CCAF",
        "rgb": "rgb(163, 204, 175)",
        "hsl": "hsl(138, 29%, 72%)",
        "red": 163,
        "green": 204,
        "blue": 175,
        "hue": 138,
        "saturation": 29,
        "lightness": 72
    }, {
        "hex": "#B6D8C0",
        "rgb": "rgb(182, 216, 192)",
        "hsl": "hsl(138, 30%, 78%)",
        "red": 182,
        "green": 216,
        "blue": 192,
        "hue": 138,
        "saturation": 30,
        "lightness": 78
    }, {
        "hex": "#9CD0AC",
        "rgb": "rgb(156, 208, 172)",
        "hsl": "hsl(138, 36%, 71%)",
        "red": 156,
        "green": 208,
        "blue": 172,
        "hue": 138,
        "saturation": 36,
        "lightness": 71
    }, {
        "hex": "#3B8952",
        "rgb": "rgb(59, 137, 82)",
        "hsl": "hsl(138, 40%, 38%)",
        "red": 59,
        "green": 137,
        "blue": 82,
        "hue": 138,
        "saturation": 40,
        "lightness": 38
    }, {
        "hex": "#A1DBB2",
        "rgb": "rgb(161, 219, 178)",
        "hsl": "hsl(138, 45%, 75%)",
        "red": 161,
        "green": 219,
        "blue": 178,
        "hue": 138,
        "saturation": 45,
        "lightness": 75
    }, {
        "hex": "#31A252",
        "rgb": "rgb(49, 162, 82)",
        "hsl": "hsl(138, 54%, 41%)",
        "red": 49,
        "green": 162,
        "blue": 82,
        "hue": 138,
        "saturation": 54,
        "lightness": 41
    }, {
        "hex": "#8DE0A6",
        "rgb": "rgb(141, 224, 166)",
        "hsl": "hsl(138, 57%, 72%)",
        "red": 141,
        "green": 224,
        "blue": 166,
        "hue": 138,
        "saturation": 57,
        "lightness": 72
    }, {
        "hex": "#D1F3DB",
        "rgb": "rgb(209, 243, 219)",
        "hsl": "hsl(138, 59%, 89%)",
        "red": 209,
        "green": 243,
        "blue": 219,
        "hue": 138,
        "saturation": 59,
        "lightness": 89
    }, {
        "hex": "#BFF1CE",
        "rgb": "rgb(191, 241, 206)",
        "hsl": "hsl(138, 64%, 85%)",
        "red": 191,
        "green": 241,
        "blue": 206,
        "hue": 138,
        "saturation": 64,
        "lightness": 85
    }, {
        "hex": "#13CD4A",
        "rgb": "rgb(19, 205, 74)",
        "hsl": "hsl(138, 83%, 44%)",
        "red": 19,
        "green": 205,
        "blue": 74,
        "hue": 138,
        "saturation": 83,
        "lightness": 44
    }, {
        "hex": "#C7FCD7",
        "rgb": "rgb(199, 252, 215)",
        "hsl": "hsl(138, 90%, 88%)",
        "red": 199,
        "green": 252,
        "blue": 215,
        "hue": 138,
        "saturation": 90,
        "lightness": 88
    }, {
        "hex": "#CFFFDD",
        "rgb": "rgb(207, 255, 221)",
        "hsl": "hsl(138, 100%, 91%)",
        "red": 207,
        "green": 255,
        "blue": 221,
        "hue": 138,
        "saturation": 100,
        "lightness": 91
    }, {
        "hex": "#79A687",
        "rgb": "rgb(121, 166, 135)",
        "hsl": "hsl(139, 20%, 56%)",
        "red": 121,
        "green": 166,
        "blue": 135,
        "hue": 139,
        "saturation": 20,
        "lightness": 56
    }, {
        "hex": "#92C7A3",
        "rgb": "rgb(146, 199, 163)",
        "hsl": "hsl(139, 32%, 68%)",
        "red": 146,
        "green": 199,
        "blue": 163,
        "hue": 139,
        "saturation": 32,
        "lightness": 68
    }, {
        "hex": "#BBDEC6",
        "rgb": "rgb(187, 222, 198)",
        "hsl": "hsl(139, 35%, 80%)",
        "red": 187,
        "green": 222,
        "blue": 198,
        "hue": 139,
        "saturation": 35,
        "lightness": 80
    }, {
        "hex": "#B4DEC1",
        "rgb": "rgb(180, 222, 193)",
        "hsl": "hsl(139, 39%, 79%)",
        "red": 180,
        "green": 222,
        "blue": 193,
        "hue": 139,
        "saturation": 39,
        "lightness": 79
    }, {
        "hex": "#75C58E",
        "rgb": "rgb(117, 197, 142)",
        "hsl": "hsl(139, 41%, 62%)",
        "red": 117,
        "green": 197,
        "blue": 142,
        "hue": 139,
        "saturation": 41,
        "lightness": 62
    }, {
        "hex": "#85CC9C",
        "rgb": "rgb(133, 204, 156)",
        "hsl": "hsl(139, 41%, 66%)",
        "red": 133,
        "green": 204,
        "blue": 156,
        "hue": 139,
        "saturation": 41,
        "lightness": 66
    }, {
        "hex": "#A0E8B7",
        "rgb": "rgb(160, 232, 183)",
        "hsl": "hsl(139, 61%, 77%)",
        "red": 160,
        "green": 232,
        "blue": 183,
        "hue": 139,
        "saturation": 61,
        "lightness": 77
    }, {
        "hex": "#161917",
        "rgb": "rgb(22, 25, 23)",
        "hsl": "hsl(140, 6%, 9%)",
        "red": 22,
        "green": 25,
        "blue": 23,
        "hue": 140,
        "saturation": 6,
        "lightness": 9
    }, {
        "hex": "#B8CABE",
        "rgb": "rgb(184, 202, 190)",
        "hsl": "hsl(140, 15%, 76%)",
        "red": 184,
        "green": 202,
        "blue": 190,
        "hue": 140,
        "saturation": 15,
        "lightness": 76
    }, {
        "hex": "#6A9277",
        "rgb": "rgb(106, 146, 119)",
        "hsl": "hsl(140, 16%, 49%)",
        "red": 106,
        "green": 146,
        "blue": 119,
        "hue": 140,
        "saturation": 16,
        "lightness": 49
    }, {
        "hex": "#0B110D",
        "rgb": "rgb(11, 17, 13)",
        "hsl": "hsl(140, 21%, 5%)",
        "red": 11,
        "green": 17,
        "blue": 13,
        "hue": 140,
        "saturation": 21,
        "lightness": 5
    }, {
        "hex": "#CCDED2",
        "rgb": "rgb(204, 222, 210)",
        "hsl": "hsl(140, 21%, 84%)",
        "red": 204,
        "green": 222,
        "blue": 210,
        "hue": 140,
        "saturation": 21,
        "lightness": 84
    }, {
        "hex": "#85B394",
        "rgb": "rgb(133, 179, 148)",
        "hsl": "hsl(140, 23%, 61%)",
        "red": 133,
        "green": 179,
        "blue": 148,
        "hue": 140,
        "saturation": 23,
        "lightness": 61
    }, {
        "hex": "#9DC9AC",
        "rgb": "rgb(157, 201, 172)",
        "hsl": "hsl(140, 29%, 70%)",
        "red": 157,
        "green": 201,
        "blue": 172,
        "hue": 140,
        "saturation": 29,
        "lightness": 70
    }, {
        "hex": "#9DC9AC",
        "rgb": "rgb(157, 201, 172)",
        "hsl": "hsl(140, 29%, 70%)",
        "red": 157,
        "green": 201,
        "blue": 172,
        "hue": 140,
        "saturation": 29,
        "lightness": 70
    }, {
        "hex": "#3A7B50",
        "rgb": "rgb(58, 123, 80)",
        "hsl": "hsl(140, 36%, 35%)",
        "red": 58,
        "green": 123,
        "blue": 80,
        "hue": 140,
        "saturation": 36,
        "lightness": 35
    }, {
        "hex": "#9AEDB5",
        "rgb": "rgb(154, 237, 181)",
        "hsl": "hsl(140, 70%, 77%)",
        "red": 154,
        "green": 237,
        "blue": 181,
        "hue": 140,
        "saturation": 70,
        "lightness": 77
    }, {
        "hex": "#A5B3AA",
        "rgb": "rgb(165, 179, 170)",
        "hsl": "hsl(141, 8%, 67%)",
        "red": 165,
        "green": 179,
        "blue": 170,
        "hue": 141,
        "saturation": 8,
        "lightness": 67
    }, {
        "hex": "#BFD6C7",
        "rgb": "rgb(191, 214, 199)",
        "hsl": "hsl(141, 22%, 79%)",
        "red": 191,
        "green": 214,
        "blue": 199,
        "hue": 141,
        "saturation": 22,
        "lightness": 79
    }, {
        "hex": "#7CB490",
        "rgb": "rgb(124, 180, 144)",
        "hsl": "hsl(141, 27%, 60%)",
        "red": 124,
        "green": 180,
        "blue": 144,
        "hue": 141,
        "saturation": 27,
        "lightness": 60
    }, {
        "hex": "#96C3A6",
        "rgb": "rgb(150, 195, 166)",
        "hsl": "hsl(141, 27%, 68%)",
        "red": 150,
        "green": 195,
        "blue": 166,
        "hue": 141,
        "saturation": 27,
        "lightness": 68
    }, {
        "hex": "#94C5A5",
        "rgb": "rgb(148, 197, 165)",
        "hsl": "hsl(141, 30%, 68%)",
        "red": 148,
        "green": 197,
        "blue": 165,
        "hue": 141,
        "saturation": 30,
        "lightness": 68
    }, {
        "hex": "#9FD9B3",
        "rgb": "rgb(159, 217, 179)",
        "hsl": "hsl(141, 43%, 74%)",
        "red": 159,
        "green": 217,
        "blue": 179,
        "hue": 141,
        "saturation": 43,
        "lightness": 74
    }, {
        "hex": "#A5B5AB",
        "rgb": "rgb(165, 181, 171)",
        "hsl": "hsl(142, 10%, 68%)",
        "red": 165,
        "green": 181,
        "blue": 171,
        "hue": 142,
        "saturation": 10,
        "lightness": 68
    }, {
        "hex": "#ADC0B4",
        "rgb": "rgb(173, 192, 180)",
        "hsl": "hsl(142, 13%, 72%)",
        "red": 173,
        "green": 192,
        "blue": 180,
        "hue": 142,
        "saturation": 13,
        "lightness": 72
    }, {
        "hex": "#96B7A2",
        "rgb": "rgb(150, 183, 162)",
        "hsl": "hsl(142, 19%, 65%)",
        "red": 150,
        "green": 183,
        "blue": 162,
        "hue": 142,
        "saturation": 19,
        "lightness": 65
    }, {
        "hex": "#84B295",
        "rgb": "rgb(132, 178, 149)",
        "hsl": "hsl(142, 23%, 61%)",
        "red": 132,
        "green": 178,
        "blue": 149,
        "hue": 142,
        "saturation": 23,
        "lightness": 61
    }, {
        "hex": "#BED9C8",
        "rgb": "rgb(190, 217, 200)",
        "hsl": "hsl(142, 26%, 80%)",
        "red": 190,
        "green": 217,
        "blue": 200,
        "hue": 142,
        "saturation": 26,
        "lightness": 80
    }, {
        "hex": "#80BC96",
        "rgb": "rgb(128, 188, 150)",
        "hsl": "hsl(142, 31%, 62%)",
        "red": 128,
        "green": 188,
        "blue": 150,
        "hue": 142,
        "saturation": 31,
        "lightness": 62
    }, {
        "hex": "#8CC2A0",
        "rgb": "rgb(140, 194, 160)",
        "hsl": "hsl(142, 31%, 65%)",
        "red": 140,
        "green": 194,
        "blue": 160,
        "hue": 142,
        "saturation": 31,
        "lightness": 65
    }, {
        "hex": "#B6D9C3",
        "rgb": "rgb(182, 217, 195)",
        "hsl": "hsl(142, 32%, 78%)",
        "red": 182,
        "green": 217,
        "blue": 195,
        "hue": 142,
        "saturation": 32,
        "lightness": 78
    }, {
        "hex": "#ADD6BC",
        "rgb": "rgb(173, 214, 188)",
        "hsl": "hsl(142, 33%, 76%)",
        "red": 173,
        "green": 214,
        "blue": 188,
        "hue": 142,
        "saturation": 33,
        "lightness": 76
    }, {
        "hex": "#78BD91",
        "rgb": "rgb(120, 189, 145)",
        "hsl": "hsl(142, 34%, 61%)",
        "red": 120,
        "green": 189,
        "blue": 145,
        "hue": 142,
        "saturation": 34,
        "lightness": 61
    }, {
        "hex": "#A4DCB9",
        "rgb": "rgb(164, 220, 185)",
        "hsl": "hsl(142, 44%, 75%)",
        "red": 164,
        "green": 220,
        "blue": 185,
        "hue": 142,
        "saturation": 44,
        "lightness": 75
    }, {
        "hex": "#94E0B0",
        "rgb": "rgb(148, 224, 176)",
        "hsl": "hsl(142, 55%, 73%)",
        "red": 148,
        "green": 224,
        "blue": 176,
        "hue": 142,
        "saturation": 55,
        "lightness": 73
    }, {
        "hex": "#B5F7CD",
        "rgb": "rgb(181, 247, 205)",
        "hsl": "hsl(142, 80%, 84%)",
        "red": 181,
        "green": 247,
        "blue": 205,
        "hue": 142,
        "saturation": 80,
        "lightness": 84
    }, {
        "hex": "#89FCB3",
        "rgb": "rgb(137, 252, 179)",
        "hsl": "hsl(142, 95%, 76%)",
        "red": 137,
        "green": 252,
        "blue": 179,
        "hue": 142,
        "saturation": 95,
        "lightness": 76
    }, {
        "hex": "#91A398",
        "rgb": "rgb(145, 163, 152)",
        "hsl": "hsl(143, 9%, 60%)",
        "red": 145,
        "green": 163,
        "blue": 152,
        "hue": 143,
        "saturation": 9,
        "lightness": 60
    }, {
        "hex": "#B3C5BA",
        "rgb": "rgb(179, 197, 186)",
        "hsl": "hsl(143, 13%, 74%)",
        "red": 179,
        "green": 197,
        "blue": 186,
        "hue": 143,
        "saturation": 13,
        "lightness": 74
    }, {
        "hex": "#BECEC4",
        "rgb": "rgb(190, 206, 196)",
        "hsl": "hsl(143, 14%, 78%)",
        "red": 190,
        "green": 206,
        "blue": 196,
        "hue": 143,
        "saturation": 14,
        "lightness": 78
    }, {
        "hex": "#89B399",
        "rgb": "rgb(137, 179, 153)",
        "hsl": "hsl(143, 22%, 62%)",
        "red": 137,
        "green": 179,
        "blue": 153,
        "hue": 143,
        "saturation": 22,
        "lightness": 62
    }, {
        "hex": "#88B499",
        "rgb": "rgb(136, 180, 153)",
        "hsl": "hsl(143, 23%, 62%)",
        "red": 136,
        "green": 180,
        "blue": 153,
        "hue": 143,
        "saturation": 23,
        "lightness": 62
    }, {
        "hex": "#BED6C7",
        "rgb": "rgb(190, 214, 199)",
        "hsl": "hsl(143, 23%, 79%)",
        "red": 190,
        "green": 214,
        "blue": 199,
        "hue": 143,
        "saturation": 23,
        "lightness": 79
    }, {
        "hex": "#BFE4CD",
        "rgb": "rgb(191, 228, 205)",
        "hsl": "hsl(143, 41%, 82%)",
        "red": 191,
        "green": 228,
        "blue": 205,
        "hue": 143,
        "saturation": 41,
        "lightness": 82
    }, {
        "hex": "#9BDAB3",
        "rgb": "rgb(155, 218, 179)",
        "hsl": "hsl(143, 46%, 73%)",
        "red": 155,
        "green": 218,
        "blue": 179,
        "hue": 143,
        "saturation": 46,
        "lightness": 73
    }, {
        "hex": "#C0EFD2",
        "rgb": "rgb(192, 239, 210)",
        "hsl": "hsl(143, 59%, 85%)",
        "red": 192,
        "green": 239,
        "blue": 210,
        "hue": 143,
        "saturation": 59,
        "lightness": 85
    }, {
        "hex": "#E1E6E3",
        "rgb": "rgb(225, 230, 227)",
        "hsl": "hsl(144, 9%, 89%)",
        "red": 225,
        "green": 230,
        "blue": 227,
        "hue": 144,
        "saturation": 9,
        "lightness": 89
    }, {
        "hex": "#B7CBBF",
        "rgb": "rgb(183, 203, 191)",
        "hsl": "hsl(144, 16%, 76%)",
        "red": 183,
        "green": 203,
        "blue": 191,
        "hue": 144,
        "saturation": 16,
        "lightness": 76
    }, {
        "hex": "#62A07B",
        "rgb": "rgb(98, 160, 123)",
        "hsl": "hsl(144, 25%, 51%)",
        "red": 98,
        "green": 160,
        "blue": 123,
        "hue": 144,
        "saturation": 25,
        "lightness": 51
    }, {
        "hex": "#70AA87",
        "rgb": "rgb(112, 170, 135)",
        "hsl": "hsl(144, 25%, 55%)",
        "red": 112,
        "green": 170,
        "blue": 135,
        "hue": 144,
        "saturation": 25,
        "lightness": 55
    }, {
        "hex": "#6BB88A",
        "rgb": "rgb(107, 184, 138)",
        "hsl": "hsl(144, 35%, 57%)",
        "red": 107,
        "green": 184,
        "blue": 138,
        "hue": 144,
        "saturation": 35,
        "lightness": 57
    }, {
        "hex": "#D2FAE2",
        "rgb": "rgb(210, 250, 226)",
        "hsl": "hsl(144, 80%, 90%)",
        "red": 210,
        "green": 250,
        "blue": 226,
        "hue": 144,
        "saturation": 80,
        "lightness": 90
    }, {
        "hex": "#A3FEC7",
        "rgb": "rgb(163, 254, 199)",
        "hsl": "hsl(144, 98%, 82%)",
        "red": 163,
        "green": 254,
        "blue": 199,
        "hue": 144,
        "saturation": 98,
        "lightness": 82
    }, {
        "hex": "#76877D",
        "rgb": "rgb(118, 135, 125)",
        "hsl": "hsl(145, 7%, 50%)",
        "red": 118,
        "green": 135,
        "blue": 125,
        "hue": 145,
        "saturation": 7,
        "lightness": 50
    }, {
        "hex": "#AFC7B9",
        "rgb": "rgb(175, 199, 185)",
        "hsl": "hsl(145, 18%, 73%)",
        "red": 175,
        "green": 199,
        "blue": 185,
        "hue": 145,
        "saturation": 18,
        "lightness": 73
    }, {
        "hex": "#66997B",
        "rgb": "rgb(102, 153, 123)",
        "hsl": "hsl(145, 20%, 50%)",
        "red": 102,
        "green": 153,
        "blue": 123,
        "hue": 145,
        "saturation": 20,
        "lightness": 50
    }, {
        "hex": "#A1C0AE",
        "rgb": "rgb(161, 192, 174)",
        "hsl": "hsl(145, 20%, 69%)",
        "red": 161,
        "green": 192,
        "blue": 174,
        "hue": 145,
        "saturation": 20,
        "lightness": 69
    }, {
        "hex": "#67B588",
        "rgb": "rgb(103, 181, 136)",
        "hsl": "hsl(145, 35%, 56%)",
        "red": 103,
        "green": 181,
        "blue": 136,
        "hue": 145,
        "saturation": 35,
        "lightness": 56
    }, {
        "hex": "#73BC91",
        "rgb": "rgb(115, 188, 145)",
        "hsl": "hsl(145, 35%, 59%)",
        "red": 115,
        "green": 188,
        "blue": 145,
        "hue": 145,
        "saturation": 35,
        "lightness": 59
    }, {
        "hex": "#D6ECDF",
        "rgb": "rgb(214, 236, 223)",
        "hsl": "hsl(145, 37%, 88%)",
        "red": 214,
        "green": 236,
        "blue": 223,
        "hue": 145,
        "saturation": 37,
        "lightness": 88
    }, {
        "hex": "#3FD97F",
        "rgb": "rgb(63, 217, 127)",
        "hsl": "hsl(145, 67%, 55%)",
        "red": 63,
        "green": 217,
        "blue": 127,
        "hue": 145,
        "saturation": 67,
        "lightness": 55
    }, {
        "hex": "#00B34C",
        "rgb": "rgb(0, 179, 76)",
        "hsl": "hsl(145, 100%, 35%)",
        "red": 0,
        "green": 179,
        "blue": 76,
        "hue": 145,
        "saturation": 100,
        "lightness": 35
    }, {
        "hex": "#6E9A81",
        "rgb": "rgb(110, 154, 129)",
        "hsl": "hsl(146, 18%, 52%)",
        "red": 110,
        "green": 154,
        "blue": 129,
        "hue": 146,
        "saturation": 18,
        "lightness": 52
    }, {
        "hex": "#7BA58D",
        "rgb": "rgb(123, 165, 141)",
        "hsl": "hsl(146, 19%, 56%)",
        "red": 123,
        "green": 165,
        "blue": 141,
        "hue": 146,
        "saturation": 19,
        "lightness": 56
    }, {
        "hex": "#63997A",
        "rgb": "rgb(99, 153, 122)",
        "hsl": "hsl(146, 21%, 49%)",
        "red": 99,
        "green": 153,
        "blue": 122,
        "hue": 146,
        "saturation": 21,
        "lightness": 49
    }, {
        "hex": "#62997A",
        "rgb": "rgb(98, 153, 122)",
        "hsl": "hsl(146, 22%, 49%)",
        "red": 98,
        "green": 153,
        "blue": 122,
        "hue": 146,
        "saturation": 22,
        "lightness": 49
    }, {
        "hex": "#92BEA5",
        "rgb": "rgb(146, 190, 165)",
        "hsl": "hsl(146, 25%, 66%)",
        "red": 146,
        "green": 190,
        "blue": 165,
        "hue": 146,
        "saturation": 25,
        "lightness": 66
    }, {
        "hex": "#C8DFD2",
        "rgb": "rgb(200, 223, 210)",
        "hsl": "hsl(146, 26%, 83%)",
        "red": 200,
        "green": 223,
        "blue": 210,
        "hue": 146,
        "saturation": 26,
        "lightness": 83
    }, {
        "hex": "#429867",
        "rgb": "rgb(66, 152, 103)",
        "hsl": "hsl(146, 39%, 43%)",
        "red": 66,
        "green": 152,
        "blue": 103,
        "hue": 146,
        "saturation": 39,
        "lightness": 43
    }, {
        "hex": "#A7E3C1",
        "rgb": "rgb(167, 227, 193)",
        "hsl": "hsl(146, 52%, 77%)",
        "red": 167,
        "green": 227,
        "blue": 193,
        "hue": 146,
        "saturation": 52,
        "lightness": 77
    }, {
        "hex": "#94F9BF",
        "rgb": "rgb(148, 249, 191)",
        "hsl": "hsl(146, 89%, 78%)",
        "red": 148,
        "green": 249,
        "blue": 191,
        "hue": 146,
        "saturation": 89,
        "lightness": 78
    }, {
        "hex": "#D5DED9",
        "rgb": "rgb(213, 222, 217)",
        "hsl": "hsl(147, 12%, 85%)",
        "red": 213,
        "green": 222,
        "blue": 217,
        "hue": 147,
        "saturation": 12,
        "lightness": 85
    }, {
        "hex": "#67917A",
        "rgb": "rgb(103, 145, 122)",
        "hsl": "hsl(147, 17%, 49%)",
        "red": 103,
        "green": 145,
        "blue": 122,
        "hue": 147,
        "saturation": 17,
        "lightness": 49
    }, {
        "hex": "#84AF97",
        "rgb": "rgb(132, 175, 151)",
        "hsl": "hsl(147, 21%, 60%)",
        "red": 132,
        "green": 175,
        "blue": 151,
        "hue": 147,
        "saturation": 21,
        "lightness": 60
    }, {
        "hex": "#7DAD93",
        "rgb": "rgb(125, 173, 147)",
        "hsl": "hsl(147, 23%, 58%)",
        "red": 125,
        "green": 173,
        "blue": 147,
        "hue": 147,
        "saturation": 23,
        "lightness": 58
    }, {
        "hex": "#A9CCB9",
        "rgb": "rgb(169, 204, 185)",
        "hsl": "hsl(147, 26%, 73%)",
        "red": 169,
        "green": 204,
        "blue": 185,
        "hue": 147,
        "saturation": 26,
        "lightness": 73
    }, {
        "hex": "#59A87D",
        "rgb": "rgb(89, 168, 125)",
        "hsl": "hsl(147, 31%, 50%)",
        "red": 89,
        "green": 168,
        "blue": 125,
        "hue": 147,
        "saturation": 31,
        "lightness": 50
    }, {
        "hex": "#4FB37C",
        "rgb": "rgb(79, 179, 124)",
        "hsl": "hsl(147, 40%, 51%)",
        "red": 79,
        "green": 179,
        "blue": 124,
        "hue": 147,
        "saturation": 40,
        "lightness": 51
    }, {
        "hex": "#89A194",
        "rgb": "rgb(137, 161, 148)",
        "hsl": "hsl(148, 11%, 58%)",
        "red": 137,
        "green": 161,
        "blue": 148,
        "hue": 148,
        "saturation": 11,
        "lightness": 58
    }, {
        "hex": "#619177",
        "rgb": "rgb(97, 145, 119)",
        "hsl": "hsl(148, 20%, 47%)",
        "red": 97,
        "green": 145,
        "blue": 119,
        "hue": 148,
        "saturation": 20,
        "lightness": 47
    }, {
        "hex": "#96BDA8",
        "rgb": "rgb(150, 189, 168)",
        "hsl": "hsl(148, 23%, 66%)",
        "red": 150,
        "green": 189,
        "blue": 168,
        "hue": 148,
        "saturation": 23,
        "lightness": 66
    }, {
        "hex": "#97BEA9",
        "rgb": "rgb(151, 190, 169)",
        "hsl": "hsl(148, 23%, 67%)",
        "red": 151,
        "green": 190,
        "blue": 169,
        "hue": 148,
        "saturation": 23,
        "lightness": 67
    }, {
        "hex": "#79AE92",
        "rgb": "rgb(121, 174, 146)",
        "hsl": "hsl(148, 25%, 58%)",
        "red": 121,
        "green": 174,
        "blue": 146,
        "hue": 148,
        "saturation": 25,
        "lightness": 58
    }, {
        "hex": "#7CBC9A",
        "rgb": "rgb(124, 188, 154)",
        "hsl": "hsl(148, 32%, 61%)",
        "red": 124,
        "green": 188,
        "blue": 154,
        "hue": 148,
        "saturation": 32,
        "lightness": 61
    }, {
        "hex": "#53BA83",
        "rgb": "rgb(83, 186, 131)",
        "hsl": "hsl(148, 43%, 53%)",
        "red": 83,
        "green": 186,
        "blue": 131,
        "hue": 148,
        "saturation": 43,
        "lightness": 53
    }, {
        "hex": "#88D3AB",
        "rgb": "rgb(136, 211, 171)",
        "hsl": "hsl(148, 46%, 68%)",
        "red": 136,
        "green": 211,
        "blue": 171,
        "hue": 148,
        "saturation": 46,
        "lightness": 68
    }, {
        "hex": "#98D9B6",
        "rgb": "rgb(152, 217, 182)",
        "hsl": "hsl(148, 46%, 72%)",
        "red": 152,
        "green": 217,
        "blue": 182,
        "hue": 148,
        "saturation": 46,
        "lightness": 72
    }, {
        "hex": "#9ADCB9",
        "rgb": "rgb(154, 220, 185)",
        "hsl": "hsl(148, 49%, 73%)",
        "red": 154,
        "green": 220,
        "blue": 185,
        "hue": 148,
        "saturation": 49,
        "lightness": 73
    }, {
        "hex": "#BAD3C6",
        "rgb": "rgb(186, 211, 198)",
        "hsl": "hsl(149, 22%, 78%)",
        "red": 186,
        "green": 211,
        "blue": 198,
        "hue": 149,
        "saturation": 22,
        "lightness": 78
    }, {
        "hex": "#599476",
        "rgb": "rgb(89, 148, 118)",
        "hsl": "hsl(149, 25%, 46%)",
        "red": 89,
        "green": 148,
        "blue": 118,
        "hue": 149,
        "saturation": 25,
        "lightness": 46
    }, {
        "hex": "#78B395",
        "rgb": "rgb(120, 179, 149)",
        "hsl": "hsl(149, 28%, 59%)",
        "red": 120,
        "green": 179,
        "blue": 149,
        "hue": 149,
        "saturation": 28,
        "lightness": 59
    }, {
        "hex": "#97C4AD",
        "rgb": "rgb(151, 196, 173)",
        "hsl": "hsl(149, 28%, 68%)",
        "red": 151,
        "green": 196,
        "blue": 173,
        "hue": 149,
        "saturation": 28,
        "lightness": 68
    }, {
        "hex": "#B8D9C8",
        "rgb": "rgb(184, 217, 200)",
        "hsl": "hsl(149, 30%, 79%)",
        "red": 184,
        "green": 217,
        "blue": 200,
        "hue": 149,
        "saturation": 30,
        "lightness": 79
    }, {
        "hex": "#6BB38E",
        "rgb": "rgb(107, 179, 142)",
        "hsl": "hsl(149, 32%, 56%)",
        "red": 107,
        "green": 179,
        "blue": 142,
        "hue": 149,
        "saturation": 32,
        "lightness": 56
    }, {
        "hex": "#9ED1B7",
        "rgb": "rgb(158, 209, 183)",
        "hsl": "hsl(149, 36%, 72%)",
        "red": 158,
        "green": 209,
        "blue": 183,
        "hue": 149,
        "saturation": 36,
        "lightness": 72
    }, {
        "hex": "#C3E6D4",
        "rgb": "rgb(195, 230, 212)",
        "hsl": "hsl(149, 41%, 83%)",
        "red": 195,
        "green": 230,
        "blue": 212,
        "hue": 149,
        "saturation": 41,
        "lightness": 83
    }, {
        "hex": "#595B5A",
        "rgb": "rgb(89, 91, 90)",
        "hsl": "hsl(150, 1%, 35%)",
        "red": 89,
        "green": 91,
        "blue": 90,
        "hue": 150,
        "saturation": 1,
        "lightness": 35
    }, {
        "hex": "#343635",
        "rgb": "rgb(52, 54, 53)",
        "hsl": "hsl(150, 2%, 21%)",
        "red": 52,
        "green": 54,
        "blue": 53,
        "hue": 150,
        "saturation": 2,
        "lightness": 21
    }, {
        "hex": "#494D4B",
        "rgb": "rgb(73, 77, 75)",
        "hsl": "hsl(150, 3%, 29%)",
        "red": 73,
        "green": 77,
        "blue": 75,
        "hue": 150,
        "saturation": 3,
        "lightness": 29
    }, {
        "hex": "#E7EDEA",
        "rgb": "rgb(231, 237, 234)",
        "hsl": "hsl(150, 14%, 92%)",
        "red": 231,
        "green": 237,
        "blue": 234,
        "hue": 150,
        "saturation": 14,
        "lightness": 92
    }, {
        "hex": "#78A890",
        "rgb": "rgb(120, 168, 144)",
        "hsl": "hsl(150, 22%, 56%)",
        "red": 120,
        "green": 168,
        "blue": 144,
        "hue": 150,
        "saturation": 22,
        "lightness": 56
    }, {
        "hex": "#78A890",
        "rgb": "rgb(120, 168, 144)",
        "hsl": "hsl(150, 22%, 56%)",
        "red": 120,
        "green": 168,
        "blue": 144,
        "hue": 150,
        "saturation": 22,
        "lightness": 56
    }, {
        "hex": "#C1D9CD",
        "rgb": "rgb(193, 217, 205)",
        "hsl": "hsl(150, 24%, 80%)",
        "red": 193,
        "green": 217,
        "blue": 205,
        "hue": 150,
        "saturation": 24,
        "lightness": 80
    }, {
        "hex": "#5D9E7E",
        "rgb": "rgb(93, 158, 126)",
        "hsl": "hsl(150, 26%, 49%)",
        "red": 93,
        "green": 158,
        "blue": 126,
        "hue": 150,
        "saturation": 26,
        "lightness": 49
    }, {
        "hex": "#A0CAB5",
        "rgb": "rgb(160, 202, 181)",
        "hsl": "hsl(150, 28%, 71%)",
        "red": 160,
        "green": 202,
        "blue": 181,
        "hue": 150,
        "saturation": 28,
        "lightness": 71
    }, {
        "hex": "#82BFA0",
        "rgb": "rgb(130, 191, 160)",
        "hsl": "hsl(150, 32%, 63%)",
        "red": 130,
        "green": 191,
        "blue": 160,
        "hue": 150,
        "saturation": 32,
        "lightness": 63
    }, {
        "hex": "#45936C",
        "rgb": "rgb(69, 147, 108)",
        "hsl": "hsl(150, 36%, 42%)",
        "red": 69,
        "green": 147,
        "blue": 108,
        "hue": 150,
        "saturation": 36,
        "lightness": 42
    }, {
        "hex": "#8DCCAD",
        "rgb": "rgb(141, 204, 173)",
        "hsl": "hsl(150, 38%, 68%)",
        "red": 141,
        "green": 204,
        "blue": 173,
        "hue": 150,
        "saturation": 38,
        "lightness": 68
    }, {
        "hex": "#59D999",
        "rgb": "rgb(89, 217, 153)",
        "hsl": "hsl(150, 63%, 60%)",
        "red": 89,
        "green": 217,
        "blue": 153,
        "hue": 150,
        "saturation": 63,
        "lightness": 60
    }, {
        "hex": "#A7EBC9",
        "rgb": "rgb(167, 235, 201)",
        "hsl": "hsl(150, 63%, 79%)",
        "red": 167,
        "green": 235,
        "blue": 201,
        "hue": 150,
        "saturation": 63,
        "lightness": 79
    }, {
        "hex": "#83988E",
        "rgb": "rgb(131, 152, 142)",
        "hsl": "hsl(151, 9%, 55%)",
        "red": 131,
        "green": 152,
        "blue": 142,
        "hue": 151,
        "saturation": 9,
        "lightness": 55
    }, {
        "hex": "#96B5A6",
        "rgb": "rgb(150, 181, 166)",
        "hsl": "hsl(151, 17%, 65%)",
        "red": 150,
        "green": 181,
        "blue": 166,
        "hue": 151,
        "saturation": 17,
        "lightness": 65
    }, {
        "hex": "#74AB90",
        "rgb": "rgb(116, 171, 144)",
        "hsl": "hsl(151, 25%, 56%)",
        "red": 116,
        "green": 171,
        "blue": 144,
        "hue": 151,
        "saturation": 25,
        "lightness": 56
    }, {
        "hex": "#98C7B0",
        "rgb": "rgb(152, 199, 176)",
        "hsl": "hsl(151, 30%, 69%)",
        "red": 152,
        "green": 199,
        "blue": 176,
        "hue": 151,
        "saturation": 30,
        "lightness": 69
    }, {
        "hex": "#26503C",
        "rgb": "rgb(38, 80, 60)",
        "hsl": "hsl(151, 36%, 23%)",
        "red": 38,
        "green": 80,
        "blue": 60,
        "hue": 151,
        "saturation": 36,
        "lightness": 23
    }, {
        "hex": "#CDEADC",
        "rgb": "rgb(205, 234, 220)",
        "hsl": "hsl(151, 41%, 86%)",
        "red": 205,
        "green": 234,
        "blue": 220,
        "hue": 151,
        "saturation": 41,
        "lightness": 86
    }, {
        "hex": "#B9F1D6",
        "rgb": "rgb(185, 241, 214)",
        "hsl": "hsl(151, 67%, 84%)",
        "red": 185,
        "green": 241,
        "blue": 214,
        "hue": 151,
        "saturation": 67,
        "lightness": 84
    }, {
        "hex": "#3DDB8F",
        "rgb": "rgb(61, 219, 143)",
        "hsl": "hsl(151, 69%, 55%)",
        "red": 61,
        "green": 219,
        "blue": 143,
        "hue": 151,
        "saturation": 69,
        "lightness": 55
    }, {
        "hex": "#A6B5AE",
        "rgb": "rgb(166, 181, 174)",
        "hsl": "hsl(152, 9%, 68%)",
        "red": 166,
        "green": 181,
        "blue": 174,
        "hue": 152,
        "saturation": 9,
        "lightness": 68
    }, {
        "hex": "#5E8271",
        "rgb": "rgb(94, 130, 113)",
        "hsl": "hsl(152, 16%, 44%)",
        "red": 94,
        "green": 130,
        "blue": 113,
        "hue": 152,
        "saturation": 16,
        "lightness": 44
    }, {
        "hex": "#9DBFAF",
        "rgb": "rgb(157, 191, 175)",
        "hsl": "hsl(152, 21%, 68%)",
        "red": 157,
        "green": 191,
        "blue": 175,
        "hue": 152,
        "saturation": 21,
        "lightness": 68
    }, {
        "hex": "#A8CABA",
        "rgb": "rgb(168, 202, 186)",
        "hsl": "hsl(152, 24%, 73%)",
        "red": 168,
        "green": 202,
        "blue": 186,
        "hue": 152,
        "saturation": 24,
        "lightness": 73
    }, {
        "hex": "#CEE1D8",
        "rgb": "rgb(206, 225, 216)",
        "hsl": "hsl(152, 24%, 85%)",
        "red": 206,
        "green": 225,
        "blue": 216,
        "hue": 152,
        "saturation": 24,
        "lightness": 85
    }, {
        "hex": "#DFECE6",
        "rgb": "rgb(223, 236, 230)",
        "hsl": "hsl(152, 25%, 90%)",
        "red": 223,
        "green": 236,
        "blue": 230,
        "hue": 152,
        "saturation": 25,
        "lightness": 90
    }, {
        "hex": "#88BAA3",
        "rgb": "rgb(136, 186, 163)",
        "hsl": "hsl(152, 27%, 63%)",
        "red": 136,
        "green": 186,
        "blue": 163,
        "hue": 152,
        "saturation": 27,
        "lightness": 63
    }, {
        "hex": "#B3DBC8",
        "rgb": "rgb(179, 219, 200)",
        "hsl": "hsl(152, 36%, 78%)",
        "red": 179,
        "green": 219,
        "blue": 200,
        "hue": 152,
        "saturation": 36,
        "lightness": 78
    }, {
        "hex": "#77CCA4",
        "rgb": "rgb(119, 204, 164)",
        "hsl": "hsl(152, 45%, 63%)",
        "red": 119,
        "green": 204,
        "blue": 164,
        "hue": 152,
        "saturation": 45,
        "lightness": 63
    }, {
        "hex": "#A5E6C8",
        "rgb": "rgb(165, 230, 200)",
        "hsl": "hsl(152, 57%, 77%)",
        "red": 165,
        "green": 230,
        "blue": 200,
        "hue": 152,
        "saturation": 57,
        "lightness": 77
    }, {
        "hex": "#A8E7CA",
        "rgb": "rgb(168, 231, 202)",
        "hsl": "hsl(152, 57%, 78%)",
        "red": 168,
        "green": 231,
        "blue": 202,
        "hue": 152,
        "saturation": 57,
        "lightness": 78
    }, {
        "hex": "#83AF9B",
        "rgb": "rgb(131, 175, 155)",
        "hsl": "hsl(153, 22%, 60%)",
        "red": 131,
        "green": 175,
        "blue": 155,
        "hue": 153,
        "saturation": 22,
        "lightness": 60
    }, {
        "hex": "#8BB6A3",
        "rgb": "rgb(139, 182, 163)",
        "hsl": "hsl(153, 23%, 63%)",
        "red": 139,
        "green": 182,
        "blue": 163,
        "hue": 153,
        "saturation": 23,
        "lightness": 63
    }, {
        "hex": "#ABCCBD",
        "rgb": "rgb(171, 204, 189)",
        "hsl": "hsl(153, 24%, 74%)",
        "red": 171,
        "green": 204,
        "blue": 189,
        "hue": 153,
        "saturation": 24,
        "lightness": 74
    }, {
        "hex": "#74BF9D",
        "rgb": "rgb(116, 191, 157)",
        "hsl": "hsl(153, 37%, 60%)",
        "red": 116,
        "green": 191,
        "blue": 157,
        "hue": 153,
        "saturation": 37,
        "lightness": 60
    }, {
        "hex": "#75C9A3",
        "rgb": "rgb(117, 201, 163)",
        "hsl": "hsl(153, 44%, 62%)",
        "red": 117,
        "green": 201,
        "blue": 163,
        "hue": 153,
        "saturation": 44,
        "lightness": 62
    }, {
        "hex": "#057C46",
        "rgb": "rgb(5, 124, 70)",
        "hsl": "hsl(153, 92%, 25%)",
        "red": 5,
        "green": 124,
        "blue": 70,
        "hue": 153,
        "saturation": 92,
        "lightness": 25
    }, {
        "hex": "#C5FFE5",
        "rgb": "rgb(197, 255, 229)",
        "hsl": "hsl(153, 100%, 89%)",
        "red": 197,
        "green": 255,
        "blue": 229,
        "hue": 153,
        "saturation": 100,
        "lightness": 89
    }, {
        "hex": "#7CAA96",
        "rgb": "rgb(124, 170, 150)",
        "hsl": "hsl(154, 21%, 58%)",
        "red": 124,
        "green": 170,
        "blue": 150,
        "hue": 154,
        "saturation": 21,
        "lightness": 58
    }, {
        "hex": "#00C16C",
        "rgb": "rgb(0, 193, 108)",
        "hsl": "hsl(154, 100%, 38%)",
        "red": 0,
        "green": 193,
        "blue": 108,
        "hue": 154,
        "saturation": 100,
        "lightness": 38
    }, {
        "hex": "#ACBFB7",
        "rgb": "rgb(172, 191, 183)",
        "hsl": "hsl(155, 13%, 71%)",
        "red": 172,
        "green": 191,
        "blue": 183,
        "hue": 155,
        "saturation": 13,
        "lightness": 71
    }, {
        "hex": "#688A7C",
        "rgb": "rgb(104, 138, 124)",
        "hsl": "hsl(155, 14%, 47%)",
        "red": 104,
        "green": 138,
        "blue": 124,
        "hue": 155,
        "saturation": 14,
        "lightness": 47
    }, {
        "hex": "#6E9987",
        "rgb": "rgb(110, 153, 135)",
        "hsl": "hsl(155, 17%, 52%)",
        "red": 110,
        "green": 153,
        "blue": 135,
        "hue": 155,
        "saturation": 17,
        "lightness": 52
    }, {
        "hex": "#80AB99",
        "rgb": "rgb(128, 171, 153)",
        "hsl": "hsl(155, 20%, 59%)",
        "red": 128,
        "green": 171,
        "blue": 153,
        "hue": 155,
        "saturation": 20,
        "lightness": 59
    }, {
        "hex": "#88B6A3",
        "rgb": "rgb(136, 182, 163)",
        "hsl": "hsl(155, 24%, 62%)",
        "red": 136,
        "green": 182,
        "blue": 163,
        "hue": 155,
        "saturation": 24,
        "lightness": 62
    }, {
        "hex": "#ACCEC0",
        "rgb": "rgb(172, 206, 192)",
        "hsl": "hsl(155, 26%, 74%)",
        "red": 172,
        "green": 206,
        "blue": 192,
        "hue": 155,
        "saturation": 26,
        "lightness": 74
    }, {
        "hex": "#72AE95",
        "rgb": "rgb(114, 174, 149)",
        "hsl": "hsl(155, 27%, 56%)",
        "red": 114,
        "green": 174,
        "blue": 149,
        "hue": 155,
        "saturation": 27,
        "lightness": 56
    }, {
        "hex": "#66AF91",
        "rgb": "rgb(102, 175, 145)",
        "hsl": "hsl(155, 31%, 54%)",
        "red": 102,
        "green": 175,
        "blue": 145,
        "hue": 155,
        "saturation": 31,
        "lightness": 54
    }, {
        "hex": "#81BDA4",
        "rgb": "rgb(129, 189, 164)",
        "hsl": "hsl(155, 31%, 62%)",
        "red": 129,
        "green": 189,
        "blue": 164,
        "hue": 155,
        "saturation": 31,
        "lightness": 62
    }, {
        "hex": "#80BCA3",
        "rgb": "rgb(128, 188, 163)",
        "hsl": "hsl(155, 31%, 62%)",
        "red": 128,
        "green": 188,
        "blue": 163,
        "hue": 155,
        "saturation": 31,
        "lightness": 62
    }, {
        "hex": "#7BBDA1",
        "rgb": "rgb(123, 189, 161)",
        "hsl": "hsl(155, 33%, 61%)",
        "red": 123,
        "green": 189,
        "blue": 161,
        "hue": 155,
        "saturation": 33,
        "lightness": 61
    }, {
        "hex": "#7EBEA3",
        "rgb": "rgb(126, 190, 163)",
        "hsl": "hsl(155, 33%, 62%)",
        "red": 126,
        "green": 190,
        "blue": 163,
        "hue": 155,
        "saturation": 33,
        "lightness": 62
    }, {
        "hex": "#489C79",
        "rgb": "rgb(72, 156, 121)",
        "hsl": "hsl(155, 37%, 45%)",
        "red": 72,
        "green": 156,
        "blue": 121,
        "hue": 155,
        "saturation": 37,
        "lightness": 45
    }, {
        "hex": "#95CFB7",
        "rgb": "rgb(149, 207, 183)",
        "hsl": "hsl(155, 38%, 70%)",
        "red": 149,
        "green": 207,
        "blue": 183,
        "hue": 155,
        "saturation": 38,
        "lightness": 70
    }, {
        "hex": "#258A60",
        "rgb": "rgb(37, 138, 96)",
        "hsl": "hsl(155, 58%, 34%)",
        "red": 37,
        "green": 138,
        "blue": 96,
        "hue": 155,
        "saturation": 58,
        "lightness": 34
    }, {
        "hex": "#A4F7D4",
        "rgb": "rgb(164, 247, 212)",
        "hsl": "hsl(155, 84%, 81%)",
        "red": 164,
        "green": 247,
        "blue": 212,
        "hue": 155,
        "saturation": 84,
        "lightness": 81
    }, {
        "hex": "#7B8A84",
        "rgb": "rgb(123, 138, 132)",
        "hsl": "hsl(156, 6%, 51%)",
        "red": 123,
        "green": 138,
        "blue": 132,
        "hue": 156,
        "saturation": 6,
        "lightness": 51
    }, {
        "hex": "#5F9982",
        "rgb": "rgb(95, 153, 130)",
        "hsl": "hsl(156, 23%, 49%)",
        "red": 95,
        "green": 153,
        "blue": 130,
        "hue": 156,
        "saturation": 23,
        "lightness": 49
    }, {
        "hex": "#95D0B8",
        "rgb": "rgb(149, 208, 184)",
        "hsl": "hsl(156, 39%, 70%)",
        "red": 149,
        "green": 208,
        "blue": 184,
        "hue": 156,
        "saturation": 39,
        "lightness": 70
    }, {
        "hex": "#67BE9B",
        "rgb": "rgb(103, 190, 155)",
        "hsl": "hsl(156, 40%, 57%)",
        "red": 103,
        "green": 190,
        "blue": 155,
        "hue": 156,
        "saturation": 40,
        "lightness": 57
    }, {
        "hex": "#B1E6D1",
        "rgb": "rgb(177, 230, 209)",
        "hsl": "hsl(156, 51%, 80%)",
        "red": 177,
        "green": 230,
        "blue": 209,
        "hue": 156,
        "saturation": 51,
        "lightness": 80
    }, {
        "hex": "#85E6C0",
        "rgb": "rgb(133, 230, 192)",
        "hsl": "hsl(156, 66%, 71%)",
        "red": 133,
        "green": 230,
        "blue": 192,
        "hue": 156,
        "saturation": 66,
        "lightness": 71
    }, {
        "hex": "#46685B",
        "rgb": "rgb(70, 104, 91)",
        "hsl": "hsl(157, 20%, 34%)",
        "red": 70,
        "green": 104,
        "blue": 91,
        "hue": 157,
        "saturation": 20,
        "lightness": 34
    }, {
        "hex": "#77A493",
        "rgb": "rgb(119, 164, 147)",
        "hsl": "hsl(157, 20%, 55%)",
        "red": 119,
        "green": 164,
        "blue": 147,
        "hue": 157,
        "saturation": 20,
        "lightness": 55
    }, {
        "hex": "#89B2A2",
        "rgb": "rgb(137, 178, 162)",
        "hsl": "hsl(157, 21%, 62%)",
        "red": 137,
        "green": 178,
        "blue": 162,
        "hue": 157,
        "saturation": 21,
        "lightness": 62
    }, {
        "hex": "#5D917D",
        "rgb": "rgb(93, 145, 125)",
        "hsl": "hsl(157, 22%, 47%)",
        "red": 93,
        "green": 145,
        "blue": 125,
        "hue": 157,
        "saturation": 22,
        "lightness": 47
    }, {
        "hex": "#9EC7B7",
        "rgb": "rgb(158, 199, 183)",
        "hsl": "hsl(157, 27%, 70%)",
        "red": 158,
        "green": 199,
        "blue": 183,
        "hue": 157,
        "saturation": 27,
        "lightness": 70
    }, {
        "hex": "#9ECFBC",
        "rgb": "rgb(158, 207, 188)",
        "hsl": "hsl(157, 34%, 72%)",
        "red": 158,
        "green": 207,
        "blue": 188,
        "hue": 157,
        "saturation": 34,
        "lightness": 72
    }, {
        "hex": "#92CCB6",
        "rgb": "rgb(146, 204, 182)",
        "hsl": "hsl(157, 36%, 69%)",
        "red": 146,
        "green": 204,
        "blue": 182,
        "hue": 157,
        "saturation": 36,
        "lightness": 69
    }, {
        "hex": "#59B390",
        "rgb": "rgb(89, 179, 144)",
        "hsl": "hsl(157, 37%, 53%)",
        "red": 89,
        "green": 179,
        "blue": 144,
        "hue": 157,
        "saturation": 37,
        "lightness": 53
    }, {
        "hex": "#C6E5D9",
        "rgb": "rgb(198, 229, 217)",
        "hsl": "hsl(157, 37%, 84%)",
        "red": 198,
        "green": 229,
        "blue": 217,
        "hue": 157,
        "saturation": 37,
        "lightness": 84
    }, {
        "hex": "#A8E6CE",
        "rgb": "rgb(168, 230, 206)",
        "hsl": "hsl(157, 55%, 78%)",
        "red": 168,
        "green": 230,
        "blue": 206,
        "hue": 157,
        "saturation": 55,
        "lightness": 78
    }, {
        "hex": "#D3F7E9",
        "rgb": "rgb(211, 247, 233)",
        "hsl": "hsl(157, 69%, 90%)",
        "red": 211,
        "green": 247,
        "blue": 233,
        "hue": 157,
        "saturation": 69,
        "lightness": 90
    }, {
        "hex": "#149C68",
        "rgb": "rgb(20, 156, 104)",
        "hsl": "hsl(157, 77%, 35%)",
        "red": 20,
        "green": 156,
        "blue": 104,
        "hue": 157,
        "saturation": 77,
        "lightness": 35
    }, {
        "hex": "#00C176",
        "rgb": "rgb(0, 193, 118)",
        "hsl": "hsl(157, 100%, 38%)",
        "red": 0,
        "green": 193,
        "blue": 118,
        "hue": 157,
        "saturation": 100,
        "lightness": 38
    }, {
        "hex": "#51615B",
        "rgb": "rgb(81, 97, 91)",
        "hsl": "hsl(158, 9%, 35%)",
        "red": 81,
        "green": 97,
        "blue": 91,
        "hue": 158,
        "saturation": 9,
        "lightness": 35
    }, {
        "hex": "#6B9E8B",
        "rgb": "rgb(107, 158, 139)",
        "hsl": "hsl(158, 21%, 52%)",
        "red": 107,
        "green": 158,
        "blue": 139,
        "hue": 158,
        "saturation": 21,
        "lightness": 52
    }, {
        "hex": "#C1D9D0",
        "rgb": "rgb(193, 217, 208)",
        "hsl": "hsl(158, 24%, 80%)",
        "red": 193,
        "green": 217,
        "blue": 208,
        "hue": 158,
        "saturation": 24,
        "lightness": 80
    }, {
        "hex": "#93C2B1",
        "rgb": "rgb(147, 194, 177)",
        "hsl": "hsl(158, 28%, 67%)",
        "red": 147,
        "green": 194,
        "blue": 177,
        "hue": 158,
        "saturation": 28,
        "lightness": 67
    }, {
        "hex": "#7DB8A2",
        "rgb": "rgb(125, 184, 162)",
        "hsl": "hsl(158, 29%, 61%)",
        "red": 125,
        "green": 184,
        "blue": 162,
        "hue": 158,
        "saturation": 29,
        "lightness": 61
    }, {
        "hex": "#65AC92",
        "rgb": "rgb(101, 172, 146)",
        "hsl": "hsl(158, 30%, 54%)",
        "red": 101,
        "green": 172,
        "blue": 146,
        "hue": 158,
        "saturation": 30,
        "lightness": 54
    }, {
        "hex": "#66AC92",
        "rgb": "rgb(102, 172, 146)",
        "hsl": "hsl(158, 30%, 54%)",
        "red": 102,
        "green": 172,
        "blue": 146,
        "hue": 158,
        "saturation": 30,
        "lightness": 54
    }, {
        "hex": "#82BDA7",
        "rgb": "rgb(130, 189, 167)",
        "hsl": "hsl(158, 31%, 63%)",
        "red": 130,
        "green": 189,
        "blue": 167,
        "hue": 158,
        "saturation": 31,
        "lightness": 63
    }, {
        "hex": "#2D5E4C",
        "rgb": "rgb(45, 94, 76)",
        "hsl": "hsl(158, 35%, 27%)",
        "red": 45,
        "green": 94,
        "blue": 76,
        "hue": 158,
        "saturation": 35,
        "lightness": 27
    }, {
        "hex": "#73C8A9",
        "rgb": "rgb(115, 200, 169)",
        "hsl": "hsl(158, 44%, 62%)",
        "red": 115,
        "green": 200,
        "blue": 169,
        "hue": 158,
        "saturation": 44,
        "lightness": 62
    }, {
        "hex": "#ABDECB",
        "rgb": "rgb(171, 222, 203)",
        "hsl": "hsl(158, 44%, 77%)",
        "red": 171,
        "green": 222,
        "blue": 203,
        "hue": 158,
        "saturation": 44,
        "lightness": 77
    }, {
        "hex": "#DAF3EA",
        "rgb": "rgb(218, 243, 234)",
        "hsl": "hsl(158, 51%, 90%)",
        "red": 218,
        "green": 243,
        "blue": 234,
        "hue": 158,
        "saturation": 51,
        "lightness": 90
    }, {
        "hex": "#07F9A2",
        "rgb": "rgb(7, 249, 162)",
        "hsl": "hsl(158, 95%, 50%)",
        "red": 7,
        "green": 249,
        "blue": 162,
        "hue": 158,
        "saturation": 95,
        "lightness": 50
    }, {
        "hex": "#748B83",
        "rgb": "rgb(116, 139, 131)",
        "hsl": "hsl(159, 9%, 50%)",
        "red": 116,
        "green": 139,
        "blue": 131,
        "hue": 159,
        "saturation": 9,
        "lightness": 50
    }, {
        "hex": "#5B756C",
        "rgb": "rgb(91, 117, 108)",
        "hsl": "hsl(159, 12%, 41%)",
        "red": 91,
        "green": 117,
        "blue": 108,
        "hue": 159,
        "saturation": 12,
        "lightness": 41
    }, {
        "hex": "#6D9788",
        "rgb": "rgb(109, 151, 136)",
        "hsl": "hsl(159, 17%, 51%)",
        "red": 109,
        "green": 151,
        "blue": 136,
        "hue": 159,
        "saturation": 17,
        "lightness": 51
    }, {
        "hex": "#92B2A7",
        "rgb": "rgb(146, 178, 167)",
        "hsl": "hsl(159, 17%, 64%)",
        "red": 146,
        "green": 178,
        "blue": 167,
        "hue": 159,
        "saturation": 17,
        "lightness": 64
    }, {
        "hex": "#BAD1C9",
        "rgb": "rgb(186, 209, 201)",
        "hsl": "hsl(159, 20%, 77%)",
        "red": 186,
        "green": 209,
        "blue": 201,
        "hue": 159,
        "saturation": 20,
        "lightness": 77
    }, {
        "hex": "#A3C3B8",
        "rgb": "rgb(163, 195, 184)",
        "hsl": "hsl(159, 21%, 70%)",
        "red": 163,
        "green": 195,
        "blue": 184,
        "hue": 159,
        "saturation": 21,
        "lightness": 70
    }, {
        "hex": "#619885",
        "rgb": "rgb(97, 152, 133)",
        "hsl": "hsl(159, 22%, 49%)",
        "red": 97,
        "green": 152,
        "blue": 133,
        "hue": 159,
        "saturation": 22,
        "lightness": 49
    }, {
        "hex": "#8AB8A8",
        "rgb": "rgb(138, 184, 168)",
        "hsl": "hsl(159, 24%, 63%)",
        "red": 138,
        "green": 184,
        "blue": 168,
        "hue": 159,
        "saturation": 24,
        "lightness": 63
    }, {
        "hex": "#9EC6B8",
        "rgb": "rgb(158, 198, 184)",
        "hsl": "hsl(159, 26%, 70%)",
        "red": 158,
        "green": 198,
        "blue": 184,
        "hue": 159,
        "saturation": 26,
        "lightness": 70
    }, {
        "hex": "#63B397",
        "rgb": "rgb(99, 179, 151)",
        "hsl": "hsl(159, 34%, 55%)",
        "red": 99,
        "green": 179,
        "blue": 151,
        "hue": 159,
        "saturation": 34,
        "lightness": 55
    }, {
        "hex": "#60B99A",
        "rgb": "rgb(96, 185, 154)",
        "hsl": "hsl(159, 39%, 55%)",
        "red": 96,
        "green": 185,
        "blue": 154,
        "hue": 159,
        "saturation": 39,
        "lightness": 55
    }, {
        "hex": "#379F7A",
        "rgb": "rgb(55, 159, 122)",
        "hsl": "hsl(159, 49%, 42%)",
        "red": 55,
        "green": 159,
        "blue": 122,
        "hue": 159,
        "saturation": 49,
        "lightness": 42
    }, {
        "hex": "#A9E4CF",
        "rgb": "rgb(169, 228, 207)",
        "hsl": "hsl(159, 52%, 78%)",
        "red": 169,
        "green": 228,
        "blue": 207,
        "hue": 159,
        "saturation": 52,
        "lightness": 78
    }, {
        "hex": "#6E837C",
        "rgb": "rgb(110, 131, 124)",
        "hsl": "hsl(160, 9%, 47%)",
        "red": 110,
        "green": 131,
        "blue": 124,
        "hue": 160,
        "saturation": 9,
        "lightness": 47
    }, {
        "hex": "#718F85",
        "rgb": "rgb(113, 143, 133)",
        "hsl": "hsl(160, 12%, 50%)",
        "red": 113,
        "green": 143,
        "blue": 133,
        "hue": 160,
        "saturation": 12,
        "lightness": 50
    }, {
        "hex": "#CBDAD5",
        "rgb": "rgb(203, 218, 213)",
        "hsl": "hsl(160, 17%, 83%)",
        "red": 203,
        "green": 218,
        "blue": 213,
        "hue": 160,
        "saturation": 17,
        "lightness": 83
    }, {
        "hex": "#395A4F",
        "rgb": "rgb(57, 90, 79)",
        "hsl": "hsl(160, 22%, 29%)",
        "red": 57,
        "green": 90,
        "blue": 79,
        "hue": 160,
        "saturation": 22,
        "lightness": 29
    }, {
        "hex": "#59A68C",
        "rgb": "rgb(89, 166, 140)",
        "hsl": "hsl(160, 30%, 50%)",
        "red": 89,
        "green": 166,
        "blue": 140,
        "hue": 160,
        "saturation": 30,
        "lightness": 50
    }, {
        "hex": "#76B5A0",
        "rgb": "rgb(118, 181, 160)",
        "hsl": "hsl(160, 30%, 59%)",
        "red": 118,
        "green": 181,
        "blue": 160,
        "hue": 160,
        "saturation": 30,
        "lightness": 59
    }, {
        "hex": "#94C7B6",
        "rgb": "rgb(148, 199, 182)",
        "hsl": "hsl(160, 31%, 68%)",
        "red": 148,
        "green": 199,
        "blue": 182,
        "hue": 160,
        "saturation": 31,
        "lightness": 68
    }, {
        "hex": "#6BB39B",
        "rgb": "rgb(107, 179, 155)",
        "hsl": "hsl(160, 32%, 56%)",
        "red": 107,
        "green": 179,
        "blue": 155,
        "hue": 160,
        "saturation": 32,
        "lightness": 56
    }, {
        "hex": "#78C0A8",
        "rgb": "rgb(120, 192, 168)",
        "hsl": "hsl(160, 36%, 61%)",
        "red": 120,
        "green": 192,
        "blue": 168,
        "hue": 160,
        "saturation": 36,
        "lightness": 61
    }, {
        "hex": "#8DC9B5",
        "rgb": "rgb(141, 201, 181)",
        "hsl": "hsl(160, 36%, 67%)",
        "red": 141,
        "green": 201,
        "blue": 181,
        "hue": 160,
        "saturation": 36,
        "lightness": 67
    }, {
        "hex": "#4DAB8C",
        "rgb": "rgb(77, 171, 140)",
        "hsl": "hsl(160, 38%, 49%)",
        "red": 77,
        "green": 171,
        "blue": 140,
        "hue": 160,
        "saturation": 38,
        "lightness": 49
    }, {
        "hex": "#79C3AA",
        "rgb": "rgb(121, 195, 170)",
        "hsl": "hsl(160, 38%, 62%)",
        "red": 121,
        "green": 195,
        "blue": 170,
        "hue": 160,
        "saturation": 38,
        "lightness": 62
    }, {
        "hex": "#8ACBB5",
        "rgb": "rgb(138, 203, 181)",
        "hsl": "hsl(160, 38%, 67%)",
        "red": 138,
        "green": 203,
        "blue": 181,
        "hue": 160,
        "saturation": 38,
        "lightness": 67
    }, {
        "hex": "#7FC7AF",
        "rgb": "rgb(127, 199, 175)",
        "hsl": "hsl(160, 39%, 64%)",
        "red": 127,
        "green": 199,
        "blue": 175,
        "hue": 160,
        "saturation": 39,
        "lightness": 64
    }, {
        "hex": "#73C5AA",
        "rgb": "rgb(115, 197, 170)",
        "hsl": "hsl(160, 41%, 61%)",
        "red": 115,
        "green": 197,
        "blue": 170,
        "hue": 160,
        "saturation": 41,
        "lightness": 61
    }, {
        "hex": "#BDEADB",
        "rgb": "rgb(189, 234, 219)",
        "hsl": "hsl(160, 52%, 83%)",
        "red": 189,
        "green": 234,
        "blue": 219,
        "hue": 160,
        "saturation": 52,
        "lightness": 83
    }, {
        "hex": "#79D6B7",
        "rgb": "rgb(121, 214, 183)",
        "hsl": "hsl(160, 53%, 66%)",
        "red": 121,
        "green": 214,
        "blue": 183,
        "hue": 160,
        "saturation": 53,
        "lightness": 66
    }, {
        "hex": "#0F684B",
        "rgb": "rgb(15, 104, 75)",
        "hsl": "hsl(160, 75%, 23%)",
        "red": 15,
        "green": 104,
        "blue": 75,
        "hue": 160,
        "saturation": 75,
        "lightness": 23
    }, {
        "hex": "#60F0C0",
        "rgb": "rgb(96, 240, 192)",
        "hsl": "hsl(160, 83%, 66%)",
        "red": 96,
        "green": 240,
        "blue": 192,
        "hue": 160,
        "saturation": 83,
        "lightness": 66
    }, {
        "hex": "#09C184",
        "rgb": "rgb(9, 193, 132)",
        "hsl": "hsl(160, 91%, 40%)",
        "red": 9,
        "green": 193,
        "blue": 132,
        "hue": 160,
        "saturation": 91,
        "lightness": 40
    }, {
        "hex": "#C4FFEB",
        "rgb": "rgb(196, 255, 235)",
        "hsl": "hsl(160, 100%, 88%)",
        "red": 196,
        "green": 255,
        "blue": 235,
        "hue": 160,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#88B8A9",
        "rgb": "rgb(136, 184, 169)",
        "hsl": "hsl(161, 25%, 63%)",
        "red": 136,
        "green": 184,
        "blue": 169,
        "hue": 161,
        "saturation": 25,
        "lightness": 63
    }, {
        "hex": "#A2C7BB",
        "rgb": "rgb(162, 199, 187)",
        "hsl": "hsl(161, 25%, 71%)",
        "red": 162,
        "green": 199,
        "blue": 187,
        "hue": 161,
        "saturation": 25,
        "lightness": 71
    }, {
        "hex": "#8CBFAF",
        "rgb": "rgb(140, 191, 175)",
        "hsl": "hsl(161, 28%, 65%)",
        "red": 140,
        "green": 191,
        "blue": 175,
        "hue": 161,
        "saturation": 28,
        "lightness": 65
    }, {
        "hex": "#67B79E",
        "rgb": "rgb(103, 183, 158)",
        "hsl": "hsl(161, 36%, 56%)",
        "red": 103,
        "green": 183,
        "blue": 158,
        "hue": 161,
        "saturation": 36,
        "lightness": 56
    }, {
        "hex": "#72BCA5",
        "rgb": "rgb(114, 188, 165)",
        "hsl": "hsl(161, 36%, 59%)",
        "red": 114,
        "green": 188,
        "blue": 165,
        "hue": 161,
        "saturation": 36,
        "lightness": 59
    }, {
        "hex": "#9CDDC8",
        "rgb": "rgb(156, 221, 200)",
        "hsl": "hsl(161, 49%, 74%)",
        "red": 156,
        "green": 221,
        "blue": 200,
        "hue": 161,
        "saturation": 49,
        "lightness": 74
    }, {
        "hex": "#77D4B6",
        "rgb": "rgb(119, 212, 182)",
        "hsl": "hsl(161, 52%, 65%)",
        "red": 119,
        "green": 212,
        "blue": 182,
        "hue": 161,
        "saturation": 52,
        "lightness": 65
    }, {
        "hex": "#61D4B0",
        "rgb": "rgb(97, 212, 176)",
        "hsl": "hsl(161, 57%, 61%)",
        "red": 97,
        "green": 212,
        "blue": 176,
        "hue": 161,
        "saturation": 57,
        "lightness": 61
    }, {
        "hex": "#D0F2E7",
        "rgb": "rgb(208, 242, 231)",
        "hsl": "hsl(161, 57%, 88%)",
        "red": 208,
        "green": 242,
        "blue": 231,
        "hue": 161,
        "saturation": 57,
        "lightness": 88
    }, {
        "hex": "#98E9D0",
        "rgb": "rgb(152, 233, 208)",
        "hsl": "hsl(161, 65%, 75%)",
        "red": 152,
        "green": 233,
        "blue": 208,
        "hue": 161,
        "saturation": 65,
        "lightness": 75
    }, {
        "hex": "#7E9991",
        "rgb": "rgb(126, 153, 145)",
        "hsl": "hsl(162, 12%, 55%)",
        "red": 126,
        "green": 153,
        "blue": 145,
        "hue": 162,
        "saturation": 12,
        "lightness": 55
    }, {
        "hex": "#6E8F85",
        "rgb": "rgb(110, 143, 133)",
        "hsl": "hsl(162, 13%, 50%)",
        "red": 110,
        "green": 143,
        "blue": 133,
        "hue": 162,
        "saturation": 13,
        "lightness": 50
    }, {
        "hex": "#B1CCC4",
        "rgb": "rgb(177, 204, 196)",
        "hsl": "hsl(162, 21%, 75%)",
        "red": 177,
        "green": 204,
        "blue": 196,
        "hue": 162,
        "saturation": 21,
        "lightness": 75
    }, {
        "hex": "#51BD9C",
        "rgb": "rgb(81, 189, 156)",
        "hsl": "hsl(162, 45%, 53%)",
        "red": 81,
        "green": 189,
        "blue": 156,
        "hue": 162,
        "saturation": 45,
        "lightness": 53
    }, {
        "hex": "#125A44",
        "rgb": "rgb(18, 90, 68)",
        "hsl": "hsl(162, 67%, 21%)",
        "red": 18,
        "green": 90,
        "blue": 68,
        "hue": 162,
        "saturation": 67,
        "lightness": 21
    }, {
        "hex": "#88EED0",
        "rgb": "rgb(136, 238, 208)",
        "hsl": "hsl(162, 75%, 73%)",
        "red": 136,
        "green": 238,
        "blue": 208,
        "hue": 162,
        "saturation": 75,
        "lightness": 73
    }, {
        "hex": "#0A996F",
        "rgb": "rgb(10, 153, 111)",
        "hsl": "hsl(162, 88%, 32%)",
        "red": 10,
        "green": 153,
        "blue": 111,
        "hue": 162,
        "saturation": 88,
        "lightness": 32
    }, {
        "hex": "#00875E",
        "rgb": "rgb(0, 135, 94)",
        "hsl": "hsl(162, 100%, 26%)",
        "red": 0,
        "green": 135,
        "blue": 94,
        "hue": 162,
        "saturation": 100,
        "lightness": 26
    }, {
        "hex": "#74AA9B",
        "rgb": "rgb(116, 170, 155)",
        "hsl": "hsl(163, 24%, 56%)",
        "red": 116,
        "green": 170,
        "blue": 155,
        "hue": 163,
        "saturation": 24,
        "lightness": 56
    }, {
        "hex": "#C4DDD6",
        "rgb": "rgb(196, 221, 214)",
        "hsl": "hsl(163, 27%, 82%)",
        "red": 196,
        "green": 221,
        "blue": 214,
        "hue": 163,
        "saturation": 27,
        "lightness": 82
    }, {
        "hex": "#C3DFD7",
        "rgb": "rgb(195, 223, 215)",
        "hsl": "hsl(163, 30%, 82%)",
        "red": 195,
        "green": 223,
        "blue": 215,
        "hue": 163,
        "saturation": 30,
        "lightness": 82
    }, {
        "hex": "#77B8A6",
        "rgb": "rgb(119, 184, 166)",
        "hsl": "hsl(163, 31%, 59%)",
        "red": 119,
        "green": 184,
        "blue": 166,
        "hue": 163,
        "saturation": 31,
        "lightness": 59
    }, {
        "hex": "#8FC9B9",
        "rgb": "rgb(143, 201, 185)",
        "hsl": "hsl(163, 35%, 67%)",
        "red": 143,
        "green": 201,
        "blue": 185,
        "hue": 163,
        "saturation": 35,
        "lightness": 67
    }, {
        "hex": "#6CBAA4",
        "rgb": "rgb(108, 186, 164)",
        "hsl": "hsl(163, 36%, 58%)",
        "red": 108,
        "green": 186,
        "blue": 164,
        "hue": 163,
        "saturation": 36,
        "lightness": 58
    }, {
        "hex": "#80D3BB",
        "rgb": "rgb(128, 211, 187)",
        "hsl": "hsl(163, 49%, 66%)",
        "red": 128,
        "green": 211,
        "blue": 187,
        "hue": 163,
        "saturation": 49,
        "lightness": 66
    }, {
        "hex": "#69D0B3",
        "rgb": "rgb(105, 208, 179)",
        "hsl": "hsl(163, 52%, 61%)",
        "red": 105,
        "green": 208,
        "blue": 179,
        "hue": 163,
        "saturation": 52,
        "lightness": 61
    }, {
        "hex": "#A2E5D2",
        "rgb": "rgb(162, 229, 210)",
        "hsl": "hsl(163, 56%, 77%)",
        "red": 162,
        "green": 229,
        "blue": 210,
        "hue": 163,
        "saturation": 56,
        "lightness": 77
    }, {
        "hex": "#11644D",
        "rgb": "rgb(17, 100, 77)",
        "hsl": "hsl(163, 71%, 23%)",
        "red": 17,
        "green": 100,
        "blue": 77,
        "hue": 163,
        "saturation": 71,
        "lightness": 23
    }, {
        "hex": "#0DE5A8",
        "rgb": "rgb(13, 229, 168)",
        "hsl": "hsl(163, 89%, 47%)",
        "red": 13,
        "green": 229,
        "blue": 168,
        "hue": 163,
        "saturation": 89,
        "lightness": 47
    }, {
        "hex": "#849B95",
        "rgb": "rgb(132, 155, 149)",
        "hsl": "hsl(164, 10%, 56%)",
        "red": 132,
        "green": 155,
        "blue": 149,
        "hue": 164,
        "saturation": 10,
        "lightness": 56
    }, {
        "hex": "#89A09A",
        "rgb": "rgb(137, 160, 154)",
        "hsl": "hsl(164, 11%, 58%)",
        "red": 137,
        "green": 160,
        "blue": 154,
        "hue": 164,
        "saturation": 11,
        "lightness": 58
    }, {
        "hex": "#8CAAA2",
        "rgb": "rgb(140, 170, 162)",
        "hsl": "hsl(164, 15%, 61%)",
        "red": 140,
        "green": 170,
        "blue": 162,
        "hue": 164,
        "saturation": 15,
        "lightness": 61
    }, {
        "hex": "#A7C5BD",
        "rgb": "rgb(167, 197, 189)",
        "hsl": "hsl(164, 21%, 71%)",
        "red": 167,
        "green": 197,
        "blue": 189,
        "hue": 164,
        "saturation": 21,
        "lightness": 71
    }, {
        "hex": "#83B8AA",
        "rgb": "rgb(131, 184, 170)",
        "hsl": "hsl(164, 27%, 62%)",
        "red": 131,
        "green": 184,
        "blue": 170,
        "hue": 164,
        "saturation": 27,
        "lightness": 62
    }, {
        "hex": "#75BAA8",
        "rgb": "rgb(117, 186, 168)",
        "hsl": "hsl(164, 33%, 59%)",
        "red": 117,
        "green": 186,
        "blue": 168,
        "hue": 164,
        "saturation": 33,
        "lightness": 59
    }, {
        "hex": "#84C1B1",
        "rgb": "rgb(132, 193, 177)",
        "hsl": "hsl(164, 33%, 64%)",
        "red": 132,
        "green": 193,
        "blue": 177,
        "hue": 164,
        "saturation": 33,
        "lightness": 64
    }, {
        "hex": "#40957F",
        "rgb": "rgb(64, 149, 127)",
        "hsl": "hsl(164, 40%, 42%)",
        "red": 64,
        "green": 149,
        "blue": 127,
        "hue": 164,
        "saturation": 40,
        "lightness": 42
    }, {
        "hex": "#9DDBCA",
        "rgb": "rgb(157, 219, 202)",
        "hsl": "hsl(164, 46%, 74%)",
        "red": 157,
        "green": 219,
        "blue": 202,
        "hue": 164,
        "saturation": 46,
        "lightness": 74
    }, {
        "hex": "#AEE1D3",
        "rgb": "rgb(174, 225, 211)",
        "hsl": "hsl(164, 46%, 78%)",
        "red": 174,
        "green": 225,
        "blue": 211,
        "hue": 164,
        "saturation": 46,
        "lightness": 78
    }, {
        "hex": "#5AC7AA",
        "rgb": "rgb(90, 199, 170)",
        "hsl": "hsl(164, 49%, 57%)",
        "red": 90,
        "green": 199,
        "blue": 170,
        "hue": 164,
        "saturation": 49,
        "lightness": 57
    }, {
        "hex": "#259073",
        "rgb": "rgb(37, 144, 115)",
        "hsl": "hsl(164, 59%, 35%)",
        "red": 37,
        "green": 144,
        "blue": 115,
        "hue": 164,
        "saturation": 59,
        "lightness": 35
    }, {
        "hex": "#ADEADA",
        "rgb": "rgb(173, 234, 218)",
        "hsl": "hsl(164, 59%, 80%)",
        "red": 173,
        "green": 234,
        "blue": 218,
        "hue": 164,
        "saturation": 59,
        "lightness": 80
    }, {
        "hex": "#0A8967",
        "rgb": "rgb(10, 137, 103)",
        "hsl": "hsl(164, 86%, 29%)",
        "red": 10,
        "green": 137,
        "blue": 103,
        "hue": 164,
        "saturation": 86,
        "lightness": 29
    }, {
        "hex": "#49FECF",
        "rgb": "rgb(73, 254, 207)",
        "hsl": "hsl(164, 99%, 64%)",
        "red": 73,
        "green": 254,
        "blue": 207,
        "hue": 164,
        "saturation": 99,
        "lightness": 64
    }, {
        "hex": "#ACFFE9",
        "rgb": "rgb(172, 255, 233)",
        "hsl": "hsl(164, 100%, 84%)",
        "red": 172,
        "green": 255,
        "blue": 233,
        "hue": 164,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#7B8F8A",
        "rgb": "rgb(123, 143, 138)",
        "hsl": "hsl(165, 8%, 52%)",
        "red": 123,
        "green": 143,
        "blue": 138,
        "hue": 165,
        "saturation": 8,
        "lightness": 52
    }, {
        "hex": "#9EAEAA",
        "rgb": "rgb(158, 174, 170)",
        "hsl": "hsl(165, 9%, 65%)",
        "red": 158,
        "green": 174,
        "blue": 170,
        "hue": 165,
        "saturation": 9,
        "lightness": 65
    }, {
        "hex": "#D3DBD9",
        "rgb": "rgb(211, 219, 217)",
        "hsl": "hsl(165, 10%, 84%)",
        "red": 211,
        "green": 219,
        "blue": 217,
        "hue": 165,
        "saturation": 10,
        "lightness": 84
    }, {
        "hex": "#D9E1DF",
        "rgb": "rgb(217, 225, 223)",
        "hsl": "hsl(165, 12%, 87%)",
        "red": 217,
        "green": 225,
        "blue": 223,
        "hue": 165,
        "saturation": 12,
        "lightness": 87
    }, {
        "hex": "#96B5AD",
        "rgb": "rgb(150, 181, 173)",
        "hsl": "hsl(165, 17%, 65%)",
        "red": 150,
        "green": 181,
        "blue": 173,
        "hue": 165,
        "saturation": 17,
        "lightness": 65
    }, {
        "hex": "#78B3A4",
        "rgb": "rgb(120, 179, 164)",
        "hsl": "hsl(165, 28%, 59%)",
        "red": 120,
        "green": 179,
        "blue": 164,
        "hue": 165,
        "saturation": 28,
        "lightness": 59
    }, {
        "hex": "#99C9BD",
        "rgb": "rgb(153, 201, 189)",
        "hsl": "hsl(165, 31%, 69%)",
        "red": 153,
        "green": 201,
        "blue": 189,
        "hue": 165,
        "saturation": 31,
        "lightness": 69
    }, {
        "hex": "#A2D3C7",
        "rgb": "rgb(162, 211, 199)",
        "hsl": "hsl(165, 36%, 73%)",
        "red": 162,
        "green": 211,
        "blue": 199,
        "hue": 165,
        "saturation": 36,
        "lightness": 73
    }, {
        "hex": "#9DDACB",
        "rgb": "rgb(157, 218, 203)",
        "hsl": "hsl(165, 45%, 74%)",
        "red": 157,
        "green": 218,
        "blue": 203,
        "hue": 165,
        "saturation": 45,
        "lightness": 74
    }, {
        "hex": "#BCEBDF",
        "rgb": "rgb(188, 235, 223)",
        "hsl": "hsl(165, 54%, 83%)",
        "red": 188,
        "green": 235,
        "blue": 223,
        "hue": 165,
        "saturation": 54,
        "lightness": 83
    }, {
        "hex": "#3EC9A7",
        "rgb": "rgb(62, 201, 167)",
        "hsl": "hsl(165, 56%, 52%)",
        "red": 62,
        "green": 201,
        "blue": 167,
        "hue": 165,
        "saturation": 56,
        "lightness": 52
    }, {
        "hex": "#29FFC9",
        "rgb": "rgb(41, 255, 201)",
        "hsl": "hsl(165, 100%, 58%)",
        "red": 41,
        "green": 255,
        "blue": 201,
        "hue": 165,
        "saturation": 100,
        "lightness": 58
    }, {
        "hex": "#9EC4BB",
        "rgb": "rgb(158, 196, 187)",
        "hsl": "hsl(166, 24%, 69%)",
        "red": 158,
        "green": 196,
        "blue": 187,
        "hue": 166,
        "saturation": 24,
        "lightness": 69
    }, {
        "hex": "#53A08E",
        "rgb": "rgb(83, 160, 142)",
        "hsl": "hsl(166, 32%, 48%)",
        "red": 83,
        "green": 160,
        "blue": 142,
        "hue": 166,
        "saturation": 32,
        "lightness": 48
    }, {
        "hex": "#8DC4B7",
        "rgb": "rgb(141, 196, 183)",
        "hsl": "hsl(166, 32%, 66%)",
        "red": 141,
        "green": 196,
        "blue": 183,
        "hue": 166,
        "saturation": 32,
        "lightness": 66
    }, {
        "hex": "#88C3B5",
        "rgb": "rgb(136, 195, 181)",
        "hsl": "hsl(166, 33%, 65%)",
        "red": 136,
        "green": 195,
        "blue": 181,
        "hue": 166,
        "saturation": 33,
        "lightness": 65
    }, {
        "hex": "#6CB6A5",
        "rgb": "rgb(108, 182, 165)",
        "hsl": "hsl(166, 34%, 57%)",
        "red": 108,
        "green": 182,
        "blue": 165,
        "hue": 166,
        "saturation": 34,
        "lightness": 57
    }, {
        "hex": "#6FBCAA",
        "rgb": "rgb(111, 188, 170)",
        "hsl": "hsl(166, 36%, 59%)",
        "red": 111,
        "green": 188,
        "blue": 170,
        "hue": 166,
        "saturation": 36,
        "lightness": 59
    }, {
        "hex": "#3F8978",
        "rgb": "rgb(63, 137, 120)",
        "hsl": "hsl(166, 37%, 39%)",
        "red": 63,
        "green": 137,
        "blue": 120,
        "hue": 166,
        "saturation": 37,
        "lightness": 39
    }, {
        "hex": "#9CD6C8",
        "rgb": "rgb(156, 214, 200)",
        "hsl": "hsl(166, 41%, 73%)",
        "red": 156,
        "green": 214,
        "blue": 200,
        "hue": 166,
        "saturation": 41,
        "lightness": 73
    }, {
        "hex": "#ADDFD3",
        "rgb": "rgb(173, 223, 211)",
        "hsl": "hsl(166, 44%, 78%)",
        "red": 173,
        "green": 223,
        "blue": 211,
        "hue": 166,
        "saturation": 44,
        "lightness": 78
    }, {
        "hex": "#24B694",
        "rgb": "rgb(36, 182, 148)",
        "hsl": "hsl(166, 67%, 43%)",
        "red": 36,
        "green": 182,
        "blue": 148,
        "hue": 166,
        "saturation": 67,
        "lightness": 43
    }, {
        "hex": "#394240",
        "rgb": "rgb(57, 66, 64)",
        "hsl": "hsl(167, 7%, 24%)",
        "red": 57,
        "green": 66,
        "blue": 64,
        "hue": 167,
        "saturation": 7,
        "lightness": 24
    }, {
        "hex": "#566965",
        "rgb": "rgb(86, 105, 101)",
        "hsl": "hsl(167, 10%, 37%)",
        "red": 86,
        "green": 105,
        "blue": 101,
        "hue": 167,
        "saturation": 10,
        "lightness": 37
    }, {
        "hex": "#4D8F81",
        "rgb": "rgb(77, 143, 129)",
        "hsl": "hsl(167, 30%, 43%)",
        "red": 77,
        "green": 143,
        "blue": 129,
        "hue": 167,
        "saturation": 30,
        "lightness": 43
    }, {
        "hex": "#56A292",
        "rgb": "rgb(86, 162, 146)",
        "hsl": "hsl(167, 31%, 49%)",
        "red": 86,
        "green": 162,
        "blue": 146,
        "hue": 167,
        "saturation": 31,
        "lightness": 49
    }, {
        "hex": "#76BCAD",
        "rgb": "rgb(118, 188, 173)",
        "hsl": "hsl(167, 34%, 60%)",
        "red": 118,
        "green": 188,
        "blue": 173,
        "hue": 167,
        "saturation": 34,
        "lightness": 60
    }, {
        "hex": "#65B8A6",
        "rgb": "rgb(101, 184, 166)",
        "hsl": "hsl(167, 37%, 56%)",
        "red": 101,
        "green": 184,
        "blue": 166,
        "hue": 167,
        "saturation": 37,
        "lightness": 56
    }, {
        "hex": "#AAE6D9",
        "rgb": "rgb(170, 230, 217)",
        "hsl": "hsl(167, 55%, 78%)",
        "red": 170,
        "green": 230,
        "blue": 217,
        "hue": 167,
        "saturation": 55,
        "lightness": 78
    }, {
        "hex": "#22806B",
        "rgb": "rgb(34, 128, 107)",
        "hsl": "hsl(167, 58%, 32%)",
        "red": 34,
        "green": 128,
        "blue": 107,
        "hue": 167,
        "saturation": 58,
        "lightness": 32
    }, {
        "hex": "#2ECBAA",
        "rgb": "rgb(46, 203, 170)",
        "hsl": "hsl(167, 63%, 49%)",
        "red": 46,
        "green": 203,
        "blue": 170,
        "hue": 167,
        "saturation": 63,
        "lightness": 49
    }, {
        "hex": "#25E4BC",
        "rgb": "rgb(37, 228, 188)",
        "hsl": "hsl(167, 78%, 52%)",
        "red": 37,
        "green": 228,
        "blue": 188,
        "hue": 167,
        "saturation": 78,
        "lightness": 52
    }, {
        "hex": "#6CF3D5",
        "rgb": "rgb(108, 243, 213)",
        "hsl": "hsl(167, 85%, 69%)",
        "red": 108,
        "green": 243,
        "blue": 213,
        "hue": 167,
        "saturation": 85,
        "lightness": 69
    }, {
        "hex": "#00755C",
        "rgb": "rgb(0, 117, 92)",
        "hsl": "hsl(167, 100%, 23%)",
        "red": 0,
        "green": 117,
        "blue": 92,
        "hue": 167,
        "saturation": 100,
        "lightness": 23
    }, {
        "hex": "#525C5A",
        "rgb": "rgb(82, 92, 90)",
        "hsl": "hsl(168, 6%, 34%)",
        "red": 82,
        "green": 92,
        "blue": 90,
        "hue": 168,
        "saturation": 6,
        "lightness": 34
    }, {
        "hex": "#1A1F1E",
        "rgb": "rgb(26, 31, 30)",
        "hsl": "hsl(168, 9%, 11%)",
        "red": 26,
        "green": 31,
        "blue": 30,
        "hue": 168,
        "saturation": 9,
        "lightness": 11
    }, {
        "hex": "#607873",
        "rgb": "rgb(96, 120, 115)",
        "hsl": "hsl(168, 11%, 42%)",
        "red": 96,
        "green": 120,
        "blue": 115,
        "hue": 168,
        "saturation": 11,
        "lightness": 42
    }, {
        "hex": "#56877D",
        "rgb": "rgb(86, 135, 125)",
        "hsl": "hsl(168, 22%, 43%)",
        "red": 86,
        "green": 135,
        "blue": 125,
        "hue": 168,
        "saturation": 22,
        "lightness": 43
    }, {
        "hex": "#72B1A4",
        "rgb": "rgb(114, 177, 164)",
        "hsl": "hsl(168, 29%, 57%)",
        "red": 114,
        "green": 177,
        "blue": 164,
        "hue": 168,
        "saturation": 29,
        "lightness": 57
    }, {
        "hex": "#1C997F",
        "rgb": "rgb(28, 153, 127)",
        "hsl": "hsl(168, 69%, 35%)",
        "red": 28,
        "green": 153,
        "blue": 127,
        "hue": 168,
        "saturation": 69,
        "lightness": 35
    }, {
        "hex": "#AAF2E4",
        "rgb": "rgb(170, 242, 228)",
        "hsl": "hsl(168, 73%, 81%)",
        "red": 170,
        "green": 242,
        "blue": 228,
        "hue": 168,
        "saturation": 73,
        "lightness": 81
    }, {
        "hex": "#5A7F78",
        "rgb": "rgb(90, 127, 120)",
        "hsl": "hsl(169, 17%, 43%)",
        "red": 90,
        "green": 127,
        "blue": 120,
        "hue": 169,
        "saturation": 17,
        "lightness": 43
    }, {
        "hex": "#3E5954",
        "rgb": "rgb(62, 89, 84)",
        "hsl": "hsl(169, 18%, 30%)",
        "red": 62,
        "green": 89,
        "blue": 84,
        "hue": 169,
        "saturation": 18,
        "lightness": 30
    }, {
        "hex": "#5E9188",
        "rgb": "rgb(94, 145, 136)",
        "hsl": "hsl(169, 21%, 47%)",
        "red": 94,
        "green": 145,
        "blue": 136,
        "hue": 169,
        "saturation": 21,
        "lightness": 47
    }, {
        "hex": "#79ABA2",
        "rgb": "rgb(121, 171, 162)",
        "hsl": "hsl(169, 23%, 57%)",
        "red": 121,
        "green": 171,
        "blue": 162,
        "hue": 169,
        "saturation": 23,
        "lightness": 57
    }, {
        "hex": "#7FB1A8",
        "rgb": "rgb(127, 177, 168)",
        "hsl": "hsl(169, 24%, 60%)",
        "red": 127,
        "green": 177,
        "blue": 168,
        "hue": 169,
        "saturation": 24,
        "lightness": 60
    }, {
        "hex": "#548C82",
        "rgb": "rgb(84, 140, 130)",
        "hsl": "hsl(169, 25%, 44%)",
        "red": 84,
        "green": 140,
        "blue": 130,
        "hue": 169,
        "saturation": 25,
        "lightness": 44
    }, {
        "hex": "#74B3A7",
        "rgb": "rgb(116, 179, 167)",
        "hsl": "hsl(169, 29%, 58%)",
        "red": 116,
        "green": 179,
        "blue": 167,
        "hue": 169,
        "saturation": 29,
        "lightness": 58
    }, {
        "hex": "#7EBEB2",
        "rgb": "rgb(126, 190, 178)",
        "hsl": "hsl(169, 33%, 62%)",
        "red": 126,
        "green": 190,
        "blue": 178,
        "hue": 169,
        "saturation": 33,
        "lightness": 62
    }, {
        "hex": "#68BAAB",
        "rgb": "rgb(104, 186, 171)",
        "hsl": "hsl(169, 37%, 57%)",
        "red": 104,
        "green": 186,
        "blue": 171,
        "hue": 169,
        "saturation": 37,
        "lightness": 57
    }, {
        "hex": "#59BAA9",
        "rgb": "rgb(89, 186, 169)",
        "hsl": "hsl(169, 41%, 54%)",
        "red": 89,
        "green": 186,
        "blue": 169,
        "hue": 169,
        "saturation": 41,
        "lightness": 54
    }, {
        "hex": "#52BAA7",
        "rgb": "rgb(82, 186, 167)",
        "hsl": "hsl(169, 43%, 53%)",
        "red": 82,
        "green": 186,
        "blue": 167,
        "hue": 169,
        "saturation": 43,
        "lightness": 53
    }, {
        "hex": "#24B399",
        "rgb": "rgb(36, 179, 153)",
        "hsl": "hsl(169, 67%, 42%)",
        "red": 36,
        "green": 179,
        "blue": 153,
        "hue": 169,
        "saturation": 67,
        "lightness": 42
    }, {
        "hex": "#14C3A2",
        "rgb": "rgb(20, 195, 162)",
        "hsl": "hsl(169, 81%, 42%)",
        "red": 20,
        "green": 195,
        "blue": 162,
        "hue": 169,
        "saturation": 81,
        "lightness": 42
    }, {
        "hex": "#0B8770",
        "rgb": "rgb(11, 135, 112)",
        "hsl": "hsl(169, 85%, 29%)",
        "red": 11,
        "green": 135,
        "blue": 112,
        "hue": 169,
        "saturation": 85,
        "lightness": 29
    }, {
        "hex": "#028F76",
        "rgb": "rgb(2, 143, 118)",
        "hsl": "hsl(169, 97%, 28%)",
        "red": 2,
        "green": 143,
        "blue": 118,
        "hue": 169,
        "saturation": 97,
        "lightness": 28
    }, {
        "hex": "#7A8C89",
        "rgb": "rgb(122, 140, 137)",
        "hsl": "hsl(170, 7%, 51%)",
        "red": 122,
        "green": 140,
        "blue": 137,
        "hue": 170,
        "saturation": 7,
        "lightness": 51
    }, {
        "hex": "#4E6B66",
        "rgb": "rgb(78, 107, 102)",
        "hsl": "hsl(170, 16%, 36%)",
        "red": 78,
        "green": 107,
        "blue": 102,
        "hue": 170,
        "saturation": 16,
        "lightness": 36
    }, {
        "hex": "#54736E",
        "rgb": "rgb(84, 115, 110)",
        "hsl": "hsl(170, 16%, 39%)",
        "red": 84,
        "green": 115,
        "blue": 110,
        "hue": 170,
        "saturation": 16,
        "lightness": 39
    }, {
        "hex": "#36544F",
        "rgb": "rgb(54, 84, 79)",
        "hsl": "hsl(170, 22%, 27%)",
        "red": 54,
        "green": 84,
        "blue": 79,
        "hue": 170,
        "saturation": 22,
        "lightness": 27
    }, {
        "hex": "#3D615B",
        "rgb": "rgb(61, 97, 91)",
        "hsl": "hsl(170, 23%, 31%)",
        "red": 61,
        "green": 97,
        "blue": 91,
        "hue": 170,
        "saturation": 23,
        "lightness": 31
    }, {
        "hex": "#6EA49B",
        "rgb": "rgb(110, 164, 155)",
        "hsl": "hsl(170, 23%, 54%)",
        "red": 110,
        "green": 164,
        "blue": 155,
        "hue": 170,
        "saturation": 23,
        "lightness": 54
    }, {
        "hex": "#BDD6D2",
        "rgb": "rgb(189, 214, 210)",
        "hsl": "hsl(170, 23%, 79%)",
        "red": 189,
        "green": 214,
        "blue": 210,
        "hue": 170,
        "saturation": 23,
        "lightness": 79
    }, {
        "hex": "#335650",
        "rgb": "rgb(51, 86, 80)",
        "hsl": "hsl(170, 26%, 27%)",
        "red": 51,
        "green": 86,
        "blue": 80,
        "hue": 170,
        "saturation": 26,
        "lightness": 27
    }, {
        "hex": "#498379",
        "rgb": "rgb(73, 131, 121)",
        "hsl": "hsl(170, 28%, 40%)",
        "red": 73,
        "green": 131,
        "blue": 121,
        "hue": 170,
        "saturation": 28,
        "lightness": 40
    }, {
        "hex": "#61ADA0",
        "rgb": "rgb(97, 173, 160)",
        "hsl": "hsl(170, 32%, 53%)",
        "red": 97,
        "green": 173,
        "blue": 160,
        "hue": 170,
        "saturation": 32,
        "lightness": 53
    }, {
        "hex": "#37AB98",
        "rgb": "rgb(55, 171, 152)",
        "hsl": "hsl(170, 51%, 44%)",
        "red": 55,
        "green": 171,
        "blue": 152,
        "hue": 170,
        "saturation": 51,
        "lightness": 44
    }, {
        "hex": "#77F2DE",
        "rgb": "rgb(119, 242, 222)",
        "hsl": "hsl(170, 83%, 71%)",
        "red": 119,
        "green": 242,
        "blue": 222,
        "hue": 170,
        "saturation": 83,
        "lightness": 71
    }, {
        "hex": "#06D9B6",
        "rgb": "rgb(6, 217, 182)",
        "hsl": "hsl(170, 95%, 44%)",
        "red": 6,
        "green": 217,
        "blue": 182,
        "hue": 170,
        "saturation": 95,
        "lightness": 44
    }, {
        "hex": "#8B9E9B",
        "rgb": "rgb(139, 158, 155)",
        "hsl": "hsl(171, 9%, 58%)",
        "red": 139,
        "green": 158,
        "blue": 155,
        "hue": 171,
        "saturation": 9,
        "lightness": 58
    }, {
        "hex": "#426B65",
        "rgb": "rgb(66, 107, 101)",
        "hsl": "hsl(171, 24%, 34%)",
        "red": 66,
        "green": 107,
        "blue": 101,
        "hue": 171,
        "saturation": 24,
        "lightness": 34
    }, {
        "hex": "#7BB0A8",
        "rgb": "rgb(123, 176, 168)",
        "hsl": "hsl(171, 25%, 59%)",
        "red": 123,
        "green": 176,
        "blue": 168,
        "hue": 171,
        "saturation": 25,
        "lightness": 59
    }, {
        "hex": "#8EBDB6",
        "rgb": "rgb(142, 189, 182)",
        "hsl": "hsl(171, 26%, 65%)",
        "red": 142,
        "green": 189,
        "blue": 182,
        "hue": 171,
        "saturation": 26,
        "lightness": 65
    }, {
        "hex": "#79B5AC",
        "rgb": "rgb(121, 181, 172)",
        "hsl": "hsl(171, 29%, 59%)",
        "red": 121,
        "green": 181,
        "blue": 172,
        "hue": 171,
        "saturation": 29,
        "lightness": 59
    }, {
        "hex": "#C5E0DC",
        "rgb": "rgb(197, 224, 220)",
        "hsl": "hsl(171, 30%, 83%)",
        "red": 197,
        "green": 224,
        "blue": 220,
        "hue": 171,
        "saturation": 30,
        "lightness": 83
    }, {
        "hex": "#36BBA6",
        "rgb": "rgb(54, 187, 166)",
        "hsl": "hsl(171, 55%, 47%)",
        "red": 54,
        "green": 187,
        "blue": 166,
        "hue": 171,
        "saturation": 55,
        "lightness": 47
    }, {
        "hex": "#DCF7F3",
        "rgb": "rgb(220, 247, 243)",
        "hsl": "hsl(171, 63%, 92%)",
        "red": 220,
        "green": 247,
        "blue": 243,
        "hue": 171,
        "saturation": 63,
        "lightness": 92
    }, {
        "hex": "#0D6759",
        "rgb": "rgb(13, 103, 89)",
        "hsl": "hsl(171, 78%, 23%)",
        "red": 13,
        "green": 103,
        "blue": 89,
        "hue": 171,
        "saturation": 78,
        "lightness": 23
    }, {
        "hex": "#02483E",
        "rgb": "rgb(2, 72, 62)",
        "hsl": "hsl(171, 95%, 15%)",
        "red": 2,
        "green": 72,
        "blue": 62,
        "hue": 171,
        "saturation": 95,
        "lightness": 15
    }, {
        "hex": "#000706",
        "rgb": "rgb(0, 7, 6)",
        "hsl": "hsl(171, 100%, 1%)",
        "red": 0,
        "green": 7,
        "blue": 6,
        "hue": 171,
        "saturation": 100,
        "lightness": 1
    }, {
        "hex": "#485755",
        "rgb": "rgb(72, 87, 85)",
        "hsl": "hsl(172, 9%, 31%)",
        "red": 72,
        "green": 87,
        "blue": 85,
        "hue": 172,
        "saturation": 9,
        "lightness": 31
    }, {
        "hex": "#85A29E",
        "rgb": "rgb(133, 162, 158)",
        "hsl": "hsl(172, 13%, 58%)",
        "red": 133,
        "green": 162,
        "blue": 158,
        "hue": 172,
        "saturation": 13,
        "lightness": 58
    }, {
        "hex": "#64908A",
        "rgb": "rgb(100, 144, 138)",
        "hsl": "hsl(172, 18%, 48%)",
        "red": 100,
        "green": 144,
        "blue": 138,
        "hue": 172,
        "saturation": 18,
        "lightness": 48
    }, {
        "hex": "#86B8B1",
        "rgb": "rgb(134, 184, 177)",
        "hsl": "hsl(172, 26%, 62%)",
        "red": 134,
        "green": 184,
        "blue": 177,
        "hue": 172,
        "saturation": 26,
        "lightness": 62
    }, {
        "hex": "#487D76",
        "rgb": "rgb(72, 125, 118)",
        "hsl": "hsl(172, 27%, 39%)",
        "red": 72,
        "green": 125,
        "blue": 118,
        "hue": 172,
        "saturation": 27,
        "lightness": 39
    }, {
        "hex": "#77B1A9",
        "rgb": "rgb(119, 177, 169)",
        "hsl": "hsl(172, 27%, 58%)",
        "red": 119,
        "green": 177,
        "blue": 169,
        "hue": 172,
        "saturation": 27,
        "lightness": 58
    }, {
        "hex": "#7FB8B0",
        "rgb": "rgb(127, 184, 176)",
        "hsl": "hsl(172, 29%, 61%)",
        "red": 127,
        "green": 184,
        "blue": 176,
        "hue": 172,
        "saturation": 29,
        "lightness": 61
    }, {
        "hex": "#33605A",
        "rgb": "rgb(51, 96, 90)",
        "hsl": "hsl(172, 31%, 29%)",
        "red": 51,
        "green": 96,
        "blue": 90,
        "hue": 172,
        "saturation": 31,
        "lightness": 29
    }, {
        "hex": "#72BAB0",
        "rgb": "rgb(114, 186, 176)",
        "hsl": "hsl(172, 34%, 59%)",
        "red": 114,
        "green": 186,
        "blue": 176,
        "hue": 172,
        "saturation": 34,
        "lightness": 59
    }, {
        "hex": "#66B6AB",
        "rgb": "rgb(102, 182, 171)",
        "hsl": "hsl(172, 35%, 56%)",
        "red": 102,
        "green": 182,
        "blue": 171,
        "hue": 172,
        "saturation": 35,
        "lightness": 56
    }, {
        "hex": "#A0DED6",
        "rgb": "rgb(160, 222, 214)",
        "hsl": "hsl(172, 48%, 75%)",
        "red": 160,
        "green": 222,
        "blue": 214,
        "hue": 172,
        "saturation": 48,
        "lightness": 75
    }, {
        "hex": "#C7EDE8",
        "rgb": "rgb(199, 237, 232)",
        "hsl": "hsl(172, 51%, 85%)",
        "red": 199,
        "green": 237,
        "blue": 232,
        "hue": 172,
        "saturation": 51,
        "lightness": 85
    }, {
        "hex": "#16453F",
        "rgb": "rgb(22, 69, 63)",
        "hsl": "hsl(172, 52%, 18%)",
        "red": 22,
        "green": 69,
        "blue": 63,
        "hue": 172,
        "saturation": 52,
        "lightness": 18
    }, {
        "hex": "#5BCEBF",
        "rgb": "rgb(91, 206, 191)",
        "hsl": "hsl(172, 54%, 58%)",
        "red": 91,
        "green": 206,
        "blue": 191,
        "hue": 172,
        "saturation": 54,
        "lightness": 58
    }, {
        "hex": "#2EB3A1",
        "rgb": "rgb(46, 179, 161)",
        "hsl": "hsl(172, 59%, 44%)",
        "red": 46,
        "green": 179,
        "blue": 161,
        "hue": 172,
        "saturation": 59,
        "lightness": 44
    }, {
        "hex": "#C5F7F0",
        "rgb": "rgb(197, 247, 240)",
        "hsl": "hsl(172, 76%, 87%)",
        "red": 197,
        "green": 247,
        "blue": 240,
        "hue": 172,
        "saturation": 76,
        "lightness": 87
    }, {
        "hex": "#BCF7EF",
        "rgb": "rgb(188, 247, 239)",
        "hsl": "hsl(172, 79%, 85%)",
        "red": 188,
        "green": 247,
        "blue": 239,
        "hue": 172,
        "saturation": 79,
        "lightness": 85
    }, {
        "hex": "#4AEDD7",
        "rgb": "rgb(74, 237, 215)",
        "hsl": "hsl(172, 82%, 61%)",
        "red": 74,
        "green": 237,
        "blue": 215,
        "hue": 172,
        "saturation": 82,
        "lightness": 61
    }, {
        "hex": "#B9F8F0",
        "rgb": "rgb(185, 248, 240)",
        "hsl": "hsl(172, 82%, 85%)",
        "red": 185,
        "green": 248,
        "blue": 240,
        "hue": 172,
        "saturation": 82,
        "lightness": 85
    }, {
        "hex": "#02907D",
        "rgb": "rgb(2, 144, 125)",
        "hsl": "hsl(172, 97%, 29%)",
        "red": 2,
        "green": 144,
        "blue": 125,
        "hue": 172,
        "saturation": 97,
        "lightness": 29
    }, {
        "hex": "#C1C9C8",
        "rgb": "rgb(193, 201, 200)",
        "hsl": "hsl(173, 7%, 77%)",
        "red": 193,
        "green": 201,
        "blue": 200,
        "hue": 173,
        "saturation": 7,
        "lightness": 77
    }, {
        "hex": "#58706D",
        "rgb": "rgb(88, 112, 109)",
        "hsl": "hsl(173, 12%, 39%)",
        "red": 88,
        "green": 112,
        "blue": 109,
        "hue": 173,
        "saturation": 12,
        "lightness": 39
    }, {
        "hex": "#8FBFB9",
        "rgb": "rgb(143, 191, 185)",
        "hsl": "hsl(173, 27%, 65%)",
        "red": 143,
        "green": 191,
        "blue": 185,
        "hue": 173,
        "saturation": 27,
        "lightness": 65
    }, {
        "hex": "#6CC4B9",
        "rgb": "rgb(108, 196, 185)",
        "hsl": "hsl(173, 43%, 60%)",
        "red": 108,
        "green": 196,
        "blue": 185,
        "hue": 173,
        "saturation": 43,
        "lightness": 60
    }, {
        "hex": "#81D7CD",
        "rgb": "rgb(129, 215, 205)",
        "hsl": "hsl(173, 52%, 67%)",
        "red": 129,
        "green": 215,
        "blue": 205,
        "hue": 173,
        "saturation": 52,
        "lightness": 67
    }, {
        "hex": "#4ACABB",
        "rgb": "rgb(74, 202, 187)",
        "hsl": "hsl(173, 55%, 54%)",
        "red": 74,
        "green": 202,
        "blue": 187,
        "hue": 173,
        "saturation": 55,
        "lightness": 54
    }, {
        "hex": "#34BAAB",
        "rgb": "rgb(52, 186, 171)",
        "hsl": "hsl(173, 56%, 47%)",
        "red": 52,
        "green": 186,
        "blue": 171,
        "hue": 173,
        "saturation": 56,
        "lightness": 47
    }, {
        "hex": "#ABECE4",
        "rgb": "rgb(171, 236, 228)",
        "hsl": "hsl(173, 63%, 80%)",
        "red": 171,
        "green": 236,
        "blue": 228,
        "hue": 173,
        "saturation": 63,
        "lightness": 80
    }, {
        "hex": "#0C5149",
        "rgb": "rgb(12, 81, 73)",
        "hsl": "hsl(173, 74%, 18%)",
        "red": 12,
        "green": 81,
        "blue": 73,
        "hue": 173,
        "saturation": 74,
        "lightness": 18
    }, {
        "hex": "#03453D",
        "rgb": "rgb(3, 69, 61)",
        "hsl": "hsl(173, 92%, 14%)",
        "red": 3,
        "green": 69,
        "blue": 61,
        "hue": 173,
        "saturation": 92,
        "lightness": 14
    }, {
        "hex": "#069E8C",
        "rgb": "rgb(6, 158, 140)",
        "hsl": "hsl(173, 93%, 32%)",
        "red": 6,
        "green": 158,
        "blue": 140,
        "hue": 173,
        "saturation": 93,
        "lightness": 32
    }, {
        "hex": "#A1C1BE",
        "rgb": "rgb(161, 193, 190)",
        "hsl": "hsl(174, 21%, 69%)",
        "red": 161,
        "green": 193,
        "blue": 190,
        "hue": 174,
        "saturation": 21,
        "lightness": 69
    }, {
        "hex": "#314D4A",
        "rgb": "rgb(49, 77, 74)",
        "hsl": "hsl(174, 22%, 25%)",
        "red": 49,
        "green": 77,
        "blue": 74,
        "hue": 174,
        "saturation": 22,
        "lightness": 25
    }, {
        "hex": "#80B0AB",
        "rgb": "rgb(128, 176, 171)",
        "hsl": "hsl(174, 23%, 60%)",
        "red": 128,
        "green": 176,
        "blue": 171,
        "hue": 174,
        "saturation": 23,
        "lightness": 60
    }, {
        "hex": "#82B3AE",
        "rgb": "rgb(130, 179, 174)",
        "hsl": "hsl(174, 24%, 61%)",
        "red": 130,
        "green": 179,
        "blue": 174,
        "hue": 174,
        "saturation": 24,
        "lightness": 61
    }, {
        "hex": "#5A9B95",
        "rgb": "rgb(90, 155, 149)",
        "hsl": "hsl(174, 27%, 48%)",
        "red": 90,
        "green": 155,
        "blue": 149,
        "hue": 174,
        "saturation": 27,
        "lightness": 48
    }, {
        "hex": "#7DBEB8",
        "rgb": "rgb(125, 190, 184)",
        "hsl": "hsl(174, 33%, 62%)",
        "red": 125,
        "green": 190,
        "blue": 184,
        "hue": 174,
        "saturation": 33,
        "lightness": 62
    }, {
        "hex": "#93CCC6",
        "rgb": "rgb(147, 204, 198)",
        "hsl": "hsl(174, 36%, 69%)",
        "red": 147,
        "green": 204,
        "blue": 198,
        "hue": 174,
        "saturation": 36,
        "lightness": 69
    }, {
        "hex": "#6CBDB5",
        "rgb": "rgb(108, 189, 181)",
        "hsl": "hsl(174, 38%, 58%)",
        "red": 108,
        "green": 189,
        "blue": 181,
        "hue": 174,
        "saturation": 38,
        "lightness": 58
    }, {
        "hex": "#42988F",
        "rgb": "rgb(66, 152, 143)",
        "hsl": "hsl(174, 39%, 43%)",
        "red": 66,
        "green": 152,
        "blue": 143,
        "hue": 174,
        "saturation": 39,
        "lightness": 43
    }, {
        "hex": "#88D1CA",
        "rgb": "rgb(136, 209, 202)",
        "hsl": "hsl(174, 44%, 68%)",
        "red": 136,
        "green": 209,
        "blue": 202,
        "hue": 174,
        "saturation": 44,
        "lightness": 68
    }, {
        "hex": "#ADE0DB",
        "rgb": "rgb(173, 224, 219)",
        "hsl": "hsl(174, 45%, 78%)",
        "red": 173,
        "green": 224,
        "blue": 219,
        "hue": 174,
        "saturation": 45,
        "lightness": 78
    }, {
        "hex": "#091C1A",
        "rgb": "rgb(9, 28, 26)",
        "hsl": "hsl(174, 51%, 7%)",
        "red": 9,
        "green": 28,
        "blue": 26,
        "hue": 174,
        "saturation": 51,
        "lightness": 7
    }, {
        "hex": "#53CBBF",
        "rgb": "rgb(83, 203, 191)",
        "hsl": "hsl(174, 54%, 56%)",
        "red": 83,
        "green": 203,
        "blue": 191,
        "hue": 174,
        "saturation": 54,
        "lightness": 56
    }, {
        "hex": "#31ADA1",
        "rgb": "rgb(49, 173, 161)",
        "hsl": "hsl(174, 56%, 44%)",
        "red": 49,
        "green": 173,
        "blue": 161,
        "hue": 174,
        "saturation": 56,
        "lightness": 44
    }, {
        "hex": "#23998E",
        "rgb": "rgb(35, 153, 142)",
        "hsl": "hsl(174, 63%, 37%)",
        "red": 35,
        "green": 153,
        "blue": 142,
        "hue": 174,
        "saturation": 63,
        "lightness": 37
    }, {
        "hex": "#19B5A5",
        "rgb": "rgb(25, 181, 165)",
        "hsl": "hsl(174, 76%, 40%)",
        "red": 25,
        "green": 181,
        "blue": 165,
        "hue": 174,
        "saturation": 76,
        "lightness": 40
    }, {
        "hex": "#13C8B5",
        "rgb": "rgb(19, 200, 181)",
        "hsl": "hsl(174, 83%, 43%)",
        "red": 19,
        "green": 200,
        "blue": 181,
        "hue": 174,
        "saturation": 83,
        "lightness": 43
    }, {
        "hex": "#009989",
        "rgb": "rgb(0, 153, 137)",
        "hsl": "hsl(174, 100%, 30%)",
        "red": 0,
        "green": 153,
        "blue": 137,
        "hue": 174,
        "saturation": 100,
        "lightness": 30
    }, {
        "hex": "#495453",
        "rgb": "rgb(73, 84, 83)",
        "hsl": "hsl(175, 7%, 31%)",
        "red": 73,
        "green": 84,
        "blue": 83,
        "hue": 175,
        "saturation": 7,
        "lightness": 31
    }, {
        "hex": "#88A19F",
        "rgb": "rgb(136, 161, 159)",
        "hsl": "hsl(175, 12%, 58%)",
        "red": 136,
        "green": 161,
        "blue": 159,
        "hue": 175,
        "saturation": 12,
        "lightness": 58
    }, {
        "hex": "#71CBC4",
        "rgb": "rgb(113, 203, 196)",
        "hsl": "hsl(175, 46%, 62%)",
        "red": 113,
        "green": 203,
        "blue": 196,
        "hue": 175,
        "saturation": 46,
        "lightness": 62
    }, {
        "hex": "#7CD7CF",
        "rgb": "rgb(124, 215, 207)",
        "hsl": "hsl(175, 53%, 66%)",
        "red": 124,
        "green": 215,
        "blue": 207,
        "hue": 175,
        "saturation": 53,
        "lightness": 66
    }, {
        "hex": "#25857D",
        "rgb": "rgb(37, 133, 125)",
        "hsl": "hsl(175, 56%, 33%)",
        "red": 37,
        "green": 133,
        "blue": 125,
        "hue": 175,
        "saturation": 56,
        "lightness": 33
    }, {
        "hex": "#288D85",
        "rgb": "rgb(40, 141, 133)",
        "hsl": "hsl(175, 56%, 35%)",
        "red": 40,
        "green": 141,
        "blue": 133,
        "hue": 175,
        "saturation": 56,
        "lightness": 35
    }, {
        "hex": "#2FB8AC",
        "rgb": "rgb(47, 184, 172)",
        "hsl": "hsl(175, 59%, 45%)",
        "red": 47,
        "green": 184,
        "blue": 172,
        "hue": 175,
        "saturation": 59,
        "lightness": 45
    }, {
        "hex": "#2EB8AC",
        "rgb": "rgb(46, 184, 172)",
        "hsl": "hsl(175, 60%, 45%)",
        "red": 46,
        "green": 184,
        "blue": 172,
        "hue": 175,
        "saturation": 60,
        "lightness": 45
    }, {
        "hex": "#71DBD2",
        "rgb": "rgb(113, 219, 210)",
        "hsl": "hsl(175, 60%, 65%)",
        "red": 113,
        "green": 219,
        "blue": 210,
        "hue": 175,
        "saturation": 60,
        "lightness": 65
    }, {
        "hex": "#11665F",
        "rgb": "rgb(17, 102, 95)",
        "hsl": "hsl(175, 71%, 23%)",
        "red": 17,
        "green": 102,
        "blue": 95,
        "hue": 175,
        "saturation": 71,
        "lightness": 23
    }, {
        "hex": "#11766D",
        "rgb": "rgb(17, 118, 109)",
        "hsl": "hsl(175, 75%, 26%)",
        "red": 17,
        "green": 118,
        "blue": 109,
        "hue": 175,
        "saturation": 75,
        "lightness": 26
    }, {
        "hex": "#11BAAC",
        "rgb": "rgb(17, 186, 172)",
        "hsl": "hsl(175, 83%, 40%)",
        "red": 17,
        "green": 186,
        "blue": 172,
        "hue": 175,
        "saturation": 83,
        "lightness": 40
    }, {
        "hex": "#0CCABA",
        "rgb": "rgb(12, 202, 186)",
        "hsl": "hsl(175, 89%, 42%)",
        "red": 12,
        "green": 202,
        "blue": 186,
        "hue": 175,
        "saturation": 89,
        "lightness": 42
    }, {
        "hex": "#6D8B89",
        "rgb": "rgb(109, 139, 137)",
        "hsl": "hsl(176, 12%, 49%)",
        "red": 109,
        "green": 139,
        "blue": 137,
        "hue": 176,
        "saturation": 12,
        "lightness": 49
    }, {
        "hex": "#A3C4C2",
        "rgb": "rgb(163, 196, 194)",
        "hsl": "hsl(176, 22%, 70%)",
        "red": 163,
        "green": 196,
        "blue": 194,
        "hue": 176,
        "saturation": 22,
        "lightness": 70
    }, {
        "hex": "#2F615E",
        "rgb": "rgb(47, 97, 94)",
        "hsl": "hsl(176, 35%, 28%)",
        "red": 47,
        "green": 97,
        "blue": 94,
        "hue": 176,
        "saturation": 35,
        "lightness": 28
    }, {
        "hex": "#9FD6D2",
        "rgb": "rgb(159, 214, 210)",
        "hsl": "hsl(176, 40%, 73%)",
        "red": 159,
        "green": 214,
        "blue": 210,
        "hue": 176,
        "saturation": 40,
        "lightness": 73
    }, {
        "hex": "#D0ECEA",
        "rgb": "rgb(208, 236, 234)",
        "hsl": "hsl(176, 42%, 87%)",
        "red": 208,
        "green": 236,
        "blue": 234,
        "hue": 176,
        "saturation": 42,
        "lightness": 87
    }, {
        "hex": "#31827C",
        "rgb": "rgb(49, 130, 124)",
        "hsl": "hsl(176, 45%, 35%)",
        "red": 49,
        "green": 130,
        "blue": 124,
        "hue": 176,
        "saturation": 45,
        "lightness": 35
    }, {
        "hex": "#3FB8AF",
        "rgb": "rgb(63, 184, 175)",
        "hsl": "hsl(176, 49%, 48%)",
        "red": 63,
        "green": 184,
        "blue": 175,
        "hue": 176,
        "saturation": 49,
        "lightness": 48
    }, {
        "hex": "#349E97",
        "rgb": "rgb(52, 158, 151)",
        "hsl": "hsl(176, 50%, 41%)",
        "red": 52,
        "green": 158,
        "blue": 151,
        "hue": 176,
        "saturation": 50,
        "lightness": 41
    }, {
        "hex": "#4ECDC4",
        "rgb": "rgb(78, 205, 196)",
        "hsl": "hsl(176, 56%, 55%)",
        "red": 78,
        "green": 205,
        "blue": 196,
        "hue": 176,
        "saturation": 56,
        "lightness": 55
    }, {
        "hex": "#32C2B9",
        "rgb": "rgb(50, 194, 185)",
        "hsl": "hsl(176, 59%, 48%)",
        "red": 50,
        "green": 194,
        "blue": 185,
        "hue": 176,
        "saturation": 59,
        "lightness": 48
    }, {
        "hex": "#00988D",
        "rgb": "rgb(0, 152, 141)",
        "hsl": "hsl(176, 100%, 30%)",
        "red": 0,
        "green": 152,
        "blue": 141,
        "hue": 176,
        "saturation": 100,
        "lightness": 30
    }, {
        "hex": "#00CCBE",
        "rgb": "rgb(0, 204, 190)",
        "hsl": "hsl(176, 100%, 40%)",
        "red": 0,
        "green": 204,
        "blue": 190,
        "hue": 176,
        "saturation": 100,
        "lightness": 40
    }, {
        "hex": "#4D6160",
        "rgb": "rgb(77, 97, 96)",
        "hsl": "hsl(177, 11%, 34%)",
        "red": 77,
        "green": 97,
        "blue": 96,
        "hue": 177,
        "saturation": 11,
        "lightness": 34
    }, {
        "hex": "#6B9795",
        "rgb": "rgb(107, 151, 149)",
        "hsl": "hsl(177, 17%, 51%)",
        "red": 107,
        "green": 151,
        "blue": 149,
        "hue": 177,
        "saturation": 17,
        "lightness": 51
    }, {
        "hex": "#6B9997",
        "rgb": "rgb(107, 153, 151)",
        "hsl": "hsl(177, 18%, 51%)",
        "red": 107,
        "green": 153,
        "blue": 151,
        "hue": 177,
        "saturation": 18,
        "lightness": 51
    }, {
        "hex": "#6CA19E",
        "rgb": "rgb(108, 161, 158)",
        "hsl": "hsl(177, 22%, 53%)",
        "red": 108,
        "green": 161,
        "blue": 158,
        "hue": 177,
        "saturation": 22,
        "lightness": 53
    }, {
        "hex": "#213635",
        "rgb": "rgb(33, 54, 53)",
        "hsl": "hsl(177, 24%, 17%)",
        "red": 33,
        "green": 54,
        "blue": 53,
        "hue": 177,
        "saturation": 24,
        "lightness": 17
    }, {
        "hex": "#6CA6A3",
        "rgb": "rgb(108, 166, 163)",
        "hsl": "hsl(177, 25%, 54%)",
        "red": 108,
        "green": 166,
        "blue": 163,
        "hue": 177,
        "saturation": 25,
        "lightness": 54
    }, {
        "hex": "#79B7B4",
        "rgb": "rgb(121, 183, 180)",
        "hsl": "hsl(177, 30%, 60%)",
        "red": 121,
        "green": 183,
        "blue": 180,
        "hue": 177,
        "saturation": 30,
        "lightness": 60
    }, {
        "hex": "#459A96",
        "rgb": "rgb(69, 154, 150)",
        "hsl": "hsl(177, 38%, 44%)",
        "red": 69,
        "green": 154,
        "blue": 150,
        "hue": 177,
        "saturation": 38,
        "lightness": 44
    }, {
        "hex": "#3B8C88",
        "rgb": "rgb(59, 140, 136)",
        "hsl": "hsl(177, 41%, 39%)",
        "red": 59,
        "green": 140,
        "blue": 136,
        "hue": 177,
        "saturation": 41,
        "lightness": 39
    }, {
        "hex": "#A7DBD8",
        "rgb": "rgb(167, 219, 216)",
        "hsl": "hsl(177, 42%, 76%)",
        "red": 167,
        "green": 219,
        "blue": 216,
        "hue": 177,
        "saturation": 42,
        "lightness": 76
    }, {
        "hex": "#45ADA8",
        "rgb": "rgb(69, 173, 168)",
        "hsl": "hsl(177, 43%, 47%)",
        "red": 69,
        "green": 173,
        "blue": 168,
        "hue": 177,
        "saturation": 43,
        "lightness": 47
    }, {
        "hex": "#7ECECA",
        "rgb": "rgb(126, 206, 202)",
        "hsl": "hsl(177, 45%, 65%)",
        "red": 126,
        "green": 206,
        "blue": 202,
        "hue": 177,
        "saturation": 45,
        "lightness": 65
    }, {
        "hex": "#2D938E",
        "rgb": "rgb(45, 147, 142)",
        "hsl": "hsl(177, 53%, 38%)",
        "red": 45,
        "green": 147,
        "blue": 142,
        "hue": 177,
        "saturation": 53,
        "lightness": 38
    }, {
        "hex": "#69D2CD",
        "rgb": "rgb(105, 210, 205)",
        "hsl": "hsl(177, 54%, 62%)",
        "red": 105,
        "green": 210,
        "blue": 205,
        "hue": 177,
        "saturation": 54,
        "lightness": 62
    }, {
        "hex": "#2CB8B2",
        "rgb": "rgb(44, 184, 178)",
        "hsl": "hsl(177, 61%, 45%)",
        "red": 44,
        "green": 184,
        "blue": 178,
        "hue": 177,
        "saturation": 61,
        "lightness": 45
    }, {
        "hex": "#1EA49D",
        "rgb": "rgb(30, 164, 157)",
        "hsl": "hsl(177, 69%, 38%)",
        "red": 30,
        "green": 164,
        "blue": 157,
        "hue": 177,
        "saturation": 69,
        "lightness": 38
    }, {
        "hex": "#0F928C",
        "rgb": "rgb(15, 146, 140)",
        "hsl": "hsl(177, 81%, 32%)",
        "red": 15,
        "green": 146,
        "blue": 140,
        "hue": 177,
        "saturation": 81,
        "lightness": 32
    }, {
        "hex": "#00FFF2",
        "rgb": "rgb(0, 255, 242)",
        "hsl": "hsl(177, 100%, 50%)",
        "red": 0,
        "green": 255,
        "blue": 242,
        "hue": 177,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#A4BDBC",
        "rgb": "rgb(164, 189, 188)",
        "hsl": "hsl(178, 16%, 69%)",
        "red": 164,
        "green": 189,
        "blue": 188,
        "hue": 178,
        "saturation": 16,
        "lightness": 69
    }, {
        "hex": "#84ABAA",
        "rgb": "rgb(132, 171, 170)",
        "hsl": "hsl(178, 19%, 59%)",
        "red": 132,
        "green": 171,
        "blue": 170,
        "hue": 178,
        "saturation": 19,
        "lightness": 59
    }, {
        "hex": "#4F8B89",
        "rgb": "rgb(79, 139, 137)",
        "hsl": "hsl(178, 28%, 43%)",
        "red": 79,
        "green": 139,
        "blue": 137,
        "hue": 178,
        "saturation": 28,
        "lightness": 43
    }, {
        "hex": "#ADD4D3",
        "rgb": "rgb(173, 212, 211)",
        "hsl": "hsl(178, 31%, 75%)",
        "red": 173,
        "green": 212,
        "blue": 211,
        "hue": 178,
        "saturation": 31,
        "lightness": 75
    }, {
        "hex": "#368986",
        "rgb": "rgb(54, 137, 134)",
        "hsl": "hsl(178, 43%, 37%)",
        "red": 54,
        "green": 137,
        "blue": 134,
        "hue": 178,
        "saturation": 43,
        "lightness": 37
    }, {
        "hex": "#1F6764",
        "rgb": "rgb(31, 103, 100)",
        "hsl": "hsl(178, 54%, 26%)",
        "red": 31,
        "green": 103,
        "blue": 100,
        "hue": 178,
        "saturation": 54,
        "lightness": 26
    }, {
        "hex": "#1F6764",
        "rgb": "rgb(31, 103, 100)",
        "hsl": "hsl(178, 54%, 26%)",
        "red": 31,
        "green": 103,
        "blue": 100,
        "hue": 178,
        "saturation": 54,
        "lightness": 26
    }, {
        "hex": "#1CA39E",
        "rgb": "rgb(28, 163, 158)",
        "hsl": "hsl(178, 71%, 37%)",
        "red": 28,
        "green": 163,
        "blue": 158,
        "hue": 178,
        "saturation": 71,
        "lightness": 37
    }, {
        "hex": "#0A837F",
        "rgb": "rgb(10, 131, 127)",
        "hsl": "hsl(178, 86%, 28%)",
        "red": 10,
        "green": 131,
        "blue": 127,
        "hue": 178,
        "saturation": 86,
        "lightness": 28
    }, {
        "hex": "#0DB2AC",
        "rgb": "rgb(13, 178, 172)",
        "hsl": "hsl(178, 86%, 37%)",
        "red": 13,
        "green": 178,
        "blue": 172,
        "hue": 178,
        "saturation": 86,
        "lightness": 37
    }, {
        "hex": "#076461",
        "rgb": "rgb(7, 100, 97)",
        "hsl": "hsl(178, 87%, 21%)",
        "red": 7,
        "green": 100,
        "blue": 97,
        "hue": 178,
        "saturation": 87,
        "lightness": 21
    }, {
        "hex": "#08807B",
        "rgb": "rgb(8, 128, 123)",
        "hsl": "hsl(178, 88%, 27%)",
        "red": 8,
        "green": 128,
        "blue": 123,
        "hue": 178,
        "saturation": 88,
        "lightness": 27
    }, {
        "hex": "#078A85",
        "rgb": "rgb(7, 138, 133)",
        "hsl": "hsl(178, 90%, 28%)",
        "red": 7,
        "green": 138,
        "blue": 133,
        "hue": 178,
        "saturation": 90,
        "lightness": 28
    }, {
        "hex": "#02FCF3",
        "rgb": "rgb(2, 252, 243)",
        "hsl": "hsl(178, 98%, 50%)",
        "red": 2,
        "green": 252,
        "blue": 243,
        "hue": 178,
        "saturation": 98,
        "lightness": 50
    }, {
        "hex": "#69A5A4",
        "rgb": "rgb(105, 165, 164)",
        "hsl": "hsl(179, 25%, 53%)",
        "red": 105,
        "green": 165,
        "blue": 164,
        "hue": 179,
        "saturation": 25,
        "lightness": 53
    }, {
        "hex": "#5B9B9A",
        "rgb": "rgb(91, 155, 154)",
        "hsl": "hsl(179, 26%, 48%)",
        "red": 91,
        "green": 155,
        "blue": 154,
        "hue": 179,
        "saturation": 26,
        "lightness": 48
    }, {
        "hex": "#5BB7B6",
        "rgb": "rgb(91, 183, 182)",
        "hsl": "hsl(179, 39%, 54%)",
        "red": 91,
        "green": 183,
        "blue": 182,
        "hue": 179,
        "saturation": 39,
        "lightness": 54
    }, {
        "hex": "#319190",
        "rgb": "rgb(49, 145, 144)",
        "hsl": "hsl(179, 49%, 38%)",
        "red": 49,
        "green": 145,
        "blue": 144,
        "hue": 179,
        "saturation": 49,
        "lightness": 38
    }, {
        "hex": "#50C8C6",
        "rgb": "rgb(80, 200, 198)",
        "hsl": "hsl(179, 52%, 55%)",
        "red": 80,
        "green": 200,
        "blue": 198,
        "hue": 179,
        "saturation": 52,
        "lightness": 55
    }, {
        "hex": "#248F8D",
        "rgb": "rgb(36, 143, 141)",
        "hsl": "hsl(179, 60%, 35%)",
        "red": 36,
        "green": 143,
        "blue": 141,
        "hue": 179,
        "saturation": 60,
        "lightness": 35
    }, {
        "hex": "#36CECC",
        "rgb": "rgb(54, 206, 204)",
        "hsl": "hsl(179, 61%, 51%)",
        "red": 54,
        "green": 206,
        "blue": 204,
        "hue": 179,
        "saturation": 61,
        "lightness": 51
    }, {
        "hex": "#166665",
        "rgb": "rgb(22, 102, 101)",
        "hsl": "hsl(179, 65%, 24%)",
        "red": 22,
        "green": 102,
        "blue": 101,
        "hue": 179,
        "saturation": 65,
        "lightness": 24
    }, {
        "hex": "#0A5C5A",
        "rgb": "rgb(10, 92, 90)",
        "hsl": "hsl(179, 80%, 20%)",
        "red": 10,
        "green": 92,
        "blue": 90,
        "hue": 179,
        "saturation": 80,
        "lightness": 20
    }, {
        "hex": "#0EAEAB",
        "rgb": "rgb(14, 174, 171)",
        "hsl": "hsl(179, 85%, 37%)",
        "red": 14,
        "green": 174,
        "blue": 171,
        "hue": 179,
        "saturation": 85,
        "lightness": 37
    }, {
        "hex": "#09A6A3",
        "rgb": "rgb(9, 166, 163)",
        "hsl": "hsl(179, 90%, 34%)",
        "red": 9,
        "green": 166,
        "blue": 163,
        "hue": 179,
        "saturation": 90,
        "lightness": 34
    }, {
        "hex": "#0ABFBC",
        "rgb": "rgb(10, 191, 188)",
        "hsl": "hsl(179, 90%, 39%)",
        "red": 10,
        "green": 191,
        "blue": 188,
        "hue": 179,
        "saturation": 90,
        "lightness": 39
    }, {
        "hex": "#036564",
        "rgb": "rgb(3, 101, 100)",
        "hsl": "hsl(179, 94%, 20%)",
        "red": 3,
        "green": 101,
        "blue": 100,
        "hue": 179,
        "saturation": 94,
        "lightness": 20
    }, {
        "hex": "#026F6E",
        "rgb": "rgb(2, 111, 110)",
        "hsl": "hsl(179, 96%, 22%)",
        "red": 2,
        "green": 111,
        "blue": 110,
        "hue": 179,
        "saturation": 96,
        "lightness": 22
    }, {
        "hex": "#029B99",
        "rgb": "rgb(2, 155, 153)",
        "hsl": "hsl(179, 97%, 31%)",
        "red": 2,
        "green": 155,
        "blue": 153,
        "hue": 179,
        "saturation": 97,
        "lightness": 31
    }, {
        "hex": "#002C2B",
        "rgb": "rgb(0, 44, 43)",
        "hsl": "hsl(179, 100%, 9%)",
        "red": 0,
        "green": 44,
        "blue": 43,
        "hue": 179,
        "saturation": 100,
        "lightness": 9
    }, {
        "hex": "#004443",
        "rgb": "rgb(0, 68, 67)",
        "hsl": "hsl(179, 100%, 13%)",
        "red": 0,
        "green": 68,
        "blue": 67,
        "hue": 179,
        "saturation": 100,
        "lightness": 13
    }, {
        "hex": "#383939",
        "rgb": "rgb(56, 57, 57)",
        "hsl": "hsl(180, 1%, 22%)",
        "red": 56,
        "green": 57,
        "blue": 57,
        "hue": 180,
        "saturation": 1,
        "lightness": 22
    }, {
        "hex": "#D3D5D5",
        "rgb": "rgb(211, 213, 213)",
        "hsl": "hsl(180, 2%, 83%)",
        "red": 211,
        "green": 213,
        "blue": 213,
        "hue": 180,
        "saturation": 2,
        "lightness": 83
    }, {
        "hex": "#585D5D",
        "rgb": "rgb(88, 93, 93)",
        "hsl": "hsl(180, 3%, 35%)",
        "red": 88,
        "green": 93,
        "blue": 93,
        "hue": 180,
        "saturation": 3,
        "lightness": 35
    }, {
        "hex": "#D9DBDB",
        "rgb": "rgb(217, 219, 219)",
        "hsl": "hsl(180, 3%, 85%)",
        "red": 217,
        "green": 219,
        "blue": 219,
        "hue": 180,
        "saturation": 3,
        "lightness": 85
    }, {
        "hex": "#343838",
        "rgb": "rgb(52, 56, 56)",
        "hsl": "hsl(180, 4%, 21%)",
        "red": 52,
        "green": 56,
        "blue": 56,
        "hue": 180,
        "saturation": 4,
        "lightness": 21
    }, {
        "hex": "#4B5757",
        "rgb": "rgb(75, 87, 87)",
        "hsl": "hsl(180, 7%, 32%)",
        "red": 75,
        "green": 87,
        "blue": 87,
        "hue": 180,
        "saturation": 7,
        "lightness": 32
    }, {
        "hex": "#5C6E6E",
        "rgb": "rgb(92, 110, 110)",
        "hsl": "hsl(180, 9%, 40%)",
        "red": 92,
        "green": 110,
        "blue": 110,
        "hue": 180,
        "saturation": 9,
        "lightness": 40
    }, {
        "hex": "#789090",
        "rgb": "rgb(120, 144, 144)",
        "hsl": "hsl(180, 10%, 52%)",
        "red": 120,
        "green": 144,
        "blue": 144,
        "hue": 180,
        "saturation": 10,
        "lightness": 52
    }, {
        "hex": "#C6D6D6",
        "rgb": "rgb(198, 214, 214)",
        "hsl": "hsl(180, 16%, 81%)",
        "red": 198,
        "green": 214,
        "blue": 214,
        "hue": 180,
        "saturation": 16,
        "lightness": 81
    }, {
        "hex": "#DEE7E7",
        "rgb": "rgb(222, 231, 231)",
        "hsl": "hsl(180, 16%, 89%)",
        "red": 222,
        "green": 231,
        "blue": 231,
        "hue": 180,
        "saturation": 16,
        "lightness": 89
    }, {
        "hex": "#80A8A8",
        "rgb": "rgb(128, 168, 168)",
        "hsl": "hsl(180, 19%, 58%)",
        "red": 128,
        "green": 168,
        "blue": 168,
        "hue": 180,
        "saturation": 19,
        "lightness": 58
    }, {
        "hex": "#8CB0B0",
        "rgb": "rgb(140, 176, 176)",
        "hsl": "hsl(180, 19%, 62%)",
        "red": 140,
        "green": 176,
        "blue": 176,
        "hue": 180,
        "saturation": 19,
        "lightness": 62
    }, {
        "hex": "#9DBCBC",
        "rgb": "rgb(157, 188, 188)",
        "hsl": "hsl(180, 19%, 68%)",
        "red": 157,
        "green": 188,
        "blue": 188,
        "hue": 180,
        "saturation": 19,
        "lightness": 68
    }, {
        "hex": "#669999",
        "rgb": "rgb(102, 153, 153)",
        "hsl": "hsl(180, 20%, 50%)",
        "red": 102,
        "green": 153,
        "blue": 153,
        "hue": 180,
        "saturation": 20,
        "lightness": 50
    }, {
        "hex": "#EBF2F2",
        "rgb": "rgb(235, 242, 242)",
        "hsl": "hsl(180, 21%, 94%)",
        "red": 235,
        "green": 242,
        "blue": 242,
        "hue": 180,
        "saturation": 21,
        "lightness": 94
    }, {
        "hex": "#080D0D",
        "rgb": "rgb(8, 13, 13)",
        "hsl": "hsl(180, 24%, 4%)",
        "red": 8,
        "green": 13,
        "blue": 13,
        "hue": 180,
        "saturation": 24,
        "lightness": 4
    }, {
        "hex": "#C0D8D8",
        "rgb": "rgb(192, 216, 216)",
        "hsl": "hsl(180, 24%, 80%)",
        "red": 192,
        "green": 216,
        "blue": 216,
        "hue": 180,
        "saturation": 24,
        "lightness": 80
    }, {
        "hex": "#1A2B2B",
        "rgb": "rgb(26, 43, 43)",
        "hsl": "hsl(180, 25%, 14%)",
        "red": 26,
        "green": 43,
        "blue": 43,
        "hue": 180,
        "saturation": 25,
        "lightness": 14
    }, {
        "hex": "#3D6868",
        "rgb": "rgb(61, 104, 104)",
        "hsl": "hsl(180, 26%, 32%)",
        "red": 61,
        "green": 104,
        "blue": 104,
        "hue": 180,
        "saturation": 26,
        "lightness": 32
    }, {
        "hex": "#244242",
        "rgb": "rgb(36, 66, 66)",
        "hsl": "hsl(180, 29%, 20%)",
        "red": 36,
        "green": 66,
        "blue": 66,
        "hue": 180,
        "saturation": 29,
        "lightness": 20
    }, {
        "hex": "#336666",
        "rgb": "rgb(51, 102, 102)",
        "hsl": "hsl(180, 33%, 30%)",
        "red": 51,
        "green": 102,
        "blue": 102,
        "hue": 180,
        "saturation": 33,
        "lightness": 30
    }, {
        "hex": "#99CCCC",
        "rgb": "rgb(153, 204, 204)",
        "hsl": "hsl(180, 33%, 70%)",
        "red": 153,
        "green": 204,
        "blue": 204,
        "hue": 180,
        "saturation": 33,
        "lightness": 70
    }, {
        "hex": "#C1E0E0",
        "rgb": "rgb(193, 224, 224)",
        "hsl": "hsl(180, 33%, 82%)",
        "red": 193,
        "green": 224,
        "blue": 224,
        "hue": 180,
        "saturation": 33,
        "lightness": 82
    }, {
        "hex": "#418E8E",
        "rgb": "rgb(65, 142, 142)",
        "hsl": "hsl(180, 37%, 41%)",
        "red": 65,
        "green": 142,
        "blue": 142,
        "hue": 180,
        "saturation": 37,
        "lightness": 41
    }, {
        "hex": "#3CA2A2",
        "rgb": "rgb(60, 162, 162)",
        "hsl": "hsl(180, 46%, 44%)",
        "red": 60,
        "green": 162,
        "blue": 162,
        "hue": 180,
        "saturation": 46,
        "lightness": 44
    }, {
        "hex": "#184848",
        "rgb": "rgb(24, 72, 72)",
        "hsl": "hsl(180, 50%, 19%)",
        "red": 24,
        "green": 72,
        "blue": 72,
        "hue": 180,
        "saturation": 50,
        "lightness": 19
    }, {
        "hex": "#339999",
        "rgb": "rgb(51, 153, 153)",
        "hsl": "hsl(180, 50%, 40%)",
        "red": 51,
        "green": 153,
        "blue": 153,
        "hue": 180,
        "saturation": 50,
        "lightness": 40
    }, {
        "hex": "#309292",
        "rgb": "rgb(48, 146, 146)",
        "hsl": "hsl(180, 51%, 38%)",
        "red": 48,
        "green": 146,
        "blue": 146,
        "hue": 180,
        "saturation": 51,
        "lightness": 38
    }, {
        "hex": "#2A8B8B",
        "rgb": "rgb(42, 139, 139)",
        "hsl": "hsl(180, 54%, 35%)",
        "red": 42,
        "green": 139,
        "blue": 139,
        "hue": 180,
        "saturation": 54,
        "lightness": 35
    }, {
        "hex": "#49CCCC",
        "rgb": "rgb(73, 204, 204)",
        "hsl": "hsl(180, 56%, 54%)",
        "red": 73,
        "green": 204,
        "blue": 204,
        "hue": 180,
        "saturation": 56,
        "lightness": 54
    }, {
        "hex": "#259B9B",
        "rgb": "rgb(37, 155, 155)",
        "hsl": "hsl(180, 61%, 38%)",
        "red": 37,
        "green": 155,
        "blue": 155,
        "hue": 180,
        "saturation": 61,
        "lightness": 38
    }, {
        "hex": "#114D4D",
        "rgb": "rgb(17, 77, 77)",
        "hsl": "hsl(180, 64%, 18%)",
        "red": 17,
        "green": 77,
        "blue": 77,
        "hue": 180,
        "saturation": 64,
        "lightness": 18
    }, {
        "hex": "#1C8080",
        "rgb": "rgb(28, 128, 128)",
        "hsl": "hsl(180, 64%, 31%)",
        "red": 28,
        "green": 128,
        "blue": 128,
        "hue": 180,
        "saturation": 64,
        "lightness": 31
    }, {
        "hex": "#21A3A3",
        "rgb": "rgb(33, 163, 163)",
        "hsl": "hsl(180, 66%, 38%)",
        "red": 33,
        "green": 163,
        "blue": 163,
        "hue": 180,
        "saturation": 66,
        "lightness": 38
    }, {
        "hex": "#21B6B6",
        "rgb": "rgb(33, 182, 182)",
        "hsl": "hsl(180, 69%, 42%)",
        "red": 33,
        "green": 182,
        "blue": 182,
        "hue": 180,
        "saturation": 69,
        "lightness": 42
    }, {
        "hex": "#17A7A8",
        "rgb": "rgb(23, 167, 168)",
        "hsl": "hsl(180, 76%, 37%)",
        "red": 23,
        "green": 167,
        "blue": 168,
        "hue": 180,
        "saturation": 76,
        "lightness": 37
    }, {
        "hex": "#0C7E7E",
        "rgb": "rgb(12, 126, 126)",
        "hsl": "hsl(180, 83%, 27%)",
        "red": 12,
        "green": 126,
        "blue": 126,
        "hue": 180,
        "saturation": 83,
        "lightness": 27
    }, {
        "hex": "#0C8F8F",
        "rgb": "rgb(12, 143, 143)",
        "hsl": "hsl(180, 85%, 30%)",
        "red": 12,
        "green": 143,
        "blue": 143,
        "hue": 180,
        "saturation": 85,
        "lightness": 30
    }, {
        "hex": "#0EC0C1",
        "rgb": "rgb(14, 192, 193)",
        "hsl": "hsl(180, 86%, 41%)",
        "red": 14,
        "green": 192,
        "blue": 193,
        "hue": 180,
        "saturation": 86,
        "lightness": 41
    }, {
        "hex": "#059B9A",
        "rgb": "rgb(5, 155, 154)",
        "hsl": "hsl(180, 94%, 31%)",
        "red": 5,
        "green": 155,
        "blue": 154,
        "hue": 180,
        "saturation": 94,
        "lightness": 31
    }, {
        "hex": "#006060",
        "rgb": "rgb(0, 96, 96)",
        "hsl": "hsl(180, 100%, 19%)",
        "red": 0,
        "green": 96,
        "blue": 96,
        "hue": 180,
        "saturation": 100,
        "lightness": 19
    }, {
        "hex": "#006666",
        "rgb": "rgb(0, 102, 102)",
        "hsl": "hsl(180, 100%, 20%)",
        "red": 0,
        "green": 102,
        "blue": 102,
        "hue": 180,
        "saturation": 100,
        "lightness": 20
    }, {
        "hex": "#007878",
        "rgb": "rgb(0, 120, 120)",
        "hsl": "hsl(180, 100%, 24%)",
        "red": 0,
        "green": 120,
        "blue": 120,
        "hue": 180,
        "saturation": 100,
        "lightness": 24
    }, {
        "hex": "#008584",
        "rgb": "rgb(0, 133, 132)",
        "hsl": "hsl(180, 100%, 26%)",
        "red": 0,
        "green": 133,
        "blue": 132,
        "hue": 180,
        "saturation": 100,
        "lightness": 26
    }, {
        "hex": "#66FFFF",
        "rgb": "rgb(102, 255, 255)",
        "hsl": "hsl(180, 100%, 70%)",
        "red": 102,
        "green": 255,
        "blue": 255,
        "hue": 180,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#C0FFFF",
        "rgb": "rgb(192, 255, 255)",
        "hsl": "hsl(180, 100%, 88%)",
        "red": 192,
        "green": 255,
        "blue": 255,
        "hue": 180,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#7DB4B5",
        "rgb": "rgb(125, 180, 181)",
        "hsl": "hsl(181, 27%, 60%)",
        "red": 125,
        "green": 180,
        "blue": 181,
        "hue": 181,
        "saturation": 27,
        "lightness": 60
    }, {
        "hex": "#57C5C7",
        "rgb": "rgb(87, 197, 199)",
        "hsl": "hsl(181, 50%, 56%)",
        "red": 87,
        "green": 197,
        "blue": 199,
        "hue": 181,
        "saturation": 50,
        "lightness": 56
    }, {
        "hex": "#134647",
        "rgb": "rgb(19, 70, 71)",
        "hsl": "hsl(181, 58%, 18%)",
        "red": 19,
        "green": 70,
        "blue": 71,
        "hue": 181,
        "saturation": 58,
        "lightness": 18
    }, {
        "hex": "#0F7D7E",
        "rgb": "rgb(15, 125, 126)",
        "hsl": "hsl(181, 79%, 28%)",
        "red": 15,
        "green": 125,
        "blue": 126,
        "hue": 181,
        "saturation": 79,
        "lightness": 28
    }, {
        "hex": "#10898B",
        "rgb": "rgb(16, 137, 139)",
        "hsl": "hsl(181, 79%, 30%)",
        "red": 16,
        "green": 137,
        "blue": 139,
        "hue": 181,
        "saturation": 79,
        "lightness": 30
    }, {
        "hex": "#0CE3E8",
        "rgb": "rgb(12, 227, 232)",
        "hsl": "hsl(181, 90%, 48%)",
        "red": 12,
        "green": 227,
        "blue": 232,
        "hue": 181,
        "saturation": 90,
        "lightness": 48
    }, {
        "hex": "#058789",
        "rgb": "rgb(5, 135, 137)",
        "hsl": "hsl(181, 93%, 28%)",
        "red": 5,
        "green": 135,
        "blue": 137,
        "hue": 181,
        "saturation": 93,
        "lightness": 28
    }, {
        "hex": "#D2FDFE",
        "rgb": "rgb(210, 253, 254)",
        "hsl": "hsl(181, 96%, 91%)",
        "red": 210,
        "green": 253,
        "blue": 254,
        "hue": 181,
        "saturation": 96,
        "lightness": 91
    }, {
        "hex": "#006465",
        "rgb": "rgb(0, 100, 101)",
        "hsl": "hsl(181, 100%, 20%)",
        "red": 0,
        "green": 100,
        "blue": 101,
        "hue": 181,
        "saturation": 100,
        "lightness": 20
    }, {
        "hex": "#007E80",
        "rgb": "rgb(0, 126, 128)",
        "hsl": "hsl(181, 100%, 25%)",
        "red": 0,
        "green": 126,
        "blue": 128,
        "hue": 181,
        "saturation": 100,
        "lightness": 25
    }, {
        "hex": "#00B5B9",
        "rgb": "rgb(0, 181, 185)",
        "hsl": "hsl(181, 100%, 36%)",
        "red": 0,
        "green": 181,
        "blue": 185,
        "hue": 181,
        "saturation": 100,
        "lightness": 36
    }, {
        "hex": "#00B9BD",
        "rgb": "rgb(0, 185, 189)",
        "hsl": "hsl(181, 100%, 37%)",
        "red": 0,
        "green": 185,
        "blue": 189,
        "hue": 181,
        "saturation": 100,
        "lightness": 37
    }, {
        "hex": "#C5DFE0",
        "rgb": "rgb(197, 223, 224)",
        "hsl": "hsl(182, 30%, 83%)",
        "red": 197,
        "green": 223,
        "blue": 224,
        "hue": 182,
        "saturation": 30,
        "lightness": 83
    }, {
        "hex": "#539FA2",
        "rgb": "rgb(83, 159, 162)",
        "hsl": "hsl(182, 32%, 48%)",
        "red": 83,
        "green": 159,
        "blue": 162,
        "hue": 182,
        "saturation": 32,
        "lightness": 48
    }, {
        "hex": "#3B8183",
        "rgb": "rgb(59, 129, 131)",
        "hsl": "hsl(182, 38%, 37%)",
        "red": 59,
        "green": 129,
        "blue": 131,
        "hue": 182,
        "saturation": 38,
        "lightness": 37
    }, {
        "hex": "#142F30",
        "rgb": "rgb(20, 47, 48)",
        "hsl": "hsl(182, 41%, 13%)",
        "red": 20,
        "green": 47,
        "blue": 48,
        "hue": 182,
        "saturation": 41,
        "lightness": 13
    }, {
        "hex": "#348E91",
        "rgb": "rgb(52, 142, 145)",
        "hsl": "hsl(182, 47%, 39%)",
        "red": 52,
        "green": 142,
        "blue": 145,
        "hue": 182,
        "saturation": 47,
        "lightness": 39
    }, {
        "hex": "#1C5052",
        "rgb": "rgb(28, 80, 82)",
        "hsl": "hsl(182, 49%, 22%)",
        "red": 28,
        "green": 80,
        "blue": 82,
        "hue": 182,
        "saturation": 49,
        "lightness": 22
    }, {
        "hex": "#339194",
        "rgb": "rgb(51, 145, 148)",
        "hsl": "hsl(182, 49%, 39%)",
        "red": 51,
        "green": 145,
        "blue": 148,
        "hue": 182,
        "saturation": 49,
        "lightness": 39
    }, {
        "hex": "#1F5F61",
        "rgb": "rgb(31, 95, 97)",
        "hsl": "hsl(182, 52%, 25%)",
        "red": 31,
        "green": 95,
        "blue": 97,
        "hue": 182,
        "saturation": 52,
        "lightness": 25
    }, {
        "hex": "#2C9FA3",
        "rgb": "rgb(44, 159, 163)",
        "hsl": "hsl(182, 57%, 41%)",
        "red": 44,
        "green": 159,
        "blue": 163,
        "hue": 182,
        "saturation": 57,
        "lightness": 41
    }, {
        "hex": "#32B9BE",
        "rgb": "rgb(50, 185, 190)",
        "hsl": "hsl(182, 58%, 47%)",
        "red": 50,
        "green": 185,
        "blue": 190,
        "hue": 182,
        "saturation": 58,
        "lightness": 47
    }, {
        "hex": "#30C4C9",
        "rgb": "rgb(48, 196, 201)",
        "hsl": "hsl(182, 61%, 49%)",
        "red": 48,
        "green": 196,
        "blue": 201,
        "hue": 182,
        "saturation": 61,
        "lightness": 49
    }, {
        "hex": "#14888B",
        "rgb": "rgb(20, 136, 139)",
        "hsl": "hsl(182, 75%, 31%)",
        "red": 20,
        "green": 136,
        "blue": 139,
        "hue": 182,
        "saturation": 75,
        "lightness": 31
    }, {
        "hex": "#16C1C8",
        "rgb": "rgb(22, 193, 200)",
        "hsl": "hsl(182, 80%, 44%)",
        "red": 22,
        "green": 193,
        "blue": 200,
        "hue": 182,
        "saturation": 80,
        "lightness": 44
    }, {
        "hex": "#0E9094",
        "rgb": "rgb(14, 144, 148)",
        "hsl": "hsl(182, 83%, 32%)",
        "red": 14,
        "green": 144,
        "blue": 148,
        "hue": 182,
        "saturation": 83,
        "lightness": 32
    }, {
        "hex": "#0B8185",
        "rgb": "rgb(11, 129, 133)",
        "hsl": "hsl(182, 85%, 28%)",
        "red": 11,
        "green": 129,
        "blue": 133,
        "hue": 182,
        "saturation": 85,
        "lightness": 28
    }, {
        "hex": "#07A2A6",
        "rgb": "rgb(7, 162, 166)",
        "hsl": "hsl(182, 92%, 34%)",
        "red": 7,
        "green": 162,
        "blue": 166,
        "hue": 182,
        "saturation": 92,
        "lightness": 34
    }, {
        "hex": "#027B7F",
        "rgb": "rgb(2, 123, 127)",
        "hsl": "hsl(182, 97%, 25%)",
        "red": 2,
        "green": 123,
        "blue": 127,
        "hue": 182,
        "saturation": 97,
        "lightness": 25
    }, {
        "hex": "#00686C",
        "rgb": "rgb(0, 104, 108)",
        "hsl": "hsl(182, 100%, 21%)",
        "red": 0,
        "green": 104,
        "blue": 108,
        "hue": 182,
        "saturation": 100,
        "lightness": 21
    }, {
        "hex": "#17F9FF",
        "rgb": "rgb(23, 249, 255)",
        "hsl": "hsl(182, 100%, 55%)",
        "red": 23,
        "green": 249,
        "blue": 255,
        "hue": 182,
        "saturation": 100,
        "lightness": 55
    }, {
        "hex": "#A8BCBD",
        "rgb": "rgb(168, 188, 189)",
        "hsl": "hsl(183, 14%, 70%)",
        "red": 168,
        "green": 188,
        "blue": 189,
        "hue": 183,
        "saturation": 14,
        "lightness": 70
    }, {
        "hex": "#283D3E",
        "rgb": "rgb(40, 61, 62)",
        "hsl": "hsl(183, 22%, 20%)",
        "red": 40,
        "green": 61,
        "blue": 62,
        "hue": 183,
        "saturation": 22,
        "lightness": 20
    }, {
        "hex": "#213435",
        "rgb": "rgb(33, 52, 53)",
        "hsl": "hsl(183, 23%, 17%)",
        "red": 33,
        "green": 52,
        "blue": 53,
        "hue": 183,
        "saturation": 23,
        "lightness": 17
    }, {
        "hex": "#A5C8CA",
        "rgb": "rgb(165, 200, 202)",
        "hsl": "hsl(183, 26%, 72%)",
        "red": 165,
        "green": 200,
        "blue": 202,
        "hue": 183,
        "saturation": 26,
        "lightness": 72
    }, {
        "hex": "#5E9FA3",
        "rgb": "rgb(94, 159, 163)",
        "hsl": "hsl(183, 27%, 50%)",
        "red": 94,
        "green": 159,
        "blue": 163,
        "hue": 183,
        "saturation": 27,
        "lightness": 50
    }, {
        "hex": "#43777A",
        "rgb": "rgb(67, 119, 122)",
        "hsl": "hsl(183, 29%, 37%)",
        "red": 67,
        "green": 119,
        "blue": 122,
        "hue": 183,
        "saturation": 29,
        "lightness": 37
    }, {
        "hex": "#429398",
        "rgb": "rgb(66, 147, 152)",
        "hsl": "hsl(183, 39%, 43%)",
        "red": 66,
        "green": 147,
        "blue": 152,
        "hue": 183,
        "saturation": 39,
        "lightness": 43
    }, {
        "hex": "#1B676B",
        "rgb": "rgb(27, 103, 107)",
        "hsl": "hsl(183, 60%, 26%)",
        "red": 27,
        "green": 103,
        "blue": 107,
        "hue": 183,
        "saturation": 60,
        "lightness": 26
    }, {
        "hex": "#31D5DE",
        "rgb": "rgb(49, 213, 222)",
        "hsl": "hsl(183, 72%, 53%)",
        "red": 49,
        "green": 213,
        "blue": 222,
        "hue": 183,
        "saturation": 72,
        "lightness": 53
    }, {
        "hex": "#0E8D94",
        "rgb": "rgb(14, 141, 148)",
        "hsl": "hsl(183, 83%, 32%)",
        "red": 14,
        "green": 141,
        "blue": 148,
        "hue": 183,
        "saturation": 83,
        "lightness": 32
    }, {
        "hex": "#03484C",
        "rgb": "rgb(3, 72, 76)",
        "hsl": "hsl(183, 92%, 15%)",
        "red": 3,
        "green": 72,
        "blue": 76,
        "hue": 183,
        "saturation": 92,
        "lightness": 15
    }, {
        "hex": "#079EA6",
        "rgb": "rgb(7, 158, 166)",
        "hsl": "hsl(183, 92%, 34%)",
        "red": 7,
        "green": 158,
        "blue": 166,
        "hue": 183,
        "saturation": 92,
        "lightness": 34
    }, {
        "hex": "#00C9D2",
        "rgb": "rgb(0, 201, 210)",
        "hsl": "hsl(183, 100%, 41%)",
        "red": 0,
        "green": 201,
        "blue": 210,
        "hue": 183,
        "saturation": 100,
        "lightness": 41
    }, {
        "hex": "#AFFBFF",
        "rgb": "rgb(175, 251, 255)",
        "hsl": "hsl(183, 100%, 84%)",
        "red": 175,
        "green": 251,
        "blue": 255,
        "hue": 183,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#909D9E",
        "rgb": "rgb(144, 157, 158)",
        "hsl": "hsl(184, 7%, 59%)",
        "red": 144,
        "green": 157,
        "blue": 158,
        "hue": 184,
        "saturation": 7,
        "lightness": 59
    }, {
        "hex": "#8D9C9D",
        "rgb": "rgb(141, 156, 157)",
        "hsl": "hsl(184, 8%, 58%)",
        "red": 141,
        "green": 156,
        "blue": 157,
        "hue": 184,
        "saturation": 8,
        "lightness": 58
    }, {
        "hex": "#668284",
        "rgb": "rgb(102, 130, 132)",
        "hsl": "hsl(184, 13%, 46%)",
        "red": 102,
        "green": 130,
        "blue": 132,
        "hue": 184,
        "saturation": 13,
        "lightness": 46
    }, {
        "hex": "#AFCACC",
        "rgb": "rgb(175, 202, 204)",
        "hsl": "hsl(184, 22%, 74%)",
        "red": 175,
        "green": 202,
        "blue": 204,
        "hue": 184,
        "saturation": 22,
        "lightness": 74
    }, {
        "hex": "#B9D7D9",
        "rgb": "rgb(185, 215, 217)",
        "hsl": "hsl(184, 30%, 79%)",
        "red": 185,
        "green": 215,
        "blue": 217,
        "hue": 184,
        "saturation": 30,
        "lightness": 79
    }, {
        "hex": "#61A6AB",
        "rgb": "rgb(97, 166, 171)",
        "hsl": "hsl(184, 31%, 53%)",
        "red": 97,
        "green": 166,
        "blue": 171,
        "hue": 184,
        "saturation": 31,
        "lightness": 53
    }, {
        "hex": "#84BFC3",
        "rgb": "rgb(132, 191, 195)",
        "hsl": "hsl(184, 34%, 64%)",
        "red": 132,
        "green": 191,
        "blue": 195,
        "hue": 184,
        "saturation": 34,
        "lightness": 64
    }, {
        "hex": "#3D7B80",
        "rgb": "rgb(61, 123, 128)",
        "hsl": "hsl(184, 35%, 37%)",
        "red": 61,
        "green": 123,
        "blue": 128,
        "hue": 184,
        "saturation": 35,
        "lightness": 37
    }, {
        "hex": "#6AC5CB",
        "rgb": "rgb(106, 197, 203)",
        "hsl": "hsl(184, 48%, 61%)",
        "red": 106,
        "green": 197,
        "blue": 203,
        "hue": 184,
        "saturation": 48,
        "lightness": 61
    }, {
        "hex": "#195E63",
        "rgb": "rgb(25, 94, 99)",
        "hsl": "hsl(184, 60%, 24%)",
        "red": 25,
        "green": 94,
        "blue": 99,
        "hue": 184,
        "saturation": 60,
        "lightness": 24
    }, {
        "hex": "#269199",
        "rgb": "rgb(38, 145, 153)",
        "hsl": "hsl(184, 60%, 37%)",
        "red": 38,
        "green": 145,
        "blue": 153,
        "hue": 184,
        "saturation": 60,
        "lightness": 37
    }, {
        "hex": "#26979F",
        "rgb": "rgb(38, 151, 159)",
        "hsl": "hsl(184, 61%, 39%)",
        "red": 38,
        "green": 151,
        "blue": 159,
        "hue": 184,
        "saturation": 61,
        "lightness": 39
    }, {
        "hex": "#1E8C93",
        "rgb": "rgb(30, 140, 147)",
        "hsl": "hsl(184, 66%, 35%)",
        "red": 30,
        "green": 140,
        "blue": 147,
        "hue": 184,
        "saturation": 66,
        "lightness": 35
    }, {
        "hex": "#136066",
        "rgb": "rgb(19, 96, 102)",
        "hsl": "hsl(184, 69%, 24%)",
        "red": 19,
        "green": 96,
        "blue": 102,
        "hue": 184,
        "saturation": 69,
        "lightness": 24
    }, {
        "hex": "#0CA5B0",
        "rgb": "rgb(12, 165, 176)",
        "hsl": "hsl(184, 87%, 37%)",
        "red": 12,
        "green": 165,
        "blue": 176,
        "hue": 184,
        "saturation": 87,
        "lightness": 37
    }, {
        "hex": "#09A3AD",
        "rgb": "rgb(9, 163, 173)",
        "hsl": "hsl(184, 90%, 36%)",
        "red": 9,
        "green": 163,
        "blue": 173,
        "hue": 184,
        "saturation": 90,
        "lightness": 36
    }, {
        "hex": "#05676E",
        "rgb": "rgb(5, 103, 110)",
        "hsl": "hsl(184, 91%, 23%)",
        "red": 5,
        "green": 103,
        "blue": 110,
        "hue": 184,
        "saturation": 91,
        "lightness": 23
    }, {
        "hex": "#05A1AD",
        "rgb": "rgb(5, 161, 173)",
        "hsl": "hsl(184, 94%, 35%)",
        "red": 5,
        "green": 161,
        "blue": 173,
        "hue": 184,
        "saturation": 94,
        "lightness": 35
    }, {
        "hex": "#018790",
        "rgb": "rgb(1, 135, 144)",
        "hsl": "hsl(184, 99%, 28%)",
        "red": 1,
        "green": 135,
        "blue": 144,
        "hue": 184,
        "saturation": 99,
        "lightness": 28
    }, {
        "hex": "#001F21",
        "rgb": "rgb(0, 31, 33)",
        "hsl": "hsl(184, 100%, 6%)",
        "red": 0,
        "green": 31,
        "blue": 33,
        "hue": 184,
        "saturation": 100,
        "lightness": 6
    }, {
        "hex": "#B8FAFF",
        "rgb": "rgb(184, 250, 255)",
        "hsl": "hsl(184, 100%, 86%)",
        "red": 184,
        "green": 250,
        "blue": 255,
        "hue": 184,
        "saturation": 100,
        "lightness": 86
    }, {
        "hex": "#B9C3C4",
        "rgb": "rgb(185, 195, 196)",
        "hsl": "hsl(185, 9%, 75%)",
        "red": 185,
        "green": 195,
        "blue": 196,
        "hue": 185,
        "saturation": 9,
        "lightness": 75
    }, {
        "hex": "#2D3839",
        "rgb": "rgb(45, 56, 57)",
        "hsl": "hsl(185, 12%, 20%)",
        "red": 45,
        "green": 56,
        "blue": 57,
        "hue": 185,
        "saturation": 12,
        "lightness": 20
    }, {
        "hex": "#648285",
        "rgb": "rgb(100, 130, 133)",
        "hsl": "hsl(185, 14%, 46%)",
        "red": 100,
        "green": 130,
        "blue": 133,
        "hue": 185,
        "saturation": 14,
        "lightness": 46
    }, {
        "hex": "#689195",
        "rgb": "rgb(104, 145, 149)",
        "hsl": "hsl(185, 18%, 50%)",
        "red": 104,
        "green": 145,
        "blue": 149,
        "hue": 185,
        "saturation": 18,
        "lightness": 50
    }, {
        "hex": "#53777A",
        "rgb": "rgb(83, 119, 122)",
        "hsl": "hsl(185, 19%, 40%)",
        "red": 83,
        "green": 119,
        "blue": 122,
        "hue": 185,
        "saturation": 19,
        "lightness": 40
    }, {
        "hex": "#EBF7F8",
        "rgb": "rgb(235, 247, 248)",
        "hsl": "hsl(185, 48%, 95%)",
        "red": 235,
        "green": 247,
        "blue": 248,
        "hue": 185,
        "saturation": 48,
        "lightness": 95
    }, {
        "hex": "#CEECEF",
        "rgb": "rgb(206, 236, 239)",
        "hsl": "hsl(185, 51%, 87%)",
        "red": 206,
        "green": 236,
        "blue": 239,
        "hue": 185,
        "saturation": 51,
        "lightness": 87
    }, {
        "hex": "#40C0CB",
        "rgb": "rgb(64, 192, 203)",
        "hsl": "hsl(185, 57%, 52%)",
        "red": 64,
        "green": 192,
        "blue": 203,
        "hue": 185,
        "saturation": 57,
        "lightness": 52
    }, {
        "hex": "#207178",
        "rgb": "rgb(32, 113, 120)",
        "hsl": "hsl(185, 58%, 30%)",
        "red": 32,
        "green": 113,
        "blue": 120,
        "hue": 185,
        "saturation": 58,
        "lightness": 30
    }, {
        "hex": "#13747D",
        "rgb": "rgb(19, 116, 125)",
        "hsl": "hsl(185, 74%, 28%)",
        "red": 19,
        "green": 116,
        "blue": 125,
        "hue": 185,
        "saturation": 74,
        "lightness": 28
    }, {
        "hex": "#0AABBA",
        "rgb": "rgb(10, 171, 186)",
        "hsl": "hsl(185, 90%, 38%)",
        "red": 10,
        "green": 171,
        "blue": 186,
        "hue": 185,
        "saturation": 90,
        "lightness": 38
    }, {
        "hex": "#00A0B0",
        "rgb": "rgb(0, 160, 176)",
        "hsl": "hsl(185, 100%, 35%)",
        "red": 0,
        "green": 160,
        "blue": 176,
        "hue": 185,
        "saturation": 100,
        "lightness": 35
    }, {
        "hex": "#E8FDFF",
        "rgb": "rgb(232, 253, 255)",
        "hsl": "hsl(185, 100%, 95%)",
        "red": 232,
        "green": 253,
        "blue": 255,
        "hue": 185,
        "saturation": 100,
        "lightness": 95
    }, {
        "hex": "#69A2A8",
        "rgb": "rgb(105, 162, 168)",
        "hsl": "hsl(186, 27%, 54%)",
        "red": 105,
        "green": 162,
        "blue": 168,
        "hue": 186,
        "saturation": 27,
        "lightness": 54
    }, {
        "hex": "#44878F",
        "rgb": "rgb(68, 135, 143)",
        "hsl": "hsl(186, 36%, 41%)",
        "red": 68,
        "green": 135,
        "blue": 143,
        "hue": 186,
        "saturation": 36,
        "lightness": 41
    }, {
        "hex": "#58AFB8",
        "rgb": "rgb(88, 175, 184)",
        "hsl": "hsl(186, 40%, 53%)",
        "red": 88,
        "green": 175,
        "blue": 184,
        "hue": 186,
        "saturation": 40,
        "lightness": 53
    }, {
        "hex": "#3EA3AF",
        "rgb": "rgb(62, 163, 175)",
        "hsl": "hsl(186, 48%, 46%)",
        "red": 62,
        "green": 163,
        "blue": 175,
        "hue": 186,
        "saturation": 48,
        "lightness": 46
    }, {
        "hex": "#185B63",
        "rgb": "rgb(24, 91, 99)",
        "hsl": "hsl(186, 61%, 24%)",
        "red": 24,
        "green": 91,
        "blue": 99,
        "hue": 186,
        "saturation": 61,
        "lightness": 24
    }, {
        "hex": "#2197A3",
        "rgb": "rgb(33, 151, 163)",
        "hsl": "hsl(186, 66%, 38%)",
        "red": 33,
        "green": 151,
        "blue": 163,
        "hue": 186,
        "saturation": 66,
        "lightness": 38
    }, {
        "hex": "#27B1BF",
        "rgb": "rgb(39, 177, 191)",
        "hsl": "hsl(186, 66%, 45%)",
        "red": 39,
        "green": 177,
        "blue": 191,
        "hue": 186,
        "saturation": 66,
        "lightness": 45
    }, {
        "hex": "#029DAF",
        "rgb": "rgb(2, 157, 175)",
        "hsl": "hsl(186, 98%, 35%)",
        "red": 2,
        "green": 157,
        "blue": 175,
        "hue": 186,
        "saturation": 98,
        "lightness": 35
    }, {
        "hex": "#3B4344",
        "rgb": "rgb(59, 67, 68)",
        "hsl": "hsl(187, 7%, 25%)",
        "red": 59,
        "green": 67,
        "blue": 68,
        "hue": 187,
        "saturation": 7,
        "lightness": 25
    }, {
        "hex": "#54787D",
        "rgb": "rgb(84, 120, 125)",
        "hsl": "hsl(187, 20%, 41%)",
        "red": 84,
        "green": 120,
        "blue": 125,
        "hue": 187,
        "saturation": 20,
        "lightness": 41
    }, {
        "hex": "#AECED2",
        "rgb": "rgb(174, 206, 210)",
        "hsl": "hsl(187, 29%, 75%)",
        "red": 174,
        "green": 206,
        "blue": 210,
        "hue": 187,
        "saturation": 29,
        "lightness": 75
    }, {
        "hex": "#E0EFF1",
        "rgb": "rgb(224, 239, 241)",
        "hsl": "hsl(187, 38%, 91%)",
        "red": 224,
        "green": 239,
        "blue": 241,
        "hue": 187,
        "saturation": 38,
        "lightness": 91
    }, {
        "hex": "#3E838C",
        "rgb": "rgb(62, 131, 140)",
        "hsl": "hsl(187, 39%, 40%)",
        "red": 62,
        "green": 131,
        "blue": 140,
        "hue": 187,
        "saturation": 39,
        "lightness": 40
    }, {
        "hex": "#45AAB8",
        "rgb": "rgb(69, 170, 184)",
        "hsl": "hsl(187, 45%, 50%)",
        "red": 69,
        "green": 170,
        "blue": 184,
        "hue": 187,
        "saturation": 45,
        "lightness": 50
    }, {
        "hex": "#45B5C4",
        "rgb": "rgb(69, 181, 196)",
        "hsl": "hsl(187, 52%, 52%)",
        "red": 69,
        "green": 181,
        "blue": 196,
        "hue": 187,
        "saturation": 52,
        "lightness": 52
    }, {
        "hex": "#2B818C",
        "rgb": "rgb(43, 129, 140)",
        "hsl": "hsl(187, 53%, 36%)",
        "red": 43,
        "green": 129,
        "blue": 140,
        "hue": 187,
        "saturation": 53,
        "lightness": 36
    }, {
        "hex": "#063940",
        "rgb": "rgb(6, 57, 64)",
        "hsl": "hsl(187, 83%, 14%)",
        "red": 6,
        "green": 57,
        "blue": 64,
        "hue": 187,
        "saturation": 83,
        "lightness": 14
    }, {
        "hex": "#002E34",
        "rgb": "rgb(0, 46, 52)",
        "hsl": "hsl(187, 100%, 10%)",
        "red": 0,
        "green": 46,
        "blue": 52,
        "hue": 187,
        "saturation": 100,
        "lightness": 10
    }, {
        "hex": "#005F6B",
        "rgb": "rgb(0, 95, 107)",
        "hsl": "hsl(187, 100%, 21%)",
        "red": 0,
        "green": 95,
        "blue": 107,
        "hue": 187,
        "saturation": 100,
        "lightness": 21
    }, {
        "hex": "#008C9E",
        "rgb": "rgb(0, 140, 158)",
        "hsl": "hsl(187, 100%, 31%)",
        "red": 0,
        "green": 140,
        "blue": 158,
        "hue": 187,
        "saturation": 100,
        "lightness": 31
    }, {
        "hex": "#00B4CC",
        "rgb": "rgb(0, 180, 204)",
        "hsl": "hsl(187, 100%, 40%)",
        "red": 0,
        "green": 180,
        "blue": 204,
        "hue": 187,
        "saturation": 100,
        "lightness": 40
    }, {
        "hex": "#00DFFC",
        "rgb": "rgb(0, 223, 252)",
        "hsl": "hsl(187, 100%, 49%)",
        "red": 0,
        "green": 223,
        "blue": 252,
        "hue": 187,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#60ECFF",
        "rgb": "rgb(96, 236, 255)",
        "hsl": "hsl(187, 100%, 69%)",
        "red": 96,
        "green": 236,
        "blue": 255,
        "hue": 187,
        "saturation": 100,
        "lightness": 69
    }, {
        "hex": "#85AAB0",
        "rgb": "rgb(133, 170, 176)",
        "hsl": "hsl(188, 21%, 61%)",
        "red": 133,
        "green": 170,
        "blue": 176,
        "hue": 188,
        "saturation": 21,
        "lightness": 61
    }, {
        "hex": "#334F53",
        "rgb": "rgb(51, 79, 83)",
        "hsl": "hsl(188, 24%, 26%)",
        "red": 51,
        "green": 79,
        "blue": 83,
        "hue": 188,
        "saturation": 24,
        "lightness": 26
    }, {
        "hex": "#649EA7",
        "rgb": "rgb(100, 158, 167)",
        "hsl": "hsl(188, 28%, 52%)",
        "red": 100,
        "green": 158,
        "blue": 167,
        "hue": 188,
        "saturation": 28,
        "lightness": 52
    }, {
        "hex": "#6AABB5",
        "rgb": "rgb(106, 171, 181)",
        "hsl": "hsl(188, 34%, 56%)",
        "red": 106,
        "green": 171,
        "blue": 181,
        "hue": 188,
        "saturation": 34,
        "lightness": 56
    }, {
        "hex": "#2C6B74",
        "rgb": "rgb(44, 107, 116)",
        "hsl": "hsl(188, 45%, 31%)",
        "red": 44,
        "green": 107,
        "blue": 116,
        "hue": 188,
        "saturation": 45,
        "lightness": 31
    }, {
        "hex": "#D1EAEE",
        "rgb": "rgb(209, 234, 238)",
        "hsl": "hsl(188, 46%, 88%)",
        "red": 209,
        "green": 234,
        "blue": 238,
        "hue": 188,
        "saturation": 46,
        "lightness": 88
    }, {
        "hex": "#2A6E78",
        "rgb": "rgb(42, 110, 120)",
        "hsl": "hsl(188, 48%, 32%)",
        "red": 42,
        "green": 110,
        "blue": 120,
        "hue": 188,
        "saturation": 48,
        "lightness": 32
    }, {
        "hex": "#1B8798",
        "rgb": "rgb(27, 135, 152)",
        "hsl": "hsl(188, 70%, 35%)",
        "red": 27,
        "green": 135,
        "blue": 152,
        "hue": 188,
        "saturation": 70,
        "lightness": 35
    }, {
        "hex": "#1693A5",
        "rgb": "rgb(22, 147, 165)",
        "hsl": "hsl(188, 76%, 37%)",
        "red": 22,
        "green": 147,
        "blue": 165,
        "hue": 188,
        "saturation": 76,
        "lightness": 37
    }, {
        "hex": "#1693A5",
        "rgb": "rgb(22, 147, 165)",
        "hsl": "hsl(188, 76%, 37%)",
        "red": 22,
        "green": 147,
        "blue": 165,
        "hue": 188,
        "saturation": 76,
        "lightness": 37
    }, {
        "hex": "#158FA2",
        "rgb": "rgb(21, 143, 162)",
        "hsl": "hsl(188, 77%, 36%)",
        "red": 21,
        "green": 143,
        "blue": 162,
        "hue": 188,
        "saturation": 77,
        "lightness": 36
    }, {
        "hex": "#1693A7",
        "rgb": "rgb(22, 147, 167)",
        "hsl": "hsl(188, 77%, 37%)",
        "red": 22,
        "green": 147,
        "blue": 167,
        "hue": 188,
        "saturation": 77,
        "lightness": 37
    }, {
        "hex": "#00272D",
        "rgb": "rgb(0, 39, 45)",
        "hsl": "hsl(188, 100%, 9%)",
        "red": 0,
        "green": 39,
        "blue": 45,
        "hue": 188,
        "saturation": 100,
        "lightness": 9
    }, {
        "hex": "#004853",
        "rgb": "rgb(0, 72, 83)",
        "hsl": "hsl(188, 100%, 16%)",
        "red": 0,
        "green": 72,
        "blue": 83,
        "hue": 188,
        "saturation": 100,
        "lightness": 16
    }, {
        "hex": "#8F9A9C",
        "rgb": "rgb(143, 154, 156)",
        "hsl": "hsl(189, 6%, 59%)",
        "red": 143,
        "green": 154,
        "blue": 156,
        "hue": 189,
        "saturation": 6,
        "lightness": 59
    }, {
        "hex": "#BDCDD0",
        "rgb": "rgb(189, 205, 208)",
        "hsl": "hsl(189, 17%, 78%)",
        "red": 189,
        "green": 205,
        "blue": 208,
        "hue": 189,
        "saturation": 17,
        "lightness": 78
    }, {
        "hex": "#CBDCDF",
        "rgb": "rgb(203, 220, 223)",
        "hsl": "hsl(189, 24%, 84%)",
        "red": 203,
        "green": 220,
        "blue": 223,
        "hue": 189,
        "saturation": 24,
        "lightness": 84
    }, {
        "hex": "#72A5AE",
        "rgb": "rgb(114, 165, 174)",
        "hsl": "hsl(189, 27%, 56%)",
        "red": 114,
        "green": 165,
        "blue": 174,
        "hue": 189,
        "saturation": 27,
        "lightness": 56
    }, {
        "hex": "#B1E1E9",
        "rgb": "rgb(177, 225, 233)",
        "hsl": "hsl(189, 56%, 80%)",
        "red": 177,
        "green": 225,
        "blue": 233,
        "hue": 189,
        "saturation": 56,
        "lightness": 80
    }, {
        "hex": "#1D5E69",
        "rgb": "rgb(29, 94, 105)",
        "hsl": "hsl(189, 57%, 26%)",
        "red": 29,
        "green": 94,
        "blue": 105,
        "hue": 189,
        "saturation": 57,
        "lightness": 26
    }, {
        "hex": "#13444D",
        "rgb": "rgb(19, 68, 77)",
        "hsl": "hsl(189, 60%, 19%)",
        "red": 19,
        "green": 68,
        "blue": 77,
        "hue": 189,
        "saturation": 60,
        "lightness": 19
    }, {
        "hex": "#2B9EB3",
        "rgb": "rgb(43, 158, 179)",
        "hsl": "hsl(189, 61%, 44%)",
        "red": 43,
        "green": 158,
        "blue": 179,
        "hue": 189,
        "saturation": 61,
        "lightness": 44
    }, {
        "hex": "#5ECDE0",
        "rgb": "rgb(94, 205, 224)",
        "hsl": "hsl(189, 68%, 62%)",
        "red": 94,
        "green": 205,
        "blue": 224,
        "hue": 189,
        "saturation": 68,
        "lightness": 62
    }, {
        "hex": "#157A8C",
        "rgb": "rgb(21, 122, 140)",
        "hsl": "hsl(189, 74%, 32%)",
        "red": 21,
        "green": 122,
        "blue": 140,
        "hue": 189,
        "saturation": 74,
        "lightness": 32
    }, {
        "hex": "#05D3F8",
        "rgb": "rgb(5, 211, 248)",
        "hsl": "hsl(189, 96%, 50%)",
        "red": 5,
        "green": 211,
        "blue": 248,
        "hue": 189,
        "saturation": 96,
        "lightness": 50
    }, {
        "hex": "#002930",
        "rgb": "rgb(0, 41, 48)",
        "hsl": "hsl(189, 100%, 9%)",
        "red": 0,
        "green": 41,
        "blue": 48,
        "hue": 189,
        "saturation": 100,
        "lightness": 9
    }, {
        "hex": "#00A8C6",
        "rgb": "rgb(0, 168, 198)",
        "hsl": "hsl(189, 100%, 39%)",
        "red": 0,
        "green": 168,
        "blue": 198,
        "hue": 189,
        "saturation": 100,
        "lightness": 39
    }, {
        "hex": "#99B2B7",
        "rgb": "rgb(153, 178, 183)",
        "hsl": "hsl(190, 17%, 66%)",
        "red": 153,
        "green": 178,
        "blue": 183,
        "hue": 190,
        "saturation": 17,
        "lightness": 66
    }, {
        "hex": "#2E4347",
        "rgb": "rgb(46, 67, 71)",
        "hsl": "hsl(190, 21%, 23%)",
        "red": 46,
        "green": 67,
        "blue": 71,
        "hue": 190,
        "saturation": 21,
        "lightness": 23
    }, {
        "hex": "#547980",
        "rgb": "rgb(84, 121, 128)",
        "hsl": "hsl(190, 21%, 42%)",
        "red": 84,
        "green": 121,
        "blue": 128,
        "hue": 190,
        "saturation": 21,
        "lightness": 42
    }, {
        "hex": "#538A95",
        "rgb": "rgb(83, 138, 149)",
        "hsl": "hsl(190, 28%, 45%)",
        "red": 83,
        "green": 138,
        "blue": 149,
        "hue": 190,
        "saturation": 28,
        "lightness": 45
    }, {
        "hex": "#1C5560",
        "rgb": "rgb(28, 85, 96)",
        "hsl": "hsl(190, 55%, 24%)",
        "red": 28,
        "green": 85,
        "blue": 96,
        "hue": 190,
        "saturation": 55,
        "lightness": 24
    }, {
        "hex": "#4BB4CA",
        "rgb": "rgb(75, 180, 202)",
        "hsl": "hsl(190, 55%, 54%)",
        "red": 75,
        "green": 180,
        "blue": 202,
        "hue": 190,
        "saturation": 55,
        "lightness": 54
    }, {
        "hex": "#69D2E7",
        "rgb": "rgb(105, 210, 231)",
        "hsl": "hsl(190, 72%, 66%)",
        "red": 105,
        "green": 210,
        "blue": 231,
        "hue": 190,
        "saturation": 72,
        "lightness": 66
    }, {
        "hex": "#0A3740",
        "rgb": "rgb(10, 55, 64)",
        "hsl": "hsl(190, 73%, 15%)",
        "red": 10,
        "green": 55,
        "blue": 64,
        "hue": 190,
        "saturation": 73,
        "lightness": 15
    }, {
        "hex": "#1BB0CE",
        "rgb": "rgb(27, 176, 206)",
        "hsl": "hsl(190, 77%, 46%)",
        "red": 27,
        "green": 176,
        "blue": 206,
        "hue": 190,
        "saturation": 77,
        "lightness": 46
    }, {
        "hex": "#0FC3E8",
        "rgb": "rgb(15, 195, 232)",
        "hsl": "hsl(190, 88%, 48%)",
        "red": 15,
        "green": 195,
        "blue": 232,
        "hue": 190,
        "saturation": 88,
        "lightness": 48
    }, {
        "hex": "#00CEF5",
        "rgb": "rgb(0, 206, 245)",
        "hsl": "hsl(190, 100%, 48%)",
        "red": 0,
        "green": 206,
        "blue": 245,
        "hue": 190,
        "saturation": 100,
        "lightness": 48
    }, {
        "hex": "#657275",
        "rgb": "rgb(101, 114, 117)",
        "hsl": "hsl(191, 7%, 43%)",
        "red": 101,
        "green": 114,
        "blue": 117,
        "hue": 191,
        "saturation": 7,
        "lightness": 43
    }, {
        "hex": "#506266",
        "rgb": "rgb(80, 98, 102)",
        "hsl": "hsl(191, 12%, 36%)",
        "red": 80,
        "green": 98,
        "blue": 102,
        "hue": 191,
        "saturation": 12,
        "lightness": 36
    }, {
        "hex": "#8BA6AC",
        "rgb": "rgb(139, 166, 172)",
        "hsl": "hsl(191, 17%, 61%)",
        "red": 139,
        "green": 166,
        "blue": 172,
        "hue": 191,
        "saturation": 17,
        "lightness": 61
    }, {
        "hex": "#0B1D21",
        "rgb": "rgb(11, 29, 33)",
        "hsl": "hsl(191, 50%, 9%)",
        "red": 11,
        "green": 29,
        "blue": 33,
        "hue": 191,
        "saturation": 50,
        "lightness": 9
    }, {
        "hex": "#9DD3DF",
        "rgb": "rgb(157, 211, 223)",
        "hsl": "hsl(191, 51%, 75%)",
        "red": 157,
        "green": 211,
        "blue": 223,
        "hue": 191,
        "saturation": 51,
        "lightness": 75
    }, {
        "hex": "#1EC3EA",
        "rgb": "rgb(30, 195, 234)",
        "hsl": "hsl(191, 83%, 52%)",
        "red": 30,
        "green": 195,
        "blue": 234,
        "hue": 191,
        "saturation": 83,
        "lightness": 52
    }, {
        "hex": "#09738A",
        "rgb": "rgb(9, 115, 138)",
        "hsl": "hsl(191, 88%, 29%)",
        "red": 9,
        "green": 115,
        "blue": 138,
        "hue": 191,
        "saturation": 88,
        "lightness": 29
    }, {
        "hex": "#00CAF8",
        "rgb": "rgb(0, 202, 248)",
        "hsl": "hsl(191, 100%, 49%)",
        "red": 0,
        "green": 202,
        "blue": 248,
        "hue": 191,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#C9D1D3",
        "rgb": "rgb(201, 209, 211)",
        "hsl": "hsl(192, 10%, 81%)",
        "red": 201,
        "green": 209,
        "blue": 211,
        "hue": 192,
        "saturation": 10,
        "lightness": 81
    }, {
        "hex": "#4D686F",
        "rgb": "rgb(77, 104, 111)",
        "hsl": "hsl(192, 18%, 37%)",
        "red": 77,
        "green": 104,
        "blue": 111,
        "hue": 192,
        "saturation": 18,
        "lightness": 37
    }, {
        "hex": "#A8BDC2",
        "rgb": "rgb(168, 189, 194)",
        "hsl": "hsl(192, 18%, 71%)",
        "red": 168,
        "green": 189,
        "blue": 194,
        "hue": 192,
        "saturation": 18,
        "lightness": 71
    }, {
        "hex": "#314C53",
        "rgb": "rgb(49, 76, 83)",
        "hsl": "hsl(192, 26%, 26%)",
        "red": 49,
        "green": 76,
        "blue": 83,
        "hue": 192,
        "saturation": 26,
        "lightness": 26
    }, {
        "hex": "#24434B",
        "rgb": "rgb(36, 67, 75)",
        "hsl": "hsl(192, 35%, 22%)",
        "red": 36,
        "green": 67,
        "blue": 75,
        "hue": 192,
        "saturation": 35,
        "lightness": 22
    }, {
        "hex": "#CBE4EA",
        "rgb": "rgb(203, 228, 234)",
        "hsl": "hsl(192, 42%, 86%)",
        "red": 203,
        "green": 228,
        "blue": 234,
        "hue": 192,
        "saturation": 42,
        "lightness": 86
    }, {
        "hex": "#2B879E",
        "rgb": "rgb(43, 135, 158)",
        "hsl": "hsl(192, 57%, 39%)",
        "red": 43,
        "green": 135,
        "blue": 158,
        "hue": 192,
        "saturation": 57,
        "lightness": 39
    }, {
        "hex": "#88A1A8",
        "rgb": "rgb(136, 161, 168)",
        "hsl": "hsl(193, 16%, 60%)",
        "red": 136,
        "green": 161,
        "blue": 168,
        "hue": 193,
        "saturation": 16,
        "lightness": 60
    }, {
        "hex": "#466067",
        "rgb": "rgb(70, 96, 103)",
        "hsl": "hsl(193, 19%, 34%)",
        "red": 70,
        "green": 96,
        "blue": 103,
        "hue": 193,
        "saturation": 19,
        "lightness": 34
    }, {
        "hex": "#89ABB4",
        "rgb": "rgb(137, 171, 180)",
        "hsl": "hsl(193, 22%, 62%)",
        "red": 137,
        "green": 171,
        "blue": 180,
        "hue": 193,
        "saturation": 22,
        "lightness": 62
    }, {
        "hex": "#A9C2C9",
        "rgb": "rgb(169, 194, 201)",
        "hsl": "hsl(193, 23%, 73%)",
        "red": 169,
        "green": 194,
        "blue": 201,
        "hue": 193,
        "saturation": 23,
        "lightness": 73
    }, {
        "hex": "#2C4D56",
        "rgb": "rgb(44, 77, 86)",
        "hsl": "hsl(193, 32%, 25%)",
        "red": 44,
        "green": 77,
        "blue": 86,
        "hue": 193,
        "saturation": 32,
        "lightness": 25
    }, {
        "hex": "#5CCEEE",
        "rgb": "rgb(92, 206, 238)",
        "hsl": "hsl(193, 81%, 65%)",
        "red": 92,
        "green": 206,
        "blue": 238,
        "hue": 193,
        "saturation": 81,
        "lightness": 65
    }, {
        "hex": "#24C0EB",
        "rgb": "rgb(36, 192, 235)",
        "hsl": "hsl(193, 83%, 53%)",
        "red": 36,
        "green": 192,
        "blue": 235,
        "hue": 193,
        "saturation": 83,
        "lightness": 53
    }, {
        "hex": "#046D8B",
        "rgb": "rgb(4, 109, 139)",
        "hsl": "hsl(193, 94%, 28%)",
        "red": 4,
        "green": 109,
        "blue": 139,
        "hue": 193,
        "saturation": 94,
        "lightness": 28
    }, {
        "hex": "#0194BE",
        "rgb": "rgb(1, 148, 190)",
        "hsl": "hsl(193, 99%, 37%)",
        "red": 1,
        "green": 148,
        "blue": 190,
        "hue": 193,
        "saturation": 99,
        "lightness": 37
    }, {
        "hex": "#003E4F",
        "rgb": "rgb(0, 62, 79)",
        "hsl": "hsl(193, 100%, 15%)",
        "red": 0,
        "green": 62,
        "blue": 79,
        "hue": 193,
        "saturation": 100,
        "lightness": 15
    }, {
        "hex": "#6BACBF",
        "rgb": "rgb(107, 172, 191)",
        "hsl": "hsl(194, 40%, 58%)",
        "red": 107,
        "green": 172,
        "blue": 191,
        "hue": 194,
        "saturation": 40,
        "lightness": 58
    }, {
        "hex": "#5CACC4",
        "rgb": "rgb(92, 172, 196)",
        "hsl": "hsl(194, 47%, 56%)",
        "red": 92,
        "green": 172,
        "blue": 196,
        "hue": 194,
        "saturation": 47,
        "lightness": 56
    }, {
        "hex": "#061013",
        "rgb": "rgb(6, 16, 19)",
        "hsl": "hsl(194, 52%, 5%)",
        "red": 6,
        "green": 16,
        "blue": 19,
        "hue": 194,
        "saturation": 52,
        "lightness": 5
    }, {
        "hex": "#2E97B7",
        "rgb": "rgb(46, 151, 183)",
        "hsl": "hsl(194, 60%, 45%)",
        "red": 46,
        "green": 151,
        "blue": 183,
        "hue": 194,
        "saturation": 60,
        "lightness": 45
    }, {
        "hex": "#2790B0",
        "rgb": "rgb(39, 144, 176)",
        "hsl": "hsl(194, 64%, 42%)",
        "red": 39,
        "green": 144,
        "blue": 176,
        "hue": 194,
        "saturation": 64,
        "lightness": 42
    }, {
        "hex": "#96D7EB",
        "rgb": "rgb(150, 215, 235)",
        "hsl": "hsl(194, 68%, 75%)",
        "red": 150,
        "green": 215,
        "blue": 235,
        "hue": 194,
        "saturation": 68,
        "lightness": 75
    }, {
        "hex": "#106B87",
        "rgb": "rgb(16, 107, 135)",
        "hsl": "hsl(194, 79%, 30%)",
        "red": 16,
        "green": 107,
        "blue": 135,
        "hue": 194,
        "saturation": 79,
        "lightness": 30
    }, {
        "hex": "#50595C",
        "rgb": "rgb(80, 89, 92)",
        "hsl": "hsl(195, 7%, 34%)",
        "red": 80,
        "green": 89,
        "blue": 92,
        "hue": 195,
        "saturation": 7,
        "lightness": 34
    }, {
        "hex": "#6F8B94",
        "rgb": "rgb(111, 139, 148)",
        "hsl": "hsl(195, 15%, 51%)",
        "red": 111,
        "green": 139,
        "blue": 148,
        "hue": 195,
        "saturation": 15,
        "lightness": 51
    }, {
        "hex": "#7A959E",
        "rgb": "rgb(122, 149, 158)",
        "hsl": "hsl(195, 16%, 55%)",
        "red": 122,
        "green": 149,
        "blue": 158,
        "hue": 195,
        "saturation": 16,
        "lightness": 55
    }, {
        "hex": "#B8C7CC",
        "rgb": "rgb(184, 199, 204)",
        "hsl": "hsl(195, 16%, 76%)",
        "red": 184,
        "green": 199,
        "blue": 204,
        "hue": 195,
        "saturation": 16,
        "lightness": 76
    }, {
        "hex": "#89A7B1",
        "rgb": "rgb(137, 167, 177)",
        "hsl": "hsl(195, 20%, 62%)",
        "red": 137,
        "green": 167,
        "blue": 177,
        "hue": 195,
        "saturation": 20,
        "lightness": 62
    }, {
        "hex": "#9FB9C2",
        "rgb": "rgb(159, 185, 194)",
        "hsl": "hsl(195, 22%, 69%)",
        "red": 159,
        "green": 185,
        "blue": 194,
        "hue": 195,
        "saturation": 22,
        "lightness": 69
    }, {
        "hex": "#4F8699",
        "rgb": "rgb(79, 134, 153)",
        "hsl": "hsl(195, 32%, 45%)",
        "red": 79,
        "green": 134,
        "blue": 153,
        "hue": 195,
        "saturation": 32,
        "lightness": 45
    }, {
        "hex": "#215A6D",
        "rgb": "rgb(33, 90, 109)",
        "hsl": "hsl(195, 54%, 28%)",
        "red": 33,
        "green": 90,
        "blue": 109,
        "hue": 195,
        "saturation": 54,
        "lightness": 28
    }, {
        "hex": "#194756",
        "rgb": "rgb(25, 71, 86)",
        "hsl": "hsl(195, 55%, 22%)",
        "red": 25,
        "green": 71,
        "blue": 86,
        "hue": 195,
        "saturation": 55,
        "lightness": 22
    }, {
        "hex": "#3299BB",
        "rgb": "rgb(50, 153, 187)",
        "hsl": "hsl(195, 58%, 46%)",
        "red": 50,
        "green": 153,
        "blue": 187,
        "hue": 195,
        "saturation": 58,
        "lightness": 46
    }, {
        "hex": "#095169",
        "rgb": "rgb(9, 81, 105)",
        "hsl": "hsl(195, 84%, 22%)",
        "red": 9,
        "green": 81,
        "blue": 105,
        "hue": 195,
        "saturation": 84,
        "lightness": 22
    }, {
        "hex": "#02779E",
        "rgb": "rgb(2, 119, 158)",
        "hsl": "hsl(195, 98%, 31%)",
        "red": 2,
        "green": 119,
        "blue": 158,
        "hue": 195,
        "saturation": 98,
        "lightness": 31
    }, {
        "hex": "#6D7578",
        "rgb": "rgb(109, 117, 120)",
        "hsl": "hsl(196, 5%, 45%)",
        "red": 109,
        "green": 117,
        "blue": 120,
        "hue": 196,
        "saturation": 5,
        "lightness": 45
    }, {
        "hex": "#678C99",
        "rgb": "rgb(103, 140, 153)",
        "hsl": "hsl(196, 20%, 50%)",
        "red": 103,
        "green": 140,
        "blue": 153,
        "hue": 196,
        "saturation": 20,
        "lightness": 50
    }, {
        "hex": "#2D6073",
        "rgb": "rgb(45, 96, 115)",
        "hsl": "hsl(196, 44%, 31%)",
        "red": 45,
        "green": 96,
        "blue": 115,
        "hue": 196,
        "saturation": 44,
        "lightness": 31
    }, {
        "hex": "#8AC7DE",
        "rgb": "rgb(138, 199, 222)",
        "hsl": "hsl(196, 56%, 71%)",
        "red": 138,
        "green": 199,
        "blue": 222,
        "hue": 196,
        "saturation": 56,
        "lightness": 71
    }, {
        "hex": "#0A6789",
        "rgb": "rgb(10, 103, 137)",
        "hsl": "hsl(196, 86%, 29%)",
        "red": 10,
        "green": 103,
        "blue": 137,
        "hue": 196,
        "saturation": 86,
        "lightness": 29
    }, {
        "hex": "#033649",
        "rgb": "rgb(3, 54, 73)",
        "hsl": "hsl(196, 92%, 15%)",
        "red": 3,
        "green": 54,
        "blue": 73,
        "hue": 196,
        "saturation": 92,
        "lightness": 15
    }, {
        "hex": "#038BBB",
        "rgb": "rgb(3, 139, 187)",
        "hsl": "hsl(196, 97%, 37%)",
        "red": 3,
        "green": 139,
        "blue": 187,
        "hue": 196,
        "saturation": 97,
        "lightness": 37
    }, {
        "hex": "#616668",
        "rgb": "rgb(97, 102, 104)",
        "hsl": "hsl(197, 3%, 39%)",
        "red": 97,
        "green": 102,
        "blue": 104,
        "hue": 197,
        "saturation": 3,
        "lightness": 39
    }, {
        "hex": "#4A5F67",
        "rgb": "rgb(74, 95, 103)",
        "hsl": "hsl(197, 16%, 35%)",
        "red": 74,
        "green": 95,
        "blue": 103,
        "hue": 197,
        "saturation": 16,
        "lightness": 35
    }, {
        "hex": "#176585",
        "rgb": "rgb(23, 101, 133)",
        "hsl": "hsl(197, 71%, 31%)",
        "red": 23,
        "green": 101,
        "blue": 133,
        "hue": 197,
        "saturation": 71,
        "lightness": 31
    }, {
        "hex": "#26ADE4",
        "rgb": "rgb(38, 173, 228)",
        "hsl": "hsl(197, 78%, 52%)",
        "red": 38,
        "green": 173,
        "blue": 228,
        "hue": 197,
        "saturation": 78,
        "lightness": 52
    }, {
        "hex": "#4DBCE9",
        "rgb": "rgb(77, 188, 233)",
        "hsl": "hsl(197, 78%, 61%)",
        "red": 77,
        "green": 188,
        "blue": 233,
        "hue": 197,
        "saturation": 78,
        "lightness": 61
    }, {
        "hex": "#0A516D",
        "rgb": "rgb(10, 81, 109)",
        "hsl": "hsl(197, 83%, 23%)",
        "red": 10,
        "green": 81,
        "blue": 109,
        "hue": 197,
        "saturation": 83,
        "lightness": 23
    }, {
        "hex": "#04394E",
        "rgb": "rgb(4, 57, 78)",
        "hsl": "hsl(197, 90%, 16%)",
        "red": 4,
        "green": 57,
        "blue": 78,
        "hue": 197,
        "saturation": 90,
        "lightness": 16
    }, {
        "hex": "#005C81",
        "rgb": "rgb(0, 92, 129)",
        "hsl": "hsl(197, 100%, 25%)",
        "red": 0,
        "green": 92,
        "blue": 129,
        "hue": 197,
        "saturation": 100,
        "lightness": 25
    }, {
        "hex": "#009DDD",
        "rgb": "rgb(0, 157, 221)",
        "hsl": "hsl(197, 100%, 43%)",
        "red": 0,
        "green": 157,
        "blue": 221,
        "hue": 197,
        "saturation": 100,
        "lightness": 43
    }, {
        "hex": "#00B4FC",
        "rgb": "rgb(0, 180, 252)",
        "hsl": "hsl(197, 100%, 49%)",
        "red": 0,
        "green": 180,
        "blue": 252,
        "hue": 197,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#63D3FF",
        "rgb": "rgb(99, 211, 255)",
        "hsl": "hsl(197, 100%, 69%)",
        "red": 99,
        "green": 211,
        "blue": 255,
        "hue": 197,
        "saturation": 100,
        "lightness": 69
    }, {
        "hex": "#899AA1",
        "rgb": "rgb(137, 154, 161)",
        "hsl": "hsl(198, 11%, 58%)",
        "red": 137,
        "green": 154,
        "blue": 161,
        "hue": 198,
        "saturation": 11,
        "lightness": 58
    }, {
        "hex": "#1E2528",
        "rgb": "rgb(30, 37, 40)",
        "hsl": "hsl(198, 14%, 14%)",
        "red": 30,
        "green": 37,
        "blue": 40,
        "hue": 198,
        "saturation": 14,
        "lightness": 14
    }, {
        "hex": "#2A363B",
        "rgb": "rgb(42, 54, 59)",
        "hsl": "hsl(198, 17%, 20%)",
        "red": 42,
        "green": 54,
        "blue": 59,
        "hue": 198,
        "saturation": 17,
        "lightness": 20
    }, {
        "hex": "#295264",
        "rgb": "rgb(41, 82, 100)",
        "hsl": "hsl(198, 42%, 28%)",
        "red": 41,
        "green": 82,
        "blue": 100,
        "hue": 198,
        "saturation": 42,
        "lightness": 28
    }, {
        "hex": "#204B5E",
        "rgb": "rgb(32, 75, 94)",
        "hsl": "hsl(198, 49%, 25%)",
        "red": 32,
        "green": 75,
        "blue": 94,
        "hue": 198,
        "saturation": 49,
        "lightness": 25
    }, {
        "hex": "#4EB3DE",
        "rgb": "rgb(78, 179, 222)",
        "hsl": "hsl(198, 69%, 59%)",
        "red": 78,
        "green": 179,
        "blue": 222,
        "hue": 198,
        "saturation": 69,
        "lightness": 59
    }, {
        "hex": "#045071",
        "rgb": "rgb(4, 80, 113)",
        "hsl": "hsl(198, 93%, 23%)",
        "red": 4,
        "green": 80,
        "blue": 113,
        "hue": 198,
        "saturation": 93,
        "lightness": 23
    }, {
        "hex": "#3E4B51",
        "rgb": "rgb(62, 75, 81)",
        "hsl": "hsl(199, 13%, 28%)",
        "red": 62,
        "green": 75,
        "blue": 81,
        "hue": 199,
        "saturation": 13,
        "lightness": 28
    }, {
        "hex": "#7E949E",
        "rgb": "rgb(126, 148, 158)",
        "hsl": "hsl(199, 14%, 56%)",
        "red": 126,
        "green": 148,
        "blue": 158,
        "hue": 199,
        "saturation": 14,
        "lightness": 56
    }, {
        "hex": "#457D97",
        "rgb": "rgb(69, 125, 151)",
        "hsl": "hsl(199, 37%, 43%)",
        "red": 69,
        "green": 125,
        "blue": 151,
        "hue": 199,
        "saturation": 37,
        "lightness": 43
    }, {
        "hex": "#268FBE",
        "rgb": "rgb(38, 143, 190)",
        "hsl": "hsl(199, 67%, 45%)",
        "red": 38,
        "green": 143,
        "blue": 190,
        "hue": 199,
        "saturation": 67,
        "lightness": 45
    }, {
        "hex": "#013750",
        "rgb": "rgb(1, 55, 80)",
        "hsl": "hsl(199, 98%, 16%)",
        "red": 1,
        "green": 55,
        "blue": 80,
        "hue": 199,
        "saturation": 98,
        "lightness": 16
    }, {
        "hex": "#ABE4FF",
        "rgb": "rgb(171, 228, 255)",
        "hsl": "hsl(199, 100%, 84%)",
        "red": 171,
        "green": 228,
        "blue": 255,
        "hue": 199,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#C1C5C7",
        "rgb": "rgb(193, 197, 199)",
        "hsl": "hsl(200, 5%, 77%)",
        "red": 193,
        "green": 197,
        "blue": 199,
        "hue": 200,
        "saturation": 5,
        "lightness": 77
    }, {
        "hex": "#0A0C0D",
        "rgb": "rgb(10, 12, 13)",
        "hsl": "hsl(200, 13%, 5%)",
        "red": 10,
        "green": 12,
        "blue": 13,
        "hue": 200,
        "saturation": 13,
        "lightness": 5
    }, {
        "hex": "#33454E",
        "rgb": "rgb(51, 69, 78)",
        "hsl": "hsl(200, 21%, 25%)",
        "red": 51,
        "green": 69,
        "blue": 78,
        "hue": 200,
        "saturation": 21,
        "lightness": 25
    }, {
        "hex": "#5B7C8D",
        "rgb": "rgb(91, 124, 141)",
        "hsl": "hsl(200, 22%, 45%)",
        "red": 91,
        "green": 124,
        "blue": 141,
        "hue": 200,
        "saturation": 22,
        "lightness": 45
    }, {
        "hex": "#142026",
        "rgb": "rgb(20, 32, 38)",
        "hsl": "hsl(200, 31%, 11%)",
        "red": 20,
        "green": 32,
        "blue": 38,
        "hue": 200,
        "saturation": 31,
        "lightness": 11
    }, {
        "hex": "#030506",
        "rgb": "rgb(3, 5, 6)",
        "hsl": "hsl(200, 33%, 2%)",
        "red": 3,
        "green": 5,
        "blue": 6,
        "hue": 200,
        "saturation": 33,
        "lightness": 2
    }, {
        "hex": "#3B657A",
        "rgb": "rgb(59, 101, 122)",
        "hsl": "hsl(200, 35%, 35%)",
        "red": 59,
        "green": 101,
        "blue": 122,
        "hue": 200,
        "saturation": 35,
        "lightness": 35
    }, {
        "hex": "#00AAFF",
        "rgb": "rgb(0, 170, 255)",
        "hsl": "hsl(200, 100%, 50%)",
        "red": 0,
        "green": 170,
        "blue": 255,
        "hue": 200,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#8EB2C5",
        "rgb": "rgb(142, 178, 197)",
        "hsl": "hsl(201, 32%, 66%)",
        "red": 142,
        "green": 178,
        "blue": 197,
        "hue": 201,
        "saturation": 32,
        "lightness": 66
    }, {
        "hex": "#2B5166",
        "rgb": "rgb(43, 81, 102)",
        "hsl": "hsl(201, 41%, 28%)",
        "red": 43,
        "green": 81,
        "blue": 102,
        "hue": 201,
        "saturation": 41,
        "lightness": 28
    }, {
        "hex": "#0E2430",
        "rgb": "rgb(14, 36, 48)",
        "hsl": "hsl(201, 55%, 12%)",
        "red": 14,
        "green": 36,
        "blue": 48,
        "hue": 201,
        "saturation": 55,
        "lightness": 12
    }, {
        "hex": "#123142",
        "rgb": "rgb(18, 49, 66)",
        "hsl": "hsl(201, 57%, 16%)",
        "red": 18,
        "green": 49,
        "blue": 66,
        "hue": 201,
        "saturation": 57,
        "lightness": 16
    }, {
        "hex": "#D7EEFA",
        "rgb": "rgb(215, 238, 250)",
        "hsl": "hsl(201, 78%, 91%)",
        "red": 215,
        "green": 238,
        "blue": 250,
        "hue": 201,
        "saturation": 78,
        "lightness": 91
    }, {
        "hex": "#0B4462",
        "rgb": "rgb(11, 68, 98)",
        "hsl": "hsl(201, 80%, 21%)",
        "red": 11,
        "green": 68,
        "blue": 98,
        "hue": 201,
        "saturation": 80,
        "lightness": 21
    }, {
        "hex": "#066699",
        "rgb": "rgb(6, 102, 153)",
        "hsl": "hsl(201, 92%, 31%)",
        "red": 6,
        "green": 102,
        "blue": 153,
        "hue": 201,
        "saturation": 92,
        "lightness": 31
    }, {
        "hex": "#0074B4",
        "rgb": "rgb(0, 116, 180)",
        "hsl": "hsl(201, 100%, 35%)",
        "red": 0,
        "green": 116,
        "blue": 180,
        "hue": 201,
        "saturation": 100,
        "lightness": 35
    }, {
        "hex": "#405059",
        "rgb": "rgb(64, 80, 89)",
        "hsl": "hsl(202, 16%, 30%)",
        "red": 64,
        "green": 80,
        "blue": 89,
        "hue": 202,
        "saturation": 16,
        "lightness": 30
    }, {
        "hex": "#3C515D",
        "rgb": "rgb(60, 81, 93)",
        "hsl": "hsl(202, 22%, 30%)",
        "red": 60,
        "green": 81,
        "blue": 93,
        "hue": 202,
        "saturation": 22,
        "lightness": 30
    }, {
        "hex": "#65727A",
        "rgb": "rgb(101, 114, 122)",
        "hsl": "hsl(203, 9%, 44%)",
        "red": 101,
        "green": 114,
        "blue": 122,
        "hue": 203,
        "saturation": 9,
        "lightness": 44
    }, {
        "hex": "#434D53",
        "rgb": "rgb(67, 77, 83)",
        "hsl": "hsl(203, 11%, 29%)",
        "red": 67,
        "green": 77,
        "blue": 83,
        "hue": 203,
        "saturation": 11,
        "lightness": 29
    }, {
        "hex": "#98A5AD",
        "rgb": "rgb(152, 165, 173)",
        "hsl": "hsl(203, 11%, 64%)",
        "red": 152,
        "green": 165,
        "blue": 173,
        "hue": 203,
        "saturation": 11,
        "lightness": 64
    }, {
        "hex": "#8DAEC3",
        "rgb": "rgb(141, 174, 195)",
        "hsl": "hsl(203, 31%, 66%)",
        "red": 141,
        "green": 174,
        "blue": 195,
        "hue": 203,
        "saturation": 31,
        "lightness": 66
    }, {
        "hex": "#447390",
        "rgb": "rgb(68, 115, 144)",
        "hsl": "hsl(203, 36%, 42%)",
        "red": 68,
        "green": 115,
        "blue": 144,
        "hue": 203,
        "saturation": 36,
        "lightness": 42
    }, {
        "hex": "#0A5483",
        "rgb": "rgb(10, 84, 131)",
        "hsl": "hsl(203, 86%, 28%)",
        "red": 10,
        "green": 84,
        "blue": 131,
        "hue": 203,
        "saturation": 86,
        "lightness": 28
    }, {
        "hex": "#021B2B",
        "rgb": "rgb(2, 27, 43)",
        "hsl": "hsl(203, 91%, 9%)",
        "red": 2,
        "green": 27,
        "blue": 43,
        "hue": 203,
        "saturation": 91,
        "lightness": 9
    }, {
        "hex": "#36393B",
        "rgb": "rgb(54, 57, 59)",
        "hsl": "hsl(204, 4%, 22%)",
        "red": 54,
        "green": 57,
        "blue": 59,
        "hue": 204,
        "saturation": 4,
        "lightness": 22
    }, {
        "hex": "#47667B",
        "rgb": "rgb(71, 102, 123)",
        "hsl": "hsl(204, 27%, 38%)",
        "red": 71,
        "green": 102,
        "blue": 123,
        "hue": 204,
        "saturation": 27,
        "lightness": 38
    }, {
        "hex": "#5B88A5",
        "rgb": "rgb(91, 136, 165)",
        "hsl": "hsl(204, 29%, 50%)",
        "red": 91,
        "green": 136,
        "blue": 165,
        "hue": 204,
        "saturation": 29,
        "lightness": 50
    }, {
        "hex": "#1F2F3A",
        "rgb": "rgb(31, 47, 58)",
        "hsl": "hsl(204, 30%, 17%)",
        "red": 31,
        "green": 47,
        "blue": 58,
        "hue": 204,
        "saturation": 30,
        "lightness": 17
    }, {
        "hex": "#49708A",
        "rgb": "rgb(73, 112, 138)",
        "hsl": "hsl(204, 31%, 41%)",
        "red": 73,
        "green": 112,
        "blue": 138,
        "hue": 204,
        "saturation": 31,
        "lightness": 41
    }, {
        "hex": "#88ABC2",
        "rgb": "rgb(136, 171, 194)",
        "hsl": "hsl(204, 32%, 65%)",
        "red": 136,
        "green": 171,
        "blue": 194,
        "hue": 204,
        "saturation": 32,
        "lightness": 65
    }, {
        "hex": "#BDD1DE",
        "rgb": "rgb(189, 209, 222)",
        "hsl": "hsl(204, 33%, 81%)",
        "red": 189,
        "green": 209,
        "blue": 222,
        "hue": 204,
        "saturation": 33,
        "lightness": 81
    }, {
        "hex": "#090F13",
        "rgb": "rgb(9, 15, 19)",
        "hsl": "hsl(204, 36%, 5%)",
        "red": 9,
        "green": 15,
        "blue": 19,
        "hue": 204,
        "saturation": 36,
        "lightness": 5
    }, {
        "hex": "#D0E0EB",
        "rgb": "rgb(208, 224, 235)",
        "hsl": "hsl(204, 40%, 87%)",
        "red": 208,
        "green": 224,
        "blue": 235,
        "hue": 204,
        "saturation": 40,
        "lightness": 87
    }, {
        "hex": "#8AB3CF",
        "rgb": "rgb(138, 179, 207)",
        "hsl": "hsl(204, 42%, 68%)",
        "red": 138,
        "green": 179,
        "blue": 207,
        "hue": 204,
        "saturation": 42,
        "lightness": 68
    }, {
        "hex": "#4180AB",
        "rgb": "rgb(65, 128, 171)",
        "hsl": "hsl(204, 45%, 46%)",
        "red": 65,
        "green": 128,
        "blue": 171,
        "hue": 204,
        "saturation": 45,
        "lightness": 46
    }, {
        "hex": "#0A4B75",
        "rgb": "rgb(10, 75, 117)",
        "hsl": "hsl(204, 84%, 25%)",
        "red": 10,
        "green": 75,
        "blue": 117,
        "hue": 204,
        "saturation": 84,
        "lightness": 25
    }, {
        "hex": "#09456C",
        "rgb": "rgb(9, 69, 108)",
        "hsl": "hsl(204, 85%, 23%)",
        "red": 9,
        "green": 69,
        "blue": 108,
        "hue": 204,
        "saturation": 85,
        "lightness": 23
    }, {
        "hex": "#003F69",
        "rgb": "rgb(0, 63, 105)",
        "hsl": "hsl(204, 100%, 21%)",
        "red": 0,
        "green": 63,
        "blue": 105,
        "hue": 204,
        "saturation": 100,
        "lightness": 21
    }, {
        "hex": "#E4EBF0",
        "rgb": "rgb(228, 235, 240)",
        "hsl": "hsl(205, 29%, 92%)",
        "red": 228,
        "green": 235,
        "blue": 240,
        "hue": 205,
        "saturation": 29,
        "lightness": 92
    }, {
        "hex": "#1E6495",
        "rgb": "rgb(30, 100, 149)",
        "hsl": "hsl(205, 66%, 35%)",
        "red": 30,
        "green": 100,
        "blue": 149,
        "hue": 205,
        "saturation": 66,
        "lightness": 35
    }, {
        "hex": "#02416D",
        "rgb": "rgb(2, 65, 109)",
        "hsl": "hsl(205, 96%, 22%)",
        "red": 2,
        "green": 65,
        "blue": 109,
        "hue": 205,
        "saturation": 96,
        "lightness": 22
    }, {
        "hex": "#171F25",
        "rgb": "rgb(23, 31, 37)",
        "hsl": "hsl(206, 23%, 12%)",
        "red": 23,
        "green": 31,
        "blue": 37,
        "hue": 206,
        "saturation": 23,
        "lightness": 12
    }, {
        "hex": "#15212A",
        "rgb": "rgb(21, 33, 42)",
        "hsl": "hsl(206, 33%, 12%)",
        "red": 21,
        "green": 33,
        "blue": 42,
        "hue": 206,
        "saturation": 33,
        "lightness": 12
    }, {
        "hex": "#487AA1",
        "rgb": "rgb(72, 122, 161)",
        "hsl": "hsl(206, 38%, 46%)",
        "red": 72,
        "green": 122,
        "blue": 161,
        "hue": 206,
        "saturation": 38,
        "lightness": 46
    }, {
        "hex": "#274862",
        "rgb": "rgb(39, 72, 98)",
        "hsl": "hsl(206, 43%, 27%)",
        "red": 39,
        "green": 72,
        "blue": 98,
        "hue": 206,
        "saturation": 43,
        "lightness": 27
    }, {
        "hex": "#172C3C",
        "rgb": "rgb(23, 44, 60)",
        "hsl": "hsl(206, 45%, 16%)",
        "red": 23,
        "green": 44,
        "blue": 60,
        "hue": 206,
        "saturation": 45,
        "lightness": 16
    }, {
        "hex": "#5191C1",
        "rgb": "rgb(81, 145, 193)",
        "hsl": "hsl(206, 47%, 54%)",
        "red": 81,
        "green": 145,
        "blue": 193,
        "hue": 206,
        "saturation": 47,
        "lightness": 54
    }, {
        "hex": "#152B3C",
        "rgb": "rgb(21, 43, 60)",
        "hsl": "hsl(206, 48%, 16%)",
        "red": 21,
        "green": 43,
        "blue": 60,
        "hue": 206,
        "saturation": 48,
        "lightness": 16
    }, {
        "hex": "#E9F2F9",
        "rgb": "rgb(233, 242, 249)",
        "hsl": "hsl(206, 57%, 95%)",
        "red": 233,
        "green": 242,
        "blue": 249,
        "hue": 206,
        "saturation": 57,
        "lightness": 95
    }, {
        "hex": "#8CBFE6",
        "rgb": "rgb(140, 191, 230)",
        "hsl": "hsl(206, 64%, 73%)",
        "red": 140,
        "green": 191,
        "blue": 230,
        "hue": 206,
        "saturation": 64,
        "lightness": 73
    }, {
        "hex": "#B2D9F7",
        "rgb": "rgb(178, 217, 247)",
        "hsl": "hsl(206, 81%, 83%)",
        "red": 178,
        "green": 217,
        "blue": 247,
        "hue": 206,
        "saturation": 81,
        "lightness": 83
    }, {
        "hex": "#001F36",
        "rgb": "rgb(0, 31, 54)",
        "hsl": "hsl(206, 100%, 11%)",
        "red": 0,
        "green": 31,
        "blue": 54,
        "hue": 206,
        "saturation": 100,
        "lightness": 11
    }, {
        "hex": "#A1A6AA",
        "rgb": "rgb(161, 166, 170)",
        "hsl": "hsl(207, 5%, 65%)",
        "red": 161,
        "green": 166,
        "blue": 170,
        "hue": 207,
        "saturation": 5,
        "lightness": 65
    }, {
        "hex": "#586875",
        "rgb": "rgb(88, 104, 117)",
        "hsl": "hsl(207, 14%, 40%)",
        "red": 88,
        "green": 104,
        "blue": 117,
        "hue": 207,
        "saturation": 14,
        "lightness": 40
    }, {
        "hex": "#3A89C9",
        "rgb": "rgb(58, 137, 201)",
        "hsl": "hsl(207, 57%, 51%)",
        "red": 58,
        "green": 137,
        "blue": 201,
        "hue": 207,
        "saturation": 57,
        "lightness": 51
    }, {
        "hex": "#9CC4E4",
        "rgb": "rgb(156, 196, 228)",
        "hsl": "hsl(207, 57%, 75%)",
        "red": 156,
        "green": 196,
        "blue": 228,
        "hue": 207,
        "saturation": 57,
        "lightness": 75
    }, {
        "hex": "#0F4571",
        "rgb": "rgb(15, 69, 113)",
        "hsl": "hsl(207, 77%, 25%)",
        "red": 15,
        "green": 69,
        "blue": 113,
        "hue": 207,
        "saturation": 77,
        "lightness": 25
    }, {
        "hex": "#031C30",
        "rgb": "rgb(3, 28, 48)",
        "hsl": "hsl(207, 88%, 10%)",
        "red": 3,
        "green": 28,
        "blue": 48,
        "hue": 207,
        "saturation": 88,
        "lightness": 10
    }, {
        "hex": "#A2A9AF",
        "rgb": "rgb(162, 169, 175)",
        "hsl": "hsl(208, 8%, 66%)",
        "red": 162,
        "green": 169,
        "blue": 175,
        "hue": 208,
        "saturation": 8,
        "lightness": 66
    }, {
        "hex": "#4E5861",
        "rgb": "rgb(78, 88, 97)",
        "hsl": "hsl(208, 11%, 34%)",
        "red": 78,
        "green": 88,
        "blue": 97,
        "hue": 208,
        "saturation": 11,
        "lightness": 34
    }, {
        "hex": "#355C7D",
        "rgb": "rgb(53, 92, 125)",
        "hsl": "hsl(208, 40%, 35%)",
        "red": 53,
        "green": 92,
        "blue": 125,
        "hue": 208,
        "saturation": 40,
        "lightness": 35
    }, {
        "hex": "#44749D",
        "rgb": "rgb(68, 116, 157)",
        "hsl": "hsl(208, 40%, 44%)",
        "red": 68,
        "green": 116,
        "blue": 157,
        "hue": 208,
        "saturation": 40,
        "lightness": 44
    }, {
        "hex": "#142738",
        "rgb": "rgb(20, 39, 56)",
        "hsl": "hsl(208, 47%, 15%)",
        "red": 20,
        "green": 39,
        "blue": 56,
        "hue": 208,
        "saturation": 47,
        "lightness": 15
    }, {
        "hex": "#027FE9",
        "rgb": "rgb(2, 127, 233)",
        "hsl": "hsl(208, 98%, 46%)",
        "red": 2,
        "green": 127,
        "blue": 233,
        "hue": 208,
        "saturation": 98,
        "lightness": 46
    }, {
        "hex": "#4E5C69",
        "rgb": "rgb(78, 92, 105)",
        "hsl": "hsl(209, 15%, 36%)",
        "red": 78,
        "green": 92,
        "blue": 105,
        "hue": 209,
        "saturation": 15,
        "lightness": 36
    }, {
        "hex": "#C6D4E1",
        "rgb": "rgb(198, 212, 225)",
        "hsl": "hsl(209, 31%, 83%)",
        "red": 198,
        "green": 212,
        "blue": 225,
        "hue": 209,
        "saturation": 31,
        "lightness": 83
    }, {
        "hex": "#142433",
        "rgb": "rgb(20, 36, 51)",
        "hsl": "hsl(209, 44%, 14%)",
        "red": 20,
        "green": 36,
        "blue": 51,
        "hue": 209,
        "saturation": 44,
        "lightness": 14
    }, {
        "hex": "#8DBDEB",
        "rgb": "rgb(141, 189, 235)",
        "hsl": "hsl(209, 70%, 74%)",
        "red": 141,
        "green": 189,
        "blue": 235,
        "hue": 209,
        "saturation": 70,
        "lightness": 74
    }, {
        "hex": "#03223F",
        "rgb": "rgb(3, 34, 63)",
        "hsl": "hsl(209, 91%, 13%)",
        "red": 3,
        "green": 34,
        "blue": 63,
        "hue": 209,
        "saturation": 91,
        "lightness": 13
    }, {
        "hex": "#68B2F8",
        "rgb": "rgb(104, 178, 248)",
        "hsl": "hsl(209, 91%, 69%)",
        "red": 104,
        "green": 178,
        "blue": 248,
        "hue": 209,
        "saturation": 91,
        "lightness": 69
    }, {
        "hex": "#7A7B7C",
        "rgb": "rgb(122, 123, 124)",
        "hsl": "hsl(210, 1%, 48%)",
        "red": 122,
        "green": 123,
        "blue": 124,
        "hue": 210,
        "saturation": 1,
        "lightness": 48
    }, {
        "hex": "#838689",
        "rgb": "rgb(131, 134, 137)",
        "hsl": "hsl(210, 2%, 53%)",
        "red": 131,
        "green": 134,
        "blue": 137,
        "hue": 210,
        "saturation": 2,
        "lightness": 53
    }, {
        "hex": "#1A1B1C",
        "rgb": "rgb(26, 27, 28)",
        "hsl": "hsl(210, 4%, 11%)",
        "red": 26,
        "green": 27,
        "blue": 28,
        "hue": 210,
        "saturation": 4,
        "lightness": 11
    }, {
        "hex": "#45484B",
        "rgb": "rgb(69, 72, 75)",
        "hsl": "hsl(210, 4%, 28%)",
        "red": 69,
        "green": 72,
        "blue": 75,
        "hue": 210,
        "saturation": 4,
        "lightness": 28
    }, {
        "hex": "#626970",
        "rgb": "rgb(98, 105, 112)",
        "hsl": "hsl(210, 7%, 41%)",
        "red": 98,
        "green": 105,
        "blue": 112,
        "hue": 210,
        "saturation": 7,
        "lightness": 41
    }, {
        "hex": "#15191D",
        "rgb": "rgb(21, 25, 29)",
        "hsl": "hsl(210, 16%, 10%)",
        "red": 21,
        "green": 25,
        "blue": 29,
        "hue": 210,
        "saturation": 16,
        "lightness": 10
    }, {
        "hex": "#7890A8",
        "rgb": "rgb(120, 144, 168)",
        "hsl": "hsl(210, 22%, 56%)",
        "red": 120,
        "green": 144,
        "blue": 168,
        "hue": 210,
        "saturation": 22,
        "lightness": 56
    }, {
        "hex": "#839CB5",
        "rgb": "rgb(131, 156, 181)",
        "hsl": "hsl(210, 25%, 61%)",
        "red": 131,
        "green": 156,
        "blue": 181,
        "hue": 210,
        "saturation": 25,
        "lightness": 61
    }, {
        "hex": "#020304",
        "rgb": "rgb(2, 3, 4)",
        "hsl": "hsl(210, 33%, 1%)",
        "red": 2,
        "green": 3,
        "blue": 4,
        "hue": 210,
        "saturation": 33,
        "lightness": 1
    }, {
        "hex": "#2B4E72",
        "rgb": "rgb(43, 78, 114)",
        "hsl": "hsl(210, 45%, 31%)",
        "red": 43,
        "green": 78,
        "blue": 114,
        "hue": 210,
        "saturation": 45,
        "lightness": 31
    }, {
        "hex": "#556270",
        "rgb": "rgb(85, 98, 112)",
        "hsl": "hsl(211, 14%, 39%)",
        "red": 85,
        "green": 98,
        "blue": 112,
        "hue": 211,
        "saturation": 14,
        "lightness": 39
    }, {
        "hex": "#556270",
        "rgb": "rgb(85, 98, 112)",
        "hsl": "hsl(211, 14%, 39%)",
        "red": 85,
        "green": 98,
        "blue": 112,
        "hue": 211,
        "saturation": 14,
        "lightness": 39
    }, {
        "hex": "#536D88",
        "rgb": "rgb(83, 109, 136)",
        "hsl": "hsl(211, 24%, 43%)",
        "red": 83,
        "green": 109,
        "blue": 136,
        "hue": 211,
        "saturation": 24,
        "lightness": 43
    }, {
        "hex": "#253342",
        "rgb": "rgb(37, 51, 66)",
        "hsl": "hsl(211, 28%, 20%)",
        "red": 37,
        "green": 51,
        "blue": 66,
        "hue": 211,
        "saturation": 28,
        "lightness": 20
    }, {
        "hex": "#228DFF",
        "rgb": "rgb(34, 141, 255)",
        "hsl": "hsl(211, 100%, 57%)",
        "red": 34,
        "green": 141,
        "blue": 255,
        "hue": 211,
        "saturation": 100,
        "lightness": 57
    }, {
        "hex": "#51647A",
        "rgb": "rgb(81, 100, 122)",
        "hsl": "hsl(212, 20%, 40%)",
        "red": 81,
        "green": 100,
        "blue": 122,
        "hue": 212,
        "saturation": 20,
        "lightness": 40
    }, {
        "hex": "#122F51",
        "rgb": "rgb(18, 47, 81)",
        "hsl": "hsl(212, 64%, 19%)",
        "red": 18,
        "green": 47,
        "blue": 81,
        "hue": 212,
        "saturation": 64,
        "lightness": 19
    }, {
        "hex": "#005BC5",
        "rgb": "rgb(0, 91, 197)",
        "hsl": "hsl(212, 100%, 39%)",
        "red": 0,
        "green": 91,
        "blue": 197,
        "hue": 212,
        "saturation": 100,
        "lightness": 39
    }, {
        "hex": "#566981",
        "rgb": "rgb(86, 105, 129)",
        "hsl": "hsl(213, 20%, 42%)",
        "red": 86,
        "green": 105,
        "blue": 129,
        "hue": 213,
        "saturation": 20,
        "lightness": 42
    }, {
        "hex": "#4771A3",
        "rgb": "rgb(71, 113, 163)",
        "hsl": "hsl(213, 39%, 46%)",
        "red": 71,
        "green": 113,
        "blue": 163,
        "hue": 213,
        "saturation": 39,
        "lightness": 46
    }, {
        "hex": "#0B2E59",
        "rgb": "rgb(11, 46, 89)",
        "hsl": "hsl(213, 78%, 20%)",
        "red": 11,
        "green": 46,
        "blue": 89,
        "hue": 213,
        "saturation": 78,
        "lightness": 20
    }, {
        "hex": "#6E7B8C",
        "rgb": "rgb(110, 123, 140)",
        "hsl": "hsl(214, 12%, 49%)",
        "red": 110,
        "green": 123,
        "blue": 140,
        "hue": 214,
        "saturation": 12,
        "lightness": 49
    }, {
        "hex": "#424E5E",
        "rgb": "rgb(66, 78, 94)",
        "hsl": "hsl(214, 18%, 31%)",
        "red": 66,
        "green": 78,
        "blue": 94,
        "hue": 214,
        "saturation": 18,
        "lightness": 31
    }, {
        "hex": "#536C8D",
        "rgb": "rgb(83, 108, 141)",
        "hsl": "hsl(214, 26%, 44%)",
        "red": 83,
        "green": 108,
        "blue": 141,
        "hue": 214,
        "saturation": 26,
        "lightness": 44
    }, {
        "hex": "#041122",
        "rgb": "rgb(4, 17, 34)",
        "hsl": "hsl(214, 79%, 7%)",
        "red": 4,
        "green": 17,
        "blue": 34,
        "hue": 214,
        "saturation": 79,
        "lightness": 7
    }, {
        "hex": "#969BA2",
        "rgb": "rgb(150, 155, 162)",
        "hsl": "hsl(215, 6%, 61%)",
        "red": 150,
        "green": 155,
        "blue": 162,
        "hue": 215,
        "saturation": 6,
        "lightness": 61
    }, {
        "hex": "#48586F",
        "rgb": "rgb(72, 88, 111)",
        "hsl": "hsl(215, 21%, 36%)",
        "red": 72,
        "green": 88,
        "blue": 111,
        "hue": 215,
        "saturation": 21,
        "lightness": 36
    }, {
        "hex": "#092B5A",
        "rgb": "rgb(9, 43, 90)",
        "hsl": "hsl(215, 82%, 19%)",
        "red": 9,
        "green": 43,
        "blue": 90,
        "hue": 215,
        "saturation": 82,
        "lightness": 19
    }, {
        "hex": "#606D80",
        "rgb": "rgb(96, 109, 128)",
        "hsl": "hsl(216, 14%, 44%)",
        "red": 96,
        "green": 109,
        "blue": 128,
        "hue": 216,
        "saturation": 14,
        "lightness": 44
    }, {
        "hex": "#DCE0E6",
        "rgb": "rgb(220, 224, 230)",
        "hsl": "hsl(216, 17%, 88%)",
        "red": 220,
        "green": 224,
        "blue": 230,
        "hue": 216,
        "saturation": 17,
        "lightness": 88
    }, {
        "hex": "#3B5274",
        "rgb": "rgb(59, 82, 116)",
        "hsl": "hsl(216, 33%, 34%)",
        "red": 59,
        "green": 82,
        "blue": 116,
        "hue": 216,
        "saturation": 33,
        "lightness": 34
    }, {
        "hex": "#567EBB",
        "rgb": "rgb(86, 126, 187)",
        "hsl": "hsl(216, 43%, 54%)",
        "red": 86,
        "green": 126,
        "blue": 187,
        "hue": 216,
        "saturation": 43,
        "lightness": 54
    }, {
        "hex": "#2B4C7E",
        "rgb": "rgb(43, 76, 126)",
        "hsl": "hsl(216, 49%, 33%)",
        "red": 43,
        "green": 76,
        "blue": 126,
        "hue": 216,
        "saturation": 49,
        "lightness": 33
    }, {
        "hex": "#0D192B",
        "rgb": "rgb(13, 25, 43)",
        "hsl": "hsl(216, 54%, 11%)",
        "red": 13,
        "green": 25,
        "blue": 43,
        "hue": 216,
        "saturation": 54,
        "lightness": 11
    }, {
        "hex": "#386DBD",
        "rgb": "rgb(56, 109, 189)",
        "hsl": "hsl(216, 54%, 48%)",
        "red": 56,
        "green": 109,
        "blue": 189,
        "hue": 216,
        "saturation": 54,
        "lightness": 48
    }, {
        "hex": "#80B3FF",
        "rgb": "rgb(128, 179, 255)",
        "hsl": "hsl(216, 100%, 75%)",
        "red": 128,
        "green": 179,
        "blue": 255,
        "hue": 216,
        "saturation": 100,
        "lightness": 75
    }, {
        "hex": "#384252",
        "rgb": "rgb(56, 66, 82)",
        "hsl": "hsl(217, 19%, 27%)",
        "red": 56,
        "green": 66,
        "blue": 82,
        "hue": 217,
        "saturation": 19,
        "lightness": 27
    }, {
        "hex": "#333E50",
        "rgb": "rgb(51, 62, 80)",
        "hsl": "hsl(217, 22%, 26%)",
        "red": 51,
        "green": 62,
        "blue": 80,
        "hue": 217,
        "saturation": 22,
        "lightness": 26
    }, {
        "hex": "#1C232E",
        "rgb": "rgb(28, 35, 46)",
        "hsl": "hsl(217, 24%, 15%)",
        "red": 28,
        "green": 35,
        "blue": 46,
        "hue": 217,
        "saturation": 24,
        "lightness": 15
    }, {
        "hex": "#08295E",
        "rgb": "rgb(8, 41, 94)",
        "hsl": "hsl(217, 84%, 20%)",
        "red": 8,
        "green": 41,
        "blue": 94,
        "hue": 217,
        "saturation": 84,
        "lightness": 20
    }, {
        "hex": "#031634",
        "rgb": "rgb(3, 22, 52)",
        "hsl": "hsl(217, 89%, 11%)",
        "red": 3,
        "green": 22,
        "blue": 52,
        "hue": 217,
        "saturation": 89,
        "lightness": 11
    }, {
        "hex": "#273142",
        "rgb": "rgb(39, 49, 66)",
        "hsl": "hsl(218, 26%, 21%)",
        "red": 39,
        "green": 49,
        "blue": 66,
        "hue": 218,
        "saturation": 26,
        "lightness": 21
    }, {
        "hex": "#6C788E",
        "rgb": "rgb(108, 120, 142)",
        "hsl": "hsl(219, 14%, 49%)",
        "red": 108,
        "green": 120,
        "blue": 142,
        "hue": 219,
        "saturation": 14,
        "lightness": 49
    }, {
        "hex": "#2B364A",
        "rgb": "rgb(43, 54, 74)",
        "hsl": "hsl(219, 26%, 23%)",
        "red": 43,
        "green": 54,
        "blue": 74,
        "hue": 219,
        "saturation": 26,
        "lightness": 23
    }, {
        "hex": "#010D23",
        "rgb": "rgb(1, 13, 35)",
        "hsl": "hsl(219, 94%, 7%)",
        "red": 1,
        "green": 13,
        "blue": 35,
        "hue": 219,
        "saturation": 94,
        "lightness": 7
    }, {
        "hex": "#3E4147",
        "rgb": "rgb(62, 65, 71)",
        "hsl": "hsl(220, 7%, 26%)",
        "red": 62,
        "green": 65,
        "blue": 71,
        "hue": 220,
        "saturation": 7,
        "lightness": 26
    }, {
        "hex": "#CFD5E1",
        "rgb": "rgb(207, 213, 225)",
        "hsl": "hsl(220, 23%, 85%)",
        "red": 207,
        "green": 213,
        "blue": 225,
        "hue": 220,
        "saturation": 23,
        "lightness": 85
    }, {
        "hex": "#364461",
        "rgb": "rgb(54, 68, 97)",
        "hsl": "hsl(220, 28%, 30%)",
        "red": 54,
        "green": 68,
        "blue": 97,
        "hue": 220,
        "saturation": 28,
        "lightness": 30
    }, {
        "hex": "#020305",
        "rgb": "rgb(2, 3, 5)",
        "hsl": "hsl(220, 43%, 1%)",
        "red": 2,
        "green": 3,
        "blue": 5,
        "hue": 220,
        "saturation": 43,
        "lightness": 1
    }, {
        "hex": "#304878",
        "rgb": "rgb(48, 72, 120)",
        "hsl": "hsl(220, 43%, 33%)",
        "red": 48,
        "green": 72,
        "blue": 120,
        "hue": 220,
        "saturation": 43,
        "lightness": 33
    }, {
        "hex": "#1B325F",
        "rgb": "rgb(27, 50, 95)",
        "hsl": "hsl(220, 56%, 24%)",
        "red": 27,
        "green": 50,
        "blue": 95,
        "hue": 220,
        "saturation": 56,
        "lightness": 24
    }, {
        "hex": "#001848",
        "rgb": "rgb(0, 24, 72)",
        "hsl": "hsl(220, 100%, 14%)",
        "red": 0,
        "green": 24,
        "blue": 72,
        "hue": 220,
        "saturation": 100,
        "lightness": 14
    }, {
        "hex": "#1B66FF",
        "rgb": "rgb(27, 102, 255)",
        "hsl": "hsl(220, 100%, 55%)",
        "red": 27,
        "green": 102,
        "blue": 255,
        "hue": 220,
        "saturation": 100,
        "lightness": 55
    }, {
        "hex": "#FCFDFF",
        "rgb": "rgb(252, 253, 255)",
        "hsl": "hsl(220, 100%, 99%)",
        "red": 252,
        "green": 253,
        "blue": 255,
        "hue": 220,
        "saturation": 100,
        "lightness": 99
    }, {
        "hex": "#74819D",
        "rgb": "rgb(116, 129, 157)",
        "hsl": "hsl(221, 17%, 54%)",
        "red": 116,
        "green": 129,
        "blue": 157,
        "hue": 221,
        "saturation": 17,
        "lightness": 54
    }, {
        "hex": "#243A69",
        "rgb": "rgb(36, 58, 105)",
        "hsl": "hsl(221, 49%, 28%)",
        "red": 36,
        "green": 58,
        "blue": 105,
        "hue": 221,
        "saturation": 49,
        "lightness": 28
    }, {
        "hex": "#012677",
        "rgb": "rgb(1, 38, 119)",
        "hsl": "hsl(221, 98%, 24%)",
        "red": 1,
        "green": 38,
        "blue": 119,
        "hue": 221,
        "saturation": 98,
        "lightness": 24
    }, {
        "hex": "#373B44",
        "rgb": "rgb(55, 59, 68)",
        "hsl": "hsl(222, 11%, 24%)",
        "red": 55,
        "green": 59,
        "blue": 68,
        "hue": 222,
        "saturation": 11,
        "lightness": 24
    }, {
        "hex": "#A6AEC1",
        "rgb": "rgb(166, 174, 193)",
        "hsl": "hsl(222, 18%, 70%)",
        "red": 166,
        "green": 174,
        "blue": 193,
        "hue": 222,
        "saturation": 18,
        "lightness": 70
    }, {
        "hex": "#294380",
        "rgb": "rgb(41, 67, 128)",
        "hsl": "hsl(222, 51%, 33%)",
        "red": 41,
        "green": 67,
        "blue": 128,
        "hue": 222,
        "saturation": 51,
        "lightness": 33
    }, {
        "hex": "#DCE4F7",
        "rgb": "rgb(220, 228, 247)",
        "hsl": "hsl(222, 63%, 92%)",
        "red": 220,
        "green": 228,
        "blue": 247,
        "hue": 222,
        "saturation": 63,
        "lightness": 92
    }, {
        "hex": "#000511",
        "rgb": "rgb(0, 5, 17)",
        "hsl": "hsl(222, 100%, 3%)",
        "red": 0,
        "green": 5,
        "blue": 17,
        "hue": 222,
        "saturation": 100,
        "lightness": 3
    }, {
        "hex": "#2A2C31",
        "rgb": "rgb(42, 44, 49)",
        "hsl": "hsl(223, 8%, 18%)",
        "red": 42,
        "green": 44,
        "blue": 49,
        "hue": 223,
        "saturation": 8,
        "lightness": 18
    }, {
        "hex": "#3B3F49",
        "rgb": "rgb(59, 63, 73)",
        "hsl": "hsl(223, 11%, 26%)",
        "red": 59,
        "green": 63,
        "blue": 73,
        "hue": 223,
        "saturation": 11,
        "lightness": 26
    }, {
        "hex": "#BFCFF7",
        "rgb": "rgb(191, 207, 247)",
        "hsl": "hsl(223, 78%, 86%)",
        "red": 191,
        "green": 207,
        "blue": 247,
        "hue": 223,
        "saturation": 78,
        "lightness": 86
    }, {
        "hex": "#6F737E",
        "rgb": "rgb(111, 115, 126)",
        "hsl": "hsl(224, 6%, 46%)",
        "red": 111,
        "green": 115,
        "blue": 126,
        "hue": 224,
        "saturation": 6,
        "lightness": 46
    }, {
        "hex": "#4C5E91",
        "rgb": "rgb(76, 94, 145)",
        "hsl": "hsl(224, 31%, 43%)",
        "red": 76,
        "green": 94,
        "blue": 145,
        "hue": 224,
        "saturation": 31,
        "lightness": 43
    }, {
        "hex": "#19274E",
        "rgb": "rgb(25, 39, 78)",
        "hsl": "hsl(224, 51%, 20%)",
        "red": 25,
        "green": 39,
        "blue": 78,
        "hue": 224,
        "saturation": 51,
        "lightness": 20
    }, {
        "hex": "#001449",
        "rgb": "rgb(0, 20, 73)",
        "hsl": "hsl(224, 100%, 14%)",
        "red": 0,
        "green": 20,
        "blue": 73,
        "hue": 224,
        "saturation": 100,
        "lightness": 14
    }, {
        "hex": "#6F95FF",
        "rgb": "rgb(111, 149, 255)",
        "hsl": "hsl(224, 100%, 72%)",
        "red": 111,
        "green": 149,
        "blue": 255,
        "hue": 224,
        "saturation": 100,
        "lightness": 72
    }, {
        "hex": "#495168",
        "rgb": "rgb(73, 81, 104)",
        "hsl": "hsl(225, 18%, 35%)",
        "red": 73,
        "green": 81,
        "blue": 104,
        "hue": 225,
        "saturation": 18,
        "lightness": 35
    }, {
        "hex": "#1C2130",
        "rgb": "rgb(28, 33, 48)",
        "hsl": "hsl(225, 26%, 15%)",
        "red": 28,
        "green": 33,
        "blue": 48,
        "hue": 225,
        "saturation": 26,
        "lightness": 15
    }, {
        "hex": "#111625",
        "rgb": "rgb(17, 22, 37)",
        "hsl": "hsl(225, 37%, 11%)",
        "red": 17,
        "green": 22,
        "blue": 37,
        "hue": 225,
        "saturation": 37,
        "lightness": 11
    }, {
        "hex": "#575A65",
        "rgb": "rgb(87, 90, 101)",
        "hsl": "hsl(227, 7%, 37%)",
        "red": 87,
        "green": 90,
        "blue": 101,
        "hue": 227,
        "saturation": 7,
        "lightness": 37
    }, {
        "hex": "#292C37",
        "rgb": "rgb(41, 44, 55)",
        "hsl": "hsl(227, 15%, 19%)",
        "red": 41,
        "green": 44,
        "blue": 55,
        "hue": 227,
        "saturation": 15,
        "lightness": 19
    }, {
        "hex": "#3A415A",
        "rgb": "rgb(58, 65, 90)",
        "hsl": "hsl(227, 22%, 29%)",
        "red": 58,
        "green": 65,
        "blue": 90,
        "hue": 227,
        "saturation": 22,
        "lightness": 29
    }, {
        "hex": "#141827",
        "rgb": "rgb(20, 24, 39)",
        "hsl": "hsl(227, 32%, 12%)",
        "red": 20,
        "green": 24,
        "blue": 39,
        "hue": 227,
        "saturation": 32,
        "lightness": 12
    }, {
        "hex": "#2B2C30",
        "rgb": "rgb(43, 44, 48)",
        "hsl": "hsl(228, 5%, 18%)",
        "red": 43,
        "green": 44,
        "blue": 48,
        "hue": 228,
        "saturation": 5,
        "lightness": 18
    }, {
        "hex": "#5C627A",
        "rgb": "rgb(92, 98, 122)",
        "hsl": "hsl(228, 14%, 42%)",
        "red": 92,
        "green": 98,
        "blue": 122,
        "hue": 228,
        "saturation": 14,
        "lightness": 42
    }, {
        "hex": "#1D2440",
        "rgb": "rgb(29, 36, 64)",
        "hsl": "hsl(228, 38%, 18%)",
        "red": 29,
        "green": 36,
        "blue": 64,
        "hue": 228,
        "saturation": 38,
        "lightness": 18
    }, {
        "hex": "#F7F8FC",
        "rgb": "rgb(247, 248, 252)",
        "hsl": "hsl(228, 45%, 98%)",
        "red": 247,
        "green": 248,
        "blue": 252,
        "hue": 228,
        "saturation": 45,
        "lightness": 98
    }, {
        "hex": "#506EE5",
        "rgb": "rgb(80, 110, 229)",
        "hsl": "hsl(228, 74%, 61%)",
        "red": 80,
        "green": 110,
        "blue": 229,
        "hue": 228,
        "saturation": 74,
        "lightness": 61
    }, {
        "hex": "#D1D3DC",
        "rgb": "rgb(209, 211, 220)",
        "hsl": "hsl(229, 14%, 84%)",
        "red": 209,
        "green": 211,
        "blue": 220,
        "hue": 229,
        "saturation": 14,
        "lightness": 84
    }, {
        "hex": "#33384E",
        "rgb": "rgb(51, 56, 78)",
        "hsl": "hsl(229, 21%, 25%)",
        "red": 51,
        "green": 56,
        "blue": 78,
        "hue": 229,
        "saturation": 21,
        "lightness": 25
    }, {
        "hex": "#101942",
        "rgb": "rgb(16, 25, 66)",
        "hsl": "hsl(229, 61%, 16%)",
        "red": 16,
        "green": 25,
        "blue": 66,
        "hue": 229,
        "saturation": 61,
        "lightness": 16
    }, {
        "hex": "#53576B",
        "rgb": "rgb(83, 87, 107)",
        "hsl": "hsl(230, 13%, 37%)",
        "red": 83,
        "green": 87,
        "blue": 107,
        "hue": 230,
        "saturation": 13,
        "lightness": 37
    }, {
        "hex": "#3B4058",
        "rgb": "rgb(59, 64, 88)",
        "hsl": "hsl(230, 20%, 29%)",
        "red": 59,
        "green": 64,
        "blue": 88,
        "hue": 230,
        "saturation": 20,
        "lightness": 29
    }, {
        "hex": "#464D70",
        "rgb": "rgb(70, 77, 112)",
        "hsl": "hsl(230, 23%, 36%)",
        "red": 70,
        "green": 77,
        "blue": 112,
        "hue": 230,
        "saturation": 23,
        "lightness": 36
    }, {
        "hex": "#1A1C27",
        "rgb": "rgb(26, 28, 39)",
        "hsl": "hsl(231, 20%, 13%)",
        "red": 26,
        "green": 28,
        "blue": 39,
        "hue": 231,
        "saturation": 20,
        "lightness": 13
    }, {
        "hex": "#242739",
        "rgb": "rgb(36, 39, 57)",
        "hsl": "hsl(231, 23%, 18%)",
        "red": 36,
        "green": 39,
        "blue": 57,
        "hue": 231,
        "saturation": 23,
        "lightness": 18
    }, {
        "hex": "#2F3559",
        "rgb": "rgb(47, 53, 89)",
        "hsl": "hsl(231, 31%, 27%)",
        "red": 47,
        "green": 53,
        "blue": 89,
        "hue": 231,
        "saturation": 31,
        "lightness": 27
    }, {
        "hex": "#272D4D",
        "rgb": "rgb(39, 45, 77)",
        "hsl": "hsl(231, 33%, 23%)",
        "red": 39,
        "green": 45,
        "blue": 77,
        "hue": 231,
        "saturation": 33,
        "lightness": 23
    }, {
        "hex": "#1C31A5",
        "rgb": "rgb(28, 49, 165)",
        "hsl": "hsl(231, 71%, 38%)",
        "red": 28,
        "green": 49,
        "blue": 165,
        "hue": 231,
        "saturation": 71,
        "lightness": 38
    }, {
        "hex": "#101F78",
        "rgb": "rgb(16, 31, 120)",
        "hsl": "hsl(231, 76%, 27%)",
        "red": 16,
        "green": 31,
        "blue": 120,
        "hue": 231,
        "saturation": 76,
        "lightness": 27
    }, {
        "hex": "#010937",
        "rgb": "rgb(1, 9, 55)",
        "hsl": "hsl(231, 96%, 11%)",
        "red": 1,
        "green": 9,
        "blue": 55,
        "hue": 231,
        "saturation": 96,
        "lightness": 11
    }, {
        "hex": "#020F59",
        "rgb": "rgb(2, 15, 89)",
        "hsl": "hsl(231, 96%, 18%)",
        "red": 2,
        "green": 15,
        "blue": 89,
        "hue": 231,
        "saturation": 96,
        "lightness": 18
    }, {
        "hex": "#0F132E",
        "rgb": "rgb(15, 19, 46)",
        "hsl": "hsl(232, 51%, 12%)",
        "red": 15,
        "green": 19,
        "blue": 46,
        "hue": 232,
        "saturation": 51,
        "lightness": 12
    }, {
        "hex": "#030D4F",
        "rgb": "rgb(3, 13, 79)",
        "hsl": "hsl(232, 93%, 16%)",
        "red": 3,
        "green": 13,
        "blue": 79,
        "hue": 232,
        "saturation": 93,
        "lightness": 16
    }, {
        "hex": "#000524",
        "rgb": "rgb(0, 5, 36)",
        "hsl": "hsl(232, 100%, 7%)",
        "red": 0,
        "green": 5,
        "blue": 36,
        "hue": 232,
        "saturation": 100,
        "lightness": 7
    }, {
        "hex": "#17181F",
        "rgb": "rgb(23, 24, 31)",
        "hsl": "hsl(233, 15%, 11%)",
        "red": 23,
        "green": 24,
        "blue": 31,
        "hue": 233,
        "saturation": 15,
        "lightness": 11
    }, {
        "hex": "#4B538B",
        "rgb": "rgb(75, 83, 139)",
        "hsl": "hsl(233, 30%, 42%)",
        "red": 75,
        "green": 83,
        "blue": 139,
        "hue": 233,
        "saturation": 30,
        "lightness": 42
    }, {
        "hex": "#404467",
        "rgb": "rgb(64, 68, 103)",
        "hsl": "hsl(234, 23%, 33%)",
        "red": 64,
        "green": 68,
        "blue": 103,
        "hue": 234,
        "saturation": 23,
        "lightness": 33
    }, {
        "hex": "#D0D2E3",
        "rgb": "rgb(208, 210, 227)",
        "hsl": "hsl(234, 25%, 85%)",
        "red": 208,
        "green": 210,
        "blue": 227,
        "hue": 234,
        "saturation": 25,
        "lightness": 85
    }, {
        "hex": "#A5AAD9",
        "rgb": "rgb(165, 170, 217)",
        "hsl": "hsl(234, 41%, 75%)",
        "red": 165,
        "green": 170,
        "blue": 217,
        "hue": 234,
        "saturation": 41,
        "lightness": 75
    }, {
        "hex": "#1B1C26",
        "rgb": "rgb(27, 28, 38)",
        "hsl": "hsl(235, 17%, 13%)",
        "red": 27,
        "green": 28,
        "blue": 38,
        "hue": 235,
        "saturation": 17,
        "lightness": 13
    }, {
        "hex": "#525574",
        "rgb": "rgb(82, 85, 116)",
        "hsl": "hsl(235, 17%, 39%)",
        "red": 82,
        "green": 85,
        "blue": 116,
        "hue": 235,
        "saturation": 17,
        "lightness": 39
    }, {
        "hex": "#5C65C0",
        "rgb": "rgb(92, 101, 192)",
        "hsl": "hsl(235, 44%, 56%)",
        "red": 92,
        "green": 101,
        "blue": 192,
        "hue": 235,
        "saturation": 44,
        "lightness": 56
    }, {
        "hex": "#101652",
        "rgb": "rgb(16, 22, 82)",
        "hsl": "hsl(235, 67%, 19%)",
        "red": 16,
        "green": 22,
        "blue": 82,
        "hue": 235,
        "saturation": 67,
        "lightness": 19
    }, {
        "hex": "#5A5C75",
        "rgb": "rgb(90, 92, 117)",
        "hsl": "hsl(236, 13%, 41%)",
        "red": 90,
        "green": 92,
        "blue": 117,
        "hue": 236,
        "saturation": 13,
        "lightness": 41
    }, {
        "hex": "#616382",
        "rgb": "rgb(97, 99, 130)",
        "hsl": "hsl(236, 15%, 45%)",
        "red": 97,
        "green": 99,
        "blue": 130,
        "hue": 236,
        "saturation": 15,
        "lightness": 45
    }, {
        "hex": "#888DDA",
        "rgb": "rgb(136, 141, 218)",
        "hsl": "hsl(236, 53%, 69%)",
        "red": 136,
        "green": 141,
        "blue": 218,
        "hue": 236,
        "saturation": 53,
        "lightness": 69
    }, {
        "hex": "#0D0F36",
        "rgb": "rgb(13, 15, 54)",
        "hsl": "hsl(237, 61%, 13%)",
        "red": 13,
        "green": 15,
        "blue": 54,
        "hue": 237,
        "saturation": 61,
        "lightness": 13
    }, {
        "hex": "#7375A5",
        "rgb": "rgb(115, 117, 165)",
        "hsl": "hsl(238, 22%, 55%)",
        "red": 115,
        "green": 117,
        "blue": 165,
        "hue": 238,
        "saturation": 22,
        "lightness": 55
    }, {
        "hex": "#02031A",
        "rgb": "rgb(2, 3, 26)",
        "hsl": "hsl(238, 86%, 5%)",
        "red": 2,
        "green": 3,
        "blue": 26,
        "hue": 238,
        "saturation": 86,
        "lightness": 5
    }, {
        "hex": "#1F1F20",
        "rgb": "rgb(31, 31, 32)",
        "hsl": "hsl(240, 2%, 12%)",
        "red": 31,
        "green": 31,
        "blue": 32,
        "hue": 240,
        "saturation": 2,
        "lightness": 12
    }, {
        "hex": "#626266",
        "rgb": "rgb(98, 98, 102)",
        "hsl": "hsl(240, 2%, 39%)",
        "red": 98,
        "green": 98,
        "blue": 102,
        "hue": 240,
        "saturation": 2,
        "lightness": 39
    }, {
        "hex": "#D9D9DB",
        "rgb": "rgb(217, 217, 219)",
        "hsl": "hsl(240, 3%, 85%)",
        "red": 217,
        "green": 217,
        "blue": 219,
        "hue": 240,
        "saturation": 3,
        "lightness": 85
    }, {
        "hex": "#161618",
        "rgb": "rgb(22, 22, 24)",
        "hsl": "hsl(240, 4%, 9%)",
        "red": 22,
        "green": 22,
        "blue": 24,
        "hue": 240,
        "saturation": 4,
        "lightness": 9
    }, {
        "hex": "#66666E",
        "rgb": "rgb(102, 102, 110)",
        "hsl": "hsl(240, 4%, 42%)",
        "red": 102,
        "green": 102,
        "blue": 110,
        "hue": 240,
        "saturation": 4,
        "lightness": 42
    }, {
        "hex": "#111113",
        "rgb": "rgb(17, 17, 19)",
        "hsl": "hsl(240, 6%, 7%)",
        "red": 17,
        "green": 17,
        "blue": 19,
        "hue": 240,
        "saturation": 6,
        "lightness": 7
    }, {
        "hex": "#4B4B55",
        "rgb": "rgb(75, 75, 85)",
        "hsl": "hsl(240, 6%, 31%)",
        "red": 75,
        "green": 75,
        "blue": 85,
        "hue": 240,
        "saturation": 6,
        "lightness": 31
    }, {
        "hex": "#0B0B0D",
        "rgb": "rgb(11, 11, 13)",
        "hsl": "hsl(240, 8%, 5%)",
        "red": 11,
        "green": 11,
        "blue": 13,
        "hue": 240,
        "saturation": 8,
        "lightness": 5
    }, {
        "hex": "#383845",
        "rgb": "rgb(56, 56, 69)",
        "hsl": "hsl(240, 10%, 25%)",
        "red": 56,
        "green": 56,
        "blue": 69,
        "hue": 240,
        "saturation": 10,
        "lightness": 25
    }, {
        "hex": "#73738D",
        "rgb": "rgb(115, 115, 141)",
        "hsl": "hsl(240, 10%, 50%)",
        "red": 115,
        "green": 115,
        "blue": 141,
        "hue": 240,
        "saturation": 10,
        "lightness": 50
    }, {
        "hex": "#282832",
        "rgb": "rgb(40, 40, 50)",
        "hsl": "hsl(240, 11%, 18%)",
        "red": 40,
        "green": 40,
        "blue": 50,
        "hue": 240,
        "saturation": 11,
        "lightness": 18
    }, {
        "hex": "#606078",
        "rgb": "rgb(96, 96, 120)",
        "hsl": "hsl(240, 11%, 42%)",
        "red": 96,
        "green": 96,
        "blue": 120,
        "hue": 240,
        "saturation": 11,
        "lightness": 42
    }, {
        "hex": "#424254",
        "rgb": "rgb(66, 66, 84)",
        "hsl": "hsl(240, 12%, 29%)",
        "red": 66,
        "green": 66,
        "blue": 84,
        "hue": 240,
        "saturation": 12,
        "lightness": 29
    }, {
        "hex": "#3E3E53",
        "rgb": "rgb(62, 62, 83)",
        "hsl": "hsl(240, 14%, 28%)",
        "red": 62,
        "green": 62,
        "blue": 83,
        "hue": 240,
        "saturation": 14,
        "lightness": 28
    }, {
        "hex": "#77779D",
        "rgb": "rgb(119, 119, 157)",
        "hsl": "hsl(240, 16%, 54%)",
        "red": 119,
        "green": 119,
        "blue": 157,
        "hue": 240,
        "saturation": 16,
        "lightness": 54
    }, {
        "hex": "#EDEDF2",
        "rgb": "rgb(237, 237, 242)",
        "hsl": "hsl(240, 16%, 94%)",
        "red": 237,
        "green": 237,
        "blue": 242,
        "hue": 240,
        "saturation": 16,
        "lightness": 94
    }, {
        "hex": "#34344E",
        "rgb": "rgb(52, 52, 78)",
        "hsl": "hsl(240, 20%, 25%)",
        "red": 52,
        "green": 52,
        "blue": 78,
        "hue": 240,
        "saturation": 20,
        "lightness": 25
    }, {
        "hex": "#2F2F4D",
        "rgb": "rgb(47, 47, 77)",
        "hsl": "hsl(240, 24%, 24%)",
        "red": 47,
        "green": 47,
        "blue": 77,
        "hue": 240,
        "saturation": 24,
        "lightness": 24
    }, {
        "hex": "#12122B",
        "rgb": "rgb(18, 18, 43)",
        "hsl": "hsl(240, 41%, 12%)",
        "red": 18,
        "green": 18,
        "blue": 43,
        "hue": 240,
        "saturation": 41,
        "lightness": 12
    }, {
        "hex": "#181848",
        "rgb": "rgb(24, 24, 72)",
        "hsl": "hsl(240, 50%, 19%)",
        "red": 24,
        "green": 24,
        "blue": 72,
        "hue": 240,
        "saturation": 50,
        "lightness": 19
    }, {
        "hex": "#000039",
        "rgb": "rgb(0, 0, 57)",
        "hsl": "hsl(240, 100%, 11%)",
        "red": 0,
        "green": 0,
        "blue": 57,
        "hue": 240,
        "saturation": 100,
        "lightness": 11
    }, {
        "hex": "#2C2B4B",
        "rgb": "rgb(44, 43, 75)",
        "hsl": "hsl(242, 27%, 23%)",
        "red": 44,
        "green": 43,
        "blue": 75,
        "hue": 242,
        "saturation": 27,
        "lightness": 23
    }, {
        "hex": "#21203F",
        "rgb": "rgb(33, 32, 63)",
        "hsl": "hsl(242, 33%, 19%)",
        "red": 33,
        "green": 32,
        "blue": 63,
        "hue": 242,
        "saturation": 33,
        "lightness": 19
    }, {
        "hex": "#2F2BAD",
        "rgb": "rgb(47, 43, 173)",
        "hsl": "hsl(242, 60%, 42%)",
        "red": 47,
        "green": 43,
        "blue": 173,
        "hue": 242,
        "saturation": 60,
        "lightness": 42
    }, {
        "hex": "#141325",
        "rgb": "rgb(20, 19, 37)",
        "hsl": "hsl(243, 32%, 11%)",
        "red": 20,
        "green": 19,
        "blue": 37,
        "hue": 243,
        "saturation": 32,
        "lightness": 11
    }, {
        "hex": "#322C8E",
        "rgb": "rgb(50, 44, 142)",
        "hsl": "hsl(244, 53%, 36%)",
        "red": 50,
        "green": 44,
        "blue": 142,
        "hue": 244,
        "saturation": 53,
        "lightness": 36
    }, {
        "hex": "#8E8CA3",
        "rgb": "rgb(142, 140, 163)",
        "hsl": "hsl(245, 11%, 59%)",
        "red": 142,
        "green": 140,
        "blue": 163,
        "hue": 245,
        "saturation": 11,
        "lightness": 59
    }, {
        "hex": "#45444E",
        "rgb": "rgb(69, 68, 78)",
        "hsl": "hsl(246, 7%, 29%)",
        "red": 69,
        "green": 68,
        "blue": 78,
        "hue": 246,
        "saturation": 7,
        "lightness": 29
    }, {
        "hex": "#171430",
        "rgb": "rgb(23, 20, 48)",
        "hsl": "hsl(246, 41%, 13%)",
        "red": 23,
        "green": 20,
        "blue": 48,
        "hue": 246,
        "saturation": 41,
        "lightness": 13
    }, {
        "hex": "#0E0B29",
        "rgb": "rgb(14, 11, 41)",
        "hsl": "hsl(246, 58%, 10%)",
        "red": 14,
        "green": 11,
        "blue": 41,
        "hue": 246,
        "saturation": 58,
        "lightness": 10
    }, {
        "hex": "#03001C",
        "rgb": "rgb(3, 0, 28)",
        "hsl": "hsl(246, 100%, 5%)",
        "red": 3,
        "green": 0,
        "blue": 28,
        "hue": 246,
        "saturation": 100,
        "lightness": 5
    }, {
        "hex": "#7B7893",
        "rgb": "rgb(123, 120, 147)",
        "hsl": "hsl(247, 11%, 52%)",
        "red": 123,
        "green": 120,
        "blue": 147,
        "hue": 247,
        "saturation": 11,
        "lightness": 52
    }, {
        "hex": "#4A4857",
        "rgb": "rgb(74, 72, 87)",
        "hsl": "hsl(248, 9%, 31%)",
        "red": 74,
        "green": 72,
        "blue": 87,
        "hue": 248,
        "saturation": 9,
        "lightness": 31
    }, {
        "hex": "#565175",
        "rgb": "rgb(86, 81, 117)",
        "hsl": "hsl(248, 18%, 39%)",
        "red": 86,
        "green": 81,
        "blue": 117,
        "hue": 248,
        "saturation": 18,
        "lightness": 39
    }, {
        "hex": "#413B6B",
        "rgb": "rgb(65, 59, 107)",
        "hsl": "hsl(248, 29%, 33%)",
        "red": 65,
        "green": 59,
        "blue": 107,
        "hue": 248,
        "saturation": 29,
        "lightness": 33
    }, {
        "hex": "#7B6ED6",
        "rgb": "rgb(123, 110, 214)",
        "hsl": "hsl(248, 56%, 64%)",
        "red": 123,
        "green": 110,
        "blue": 214,
        "hue": 248,
        "saturation": 56,
        "lightness": 64
    }, {
        "hex": "#0C0636",
        "rgb": "rgb(12, 6, 54)",
        "hsl": "hsl(248, 80%, 12%)",
        "red": 12,
        "green": 6,
        "blue": 54,
        "hue": 248,
        "saturation": 80,
        "lightness": 12
    }, {
        "hex": "#D1D0D7",
        "rgb": "rgb(209, 208, 215)",
        "hsl": "hsl(249, 8%, 83%)",
        "red": 209,
        "green": 208,
        "blue": 215,
        "hue": 249,
        "saturation": 8,
        "lightness": 83
    }, {
        "hex": "#282634",
        "rgb": "rgb(40, 38, 52)",
        "hsl": "hsl(249, 16%, 18%)",
        "red": 40,
        "green": 38,
        "blue": 52,
        "hue": 249,
        "saturation": 16,
        "lightness": 18
    }, {
        "hex": "#8870FF",
        "rgb": "rgb(136, 112, 255)",
        "hsl": "hsl(250, 100%, 72%)",
        "red": 136,
        "green": 112,
        "blue": 255,
        "hue": 250,
        "saturation": 100,
        "lightness": 72
    }, {
        "hex": "#656273",
        "rgb": "rgb(101, 98, 115)",
        "hsl": "hsl(251, 8%, 42%)",
        "red": 101,
        "green": 98,
        "blue": 115,
        "hue": 251,
        "saturation": 8,
        "lightness": 42
    }, {
        "hex": "#171133",
        "rgb": "rgb(23, 17, 51)",
        "hsl": "hsl(251, 50%, 13%)",
        "red": 23,
        "green": 17,
        "blue": 51,
        "hue": 251,
        "saturation": 50,
        "lightness": 13
    }, {
        "hex": "#434247",
        "rgb": "rgb(67, 66, 71)",
        "hsl": "hsl(252, 4%, 27%)",
        "red": 67,
        "green": 66,
        "blue": 71,
        "hue": 252,
        "saturation": 4,
        "lightness": 27
    }, {
        "hex": "#333237",
        "rgb": "rgb(51, 50, 55)",
        "hsl": "hsl(252, 5%, 21%)",
        "red": 51,
        "green": 50,
        "blue": 55,
        "hue": 252,
        "saturation": 5,
        "lightness": 21
    }, {
        "hex": "#25232D",
        "rgb": "rgb(37, 35, 45)",
        "hsl": "hsl(252, 13%, 16%)",
        "red": 37,
        "green": 35,
        "blue": 45,
        "hue": 252,
        "saturation": 13,
        "lightness": 16
    }, {
        "hex": "#322F3E",
        "rgb": "rgb(50, 47, 62)",
        "hsl": "hsl(252, 14%, 21%)",
        "red": 50,
        "green": 47,
        "blue": 62,
        "hue": 252,
        "saturation": 14,
        "lightness": 21
    }, {
        "hex": "#9A8FC8",
        "rgb": "rgb(154, 143, 200)",
        "hsl": "hsl(252, 34%, 67%)",
        "red": 154,
        "green": 143,
        "blue": 200,
        "hue": 252,
        "saturation": 34,
        "lightness": 67
    }, {
        "hex": "#231B42",
        "rgb": "rgb(35, 27, 66)",
        "hsl": "hsl(252, 42%, 18%)",
        "red": 35,
        "green": 27,
        "blue": 66,
        "hue": 252,
        "saturation": 42,
        "lightness": 18
    }, {
        "hex": "#412A9C",
        "rgb": "rgb(65, 42, 156)",
        "hsl": "hsl(252, 58%, 39%)",
        "red": 65,
        "green": 42,
        "blue": 156,
        "hue": 252,
        "saturation": 58,
        "lightness": 39
    }, {
        "hex": "#E0DAF7",
        "rgb": "rgb(224, 218, 247)",
        "hsl": "hsl(252, 64%, 91%)",
        "red": 224,
        "green": 218,
        "blue": 247,
        "hue": 252,
        "saturation": 64,
        "lightness": 91
    }, {
        "hex": "#221D34",
        "rgb": "rgb(34, 29, 52)",
        "hsl": "hsl(253, 28%, 16%)",
        "red": 34,
        "green": 29,
        "blue": 52,
        "hue": 253,
        "saturation": 28,
        "lightness": 16
    }, {
        "hex": "#211C33",
        "rgb": "rgb(33, 28, 51)",
        "hsl": "hsl(253, 29%, 15%)",
        "red": 33,
        "green": 28,
        "blue": 51,
        "hue": 253,
        "saturation": 29,
        "lightness": 15
    }, {
        "hex": "#2A2344",
        "rgb": "rgb(42, 35, 68)",
        "hsl": "hsl(253, 32%, 20%)",
        "red": 42,
        "green": 35,
        "blue": 68,
        "hue": 253,
        "saturation": 32,
        "lightness": 20
    }, {
        "hex": "#160E32",
        "rgb": "rgb(22, 14, 50)",
        "hsl": "hsl(253, 56%, 13%)",
        "red": 22,
        "green": 14,
        "blue": 50,
        "hue": 253,
        "saturation": 56,
        "lightness": 13
    }, {
        "hex": "#23145B",
        "rgb": "rgb(35, 20, 91)",
        "hsl": "hsl(253, 64%, 22%)",
        "red": 35,
        "green": 20,
        "blue": 91,
        "hue": 253,
        "saturation": 64,
        "lightness": 22
    }, {
        "hex": "#232226",
        "rgb": "rgb(35, 34, 38)",
        "hsl": "hsl(255, 6%, 14%)",
        "red": 35,
        "green": 34,
        "blue": 38,
        "hue": 255,
        "saturation": 6,
        "lightness": 14
    }, {
        "hex": "#413E4A",
        "rgb": "rgb(65, 62, 74)",
        "hsl": "hsl(255, 9%, 27%)",
        "red": 65,
        "green": 62,
        "blue": 74,
        "hue": 255,
        "saturation": 9,
        "lightness": 27
    }, {
        "hex": "#060212",
        "rgb": "rgb(6, 2, 18)",
        "hsl": "hsl(255, 80%, 4%)",
        "red": 6,
        "green": 2,
        "blue": 18,
        "hue": 255,
        "saturation": 80,
        "lightness": 4
    }, {
        "hex": "#565164",
        "rgb": "rgb(86, 81, 100)",
        "hsl": "hsl(256, 10%, 35%)",
        "red": 86,
        "green": 81,
        "blue": 100,
        "hue": 256,
        "saturation": 10,
        "lightness": 35
    }, {
        "hex": "#39324D",
        "rgb": "rgb(57, 50, 77)",
        "hsl": "hsl(256, 21%, 25%)",
        "red": 57,
        "green": 50,
        "blue": 77,
        "hue": 256,
        "saturation": 21,
        "lightness": 25
    }, {
        "hex": "#504375",
        "rgb": "rgb(80, 67, 117)",
        "hsl": "hsl(256, 27%, 36%)",
        "red": 80,
        "green": 67,
        "blue": 117,
        "hue": 256,
        "saturation": 27,
        "lightness": 36
    }, {
        "hex": "#1F192F",
        "rgb": "rgb(31, 25, 47)",
        "hsl": "hsl(256, 31%, 14%)",
        "red": 31,
        "green": 25,
        "blue": 47,
        "hue": 256,
        "saturation": 31,
        "lightness": 14
    }, {
        "hex": "#0E0036",
        "rgb": "rgb(14, 0, 54)",
        "hsl": "hsl(256, 100%, 11%)",
        "red": 14,
        "green": 0,
        "blue": 54,
        "hue": 256,
        "saturation": 100,
        "lightness": 11
    }, {
        "hex": "#726C81",
        "rgb": "rgb(114, 108, 129)",
        "hsl": "hsl(257, 9%, 46%)",
        "red": 114,
        "green": 108,
        "blue": 129,
        "hue": 257,
        "saturation": 9,
        "lightness": 46
    }, {
        "hex": "#453C5C",
        "rgb": "rgb(69, 60, 92)",
        "hsl": "hsl(257, 21%, 30%)",
        "red": 69,
        "green": 60,
        "blue": 92,
        "hue": 257,
        "saturation": 21,
        "lightness": 30
    }, {
        "hex": "#676077",
        "rgb": "rgb(103, 96, 119)",
        "hsl": "hsl(258, 11%, 42%)",
        "red": 103,
        "green": 96,
        "blue": 119,
        "hue": 258,
        "saturation": 11,
        "lightness": 42
    }, {
        "hex": "#1A1623",
        "rgb": "rgb(26, 22, 35)",
        "hsl": "hsl(258, 23%, 11%)",
        "red": 26,
        "green": 22,
        "blue": 35,
        "hue": 258,
        "saturation": 23,
        "lightness": 11
    }, {
        "hex": "#3F3557",
        "rgb": "rgb(63, 53, 87)",
        "hsl": "hsl(258, 24%, 27%)",
        "red": 63,
        "green": 53,
        "blue": 87,
        "hue": 258,
        "saturation": 24,
        "lightness": 27
    }, {
        "hex": "#0E002F",
        "rgb": "rgb(14, 0, 47)",
        "hsl": "hsl(258, 100%, 9%)",
        "red": 14,
        "green": 0,
        "blue": 47,
        "hue": 258,
        "saturation": 100,
        "lightness": 9
    }, {
        "hex": "#5E5473",
        "rgb": "rgb(94, 84, 115)",
        "hsl": "hsl(259, 16%, 39%)",
        "red": 94,
        "green": 84,
        "blue": 115,
        "hue": 259,
        "saturation": 16,
        "lightness": 39
    }, {
        "hex": "#5C4F79",
        "rgb": "rgb(92, 79, 121)",
        "hsl": "hsl(259, 21%, 39%)",
        "red": 92,
        "green": 79,
        "blue": 121,
        "hue": 259,
        "saturation": 21,
        "lightness": 39
    }, {
        "hex": "#2E2444",
        "rgb": "rgb(46, 36, 68)",
        "hsl": "hsl(259, 31%, 20%)",
        "red": 46,
        "green": 36,
        "blue": 68,
        "hue": 259,
        "saturation": 31,
        "lightness": 20
    }, {
        "hex": "#291E40",
        "rgb": "rgb(41, 30, 64)",
        "hsl": "hsl(259, 36%, 18%)",
        "red": 41,
        "green": 30,
        "blue": 64,
        "hue": 259,
        "saturation": 36,
        "lightness": 18
    }, {
        "hex": "#412973",
        "rgb": "rgb(65, 41, 115)",
        "hsl": "hsl(259, 47%, 31%)",
        "red": 65,
        "green": 41,
        "blue": 115,
        "hue": 259,
        "saturation": 47,
        "lightness": 31
    }, {
        "hex": "#7345D6",
        "rgb": "rgb(115, 69, 214)",
        "hsl": "hsl(259, 64%, 55%)",
        "red": 115,
        "green": 69,
        "blue": 214,
        "hue": 259,
        "saturation": 64,
        "lightness": 55
    }, {
        "hex": "#353437",
        "rgb": "rgb(53, 52, 55)",
        "hsl": "hsl(260, 3%, 21%)",
        "red": 53,
        "green": 52,
        "blue": 55,
        "hue": 260,
        "saturation": 3,
        "lightness": 21
    }, {
        "hex": "#94919A",
        "rgb": "rgb(148, 145, 154)",
        "hsl": "hsl(260, 4%, 59%)",
        "red": 148,
        "green": 145,
        "blue": 154,
        "hue": 260,
        "saturation": 4,
        "lightness": 59
    }, {
        "hex": "#484450",
        "rgb": "rgb(72, 68, 80)",
        "hsl": "hsl(260, 8%, 29%)",
        "red": 72,
        "green": 68,
        "blue": 80,
        "hue": 260,
        "saturation": 8,
        "lightness": 29
    }, {
        "hex": "#81749C",
        "rgb": "rgb(129, 116, 156)",
        "hsl": "hsl(260, 17%, 53%)",
        "red": 129,
        "green": 116,
        "blue": 156,
        "hue": 260,
        "saturation": 17,
        "lightness": 53
    }, {
        "hex": "#4D3E6B",
        "rgb": "rgb(77, 62, 107)",
        "hsl": "hsl(260, 27%, 33%)",
        "red": 77,
        "green": 62,
        "blue": 107,
        "hue": 260,
        "saturation": 27,
        "lightness": 33
    }, {
        "hex": "#483078",
        "rgb": "rgb(72, 48, 120)",
        "hsl": "hsl(260, 43%, 33%)",
        "red": 72,
        "green": 48,
        "blue": 120,
        "hue": 260,
        "saturation": 43,
        "lightness": 33
    }, {
        "hex": "#301860",
        "rgb": "rgb(48, 24, 96)",
        "hsl": "hsl(260, 60%, 24%)",
        "red": 48,
        "green": 24,
        "blue": 96,
        "hue": 260,
        "saturation": 60,
        "lightness": 24
    }, {
        "hex": "#1E0C42",
        "rgb": "rgb(30, 12, 66)",
        "hsl": "hsl(260, 69%, 15%)",
        "red": 30,
        "green": 12,
        "blue": 66,
        "hue": 260,
        "saturation": 69,
        "lightness": 15
    }, {
        "hex": "#686077",
        "rgb": "rgb(104, 96, 119)",
        "hsl": "hsl(261, 11%, 42%)",
        "red": 104,
        "green": 96,
        "blue": 119,
        "hue": 261,
        "saturation": 11,
        "lightness": 42
    }, {
        "hex": "#9380B7",
        "rgb": "rgb(147, 128, 183)",
        "hsl": "hsl(261, 28%, 61%)",
        "red": 147,
        "green": 128,
        "blue": 183,
        "hue": 261,
        "saturation": 28,
        "lightness": 61
    }, {
        "hex": "#5015BD",
        "rgb": "rgb(80, 21, 189)",
        "hsl": "hsl(261, 80%, 41%)",
        "red": 80,
        "green": 21,
        "blue": 189,
        "hue": 261,
        "saturation": 80,
        "lightness": 41
    }, {
        "hex": "#75727A",
        "rgb": "rgb(117, 114, 122)",
        "hsl": "hsl(262, 3%, 46%)",
        "red": 117,
        "green": 114,
        "blue": 122,
        "hue": 262,
        "saturation": 3,
        "lightness": 46
    }, {
        "hex": "#5C5863",
        "rgb": "rgb(92, 88, 99)",
        "hsl": "hsl(262, 6%, 37%)",
        "red": 92,
        "green": 88,
        "blue": 99,
        "hue": 262,
        "saturation": 6,
        "lightness": 37
    }, {
        "hex": "#473469",
        "rgb": "rgb(71, 52, 105)",
        "hsl": "hsl(262, 34%, 31%)",
        "red": 71,
        "green": 52,
        "blue": 105,
        "hue": 262,
        "saturation": 34,
        "lightness": 31
    }, {
        "hex": "#6743A5",
        "rgb": "rgb(103, 67, 165)",
        "hsl": "hsl(262, 42%, 45%)",
        "red": 103,
        "green": 67,
        "blue": 165,
        "hue": 262,
        "saturation": 42,
        "lightness": 45
    }, {
        "hex": "#7037CD",
        "rgb": "rgb(112, 55, 205)",
        "hsl": "hsl(263, 60%, 51%)",
        "red": 112,
        "green": 55,
        "blue": 205,
        "hue": 263,
        "saturation": 60,
        "lightness": 51
    }, {
        "hex": "#551BB3",
        "rgb": "rgb(85, 27, 179)",
        "hsl": "hsl(263, 74%, 40%)",
        "red": 85,
        "green": 27,
        "blue": 179,
        "hue": 263,
        "saturation": 74,
        "lightness": 40
    }, {
        "hex": "#35313B",
        "rgb": "rgb(53, 49, 59)",
        "hsl": "hsl(264, 9%, 21%)",
        "red": 53,
        "green": 49,
        "blue": 59,
        "hue": 264,
        "saturation": 9,
        "lightness": 21
    }, {
        "hex": "#706482",
        "rgb": "rgb(112, 100, 130)",
        "hsl": "hsl(264, 13%, 45%)",
        "red": 112,
        "green": 100,
        "blue": 130,
        "hue": 264,
        "saturation": 13,
        "lightness": 45
    }, {
        "hex": "#615375",
        "rgb": "rgb(97, 83, 117)",
        "hsl": "hsl(265, 17%, 39%)",
        "red": 97,
        "green": 83,
        "blue": 117,
        "hue": 265,
        "saturation": 17,
        "lightness": 39
    }, {
        "hex": "#5A4C6E",
        "rgb": "rgb(90, 76, 110)",
        "hsl": "hsl(265, 18%, 36%)",
        "red": 90,
        "green": 76,
        "blue": 110,
        "hue": 265,
        "saturation": 18,
        "lightness": 36
    }, {
        "hex": "#2E1E45",
        "rgb": "rgb(46, 30, 69)",
        "hsl": "hsl(265, 39%, 19%)",
        "red": 46,
        "green": 30,
        "blue": 69,
        "hue": 265,
        "saturation": 39,
        "lightness": 19
    }, {
        "hex": "#EDE3FB",
        "rgb": "rgb(237, 227, 251)",
        "hsl": "hsl(265, 75%, 94%)",
        "red": 237,
        "green": 227,
        "blue": 251,
        "hue": 265,
        "saturation": 75,
        "lightness": 94
    }, {
        "hex": "#817A8A",
        "rgb": "rgb(129, 122, 138)",
        "hsl": "hsl(266, 6%, 51%)",
        "red": 129,
        "green": 122,
        "blue": 138,
        "hue": 266,
        "saturation": 6,
        "lightness": 51
    }, {
        "hex": "#352F3D",
        "rgb": "rgb(53, 47, 61)",
        "hsl": "hsl(266, 13%, 21%)",
        "red": 53,
        "green": 47,
        "blue": 61,
        "hue": 266,
        "saturation": 13,
        "lightness": 21
    }, {
        "hex": "#583B7E",
        "rgb": "rgb(88, 59, 126)",
        "hsl": "hsl(266, 36%, 36%)",
        "red": 88,
        "green": 59,
        "blue": 126,
        "hue": 266,
        "saturation": 36,
        "lightness": 36
    }, {
        "hex": "#200E38",
        "rgb": "rgb(32, 14, 56)",
        "hsl": "hsl(266, 60%, 14%)",
        "red": 32,
        "green": 14,
        "blue": 56,
        "hue": 266,
        "saturation": 60,
        "lightness": 14
    }, {
        "hex": "#766788",
        "rgb": "rgb(118, 103, 136)",
        "hsl": "hsl(267, 14%, 47%)",
        "red": 118,
        "green": 103,
        "blue": 136,
        "hue": 267,
        "saturation": 14,
        "lightness": 47
    }, {
        "hex": "#554865",
        "rgb": "rgb(85, 72, 101)",
        "hsl": "hsl(267, 17%, 34%)",
        "red": 85,
        "green": 72,
        "blue": 101,
        "hue": 267,
        "saturation": 17,
        "lightness": 34
    }, {
        "hex": "#4B3C5D",
        "rgb": "rgb(75, 60, 93)",
        "hsl": "hsl(267, 22%, 30%)",
        "red": 75,
        "green": 60,
        "blue": 93,
        "hue": 267,
        "saturation": 22,
        "lightness": 30
    }, {
        "hex": "#1F0441",
        "rgb": "rgb(31, 4, 65)",
        "hsl": "hsl(267, 88%, 14%)",
        "red": 31,
        "green": 4,
        "blue": 65,
        "hue": 267,
        "saturation": 88,
        "lightness": 14
    }, {
        "hex": "#170132",
        "rgb": "rgb(23, 1, 50)",
        "hsl": "hsl(267, 96%, 10%)",
        "red": 23,
        "green": 1,
        "blue": 50,
        "hue": 267,
        "saturation": 96,
        "lightness": 10
    }, {
        "hex": "#11091A",
        "rgb": "rgb(17, 9, 26)",
        "hsl": "hsl(268, 49%, 7%)",
        "red": 17,
        "green": 9,
        "blue": 26,
        "hue": 268,
        "saturation": 49,
        "lightness": 7
    }, {
        "hex": "#736681",
        "rgb": "rgb(115, 102, 129)",
        "hsl": "hsl(269, 12%, 45%)",
        "red": 115,
        "green": 102,
        "blue": 129,
        "hue": 269,
        "saturation": 12,
        "lightness": 45
    }, {
        "hex": "#51445F",
        "rgb": "rgb(81, 68, 95)",
        "hsl": "hsl(269, 17%, 32%)",
        "red": 81,
        "green": 68,
        "blue": 95,
        "hue": 269,
        "saturation": 17,
        "lightness": 32
    }, {
        "hex": "#3F324D",
        "rgb": "rgb(63, 50, 77)",
        "hsl": "hsl(269, 21%, 25%)",
        "red": 63,
        "green": 50,
        "blue": 77,
        "hue": 269,
        "saturation": 21,
        "lightness": 25
    }, {
        "hex": "#331D4A",
        "rgb": "rgb(51, 29, 74)",
        "hsl": "hsl(269, 44%, 20%)",
        "red": 51,
        "green": 29,
        "blue": 74,
        "hue": 269,
        "saturation": 44,
        "lightness": 20
    }, {
        "hex": "#9061C2",
        "rgb": "rgb(144, 97, 194)",
        "hsl": "hsl(269, 44%, 57%)",
        "red": 144,
        "green": 97,
        "blue": 194,
        "hue": 269,
        "saturation": 44,
        "lightness": 57
    }, {
        "hex": "#1A0B2A",
        "rgb": "rgb(26, 11, 42)",
        "hsl": "hsl(269, 58%, 10%)",
        "red": 26,
        "green": 11,
        "blue": 42,
        "hue": 269,
        "saturation": 58,
        "lightness": 10
    }, {
        "hex": "#BE80FF",
        "rgb": "rgb(190, 128, 255)",
        "hsl": "hsl(269, 100%, 75%)",
        "red": 190,
        "green": 128,
        "blue": 255,
        "hue": 269,
        "saturation": 100,
        "lightness": 75
    }, {
        "hex": "#2F2E30",
        "rgb": "rgb(47, 46, 48)",
        "hsl": "hsl(270, 2%, 18%)",
        "red": 47,
        "green": 46,
        "blue": 48,
        "hue": 270,
        "saturation": 2,
        "lightness": 18
    }, {
        "hex": "#4B4452",
        "rgb": "rgb(75, 68, 82)",
        "hsl": "hsl(270, 9%, 29%)",
        "red": 75,
        "green": 68,
        "blue": 82,
        "hue": 270,
        "saturation": 9,
        "lightness": 29
    }, {
        "hex": "#796C86",
        "rgb": "rgb(121, 108, 134)",
        "hsl": "hsl(270, 11%, 47%)",
        "red": 121,
        "green": 108,
        "blue": 134,
        "hue": 270,
        "saturation": 11,
        "lightness": 47
    }, {
        "hex": "#635274",
        "rgb": "rgb(99, 82, 116)",
        "hsl": "hsl(270, 17%, 39%)",
        "red": 99,
        "green": 82,
        "blue": 116,
        "hue": 270,
        "saturation": 17,
        "lightness": 39
    }, {
        "hex": "#1B1521",
        "rgb": "rgb(27, 21, 33)",
        "hsl": "hsl(270, 22%, 11%)",
        "red": 27,
        "green": 21,
        "blue": 33,
        "hue": 270,
        "saturation": 22,
        "lightness": 11
    }, {
        "hex": "#604878",
        "rgb": "rgb(96, 72, 120)",
        "hsl": "hsl(270, 25%, 38%)",
        "red": 96,
        "green": 72,
        "blue": 120,
        "hue": 270,
        "saturation": 25,
        "lightness": 38
    }, {
        "hex": "#23192D",
        "rgb": "rgb(35, 25, 45)",
        "hsl": "hsl(270, 29%, 14%)",
        "red": 35,
        "green": 25,
        "blue": 45,
        "hue": 270,
        "saturation": 29,
        "lightness": 14
    }, {
        "hex": "#472F5F",
        "rgb": "rgb(71, 47, 95)",
        "hsl": "hsl(270, 34%, 28%)",
        "red": 71,
        "green": 47,
        "blue": 95,
        "hue": 270,
        "saturation": 34,
        "lightness": 28
    }, {
        "hex": "#5B1D99",
        "rgb": "rgb(91, 29, 153)",
        "hsl": "hsl(270, 68%, 36%)",
        "red": 91,
        "green": 29,
        "blue": 153,
        "hue": 270,
        "saturation": 68,
        "lightness": 36
    }, {
        "hex": "#010002",
        "rgb": "rgb(1, 0, 2)",
        "hsl": "hsl(270, 100%, 0%)",
        "red": 1,
        "green": 0,
        "blue": 2,
        "hue": 270,
        "saturation": 100,
        "lightness": 0
    }, {
        "hex": "#BAAFC4",
        "rgb": "rgb(186, 175, 196)",
        "hsl": "hsl(271, 15%, 73%)",
        "red": 186,
        "green": 175,
        "blue": 196,
        "hue": 271,
        "saturation": 15,
        "lightness": 73
    }, {
        "hex": "#51425F",
        "rgb": "rgb(81, 66, 95)",
        "hsl": "hsl(271, 18%, 32%)",
        "red": 81,
        "green": 66,
        "blue": 95,
        "hue": 271,
        "saturation": 18,
        "lightness": 32
    }, {
        "hex": "#31233E",
        "rgb": "rgb(49, 35, 62)",
        "hsl": "hsl(271, 28%, 19%)",
        "red": 49,
        "green": 35,
        "blue": 62,
        "hue": 271,
        "saturation": 28,
        "lightness": 19
    }, {
        "hex": "#6C5B7B",
        "rgb": "rgb(108, 91, 123)",
        "hsl": "hsl(272, 15%, 42%)",
        "red": 108,
        "green": 91,
        "blue": 123,
        "hue": 272,
        "saturation": 15,
        "lightness": 42
    }, {
        "hex": "#140D1A",
        "rgb": "rgb(20, 13, 26)",
        "hsl": "hsl(272, 33%, 8%)",
        "red": 20,
        "green": 13,
        "blue": 26,
        "hue": 272,
        "saturation": 33,
        "lightness": 8
    }, {
        "hex": "#301C41",
        "rgb": "rgb(48, 28, 65)",
        "hsl": "hsl(272, 40%, 18%)",
        "red": 48,
        "green": 28,
        "blue": 65,
        "hue": 272,
        "saturation": 40,
        "lightness": 18
    }, {
        "hex": "#E0D1ED",
        "rgb": "rgb(224, 209, 237)",
        "hsl": "hsl(272, 44%, 87%)",
        "red": 224,
        "green": 209,
        "blue": 237,
        "hue": 272,
        "saturation": 44,
        "lightness": 87
    }, {
        "hex": "#1C0B2B",
        "rgb": "rgb(28, 11, 43)",
        "hsl": "hsl(272, 59%, 11%)",
        "red": 28,
        "green": 11,
        "blue": 43,
        "hue": 272,
        "saturation": 59,
        "lightness": 11
    }, {
        "hex": "#0A0310",
        "rgb": "rgb(10, 3, 16)",
        "hsl": "hsl(272, 68%, 4%)",
        "red": 10,
        "green": 3,
        "blue": 16,
        "hue": 272,
        "saturation": 68,
        "lightness": 4
    }, {
        "hex": "#948E99",
        "rgb": "rgb(148, 142, 153)",
        "hsl": "hsl(273, 5%, 58%)",
        "red": 148,
        "green": 142,
        "blue": 153,
        "hue": 273,
        "saturation": 5,
        "lightness": 58
    }, {
        "hex": "#160921",
        "rgb": "rgb(22, 9, 33)",
        "hsl": "hsl(273, 57%, 8%)",
        "red": 22,
        "green": 9,
        "blue": 33,
        "hue": 273,
        "saturation": 57,
        "lightness": 8
    }, {
        "hex": "#2A044A",
        "rgb": "rgb(42, 4, 74)",
        "hsl": "hsl(273, 90%, 15%)",
        "red": 42,
        "green": 4,
        "blue": 74,
        "hue": 273,
        "saturation": 90,
        "lightness": 15
    }, {
        "hex": "#D9ABFF",
        "rgb": "rgb(217, 171, 255)",
        "hsl": "hsl(273, 100%, 84%)",
        "red": 217,
        "green": 171,
        "blue": 255,
        "hue": 273,
        "saturation": 100,
        "lightness": 84
    }, {
        "hex": "#C3BBC9",
        "rgb": "rgb(195, 187, 201)",
        "hsl": "hsl(274, 11%, 76%)",
        "red": 195,
        "green": 187,
        "blue": 201,
        "hue": 274,
        "saturation": 11,
        "lightness": 76
    }, {
        "hex": "#9684A3",
        "rgb": "rgb(150, 132, 163)",
        "hsl": "hsl(275, 14%, 58%)",
        "red": 150,
        "green": 132,
        "blue": 163,
        "hue": 275,
        "saturation": 14,
        "lightness": 58
    }, {
        "hex": "#4E395D",
        "rgb": "rgb(78, 57, 93)",
        "hsl": "hsl(275, 24%, 29%)",
        "red": 78,
        "green": 57,
        "blue": 93,
        "hue": 275,
        "saturation": 24,
        "lightness": 29
    }, {
        "hex": "#352640",
        "rgb": "rgb(53, 38, 64)",
        "hsl": "hsl(275, 25%, 20%)",
        "red": 53,
        "green": 38,
        "blue": 64,
        "hue": 275,
        "saturation": 25,
        "lightness": 20
    }, {
        "hex": "#49007E",
        "rgb": "rgb(73, 0, 126)",
        "hsl": "hsl(275, 100%, 25%)",
        "red": 73,
        "green": 0,
        "blue": 126,
        "hue": 275,
        "saturation": 100,
        "lightness": 25
    }, {
        "hex": "#6A5E72",
        "rgb": "rgb(106, 94, 114)",
        "hsl": "hsl(276, 10%, 41%)",
        "red": 106,
        "green": 94,
        "blue": 114,
        "hue": 276,
        "saturation": 10,
        "lightness": 41
    }, {
        "hex": "#322938",
        "rgb": "rgb(50, 41, 56)",
        "hsl": "hsl(276, 15%, 19%)",
        "red": 50,
        "green": 41,
        "blue": 56,
        "hue": 276,
        "saturation": 15,
        "lightness": 19
    }, {
        "hex": "#63526E",
        "rgb": "rgb(99, 82, 110)",
        "hsl": "hsl(276, 15%, 38%)",
        "red": 99,
        "green": 82,
        "blue": 110,
        "hue": 276,
        "saturation": 15,
        "lightness": 38
    }, {
        "hex": "#3B2B46",
        "rgb": "rgb(59, 43, 70)",
        "hsl": "hsl(276, 24%, 22%)",
        "red": 59,
        "green": 43,
        "blue": 70,
        "hue": 276,
        "saturation": 24,
        "lightness": 22
    }, {
        "hex": "#2E2633",
        "rgb": "rgb(46, 38, 51)",
        "hsl": "hsl(277, 15%, 17%)",
        "red": 46,
        "green": 38,
        "blue": 51,
        "hue": 277,
        "saturation": 15,
        "lightness": 17
    }, {
        "hex": "#3B234A",
        "rgb": "rgb(59, 35, 74)",
        "hsl": "hsl(277, 36%, 21%)",
        "red": 59,
        "green": 35,
        "blue": 74,
        "hue": 277,
        "saturation": 36,
        "lightness": 21
    }, {
        "hex": "#3E3742",
        "rgb": "rgb(62, 55, 66)",
        "hsl": "hsl(278, 9%, 24%)",
        "red": 62,
        "green": 55,
        "blue": 66,
        "hue": 278,
        "saturation": 9,
        "lightness": 24
    }, {
        "hex": "#523961",
        "rgb": "rgb(82, 57, 97)",
        "hsl": "hsl(278, 26%, 30%)",
        "red": 82,
        "green": 57,
        "blue": 97,
        "hue": 278,
        "saturation": 26,
        "lightness": 30
    }, {
        "hex": "#3F264D",
        "rgb": "rgb(63, 38, 77)",
        "hsl": "hsl(278, 34%, 23%)",
        "red": 63,
        "green": 38,
        "blue": 77,
        "hue": 278,
        "saturation": 34,
        "lightness": 23
    }, {
        "hex": "#391B4A",
        "rgb": "rgb(57, 27, 74)",
        "hsl": "hsl(278, 47%, 20%)",
        "red": 57,
        "green": 27,
        "blue": 74,
        "hue": 278,
        "saturation": 47,
        "lightness": 20
    }, {
        "hex": "#413249",
        "rgb": "rgb(65, 50, 73)",
        "hsl": "hsl(279, 19%, 24%)",
        "red": 65,
        "green": 50,
        "blue": 73,
        "hue": 279,
        "saturation": 19,
        "lightness": 24
    }, {
        "hex": "#260D33",
        "rgb": "rgb(38, 13, 51)",
        "hsl": "hsl(279, 59%, 13%)",
        "red": 38,
        "green": 13,
        "blue": 51,
        "hue": 279,
        "saturation": 59,
        "lightness": 13
    }, {
        "hex": "#F2E5F9",
        "rgb": "rgb(242, 229, 249)",
        "hsl": "hsl(279, 63%, 94%)",
        "red": 242,
        "green": 229,
        "blue": 249,
        "hue": 279,
        "saturation": 63,
        "lightness": 94
    }, {
        "hex": "#252326",
        "rgb": "rgb(37, 35, 38)",
        "hsl": "hsl(280, 4%, 14%)",
        "red": 37,
        "green": 35,
        "blue": 38,
        "hue": 280,
        "saturation": 4,
        "lightness": 14
    }, {
        "hex": "#181619",
        "rgb": "rgb(24, 22, 25)",
        "hsl": "hsl(280, 6%, 9%)",
        "red": 24,
        "green": 22,
        "blue": 25,
        "hue": 280,
        "saturation": 6,
        "lightness": 9
    }, {
        "hex": "#312736",
        "rgb": "rgb(49, 39, 54)",
        "hsl": "hsl(280, 16%, 18%)",
        "red": 49,
        "green": 39,
        "blue": 54,
        "hue": 280,
        "saturation": 16,
        "lightness": 18
    }, {
        "hex": "#7E638C",
        "rgb": "rgb(126, 99, 140)",
        "hsl": "hsl(280, 17%, 47%)",
        "red": 126,
        "green": 99,
        "blue": 140,
        "hue": 280,
        "saturation": 17,
        "lightness": 47
    }, {
        "hex": "#773D94",
        "rgb": "rgb(119, 61, 148)",
        "hsl": "hsl(280, 42%, 41%)",
        "red": 119,
        "green": 61,
        "blue": 148,
        "hue": 280,
        "saturation": 42,
        "lightness": 41
    }, {
        "hex": "#B380CC",
        "rgb": "rgb(179, 128, 204)",
        "hsl": "hsl(280, 43%, 65%)",
        "red": 179,
        "green": 128,
        "blue": 204,
        "hue": 280,
        "saturation": 43,
        "lightness": 65
    }, {
        "hex": "#582770",
        "rgb": "rgb(88, 39, 112)",
        "hsl": "hsl(280, 48%, 30%)",
        "red": 88,
        "green": 39,
        "blue": 112,
        "hue": 280,
        "saturation": 48,
        "lightness": 30
    }, {
        "hex": "#F2E4F9",
        "rgb": "rgb(242, 228, 249)",
        "hsl": "hsl(280, 64%, 94%)",
        "red": 242,
        "green": 228,
        "blue": 249,
        "hue": 280,
        "saturation": 64,
        "lightness": 94
    }, {
        "hex": "#AA00FF",
        "rgb": "rgb(170, 0, 255)",
        "hsl": "hsl(280, 100%, 50%)",
        "red": 170,
        "green": 0,
        "blue": 255,
        "hue": 280,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#615566",
        "rgb": "rgb(97, 85, 102)",
        "hsl": "hsl(282, 9%, 37%)",
        "red": 97,
        "green": 85,
        "blue": 102,
        "hue": 282,
        "saturation": 9,
        "lightness": 37
    }, {
        "hex": "#87758F",
        "rgb": "rgb(135, 117, 143)",
        "hsl": "hsl(282, 10%, 51%)",
        "red": 135,
        "green": 117,
        "blue": 143,
        "hue": 282,
        "saturation": 10,
        "lightness": 51
    }, {
        "hex": "#270A33",
        "rgb": "rgb(39, 10, 51)",
        "hsl": "hsl(282, 67%, 12%)",
        "red": 39,
        "green": 10,
        "blue": 51,
        "hue": 282,
        "saturation": 67,
        "lightness": 12
    }, {
        "hex": "#6B666D",
        "rgb": "rgb(107, 102, 109)",
        "hsl": "hsl(283, 3%, 41%)",
        "red": 107,
        "green": 102,
        "blue": 109,
        "hue": 283,
        "saturation": 3,
        "lightness": 41
    }, {
        "hex": "#594461",
        "rgb": "rgb(89, 68, 97)",
        "hsl": "hsl(283, 18%, 32%)",
        "red": 89,
        "green": 68,
        "blue": 97,
        "hue": 283,
        "saturation": 18,
        "lightness": 32
    }, {
        "hex": "#AE8FBA",
        "rgb": "rgb(174, 143, 186)",
        "hsl": "hsl(283, 24%, 65%)",
        "red": 174,
        "green": 143,
        "blue": 186,
        "hue": 283,
        "saturation": 24,
        "lightness": 65
    }, {
        "hex": "#311D39",
        "rgb": "rgb(49, 29, 57)",
        "hsl": "hsl(283, 33%, 17%)",
        "red": 49,
        "green": 29,
        "blue": 57,
        "hue": 283,
        "saturation": 33,
        "lightness": 17
    }, {
        "hex": "#230F2B",
        "rgb": "rgb(35, 15, 43)",
        "hsl": "hsl(283, 48%, 11%)",
        "red": 35,
        "green": 15,
        "blue": 43,
        "hue": 283,
        "saturation": 48,
        "lightness": 11
    }, {
        "hex": "#420B58",
        "rgb": "rgb(66, 11, 88)",
        "hsl": "hsl(283, 78%, 19%)",
        "red": 66,
        "green": 11,
        "blue": 88,
        "hue": 283,
        "saturation": 78,
        "lightness": 19
    }, {
        "hex": "#72577C",
        "rgb": "rgb(114, 87, 124)",
        "hsl": "hsl(284, 18%, 41%)",
        "red": 114,
        "green": 87,
        "blue": 124,
        "hue": 284,
        "saturation": 18,
        "lightness": 41
    }, {
        "hex": "#361542",
        "rgb": "rgb(54, 21, 66)",
        "hsl": "hsl(284, 52%, 17%)",
        "red": 54,
        "green": 21,
        "blue": 66,
        "hue": 284,
        "saturation": 52,
        "lightness": 17
    }, {
        "hex": "#BA01FF",
        "rgb": "rgb(186, 1, 255)",
        "hsl": "hsl(284, 100%, 50%)",
        "red": 186,
        "green": 1,
        "blue": 255,
        "hue": 284,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#524656",
        "rgb": "rgb(82, 70, 86)",
        "hsl": "hsl(285, 10%, 31%)",
        "red": 82,
        "green": 70,
        "blue": 86,
        "hue": 285,
        "saturation": 10,
        "lightness": 31
    }, {
        "hex": "#2D1B33",
        "rgb": "rgb(45, 27, 51)",
        "hsl": "hsl(285, 31%, 15%)",
        "red": 45,
        "green": 27,
        "blue": 51,
        "hue": 285,
        "saturation": 31,
        "lightness": 15
    }, {
        "hex": "#331B3B",
        "rgb": "rgb(51, 27, 59)",
        "hsl": "hsl(285, 37%, 17%)",
        "red": 51,
        "green": 27,
        "blue": 59,
        "hue": 285,
        "saturation": 37,
        "lightness": 17
    }, {
        "hex": "#2E1437",
        "rgb": "rgb(46, 20, 55)",
        "hsl": "hsl(285, 47%, 15%)",
        "red": 46,
        "green": 20,
        "blue": 55,
        "hue": 285,
        "saturation": 47,
        "lightness": 15
    }, {
        "hex": "#360745",
        "rgb": "rgb(54, 7, 69)",
        "hsl": "hsl(285, 82%, 15%)",
        "red": 54,
        "green": 7,
        "blue": 69,
        "hue": 285,
        "saturation": 82,
        "lightness": 15
    }, {
        "hex": "#2F003F",
        "rgb": "rgb(47, 0, 63)",
        "hsl": "hsl(285, 100%, 12%)",
        "red": 47,
        "green": 0,
        "blue": 63,
        "hue": 285,
        "saturation": 100,
        "lightness": 12
    }, {
        "hex": "#4D4250",
        "rgb": "rgb(77, 66, 80)",
        "hsl": "hsl(287, 10%, 29%)",
        "red": 77,
        "green": 66,
        "blue": 80,
        "hue": 287,
        "saturation": 10,
        "lightness": 29
    }, {
        "hex": "#471754",
        "rgb": "rgb(71, 23, 84)",
        "hsl": "hsl(287, 57%, 21%)",
        "red": 71,
        "green": 23,
        "blue": 84,
        "hue": 287,
        "saturation": 57,
        "lightness": 21
    }, {
        "hex": "#1A081F",
        "rgb": "rgb(26, 8, 31)",
        "hsl": "hsl(287, 59%, 8%)",
        "red": 26,
        "green": 8,
        "blue": 31,
        "hue": 287,
        "saturation": 59,
        "lightness": 8
    }, {
        "hex": "#E1B7ED",
        "rgb": "rgb(225, 183, 237)",
        "hsl": "hsl(287, 60%, 82%)",
        "red": 225,
        "green": 183,
        "blue": 237,
        "hue": 287,
        "saturation": 60,
        "lightness": 82
    }, {
        "hex": "#0D0210",
        "rgb": "rgb(13, 2, 16)",
        "hsl": "hsl(287, 78%, 4%)",
        "red": 13,
        "green": 2,
        "blue": 16,
        "hue": 287,
        "saturation": 78,
        "lightness": 4
    }, {
        "hex": "#181419",
        "rgb": "rgb(24, 20, 25)",
        "hsl": "hsl(288, 11%, 9%)",
        "red": 24,
        "green": 20,
        "blue": 25,
        "hue": 288,
        "saturation": 11,
        "lightness": 9
    }, {
        "hex": "#130716",
        "rgb": "rgb(19, 7, 22)",
        "hsl": "hsl(288, 52%, 6%)",
        "red": 19,
        "green": 7,
        "blue": 22,
        "hue": 288,
        "saturation": 52,
        "lightness": 6
    }, {
        "hex": "#360B41",
        "rgb": "rgb(54, 11, 65)",
        "hsl": "hsl(288, 71%, 15%)",
        "red": 54,
        "green": 11,
        "blue": 65,
        "hue": 288,
        "saturation": 71,
        "lightness": 15
    }, {
        "hex": "#770493",
        "rgb": "rgb(119, 4, 147)",
        "hsl": "hsl(288, 95%, 30%)",
        "red": 119,
        "green": 4,
        "blue": 147,
        "hue": 288,
        "saturation": 95,
        "lightness": 30
    }, {
        "hex": "#160D18",
        "rgb": "rgb(22, 13, 24)",
        "hsl": "hsl(289, 30%, 7%)",
        "red": 22,
        "green": 13,
        "blue": 24,
        "hue": 289,
        "saturation": 30,
        "lightness": 7
    }, {
        "hex": "#4F2958",
        "rgb": "rgb(79, 41, 88)",
        "hsl": "hsl(289, 36%, 25%)",
        "red": 79,
        "green": 41,
        "blue": 88,
        "hue": 289,
        "saturation": 36,
        "lightness": 25
    }, {
        "hex": "#36173D",
        "rgb": "rgb(54, 23, 61)",
        "hsl": "hsl(289, 45%, 16%)",
        "red": 54,
        "green": 23,
        "blue": 61,
        "hue": 289,
        "saturation": 45,
        "lightness": 16
    }, {
        "hex": "#2F1335",
        "rgb": "rgb(47, 19, 53)",
        "hsl": "hsl(289, 47%, 14%)",
        "red": 47,
        "green": 19,
        "blue": 53,
        "hue": 289,
        "saturation": 47,
        "lightness": 14
    }, {
        "hex": "#3D0A49",
        "rgb": "rgb(61, 10, 73)",
        "hsl": "hsl(289, 76%, 16%)",
        "red": 61,
        "green": 10,
        "blue": 73,
        "hue": 289,
        "saturation": 76,
        "lightness": 16
    }, {
        "hex": "#7E5686",
        "rgb": "rgb(126, 86, 134)",
        "hsl": "hsl(290, 22%, 43%)",
        "red": 126,
        "green": 86,
        "blue": 134,
        "hue": 290,
        "saturation": 22,
        "lightness": 43
    }, {
        "hex": "#5C3E62",
        "rgb": "rgb(92, 62, 98)",
        "hsl": "hsl(290, 23%, 31%)",
        "red": 92,
        "green": 62,
        "blue": 98,
        "hue": 290,
        "saturation": 23,
        "lightness": 31
    }, {
        "hex": "#43204A",
        "rgb": "rgb(67, 32, 74)",
        "hsl": "hsl(290, 40%, 21%)",
        "red": 67,
        "green": 32,
        "blue": 74,
        "hue": 290,
        "saturation": 40,
        "lightness": 21
    }, {
        "hex": "#827085",
        "rgb": "rgb(130, 112, 133)",
        "hsl": "hsl(291, 9%, 48%)",
        "red": 130,
        "green": 112,
        "blue": 133,
        "hue": 291,
        "saturation": 9,
        "lightness": 48
    }, {
        "hex": "#605063",
        "rgb": "rgb(96, 80, 99)",
        "hsl": "hsl(291, 11%, 35%)",
        "red": 96,
        "green": 80,
        "blue": 99,
        "hue": 291,
        "saturation": 11,
        "lightness": 35
    }, {
        "hex": "#1D0C20",
        "rgb": "rgb(29, 12, 32)",
        "hsl": "hsl(291, 45%, 9%)",
        "red": 29,
        "green": 12,
        "blue": 32,
        "hue": 291,
        "saturation": 45,
        "lightness": 9
    }, {
        "hex": "#651F71",
        "rgb": "rgb(101, 31, 113)",
        "hsl": "hsl(291, 57%, 28%)",
        "red": 101,
        "green": 31,
        "blue": 113,
        "hue": 291,
        "saturation": 57,
        "lightness": 28
    }, {
        "hex": "#4B3E4D",
        "rgb": "rgb(75, 62, 77)",
        "hsl": "hsl(292, 11%, 27%)",
        "red": 75,
        "green": 62,
        "blue": 77,
        "hue": 292,
        "saturation": 11,
        "lightness": 27
    }, {
        "hex": "#77477E",
        "rgb": "rgb(119, 71, 126)",
        "hsl": "hsl(292, 28%, 39%)",
        "red": 119,
        "green": 71,
        "blue": 126,
        "hue": 292,
        "saturation": 28,
        "lightness": 39
    }, {
        "hex": "#261329",
        "rgb": "rgb(38, 19, 41)",
        "hsl": "hsl(292, 37%, 12%)",
        "red": 38,
        "green": 19,
        "blue": 41,
        "hue": 292,
        "saturation": 37,
        "lightness": 12
    }, {
        "hex": "#574759",
        "rgb": "rgb(87, 71, 89)",
        "hsl": "hsl(293, 11%, 31%)",
        "red": 87,
        "green": 71,
        "blue": 89,
        "hue": 293,
        "saturation": 11,
        "lightness": 31
    }, {
        "hex": "#725B75",
        "rgb": "rgb(114, 91, 117)",
        "hsl": "hsl(293, 12%, 41%)",
        "red": 114,
        "green": 91,
        "blue": 117,
        "hue": 293,
        "saturation": 12,
        "lightness": 41
    }, {
        "hex": "#46294A",
        "rgb": "rgb(70, 41, 74)",
        "hsl": "hsl(293, 29%, 23%)",
        "red": 70,
        "green": 41,
        "blue": 74,
        "hue": 293,
        "saturation": 29,
        "lightness": 23
    }, {
        "hex": "#37193B",
        "rgb": "rgb(55, 25, 59)",
        "hsl": "hsl(293, 40%, 16%)",
        "red": 55,
        "green": 25,
        "blue": 59,
        "hue": 293,
        "saturation": 40,
        "lightness": 16
    }, {
        "hex": "#320139",
        "rgb": "rgb(50, 1, 57)",
        "hsl": "hsl(293, 97%, 11%)",
        "red": 50,
        "green": 1,
        "blue": 57,
        "hue": 293,
        "saturation": 97,
        "lightness": 11
    }, {
        "hex": "#2B222C",
        "rgb": "rgb(43, 34, 44)",
        "hsl": "hsl(294, 13%, 15%)",
        "red": 43,
        "green": 34,
        "blue": 44,
        "hue": 294,
        "saturation": 13,
        "lightness": 15
    }, {
        "hex": "#744F78",
        "rgb": "rgb(116, 79, 120)",
        "hsl": "hsl(294, 21%, 39%)",
        "red": 116,
        "green": 79,
        "blue": 120,
        "hue": 294,
        "saturation": 21,
        "lightness": 39
    }, {
        "hex": "#331436",
        "rgb": "rgb(51, 20, 54)",
        "hsl": "hsl(295, 46%, 15%)",
        "red": 51,
        "green": 20,
        "blue": 54,
        "hue": 295,
        "saturation": 46,
        "lightness": 15
    }, {
        "hex": "#260729",
        "rgb": "rgb(38, 7, 41)",
        "hsl": "hsl(295, 71%, 9%)",
        "red": 38,
        "green": 7,
        "blue": 41,
        "hue": 295,
        "saturation": 71,
        "lightness": 9
    }, {
        "hex": "#674D69",
        "rgb": "rgb(103, 77, 105)",
        "hsl": "hsl(296, 15%, 36%)",
        "red": 103,
        "green": 77,
        "blue": 105,
        "hue": 296,
        "saturation": 15,
        "lightness": 36
    }, {
        "hex": "#4E3150",
        "rgb": "rgb(78, 49, 80)",
        "hsl": "hsl(296, 24%, 25%)",
        "red": 78,
        "green": 49,
        "blue": 80,
        "hue": 296,
        "saturation": 24,
        "lightness": 25
    }, {
        "hex": "#753979",
        "rgb": "rgb(117, 57, 121)",
        "hsl": "hsl(296, 36%, 35%)",
        "red": 117,
        "green": 57,
        "blue": 121,
        "hue": 296,
        "saturation": 36,
        "lightness": 35
    }, {
        "hex": "#F6E7F7",
        "rgb": "rgb(246, 231, 247)",
        "hsl": "hsl(296, 50%, 94%)",
        "red": 246,
        "green": 231,
        "blue": 247,
        "hue": 296,
        "saturation": 50,
        "lightness": 94
    }, {
        "hex": "#37053B",
        "rgb": "rgb(55, 5, 59)",
        "hsl": "hsl(296, 84%, 13%)",
        "red": 55,
        "green": 5,
        "blue": 59,
        "hue": 296,
        "saturation": 84,
        "lightness": 13
    }, {
        "hex": "#210123",
        "rgb": "rgb(33, 1, 35)",
        "hsl": "hsl(296, 94%, 7%)",
        "red": 33,
        "green": 1,
        "blue": 35,
        "hue": 296,
        "saturation": 94,
        "lightness": 7
    }, {
        "hex": "#7D677E",
        "rgb": "rgb(125, 103, 126)",
        "hsl": "hsl(297, 10%, 45%)",
        "red": 125,
        "green": 103,
        "blue": 126,
        "hue": 297,
        "saturation": 10,
        "lightness": 45
    }, {
        "hex": "#9C7A9D",
        "rgb": "rgb(156, 122, 157)",
        "hsl": "hsl(298, 15%, 55%)",
        "red": 156,
        "green": 122,
        "blue": 157,
        "hue": 298,
        "saturation": 15,
        "lightness": 55
    }, {
        "hex": "#5E405F",
        "rgb": "rgb(94, 64, 95)",
        "hsl": "hsl(298, 19%, 31%)",
        "red": 94,
        "green": 64,
        "blue": 95,
        "hue": 298,
        "saturation": 19,
        "lightness": 31
    }, {
        "hex": "#6B456C",
        "rgb": "rgb(107, 69, 108)",
        "hsl": "hsl(298, 22%, 35%)",
        "red": 107,
        "green": 69,
        "blue": 108,
        "hue": 298,
        "saturation": 22,
        "lightness": 35
    }, {
        "hex": "#422343",
        "rgb": "rgb(66, 35, 67)",
        "hsl": "hsl(298, 31%, 20%)",
        "red": 66,
        "green": 35,
        "blue": 67,
        "hue": 298,
        "saturation": 31,
        "lightness": 20
    }, {
        "hex": "#512B52",
        "rgb": "rgb(81, 43, 82)",
        "hsl": "hsl(298, 31%, 25%)",
        "red": 81,
        "green": 43,
        "blue": 82,
        "hue": 298,
        "saturation": 31,
        "lightness": 25
    }, {
        "hex": "#651366",
        "rgb": "rgb(101, 19, 102)",
        "hsl": "hsl(299, 69%, 24%)",
        "red": 101,
        "green": 19,
        "blue": 102,
        "hue": 299,
        "saturation": 69,
        "lightness": 24
    }, {
        "hex": "#340735",
        "rgb": "rgb(52, 7, 53)",
        "hsl": "hsl(299, 77%, 12%)",
        "red": 52,
        "green": 7,
        "blue": 53,
        "hue": 299,
        "saturation": 77,
        "lightness": 12
    }, {
        "hex": "#4B004C",
        "rgb": "rgb(75, 0, 76)",
        "hsl": "hsl(299, 100%, 15%)",
        "red": 75,
        "green": 0,
        "blue": 76,
        "hue": 299,
        "saturation": 100,
        "lightness": 15
    }, {
        "hex": "#2E292E",
        "rgb": "rgb(46, 41, 46)",
        "hsl": "hsl(300, 6%, 17%)",
        "red": 46,
        "green": 41,
        "blue": 46,
        "hue": 300,
        "saturation": 6,
        "lightness": 17
    }, {
        "hex": "#B8AEB8",
        "rgb": "rgb(184, 174, 184)",
        "hsl": "hsl(300, 7%, 70%)",
        "red": 184,
        "green": 174,
        "blue": 184,
        "hue": 300,
        "saturation": 7,
        "lightness": 70
    }, {
        "hex": "#453745",
        "rgb": "rgb(69, 55, 69)",
        "hsl": "hsl(300, 11%, 24%)",
        "red": 69,
        "green": 55,
        "blue": 69,
        "hue": 300,
        "saturation": 11,
        "lightness": 24
    }, {
        "hex": "#635063",
        "rgb": "rgb(99, 80, 99)",
        "hsl": "hsl(300, 11%, 35%)",
        "red": 99,
        "green": 80,
        "blue": 99,
        "hue": 300,
        "saturation": 11,
        "lightness": 35
    }, {
        "hex": "#503850",
        "rgb": "rgb(80, 56, 80)",
        "hsl": "hsl(300, 18%, 27%)",
        "red": 80,
        "green": 56,
        "blue": 80,
        "hue": 300,
        "saturation": 18,
        "lightness": 27
    }, {
        "hex": "#906090",
        "rgb": "rgb(144, 96, 144)",
        "hsl": "hsl(300, 20%, 47%)",
        "red": 144,
        "green": 96,
        "blue": 144,
        "hue": 300,
        "saturation": 20,
        "lightness": 47
    }, {
        "hex": "#492D49",
        "rgb": "rgb(73, 45, 73)",
        "hsl": "hsl(300, 24%, 23%)",
        "red": 73,
        "green": 45,
        "blue": 73,
        "hue": 300,
        "saturation": 24,
        "lightness": 23
    }, {
        "hex": "#663366",
        "rgb": "rgb(102, 51, 102)",
        "hsl": "hsl(300, 33%, 30%)",
        "red": 102,
        "green": 51,
        "blue": 102,
        "hue": 300,
        "saturation": 33,
        "lightness": 30
    }, {
        "hex": "#4D1D4D",
        "rgb": "rgb(77, 29, 77)",
        "hsl": "hsl(300, 45%, 21%)",
        "red": 77,
        "green": 29,
        "blue": 77,
        "hue": 300,
        "saturation": 45,
        "lightness": 21
    }, {
        "hex": "#AD2BAD",
        "rgb": "rgb(173, 43, 173)",
        "hsl": "hsl(300, 60%, 42%)",
        "red": 173,
        "green": 43,
        "blue": 173,
        "hue": 300,
        "saturation": 60,
        "lightness": 42
    }, {
        "hex": "#040004",
        "rgb": "rgb(4, 0, 4)",
        "hsl": "hsl(300, 100%, 1%)",
        "red": 4,
        "green": 0,
        "blue": 4,
        "hue": 300,
        "saturation": 100,
        "lightness": 1
    }, {
        "hex": "#300030",
        "rgb": "rgb(48, 0, 48)",
        "hsl": "hsl(300, 100%, 9%)",
        "red": 48,
        "green": 0,
        "blue": 48,
        "hue": 300,
        "saturation": 100,
        "lightness": 9
    }, {
        "hex": "#390039",
        "rgb": "rgb(57, 0, 57)",
        "hsl": "hsl(300, 100%, 11%)",
        "red": 57,
        "green": 0,
        "blue": 57,
        "hue": 300,
        "saturation": 100,
        "lightness": 11
    }, {
        "hex": "#480048",
        "rgb": "rgb(72, 0, 72)",
        "hsl": "hsl(300, 100%, 14%)",
        "red": 72,
        "green": 0,
        "blue": 72,
        "hue": 300,
        "saturation": 100,
        "lightness": 14
    }, {
        "hex": "#820081",
        "rgb": "rgb(130, 0, 129)",
        "hsl": "hsl(300, 100%, 25%)",
        "red": 130,
        "green": 0,
        "blue": 129,
        "hue": 300,
        "saturation": 100,
        "lightness": 25
    }, {
        "hex": "#FFFCFF",
        "rgb": "rgb(255, 252, 255)",
        "hsl": "hsl(300, 100%, 99%)",
        "red": 255,
        "green": 252,
        "blue": 255,
        "hue": 300,
        "saturation": 100,
        "lightness": 99
    }, {
        "hex": "#FFFBFF",
        "rgb": "rgb(255, 251, 255)",
        "hsl": "hsl(300, 100%, 99%)",
        "red": 255,
        "green": 251,
        "blue": 255,
        "hue": 300,
        "saturation": 100,
        "lightness": 99
    }, {
        "hex": "#613860",
        "rgb": "rgb(97, 56, 96)",
        "hsl": "hsl(301, 27%, 30%)",
        "red": 97,
        "green": 56,
        "blue": 96,
        "hue": 301,
        "saturation": 27,
        "lightness": 30
    }, {
        "hex": "#703D6F",
        "rgb": "rgb(112, 61, 111)",
        "hsl": "hsl(301, 29%, 34%)",
        "red": 112,
        "green": 61,
        "blue": 111,
        "hue": 301,
        "saturation": 29,
        "lightness": 34
    }, {
        "hex": "#643263",
        "rgb": "rgb(100, 50, 99)",
        "hsl": "hsl(301, 33%, 29%)",
        "red": 100,
        "green": 50,
        "blue": 99,
        "hue": 301,
        "saturation": 33,
        "lightness": 29
    }, {
        "hex": "#562155",
        "rgb": "rgb(86, 33, 85)",
        "hsl": "hsl(301, 45%, 23%)",
        "red": 86,
        "green": 33,
        "blue": 85,
        "hue": 301,
        "saturation": 45,
        "lightness": 23
    }, {
        "hex": "#5C3D5B",
        "rgb": "rgb(92, 61, 91)",
        "hsl": "hsl(302, 20%, 30%)",
        "red": 92,
        "green": 61,
        "blue": 91,
        "hue": 302,
        "saturation": 20,
        "lightness": 30
    }, {
        "hex": "#4C264B",
        "rgb": "rgb(76, 38, 75)",
        "hsl": "hsl(302, 33%, 22%)",
        "red": 76,
        "green": 38,
        "blue": 75,
        "hue": 302,
        "saturation": 33,
        "lightness": 22
    }, {
        "hex": "#4F2C4D",
        "rgb": "rgb(79, 44, 77)",
        "hsl": "hsl(303, 28%, 24%)",
        "red": 79,
        "green": 44,
        "blue": 77,
        "hue": 303,
        "saturation": 28,
        "lightness": 24
    }, {
        "hex": "#413040",
        "rgb": "rgb(65, 48, 64)",
        "hsl": "hsl(304, 15%, 22%)",
        "red": 65,
        "green": 48,
        "blue": 64,
        "hue": 304,
        "saturation": 15,
        "lightness": 22
    }, {
        "hex": "#620E5D",
        "rgb": "rgb(98, 14, 93)",
        "hsl": "hsl(304, 75%, 22%)",
        "red": 98,
        "green": 14,
        "blue": 93,
        "hue": 304,
        "saturation": 75,
        "lightness": 22
    }, {
        "hex": "#660860",
        "rgb": "rgb(102, 8, 96)",
        "hsl": "hsl(304, 85%, 22%)",
        "red": 102,
        "green": 8,
        "blue": 96,
        "hue": 304,
        "saturation": 85,
        "lightness": 22
    }, {
        "hex": "#692764",
        "rgb": "rgb(105, 39, 100)",
        "hsl": "hsl(305, 46%, 28%)",
        "red": 105,
        "green": 39,
        "blue": 100,
        "hue": 305,
        "saturation": 46,
        "lightness": 28
    }, {
        "hex": "#641F5E",
        "rgb": "rgb(100, 31, 94)",
        "hsl": "hsl(305, 53%, 26%)",
        "red": 100,
        "green": 31,
        "blue": 94,
        "hue": 305,
        "saturation": 53,
        "lightness": 26
    }, {
        "hex": "#641F5E",
        "rgb": "rgb(100, 31, 94)",
        "hsl": "hsl(305, 53%, 26%)",
        "red": 100,
        "green": 31,
        "blue": 94,
        "hue": 305,
        "saturation": 53,
        "lightness": 26
    }, {
        "hex": "#81657E",
        "rgb": "rgb(129, 101, 126)",
        "hsl": "hsl(306, 12%, 45%)",
        "red": 129,
        "green": 101,
        "blue": 126,
        "hue": 306,
        "saturation": 12,
        "lightness": 45
    }, {
        "hex": "#5E405B",
        "rgb": "rgb(94, 64, 91)",
        "hsl": "hsl(306, 19%, 31%)",
        "red": 94,
        "green": 64,
        "blue": 91,
        "hue": 306,
        "saturation": 19,
        "lightness": 31
    }, {
        "hex": "#482344",
        "rgb": "rgb(72, 35, 68)",
        "hsl": "hsl(306, 35%, 21%)",
        "red": 72,
        "green": 35,
        "blue": 68,
        "hue": 306,
        "saturation": 35,
        "lightness": 21
    }, {
        "hex": "#130912",
        "rgb": "rgb(19, 9, 18)",
        "hsl": "hsl(306, 36%, 5%)",
        "red": 19,
        "green": 9,
        "blue": 18,
        "hue": 306,
        "saturation": 36,
        "lightness": 5
    }, {
        "hex": "#1F0A1D",
        "rgb": "rgb(31, 10, 29)",
        "hsl": "hsl(306, 51%, 8%)",
        "red": 31,
        "green": 10,
        "blue": 29,
        "hue": 306,
        "saturation": 51,
        "lightness": 8
    }, {
        "hex": "#A795A5",
        "rgb": "rgb(167, 149, 165)",
        "hsl": "hsl(307, 9%, 62%)",
        "red": 167,
        "green": 149,
        "blue": 165,
        "hue": 307,
        "saturation": 9,
        "lightness": 62
    }, {
        "hex": "#C9B7C7",
        "rgb": "rgb(201, 183, 199)",
        "hsl": "hsl(307, 14%, 75%)",
        "red": 201,
        "green": 183,
        "blue": 199,
        "hue": 307,
        "saturation": 14,
        "lightness": 75
    }, {
        "hex": "#573E54",
        "rgb": "rgb(87, 62, 84)",
        "hsl": "hsl(307, 17%, 29%)",
        "red": 87,
        "green": 62,
        "blue": 84,
        "hue": 307,
        "saturation": 17,
        "lightness": 29
    }, {
        "hex": "#4F364C",
        "rgb": "rgb(79, 54, 76)",
        "hsl": "hsl(307, 19%, 26%)",
        "red": 79,
        "green": 54,
        "blue": 76,
        "hue": 307,
        "saturation": 19,
        "lightness": 26
    }, {
        "hex": "#322030",
        "rgb": "rgb(50, 32, 48)",
        "hsl": "hsl(307, 22%, 16%)",
        "red": 50,
        "green": 32,
        "blue": 48,
        "hue": 307,
        "saturation": 22,
        "lightness": 16
    }, {
        "hex": "#4F2D4B",
        "rgb": "rgb(79, 45, 75)",
        "hsl": "hsl(307, 27%, 24%)",
        "red": 79,
        "green": 45,
        "blue": 75,
        "hue": 307,
        "saturation": 27,
        "lightness": 24
    }, {
        "hex": "#341931",
        "rgb": "rgb(52, 25, 49)",
        "hsl": "hsl(307, 35%, 15%)",
        "red": 52,
        "green": 25,
        "blue": 49,
        "hue": 307,
        "saturation": 35,
        "lightness": 15
    }, {
        "hex": "#943D8A",
        "rgb": "rgb(148, 61, 138)",
        "hsl": "hsl(307, 42%, 41%)",
        "red": 148,
        "green": 61,
        "blue": 138,
        "hue": 307,
        "saturation": 42,
        "lightness": 41
    }, {
        "hex": "#40223C",
        "rgb": "rgb(64, 34, 60)",
        "hsl": "hsl(308, 31%, 19%)",
        "red": 64,
        "green": 34,
        "blue": 60,
        "hue": 308,
        "saturation": 31,
        "lightness": 19
    }, {
        "hex": "#84407B",
        "rgb": "rgb(132, 64, 123)",
        "hsl": "hsl(308, 35%, 38%)",
        "red": 132,
        "green": 64,
        "blue": 123,
        "hue": 308,
        "saturation": 35,
        "lightness": 38
    }, {
        "hex": "#55024A",
        "rgb": "rgb(85, 2, 74)",
        "hsl": "hsl(308, 95%, 17%)",
        "red": 85,
        "green": 2,
        "blue": 74,
        "hue": 308,
        "saturation": 95,
        "lightness": 17
    }, {
        "hex": "#C7B9C5",
        "rgb": "rgb(199, 185, 197)",
        "hsl": "hsl(309, 11%, 75%)",
        "red": 199,
        "green": 185,
        "blue": 197,
        "hue": 309,
        "saturation": 11,
        "lightness": 75
    }, {
        "hex": "#351330",
        "rgb": "rgb(53, 19, 48)",
        "hsl": "hsl(309, 47%, 14%)",
        "red": 53,
        "green": 19,
        "blue": 48,
        "hue": 309,
        "saturation": 47,
        "lightness": 14
    }, {
        "hex": "#6E1E62",
        "rgb": "rgb(110, 30, 98)",
        "hsl": "hsl(309, 57%, 27%)",
        "red": 110,
        "green": 30,
        "blue": 98,
        "hue": 309,
        "saturation": 57,
        "lightness": 27
    }, {
        "hex": "#520647",
        "rgb": "rgb(82, 6, 71)",
        "hsl": "hsl(309, 86%, 17%)",
        "red": 82,
        "green": 6,
        "blue": 71,
        "hue": 309,
        "saturation": 86,
        "lightness": 17
    }, {
        "hex": "#730662",
        "rgb": "rgb(115, 6, 98)",
        "hsl": "hsl(309, 90%, 24%)",
        "red": 115,
        "green": 6,
        "blue": 98,
        "hue": 309,
        "saturation": 90,
        "lightness": 24
    }, {
        "hex": "#3B0032",
        "rgb": "rgb(59, 0, 50)",
        "hsl": "hsl(309, 100%, 12%)",
        "red": 59,
        "green": 0,
        "blue": 50,
        "hue": 309,
        "saturation": 100,
        "lightness": 12
    }, {
        "hex": "#3C363B",
        "rgb": "rgb(60, 54, 59)",
        "hsl": "hsl(310, 5%, 22%)",
        "red": 60,
        "green": 54,
        "blue": 59,
        "hue": 310,
        "saturation": 5,
        "lightness": 22
    }, {
        "hex": "#5E525C",
        "rgb": "rgb(94, 82, 92)",
        "hsl": "hsl(310, 7%, 35%)",
        "red": 94,
        "green": 82,
        "blue": 92,
        "hue": 310,
        "saturation": 7,
        "lightness": 35
    }, {
        "hex": "#451A3E",
        "rgb": "rgb(69, 26, 62)",
        "hsl": "hsl(310, 45%, 19%)",
        "red": 69,
        "green": 26,
        "blue": 62,
        "hue": 310,
        "saturation": 45,
        "lightness": 19
    }, {
        "hex": "#66245B",
        "rgb": "rgb(102, 36, 91)",
        "hsl": "hsl(310, 48%, 27%)",
        "red": 102,
        "green": 36,
        "blue": 91,
        "hue": 310,
        "saturation": 48,
        "lightness": 27
    }, {
        "hex": "#2E0527",
        "rgb": "rgb(46, 5, 39)",
        "hsl": "hsl(310, 80%, 10%)",
        "red": 46,
        "green": 5,
        "blue": 39,
        "hue": 310,
        "saturation": 80,
        "lightness": 10
    }, {
        "hex": "#4A3A47",
        "rgb": "rgb(74, 58, 71)",
        "hsl": "hsl(311, 12%, 26%)",
        "red": 74,
        "green": 58,
        "blue": 71,
        "hue": 311,
        "saturation": 12,
        "lightness": 26
    }, {
        "hex": "#B998B3",
        "rgb": "rgb(185, 152, 179)",
        "hsl": "hsl(311, 19%, 66%)",
        "red": 185,
        "green": 152,
        "blue": 179,
        "hue": 311,
        "saturation": 19,
        "lightness": 66
    }, {
        "hex": "#321D2E",
        "rgb": "rgb(50, 29, 46)",
        "hsl": "hsl(311, 27%, 15%)",
        "red": 50,
        "green": 29,
        "blue": 46,
        "hue": 311,
        "saturation": 27,
        "lightness": 15
    }, {
        "hex": "#391D34",
        "rgb": "rgb(57, 29, 52)",
        "hsl": "hsl(311, 33%, 17%)",
        "red": 57,
        "green": 29,
        "blue": 52,
        "hue": 311,
        "saturation": 33,
        "lightness": 17
    }, {
        "hex": "#742365",
        "rgb": "rgb(116, 35, 101)",
        "hsl": "hsl(311, 54%, 30%)",
        "red": 116,
        "green": 35,
        "blue": 101,
        "hue": 311,
        "saturation": 54,
        "lightness": 30
    }, {
        "hex": "#490A3D",
        "rgb": "rgb(73, 10, 61)",
        "hsl": "hsl(311, 76%, 16%)",
        "red": 73,
        "green": 10,
        "blue": 61,
        "hue": 311,
        "saturation": 76,
        "lightness": 16
    }, {
        "hex": "#540045",
        "rgb": "rgb(84, 0, 69)",
        "hsl": "hsl(311, 100%, 16%)",
        "red": 84,
        "green": 0,
        "blue": 69,
        "hue": 311,
        "saturation": 100,
        "lightness": 16
    }, {
        "hex": "#878286",
        "rgb": "rgb(135, 130, 134)",
        "hsl": "hsl(312, 2%, 52%)",
        "red": 135,
        "green": 130,
        "blue": 134,
        "hue": 312,
        "saturation": 2,
        "lightness": 52
    }, {
        "hex": "#221D21",
        "rgb": "rgb(34, 29, 33)",
        "hsl": "hsl(312, 8%, 12%)",
        "red": 34,
        "green": 29,
        "blue": 33,
        "hue": 312,
        "saturation": 8,
        "lightness": 12
    }, {
        "hex": "#4F364A",
        "rgb": "rgb(79, 54, 74)",
        "hsl": "hsl(312, 19%, 26%)",
        "red": 79,
        "green": 54,
        "blue": 74,
        "hue": 312,
        "saturation": 19,
        "lightness": 26
    }, {
        "hex": "#572E4F",
        "rgb": "rgb(87, 46, 79)",
        "hsl": "hsl(312, 31%, 26%)",
        "red": 87,
        "green": 46,
        "blue": 79,
        "hue": 312,
        "saturation": 31,
        "lightness": 26
    }, {
        "hex": "#30182B",
        "rgb": "rgb(48, 24, 43)",
        "hsl": "hsl(312, 33%, 14%)",
        "red": 48,
        "green": 24,
        "blue": 43,
        "hue": 312,
        "saturation": 33,
        "lightness": 14
    }, {
        "hex": "#470D3B",
        "rgb": "rgb(71, 13, 59)",
        "hsl": "hsl(312, 69%, 16%)",
        "red": 71,
        "green": 13,
        "blue": 59,
        "hue": 312,
        "saturation": 69,
        "lightness": 16
    }, {
        "hex": "#410936",
        "rgb": "rgb(65, 9, 54)",
        "hsl": "hsl(312, 76%, 15%)",
        "red": 65,
        "green": 9,
        "blue": 54,
        "hue": 312,
        "saturation": 76,
        "lightness": 15
    }, {
        "hex": "#866A80",
        "rgb": "rgb(134, 106, 128)",
        "hsl": "hsl(313, 12%, 47%)",
        "red": 134,
        "green": 106,
        "blue": 128,
        "hue": 313,
        "saturation": 12,
        "lightness": 47
    }, {
        "hex": "#3B2D38",
        "rgb": "rgb(59, 45, 56)",
        "hsl": "hsl(313, 13%, 20%)",
        "red": 59,
        "green": 45,
        "blue": 56,
        "hue": 313,
        "saturation": 13,
        "lightness": 20
    }, {
        "hex": "#71556B",
        "rgb": "rgb(113, 85, 107)",
        "hsl": "hsl(313, 14%, 39%)",
        "red": 113,
        "green": 85,
        "blue": 107,
        "hue": 313,
        "saturation": 14,
        "lightness": 39
    }, {
        "hex": "#5D4157",
        "rgb": "rgb(93, 65, 87)",
        "hsl": "hsl(313, 18%, 31%)",
        "red": 93,
        "green": 65,
        "blue": 87,
        "hue": 313,
        "saturation": 18,
        "lightness": 31
    }, {
        "hex": "#84567A",
        "rgb": "rgb(132, 86, 122)",
        "hsl": "hsl(313, 21%, 43%)",
        "red": 132,
        "green": 86,
        "blue": 122,
        "hue": 313,
        "saturation": 21,
        "lightness": 43
    }, {
        "hex": "#4D3147",
        "rgb": "rgb(77, 49, 71)",
        "hsl": "hsl(313, 22%, 25%)",
        "red": 77,
        "green": 49,
        "blue": 71,
        "hue": 313,
        "saturation": 22,
        "lightness": 25
    }, {
        "hex": "#823772",
        "rgb": "rgb(130, 55, 114)",
        "hsl": "hsl(313, 41%, 36%)",
        "red": 130,
        "green": 55,
        "blue": 114,
        "hue": 313,
        "saturation": 41,
        "lightness": 36
    }, {
        "hex": "#6D165A",
        "rgb": "rgb(109, 22, 90)",
        "hsl": "hsl(313, 66%, 26%)",
        "red": 109,
        "green": 22,
        "blue": 90,
        "hue": 313,
        "saturation": 66,
        "lightness": 26
    }, {
        "hex": "#4A073C",
        "rgb": "rgb(74, 7, 60)",
        "hsl": "hsl(313, 83%, 16%)",
        "red": 74,
        "green": 7,
        "blue": 60,
        "hue": 313,
        "saturation": 83,
        "lightness": 16
    }, {
        "hex": "#9D007A",
        "rgb": "rgb(157, 0, 122)",
        "hsl": "hsl(313, 100%, 31%)",
        "red": 157,
        "green": 0,
        "blue": 122,
        "hue": 313,
        "saturation": 100,
        "lightness": 31
    }, {
        "hex": "#B80090",
        "rgb": "rgb(184, 0, 144)",
        "hsl": "hsl(313, 100%, 36%)",
        "red": 184,
        "green": 0,
        "blue": 144,
        "hue": 313,
        "saturation": 100,
        "lightness": 36
    }, {
        "hex": "#62455B",
        "rgb": "rgb(98, 69, 91)",
        "hsl": "hsl(314, 17%, 33%)",
        "red": 98,
        "green": 69,
        "blue": 91,
        "hue": 314,
        "saturation": 17,
        "lightness": 33
    }, {
        "hex": "#A75293",
        "rgb": "rgb(167, 82, 147)",
        "hsl": "hsl(314, 34%, 49%)",
        "red": 167,
        "green": 82,
        "blue": 147,
        "hue": 314,
        "saturation": 34,
        "lightness": 49
    }, {
        "hex": "#9C3C86",
        "rgb": "rgb(156, 60, 134)",
        "hsl": "hsl(314, 44%, 42%)",
        "red": 156,
        "green": 60,
        "blue": 134,
        "hue": 314,
        "saturation": 44,
        "lightness": 42
    }, {
        "hex": "#3D1734",
        "rgb": "rgb(61, 23, 52)",
        "hsl": "hsl(314, 45%, 16%)",
        "red": 61,
        "green": 23,
        "blue": 52,
        "hue": 314,
        "saturation": 45,
        "lightness": 16
    }, {
        "hex": "#300D28",
        "rgb": "rgb(48, 13, 40)",
        "hsl": "hsl(314, 57%, 12%)",
        "red": 48,
        "green": 13,
        "blue": 40,
        "hue": 314,
        "saturation": 57,
        "lightness": 12
    }, {
        "hex": "#73185E",
        "rgb": "rgb(115, 24, 94)",
        "hsl": "hsl(314, 65%, 27%)",
        "red": 115,
        "green": 24,
        "blue": 94,
        "hue": 314,
        "saturation": 65,
        "lightness": 27
    }, {
        "hex": "#3F0632",
        "rgb": "rgb(63, 6, 50)",
        "hsl": "hsl(314, 83%, 14%)",
        "red": 63,
        "green": 6,
        "blue": 50,
        "hue": 314,
        "saturation": 83,
        "lightness": 14
    }, {
        "hex": "#8E6D86",
        "rgb": "rgb(142, 109, 134)",
        "hsl": "hsl(315, 13%, 49%)",
        "red": 142,
        "green": 109,
        "blue": 134,
        "hue": 315,
        "saturation": 13,
        "lightness": 49
    }, {
        "hex": "#B88BAD",
        "rgb": "rgb(184, 139, 173)",
        "hsl": "hsl(315, 24%, 63%)",
        "red": 184,
        "green": 139,
        "blue": 173,
        "hue": 315,
        "saturation": 24,
        "lightness": 63
    }, {
        "hex": "#B877A8",
        "rgb": "rgb(184, 119, 168)",
        "hsl": "hsl(315, 31%, 59%)",
        "red": 184,
        "green": 119,
        "blue": 168,
        "hue": 315,
        "saturation": 31,
        "lightness": 59
    }, {
        "hex": "#8E407A",
        "rgb": "rgb(142, 64, 122)",
        "hsl": "hsl(315, 38%, 40%)",
        "red": 142,
        "green": 64,
        "blue": 122,
        "hue": 315,
        "saturation": 38,
        "lightness": 40
    }, {
        "hex": "#D940B3",
        "rgb": "rgb(217, 64, 179)",
        "hsl": "hsl(315, 67%, 55%)",
        "red": 217,
        "green": 64,
        "blue": 179,
        "hue": 315,
        "saturation": 67,
        "lightness": 55
    }, {
        "hex": "#B8008A",
        "rgb": "rgb(184, 0, 138)",
        "hsl": "hsl(315, 100%, 36%)",
        "red": 184,
        "green": 0,
        "blue": 138,
        "hue": 315,
        "saturation": 100,
        "lightness": 36
    }, {
        "hex": "#6F646C",
        "rgb": "rgb(111, 100, 108)",
        "hsl": "hsl(316, 5%, 41%)",
        "red": 111,
        "green": 100,
        "blue": 108,
        "hue": 316,
        "saturation": 5,
        "lightness": 41
    }, {
        "hex": "#5F545C",
        "rgb": "rgb(95, 84, 92)",
        "hsl": "hsl(316, 6%, 35%)",
        "red": 95,
        "green": 84,
        "blue": 92,
        "hue": 316,
        "saturation": 6,
        "lightness": 35
    }, {
        "hex": "#392A35",
        "rgb": "rgb(57, 42, 53)",
        "hsl": "hsl(316, 15%, 19%)",
        "red": 57,
        "green": 42,
        "blue": 53,
        "hue": 316,
        "saturation": 15,
        "lightness": 19
    }, {
        "hex": "#9E6A90",
        "rgb": "rgb(158, 106, 144)",
        "hsl": "hsl(316, 21%, 52%)",
        "red": 158,
        "green": 106,
        "blue": 144,
        "hue": 316,
        "saturation": 21,
        "lightness": 52
    }, {
        "hex": "#612A52",
        "rgb": "rgb(97, 42, 82)",
        "hsl": "hsl(316, 40%, 27%)",
        "red": 97,
        "green": 42,
        "blue": 82,
        "hue": 316,
        "saturation": 40,
        "lightness": 27
    }, {
        "hex": "#5A1E4A",
        "rgb": "rgb(90, 30, 74)",
        "hsl": "hsl(316, 50%, 24%)",
        "red": 90,
        "green": 30,
        "blue": 74,
        "hue": 316,
        "saturation": 50,
        "lightness": 24
    }, {
        "hex": "#390D2D",
        "rgb": "rgb(57, 13, 45)",
        "hsl": "hsl(316, 63%, 14%)",
        "red": 57,
        "green": 13,
        "blue": 45,
        "hue": 316,
        "saturation": 63,
        "lightness": 14
    }, {
        "hex": "#493443",
        "rgb": "rgb(73, 52, 67)",
        "hsl": "hsl(317, 17%, 25%)",
        "red": 73,
        "green": 52,
        "blue": 67,
        "hue": 317,
        "saturation": 17,
        "lightness": 25
    }, {
        "hex": "#381C30",
        "rgb": "rgb(56, 28, 48)",
        "hsl": "hsl(317, 33%, 16%)",
        "red": 56,
        "green": 28,
        "blue": 48,
        "hue": 317,
        "saturation": 33,
        "lightness": 16
    }, {
        "hex": "#310A26",
        "rgb": "rgb(49, 10, 38)",
        "hsl": "hsl(317, 66%, 12%)",
        "red": 49,
        "green": 10,
        "blue": 38,
        "hue": 317,
        "saturation": 66,
        "lightness": 12
    }, {
        "hex": "#370128",
        "rgb": "rgb(55, 1, 40)",
        "hsl": "hsl(317, 96%, 11%)",
        "red": 55,
        "green": 1,
        "blue": 40,
        "hue": 317,
        "saturation": 96,
        "lightness": 11
    }, {
        "hex": "#5C5259",
        "rgb": "rgb(92, 82, 89)",
        "hsl": "hsl(318, 6%, 34%)",
        "red": 92,
        "green": 82,
        "blue": 89,
        "hue": 318,
        "saturation": 6,
        "lightness": 34
    }, {
        "hex": "#73626E",
        "rgb": "rgb(115, 98, 110)",
        "hsl": "hsl(318, 8%, 42%)",
        "red": 115,
        "green": 98,
        "blue": 110,
        "hue": 318,
        "saturation": 8,
        "lightness": 42
    }, {
        "hex": "#281B24",
        "rgb": "rgb(40, 27, 36)",
        "hsl": "hsl(318, 19%, 13%)",
        "red": 40,
        "green": 27,
        "blue": 36,
        "hue": 318,
        "saturation": 19,
        "lightness": 13
    }, {
        "hex": "#2D1C28",
        "rgb": "rgb(45, 28, 40)",
        "hsl": "hsl(318, 23%, 14%)",
        "red": 45,
        "green": 28,
        "blue": 40,
        "hue": 318,
        "saturation": 23,
        "lightness": 14
    }, {
        "hex": "#632F53",
        "rgb": "rgb(99, 47, 83)",
        "hsl": "hsl(318, 36%, 29%)",
        "red": 99,
        "green": 47,
        "blue": 83,
        "hue": 318,
        "saturation": 36,
        "lightness": 29
    }, {
        "hex": "#3D1C33",
        "rgb": "rgb(61, 28, 51)",
        "hsl": "hsl(318, 37%, 17%)",
        "red": 61,
        "green": 28,
        "blue": 51,
        "hue": 318,
        "saturation": 37,
        "lightness": 17
    }, {
        "hex": "#1F0E1A",
        "rgb": "rgb(31, 14, 26)",
        "hsl": "hsl(318, 38%, 9%)",
        "red": 31,
        "green": 14,
        "blue": 26,
        "hue": 318,
        "saturation": 38,
        "lightness": 9
    }, {
        "hex": "#7F135F",
        "rgb": "rgb(127, 19, 95)",
        "hsl": "hsl(318, 74%, 29%)",
        "red": 127,
        "green": 19,
        "blue": 95,
        "hue": 318,
        "saturation": 74,
        "lightness": 29
    }, {
        "hex": "#6F0550",
        "rgb": "rgb(111, 5, 80)",
        "hsl": "hsl(318, 91%, 23%)",
        "red": 111,
        "green": 5,
        "blue": 80,
        "hue": 318,
        "saturation": 91,
        "lightness": 23
    }, {
        "hex": "#5D2D4E",
        "rgb": "rgb(93, 45, 78)",
        "hsl": "hsl(319, 35%, 27%)",
        "red": 93,
        "green": 45,
        "blue": 78,
        "hue": 319,
        "saturation": 35,
        "lightness": 27
    }, {
        "hex": "#3E1C33",
        "rgb": "rgb(62, 28, 51)",
        "hsl": "hsl(319, 38%, 18%)",
        "red": 62,
        "green": 28,
        "blue": 51,
        "hue": 319,
        "saturation": 38,
        "lightness": 18
    }, {
        "hex": "#4B1139",
        "rgb": "rgb(75, 17, 57)",
        "hsl": "hsl(319, 63%, 18%)",
        "red": 75,
        "green": 17,
        "blue": 57,
        "hue": 319,
        "saturation": 63,
        "lightness": 18
    }, {
        "hex": "#27081D",
        "rgb": "rgb(39, 8, 29)",
        "hsl": "hsl(319, 66%, 9%)",
        "red": 39,
        "green": 8,
        "blue": 29,
        "hue": 319,
        "saturation": 66,
        "lightness": 9
    }, {
        "hex": "#3B0C2C",
        "rgb": "rgb(59, 12, 44)",
        "hsl": "hsl(319, 66%, 14%)",
        "red": 59,
        "green": 12,
        "blue": 44,
        "hue": 319,
        "saturation": 66,
        "lightness": 14
    }, {
        "hex": "#210518",
        "rgb": "rgb(33, 5, 24)",
        "hsl": "hsl(319, 74%, 7%)",
        "red": 33,
        "green": 5,
        "blue": 24,
        "hue": 319,
        "saturation": 74,
        "lightness": 7
    }, {
        "hex": "#680148",
        "rgb": "rgb(104, 1, 72)",
        "hsl": "hsl(319, 98%, 21%)",
        "red": 104,
        "green": 1,
        "blue": 72,
        "hue": 319,
        "saturation": 98,
        "lightness": 21
    }, {
        "hex": "#85005B",
        "rgb": "rgb(133, 0, 91)",
        "hsl": "hsl(319, 100%, 26%)",
        "red": 133,
        "green": 0,
        "blue": 91,
        "hue": 319,
        "saturation": 100,
        "lightness": 26
    }, {
        "hex": "#990069",
        "rgb": "rgb(153, 0, 105)",
        "hsl": "hsl(319, 100%, 30%)",
        "red": 153,
        "green": 0,
        "blue": 105,
        "hue": 319,
        "saturation": 100,
        "lightness": 30
    }, {
        "hex": "#352630",
        "rgb": "rgb(53, 38, 48)",
        "hsl": "hsl(320, 16%, 18%)",
        "red": 53,
        "green": 38,
        "blue": 48,
        "hue": 320,
        "saturation": 16,
        "lightness": 18
    }, {
        "hex": "#452D3D",
        "rgb": "rgb(69, 45, 61)",
        "hsl": "hsl(320, 21%, 22%)",
        "red": 69,
        "green": 45,
        "blue": 61,
        "hue": 320,
        "saturation": 21,
        "lightness": 22
    }, {
        "hex": "#2E0D23",
        "rgb": "rgb(46, 13, 35)",
        "hsl": "hsl(320, 56%, 12%)",
        "red": 46,
        "green": 13,
        "blue": 35,
        "hue": 320,
        "saturation": 56,
        "lightness": 12
    }, {
        "hex": "#601848",
        "rgb": "rgb(96, 24, 72)",
        "hsl": "hsl(320, 60%, 24%)",
        "red": 96,
        "green": 24,
        "blue": 72,
        "hue": 320,
        "saturation": 60,
        "lightness": 24
    }, {
        "hex": "#1C0113",
        "rgb": "rgb(28, 1, 19)",
        "hsl": "hsl(320, 93%, 6%)",
        "red": 28,
        "green": 1,
        "blue": 19,
        "hue": 320,
        "saturation": 93,
        "lightness": 6
    }, {
        "hex": "#FF00AA",
        "rgb": "rgb(255, 0, 170)",
        "hsl": "hsl(320, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 170,
        "hue": 320,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#A78D9E",
        "rgb": "rgb(167, 141, 158)",
        "hsl": "hsl(321, 13%, 60%)",
        "red": 167,
        "green": 141,
        "blue": 158,
        "hue": 321,
        "saturation": 13,
        "lightness": 60
    }, {
        "hex": "#836177",
        "rgb": "rgb(131, 97, 119)",
        "hsl": "hsl(321, 15%, 45%)",
        "red": 131,
        "green": 97,
        "blue": 119,
        "hue": 321,
        "saturation": 15,
        "lightness": 45
    }, {
        "hex": "#8C5B7B",
        "rgb": "rgb(140, 91, 123)",
        "hsl": "hsl(321, 21%, 45%)",
        "red": 140,
        "green": 91,
        "blue": 123,
        "hue": 321,
        "saturation": 21,
        "lightness": 45
    }, {
        "hex": "#6A3D5A",
        "rgb": "rgb(106, 61, 90)",
        "hsl": "hsl(321, 27%, 33%)",
        "red": 106,
        "green": 61,
        "blue": 90,
        "hue": 321,
        "saturation": 27,
        "lightness": 33
    }, {
        "hex": "#581E44",
        "rgb": "rgb(88, 30, 68)",
        "hsl": "hsl(321, 49%, 23%)",
        "red": 88,
        "green": 30,
        "blue": 68,
        "hue": 321,
        "saturation": 49,
        "lightness": 23
    }, {
        "hex": "#A6026C",
        "rgb": "rgb(166, 2, 108)",
        "hsl": "hsl(321, 98%, 33%)",
        "red": 166,
        "green": 2,
        "blue": 108,
        "hue": 321,
        "saturation": 98,
        "lightness": 33
    }, {
        "hex": "#5C4152",
        "rgb": "rgb(92, 65, 82)",
        "hsl": "hsl(322, 17%, 31%)",
        "red": 92,
        "green": 65,
        "blue": 82,
        "hue": 322,
        "saturation": 17,
        "lightness": 31
    }, {
        "hex": "#37192C",
        "rgb": "rgb(55, 25, 44)",
        "hsl": "hsl(322, 38%, 16%)",
        "red": 55,
        "green": 25,
        "blue": 44,
        "hue": 322,
        "saturation": 38,
        "lightness": 16
    }, {
        "hex": "#741952",
        "rgb": "rgb(116, 25, 82)",
        "hsl": "hsl(322, 65%, 28%)",
        "red": 116,
        "green": 25,
        "blue": 82,
        "hue": 322,
        "saturation": 65,
        "lightness": 28
    }, {
        "hex": "#FE1CAC",
        "rgb": "rgb(254, 28, 172)",
        "hsl": "hsl(322, 99%, 55%)",
        "red": 254,
        "green": 28,
        "blue": 172,
        "hue": 322,
        "saturation": 99,
        "lightness": 55
    }, {
        "hex": "#FE40B9",
        "rgb": "rgb(254, 64, 185)",
        "hsl": "hsl(322, 99%, 62%)",
        "red": 254,
        "green": 64,
        "blue": 185,
        "hue": 322,
        "saturation": 99,
        "lightness": 62
    }, {
        "hex": "#FE59C2",
        "rgb": "rgb(254, 89, 194)",
        "hsl": "hsl(322, 99%, 67%)",
        "red": 254,
        "green": 89,
        "blue": 194,
        "hue": 322,
        "saturation": 99,
        "lightness": 67
    }, {
        "hex": "#452E3C",
        "rgb": "rgb(69, 46, 60)",
        "hsl": "hsl(323, 20%, 23%)",
        "red": 69,
        "green": 46,
        "blue": 60,
        "hue": 323,
        "saturation": 20,
        "lightness": 23
    }, {
        "hex": "#361F2D",
        "rgb": "rgb(54, 31, 45)",
        "hsl": "hsl(323, 27%, 17%)",
        "red": 54,
        "green": 31,
        "blue": 45,
        "hue": 323,
        "saturation": 27,
        "lightness": 17
    }, {
        "hex": "#331327",
        "rgb": "rgb(51, 19, 39)",
        "hsl": "hsl(323, 46%, 14%)",
        "red": 51,
        "green": 19,
        "blue": 39,
        "hue": 323,
        "saturation": 46,
        "lightness": 14
    }, {
        "hex": "#5A0E3D",
        "rgb": "rgb(90, 14, 61)",
        "hsl": "hsl(323, 73%, 20%)",
        "red": 90,
        "green": 14,
        "blue": 61,
        "hue": 323,
        "saturation": 73,
        "lightness": 20
    }, {
        "hex": "#671045",
        "rgb": "rgb(103, 16, 69)",
        "hsl": "hsl(323, 73%, 23%)",
        "red": 103,
        "green": 16,
        "blue": 69,
        "hue": 323,
        "saturation": 73,
        "lightness": 23
    }, {
        "hex": "#6A0E47",
        "rgb": "rgb(106, 14, 71)",
        "hsl": "hsl(323, 77%, 24%)",
        "red": 106,
        "green": 14,
        "blue": 71,
        "hue": 323,
        "saturation": 77,
        "lightness": 24
    }, {
        "hex": "#C4037A",
        "rgb": "rgb(196, 3, 122)",
        "hsl": "hsl(323, 97%, 39%)",
        "red": 196,
        "green": 3,
        "blue": 122,
        "hue": 323,
        "saturation": 97,
        "lightness": 39
    }, {
        "hex": "#A70267",
        "rgb": "rgb(167, 2, 103)",
        "hsl": "hsl(323, 98%, 33%)",
        "red": 167,
        "green": 2,
        "blue": 103,
        "hue": 323,
        "saturation": 98,
        "lightness": 33
    }, {
        "hex": "#78576B",
        "rgb": "rgb(120, 87, 107)",
        "hsl": "hsl(324, 16%, 41%)",
        "red": 120,
        "green": 87,
        "blue": 107,
        "hue": 324,
        "saturation": 16,
        "lightness": 41
    }, {
        "hex": "#A45785",
        "rgb": "rgb(164, 87, 133)",
        "hsl": "hsl(324, 31%, 49%)",
        "red": 164,
        "green": 87,
        "blue": 133,
        "hue": 324,
        "saturation": 31,
        "lightness": 49
    }, {
        "hex": "#5D2747",
        "rgb": "rgb(93, 39, 71)",
        "hsl": "hsl(324, 41%, 26%)",
        "red": 93,
        "green": 39,
        "blue": 71,
        "hue": 324,
        "saturation": 41,
        "lightness": 26
    }, {
        "hex": "#602749",
        "rgb": "rgb(96, 39, 73)",
        "hsl": "hsl(324, 42%, 26%)",
        "red": 96,
        "green": 39,
        "blue": 73,
        "hue": 324,
        "saturation": 42,
        "lightness": 26
    }, {
        "hex": "#991766",
        "rgb": "rgb(153, 23, 102)",
        "hsl": "hsl(324, 74%, 35%)",
        "red": 153,
        "green": 23,
        "blue": 102,
        "hue": 324,
        "saturation": 74,
        "lightness": 35
    }, {
        "hex": "#400428",
        "rgb": "rgb(64, 4, 40)",
        "hsl": "hsl(324, 88%, 13%)",
        "red": 64,
        "green": 4,
        "blue": 40,
        "hue": 324,
        "saturation": 88,
        "lightness": 13
    }, {
        "hex": "#050003",
        "rgb": "rgb(5, 0, 3)",
        "hsl": "hsl(324, 100%, 1%)",
        "red": 5,
        "green": 0,
        "blue": 3,
        "hue": 324,
        "saturation": 100,
        "lightness": 1
    }, {
        "hex": "#FF0099",
        "rgb": "rgb(255, 0, 153)",
        "hsl": "hsl(324, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 153,
        "hue": 324,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#6D6168",
        "rgb": "rgb(109, 97, 104)",
        "hsl": "hsl(325, 6%, 40%)",
        "red": 109,
        "green": 97,
        "blue": 104,
        "hue": 325,
        "saturation": 6,
        "lightness": 40
    }, {
        "hex": "#A18093",
        "rgb": "rgb(161, 128, 147)",
        "hsl": "hsl(325, 15%, 57%)",
        "red": 161,
        "green": 128,
        "blue": 147,
        "hue": 325,
        "saturation": 15,
        "lightness": 57
    }, {
        "hex": "#502940",
        "rgb": "rgb(80, 41, 64)",
        "hsl": "hsl(325, 32%, 24%)",
        "red": 80,
        "green": 41,
        "blue": 64,
        "hue": 325,
        "saturation": 32,
        "lightness": 24
    }, {
        "hex": "#2A091C",
        "rgb": "rgb(42, 9, 28)",
        "hsl": "hsl(325, 65%, 10%)",
        "red": 42,
        "green": 9,
        "blue": 28,
        "hue": 325,
        "saturation": 65,
        "lightness": 10
    }, {
        "hex": "#220315",
        "rgb": "rgb(34, 3, 21)",
        "hsl": "hsl(325, 84%, 7%)",
        "red": 34,
        "green": 3,
        "blue": 21,
        "hue": 325,
        "saturation": 84,
        "lightness": 7
    }, {
        "hex": "#220114",
        "rgb": "rgb(34, 1, 20)",
        "hsl": "hsl(325, 94%, 7%)",
        "red": 34,
        "green": 1,
        "blue": 20,
        "hue": 325,
        "saturation": 94,
        "lightness": 7
    }, {
        "hex": "#260016",
        "rgb": "rgb(38, 0, 22)",
        "hsl": "hsl(325, 100%, 7%)",
        "red": 38,
        "green": 0,
        "blue": 22,
        "hue": 325,
        "saturation": 100,
        "lightness": 7
    }, {
        "hex": "#574951",
        "rgb": "rgb(87, 73, 81)",
        "hsl": "hsl(326, 9%, 31%)",
        "red": 87,
        "green": 73,
        "blue": 81,
        "hue": 326,
        "saturation": 9,
        "lightness": 31
    }, {
        "hex": "#A35481",
        "rgb": "rgb(163, 84, 129)",
        "hsl": "hsl(326, 32%, 48%)",
        "red": 163,
        "green": 84,
        "blue": 129,
        "hue": 326,
        "saturation": 32,
        "lightness": 48
    }, {
        "hex": "#4B1D37",
        "rgb": "rgb(75, 29, 55)",
        "hsl": "hsl(326, 44%, 20%)",
        "red": 75,
        "green": 29,
        "blue": 55,
        "hue": 326,
        "saturation": 44,
        "lightness": 20
    }, {
        "hex": "#8A2F62",
        "rgb": "rgb(138, 47, 98)",
        "hsl": "hsl(326, 49%, 36%)",
        "red": 138,
        "green": 47,
        "blue": 98,
        "hue": 326,
        "saturation": 49,
        "lightness": 36
    }, {
        "hex": "#40122C",
        "rgb": "rgb(64, 18, 44)",
        "hsl": "hsl(326, 56%, 16%)",
        "red": 64,
        "green": 18,
        "blue": 44,
        "hue": 326,
        "saturation": 56,
        "lightness": 16
    }, {
        "hex": "#BF2A7F",
        "rgb": "rgb(191, 42, 127)",
        "hsl": "hsl(326, 64%, 46%)",
        "red": 191,
        "green": 42,
        "blue": 127,
        "hue": 326,
        "saturation": 64,
        "lightness": 46
    }, {
        "hex": "#5F0D3B",
        "rgb": "rgb(95, 13, 59)",
        "hsl": "hsl(326, 76%, 21%)",
        "red": 95,
        "green": 13,
        "blue": 59,
        "hue": 326,
        "saturation": 76,
        "lightness": 21
    }, {
        "hex": "#E42692",
        "rgb": "rgb(228, 38, 146)",
        "hsl": "hsl(326, 78%, 52%)",
        "red": 228,
        "green": 38,
        "blue": 146,
        "hue": 326,
        "saturation": 78,
        "lightness": 52
    }, {
        "hex": "#750E49",
        "rgb": "rgb(117, 14, 73)",
        "hsl": "hsl(326, 79%, 26%)",
        "red": 117,
        "green": 14,
        "blue": 73,
        "hue": 326,
        "saturation": 79,
        "lightness": 26
    }, {
        "hex": "#4D002B",
        "rgb": "rgb(77, 0, 43)",
        "hsl": "hsl(326, 100%, 15%)",
        "red": 77,
        "green": 0,
        "blue": 43,
        "hue": 326,
        "saturation": 100,
        "lightness": 15
    }, {
        "hex": "#FF0092",
        "rgb": "rgb(255, 0, 146)",
        "hsl": "hsl(326, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 146,
        "hue": 326,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#6C6368",
        "rgb": "rgb(108, 99, 104)",
        "hsl": "hsl(327, 4%, 41%)",
        "red": 108,
        "green": 99,
        "blue": 104,
        "hue": 327,
        "saturation": 4,
        "lightness": 41
    }, {
        "hex": "#5E4352",
        "rgb": "rgb(94, 67, 82)",
        "hsl": "hsl(327, 17%, 32%)",
        "red": 94,
        "green": 67,
        "blue": 82,
        "hue": 327,
        "saturation": 17,
        "lightness": 32
    }, {
        "hex": "#571B3C",
        "rgb": "rgb(87, 27, 60)",
        "hsl": "hsl(327, 53%, 22%)",
        "red": 87,
        "green": 27,
        "blue": 60,
        "hue": 327,
        "saturation": 53,
        "lightness": 22
    }, {
        "hex": "#440A2A",
        "rgb": "rgb(68, 10, 42)",
        "hsl": "hsl(327, 74%, 15%)",
        "red": 68,
        "green": 10,
        "blue": 42,
        "hue": 327,
        "saturation": 74,
        "lightness": 15
    }, {
        "hex": "#B8136F",
        "rgb": "rgb(184, 19, 111)",
        "hsl": "hsl(327, 81%, 40%)",
        "red": 184,
        "green": 19,
        "blue": 111,
        "hue": 327,
        "saturation": 81,
        "lightness": 40
    }, {
        "hex": "#5E4B55",
        "rgb": "rgb(94, 75, 85)",
        "hsl": "hsl(328, 11%, 33%)",
        "red": 94,
        "green": 75,
        "blue": 85,
        "hue": 328,
        "saturation": 11,
        "lightness": 33
    }, {
        "hex": "#AD849A",
        "rgb": "rgb(173, 132, 154)",
        "hsl": "hsl(328, 20%, 60%)",
        "red": 173,
        "green": 132,
        "blue": 154,
        "hue": 328,
        "saturation": 20,
        "lightness": 60
    }, {
        "hex": "#5C374B",
        "rgb": "rgb(92, 55, 75)",
        "hsl": "hsl(328, 25%, 29%)",
        "red": 92,
        "green": 55,
        "blue": 75,
        "hue": 328,
        "saturation": 25,
        "lightness": 29
    }, {
        "hex": "#7D3F60",
        "rgb": "rgb(125, 63, 96)",
        "hsl": "hsl(328, 33%, 37%)",
        "red": 125,
        "green": 63,
        "blue": 96,
        "hue": 328,
        "saturation": 33,
        "lightness": 37
    }, {
        "hex": "#52223C",
        "rgb": "rgb(82, 34, 60)",
        "hsl": "hsl(328, 41%, 23%)",
        "red": 82,
        "green": 34,
        "blue": 60,
        "hue": 328,
        "saturation": 41,
        "lightness": 23
    }, {
        "hex": "#8F3C68",
        "rgb": "rgb(143, 60, 104)",
        "hsl": "hsl(328, 41%, 40%)",
        "red": 143,
        "green": 60,
        "blue": 104,
        "hue": 328,
        "saturation": 41,
        "lightness": 40
    }, {
        "hex": "#C97BA5",
        "rgb": "rgb(201, 123, 165)",
        "hsl": "hsl(328, 42%, 64%)",
        "red": 201,
        "green": 123,
        "blue": 165,
        "hue": 328,
        "saturation": 42,
        "lightness": 64
    }, {
        "hex": "#55203C",
        "rgb": "rgb(85, 32, 60)",
        "hsl": "hsl(328, 45%, 23%)",
        "red": 85,
        "green": 32,
        "blue": 60,
        "hue": 328,
        "saturation": 45,
        "lightness": 23
    }, {
        "hex": "#772A53",
        "rgb": "rgb(119, 42, 83)",
        "hsl": "hsl(328, 48%, 32%)",
        "red": 119,
        "green": 42,
        "blue": 83,
        "hue": 328,
        "saturation": 48,
        "lightness": 32
    }, {
        "hex": "#A0346E",
        "rgb": "rgb(160, 52, 110)",
        "hsl": "hsl(328, 51%, 42%)",
        "red": 160,
        "green": 52,
        "blue": 110,
        "hue": 328,
        "saturation": 51,
        "lightness": 42
    }, {
        "hex": "#30091E",
        "rgb": "rgb(48, 9, 30)",
        "hsl": "hsl(328, 68%, 11%)",
        "red": 48,
        "green": 9,
        "blue": 30,
        "hue": 328,
        "saturation": 68,
        "lightness": 11
    }, {
        "hex": "#7D144C",
        "rgb": "rgb(125, 20, 76)",
        "hsl": "hsl(328, 72%, 28%)",
        "red": 125,
        "green": 20,
        "blue": 76,
        "hue": 328,
        "saturation": 72,
        "lightness": 28
    }, {
        "hex": "#6C043C",
        "rgb": "rgb(108, 4, 60)",
        "hsl": "hsl(328, 93%, 22%)",
        "red": 108,
        "green": 4,
        "blue": 60,
        "hue": 328,
        "saturation": 93,
        "lightness": 22
    }, {
        "hex": "#917081",
        "rgb": "rgb(145, 112, 129)",
        "hsl": "hsl(329, 13%, 50%)",
        "red": 145,
        "green": 112,
        "blue": 129,
        "hue": 329,
        "saturation": 13,
        "lightness": 50
    }, {
        "hex": "#743455",
        "rgb": "rgb(116, 52, 85)",
        "hsl": "hsl(329, 38%, 33%)",
        "red": 116,
        "green": 52,
        "blue": 85,
        "hue": 329,
        "saturation": 38,
        "lightness": 33
    }, {
        "hex": "#C9729F",
        "rgb": "rgb(201, 114, 159)",
        "hsl": "hsl(329, 45%, 62%)",
        "red": 201,
        "green": 114,
        "blue": 159,
        "hue": 329,
        "saturation": 45,
        "lightness": 62
    }, {
        "hex": "#400E28",
        "rgb": "rgb(64, 14, 40)",
        "hsl": "hsl(329, 64%, 15%)",
        "red": 64,
        "green": 14,
        "blue": 40,
        "hue": 329,
        "saturation": 64,
        "lightness": 15
    }, {
        "hex": "#A22365",
        "rgb": "rgb(162, 35, 101)",
        "hsl": "hsl(329, 64%, 39%)",
        "red": 162,
        "green": 35,
        "blue": 101,
        "hue": 329,
        "saturation": 64,
        "lightness": 39
    }, {
        "hex": "#991D5D",
        "rgb": "rgb(153, 29, 93)",
        "hsl": "hsl(329, 68%, 36%)",
        "red": 153,
        "green": 29,
        "blue": 93,
        "hue": 329,
        "saturation": 68,
        "lightness": 36
    }, {
        "hex": "#B31D6A",
        "rgb": "rgb(179, 29, 106)",
        "hsl": "hsl(329, 72%, 41%)",
        "red": 179,
        "green": 29,
        "blue": 106,
        "hue": 329,
        "saturation": 72,
        "lightness": 41
    }, {
        "hex": "#520C30",
        "rgb": "rgb(82, 12, 48)",
        "hsl": "hsl(329, 74%, 18%)",
        "red": 82,
        "green": 12,
        "blue": 48,
        "hue": 329,
        "saturation": 74,
        "lightness": 18
    }, {
        "hex": "#D11174",
        "rgb": "rgb(209, 17, 116)",
        "hsl": "hsl(329, 85%, 44%)",
        "red": 209,
        "green": 17,
        "blue": 116,
        "hue": 329,
        "saturation": 85,
        "lightness": 44
    }, {
        "hex": "#FC0284",
        "rgb": "rgb(252, 2, 132)",
        "hsl": "hsl(329, 98%, 50%)",
        "red": 252,
        "green": 2,
        "blue": 132,
        "hue": 329,
        "saturation": 98,
        "lightness": 50
    }, {
        "hex": "#E30075",
        "rgb": "rgb(227, 0, 117)",
        "hsl": "hsl(329, 100%, 45%)",
        "red": 227,
        "green": 0,
        "blue": 117,
        "hue": 329,
        "saturation": 100,
        "lightness": 45
    }, {
        "hex": "#FF0084",
        "rgb": "rgb(255, 0, 132)",
        "hsl": "hsl(329, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 132,
        "hue": 329,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#2A2829",
        "rgb": "rgb(42, 40, 41)",
        "hsl": "hsl(330, 2%, 16%)",
        "red": 42,
        "green": 40,
        "blue": 41,
        "hue": 330,
        "saturation": 2,
        "lightness": 16
    }, {
        "hex": "#686466",
        "rgb": "rgb(104, 100, 102)",
        "hsl": "hsl(330, 2%, 40%)",
        "red": 104,
        "green": 100,
        "blue": 102,
        "hue": 330,
        "saturation": 2,
        "lightness": 40
    }, {
        "hex": "#75616B",
        "rgb": "rgb(117, 97, 107)",
        "hsl": "hsl(330, 9%, 42%)",
        "red": 117,
        "green": 97,
        "blue": 107,
        "hue": 330,
        "saturation": 9,
        "lightness": 42
    }, {
        "hex": "#45373E",
        "rgb": "rgb(69, 55, 62)",
        "hsl": "hsl(330, 11%, 24%)",
        "red": 69,
        "green": 55,
        "blue": 62,
        "hue": 330,
        "saturation": 11,
        "lightness": 24
    }, {
        "hex": "#261C21",
        "rgb": "rgb(38, 28, 33)",
        "hsl": "hsl(330, 15%, 13%)",
        "red": 38,
        "green": 28,
        "blue": 33,
        "hue": 330,
        "saturation": 15,
        "lightness": 13
    }, {
        "hex": "#66324C",
        "rgb": "rgb(102, 50, 76)",
        "hsl": "hsl(330, 34%, 30%)",
        "red": 102,
        "green": 50,
        "blue": 76,
        "hue": 330,
        "saturation": 34,
        "lightness": 30
    }, {
        "hex": "#7E2F56",
        "rgb": "rgb(126, 47, 86)",
        "hsl": "hsl(330, 46%, 34%)",
        "red": 126,
        "green": 47,
        "blue": 86,
        "hue": 330,
        "saturation": 46,
        "lightness": 34
    }, {
        "hex": "#F9EBF2",
        "rgb": "rgb(249, 235, 242)",
        "hsl": "hsl(330, 54%, 95%)",
        "red": 249,
        "green": 235,
        "blue": 242,
        "hue": 330,
        "saturation": 54,
        "lightness": 95
    }, {
        "hex": "#F0077B",
        "rgb": "rgb(240, 7, 123)",
        "hsl": "hsl(330, 94%, 48%)",
        "red": 240,
        "green": 7,
        "blue": 123,
        "hue": 330,
        "saturation": 94,
        "lightness": 48
    }, {
        "hex": "#90044A",
        "rgb": "rgb(144, 4, 74)",
        "hsl": "hsl(330, 95%, 29%)",
        "red": 144,
        "green": 4,
        "blue": 74,
        "hue": 330,
        "saturation": 95,
        "lightness": 29
    }, {
        "hex": "#020001",
        "rgb": "rgb(2, 0, 1)",
        "hsl": "hsl(330, 100%, 0%)",
        "red": 2,
        "green": 0,
        "blue": 1,
        "hue": 330,
        "saturation": 100,
        "lightness": 0
    }, {
        "hex": "#FF41A1",
        "rgb": "rgb(255, 65, 161)",
        "hsl": "hsl(330, 100%, 63%)",
        "red": 255,
        "green": 65,
        "blue": 161,
        "hue": 330,
        "saturation": 100,
        "lightness": 63
    }, {
        "hex": "#966C80",
        "rgb": "rgb(150, 108, 128)",
        "hsl": "hsl(331, 17%, 51%)",
        "red": 150,
        "green": 108,
        "blue": 128,
        "hue": 331,
        "saturation": 17,
        "lightness": 51
    }, {
        "hex": "#452A37",
        "rgb": "rgb(69, 42, 55)",
        "hsl": "hsl(331, 24%, 22%)",
        "red": 69,
        "green": 42,
        "blue": 55,
        "hue": 331,
        "saturation": 24,
        "lightness": 22
    }, {
        "hex": "#A46583",
        "rgb": "rgb(164, 101, 131)",
        "hsl": "hsl(331, 26%, 52%)",
        "red": 164,
        "green": 101,
        "blue": 131,
        "hue": 331,
        "saturation": 26,
        "lightness": 52
    }, {
        "hex": "#5A3044",
        "rgb": "rgb(90, 48, 68)",
        "hsl": "hsl(331, 30%, 27%)",
        "red": 90,
        "green": 48,
        "blue": 68,
        "hue": 331,
        "saturation": 30,
        "lightness": 27
    }, {
        "hex": "#5E2F46",
        "rgb": "rgb(94, 47, 70)",
        "hsl": "hsl(331, 33%, 28%)",
        "red": 94,
        "green": 47,
        "blue": 70,
        "hue": 331,
        "saturation": 33,
        "lightness": 28
    }, {
        "hex": "#6C3751",
        "rgb": "rgb(108, 55, 81)",
        "hsl": "hsl(331, 33%, 32%)",
        "red": 108,
        "green": 55,
        "blue": 81,
        "hue": 331,
        "saturation": 33,
        "lightness": 32
    }, {
        "hex": "#8E3F65",
        "rgb": "rgb(142, 63, 101)",
        "hsl": "hsl(331, 39%, 40%)",
        "red": 142,
        "green": 63,
        "blue": 101,
        "hue": 331,
        "saturation": 39,
        "lightness": 40
    }, {
        "hex": "#CB7CA2",
        "rgb": "rgb(203, 124, 162)",
        "hsl": "hsl(331, 43%, 64%)",
        "red": 203,
        "green": 124,
        "blue": 162,
        "hue": 331,
        "saturation": 43,
        "lightness": 64
    }, {
        "hex": "#8C315D",
        "rgb": "rgb(140, 49, 93)",
        "hsl": "hsl(331, 48%, 37%)",
        "red": 140,
        "green": 49,
        "blue": 93,
        "hue": 331,
        "saturation": 48,
        "lightness": 37
    }, {
        "hex": "#42142A",
        "rgb": "rgb(66, 20, 42)",
        "hsl": "hsl(331, 53%, 17%)",
        "red": 66,
        "green": 20,
        "blue": 42,
        "hue": 331,
        "saturation": 53,
        "lightness": 17
    }, {
        "hex": "#541734",
        "rgb": "rgb(84, 23, 52)",
        "hsl": "hsl(331, 57%, 21%)",
        "red": 84,
        "green": 23,
        "blue": 52,
        "hue": 331,
        "saturation": 57,
        "lightness": 21
    }, {
        "hex": "#E04891",
        "rgb": "rgb(224, 72, 145)",
        "hsl": "hsl(331, 71%, 58%)",
        "red": 224,
        "green": 72,
        "blue": 145,
        "hue": 331,
        "saturation": 71,
        "lightness": 58
    }, {
        "hex": "#6D0839",
        "rgb": "rgb(109, 8, 57)",
        "hsl": "hsl(331, 86%, 23%)",
        "red": 109,
        "green": 8,
        "blue": 57,
        "hue": 331,
        "saturation": 86,
        "lightness": 23
    }, {
        "hex": "#A40B54",
        "rgb": "rgb(164, 11, 84)",
        "hsl": "hsl(331, 87%, 34%)",
        "red": 164,
        "green": 11,
        "blue": 84,
        "hue": 331,
        "saturation": 87,
        "lightness": 34
    }, {
        "hex": "#FF97CA",
        "rgb": "rgb(255, 151, 202)",
        "hsl": "hsl(331, 100%, 80%)",
        "red": 255,
        "green": 151,
        "blue": 202,
        "hue": 331,
        "saturation": 100,
        "lightness": 80
    }, {
        "hex": "#C7B6BE",
        "rgb": "rgb(199, 182, 190)",
        "hsl": "hsl(332, 13%, 75%)",
        "red": 199,
        "green": 182,
        "blue": 190,
        "hue": 332,
        "saturation": 13,
        "lightness": 75
    }, {
        "hex": "#D3C6CC",
        "rgb": "rgb(211, 198, 204)",
        "hsl": "hsl(332, 13%, 80%)",
        "red": 211,
        "green": 198,
        "blue": 204,
        "hue": 332,
        "saturation": 13,
        "lightness": 80
    }, {
        "hex": "#33242B",
        "rgb": "rgb(51, 36, 43)",
        "hsl": "hsl(332, 17%, 17%)",
        "red": 51,
        "green": 36,
        "blue": 43,
        "hue": 332,
        "saturation": 17,
        "lightness": 17
    }, {
        "hex": "#9B5F7B",
        "rgb": "rgb(155, 95, 123)",
        "hsl": "hsl(332, 24%, 49%)",
        "red": 155,
        "green": 95,
        "blue": 123,
        "hue": 332,
        "saturation": 24,
        "lightness": 49
    }, {
        "hex": "#563444",
        "rgb": "rgb(86, 52, 68)",
        "hsl": "hsl(332, 25%, 27%)",
        "red": 86,
        "green": 52,
        "blue": 68,
        "hue": 332,
        "saturation": 25,
        "lightness": 27
    }, {
        "hex": "#5A3546",
        "rgb": "rgb(90, 53, 70)",
        "hsl": "hsl(332, 26%, 28%)",
        "red": 90,
        "green": 53,
        "blue": 70,
        "hue": 332,
        "saturation": 26,
        "lightness": 28
    }, {
        "hex": "#1D1016",
        "rgb": "rgb(29, 16, 22)",
        "hsl": "hsl(332, 29%, 9%)",
        "red": 29,
        "green": 16,
        "blue": 22,
        "hue": 332,
        "saturation": 29,
        "lightness": 9
    }, {
        "hex": "#432332",
        "rgb": "rgb(67, 35, 50)",
        "hsl": "hsl(332, 31%, 20%)",
        "red": 67,
        "green": 35,
        "blue": 50,
        "hue": 332,
        "saturation": 31,
        "lightness": 20
    }, {
        "hex": "#442433",
        "rgb": "rgb(68, 36, 51)",
        "hsl": "hsl(332, 31%, 20%)",
        "red": 68,
        "green": 36,
        "blue": 51,
        "hue": 332,
        "saturation": 31,
        "lightness": 20
    }, {
        "hex": "#793A57",
        "rgb": "rgb(121, 58, 87)",
        "hsl": "hsl(332, 35%, 35%)",
        "red": 121,
        "green": 58,
        "blue": 87,
        "hue": 332,
        "saturation": 35,
        "lightness": 35
    }, {
        "hex": "#7A1745",
        "rgb": "rgb(122, 23, 69)",
        "hsl": "hsl(332, 68%, 28%)",
        "red": 122,
        "green": 23,
        "blue": 69,
        "hue": 332,
        "saturation": 68,
        "lightness": 28
    }, {
        "hex": "#A71A5B",
        "rgb": "rgb(167, 26, 91)",
        "hsl": "hsl(332, 73%, 38%)",
        "red": 167,
        "green": 26,
        "blue": 91,
        "hue": 332,
        "saturation": 73,
        "lightness": 38
    }, {
        "hex": "#801245",
        "rgb": "rgb(128, 18, 69)",
        "hsl": "hsl(332, 75%, 29%)",
        "red": 128,
        "green": 18,
        "blue": 69,
        "hue": 332,
        "saturation": 75,
        "lightness": 29
    }, {
        "hex": "#1F0310",
        "rgb": "rgb(31, 3, 16)",
        "hsl": "hsl(332, 82%, 7%)",
        "red": 31,
        "green": 3,
        "blue": 16,
        "hue": 332,
        "saturation": 82,
        "lightness": 7
    }, {
        "hex": "#8C0E48",
        "rgb": "rgb(140, 14, 72)",
        "hsl": "hsl(332, 82%, 30%)",
        "red": 140,
        "green": 14,
        "blue": 72,
        "hue": 332,
        "saturation": 82,
        "lightness": 30
    }, {
        "hex": "#840943",
        "rgb": "rgb(132, 9, 67)",
        "hsl": "hsl(332, 87%, 28%)",
        "red": 132,
        "green": 9,
        "blue": 67,
        "hue": 332,
        "saturation": 87,
        "lightness": 28
    }, {
        "hex": "#2B0215",
        "rgb": "rgb(43, 2, 21)",
        "hsl": "hsl(332, 91%, 9%)",
        "red": 43,
        "green": 2,
        "blue": 21,
        "hue": 332,
        "saturation": 91,
        "lightness": 9
    }, {
        "hex": "#F80174",
        "rgb": "rgb(248, 1, 116)",
        "hsl": "hsl(332, 99%, 49%)",
        "red": 248,
        "green": 1,
        "blue": 116,
        "hue": 332,
        "saturation": 99,
        "lightness": 49
    }, {
        "hex": "#85586C",
        "rgb": "rgb(133, 88, 108)",
        "hsl": "hsl(333, 20%, 43%)",
        "red": 133,
        "green": 88,
        "blue": 108,
        "hue": 333,
        "saturation": 20,
        "lightness": 43
    }, {
        "hex": "#9A5071",
        "rgb": "rgb(154, 80, 113)",
        "hsl": "hsl(333, 32%, 46%)",
        "red": 154,
        "green": 80,
        "blue": 113,
        "hue": 333,
        "saturation": 32,
        "lightness": 46
    }, {
        "hex": "#7A1E48",
        "rgb": "rgb(122, 30, 72)",
        "hsl": "hsl(333, 61%, 30%)",
        "red": 122,
        "green": 30,
        "blue": 72,
        "hue": 333,
        "saturation": 61,
        "lightness": 30
    }, {
        "hex": "#D92D7A",
        "rgb": "rgb(217, 45, 122)",
        "hsl": "hsl(333, 69%, 51%)",
        "red": 217,
        "green": 45,
        "blue": 122,
        "hue": 333,
        "saturation": 69,
        "lightness": 51
    }, {
        "hex": "#DE1A72",
        "rgb": "rgb(222, 26, 114)",
        "hsl": "hsl(333, 79%, 49%)",
        "red": 222,
        "green": 26,
        "blue": 114,
        "hue": 333,
        "saturation": 79,
        "lightness": 49
    }, {
        "hex": "#210210",
        "rgb": "rgb(33, 2, 16)",
        "hsl": "hsl(333, 89%, 7%)",
        "red": 33,
        "green": 2,
        "blue": 16,
        "hue": 333,
        "saturation": 89,
        "lightness": 7
    }, {
        "hex": "#9E064A",
        "rgb": "rgb(158, 6, 74)",
        "hsl": "hsl(333, 93%, 32%)",
        "red": 158,
        "green": 6,
        "blue": 74,
        "hue": 333,
        "saturation": 93,
        "lightness": 32
    }, {
        "hex": "#910142",
        "rgb": "rgb(145, 1, 66)",
        "hsl": "hsl(333, 99%, 29%)",
        "red": 145,
        "green": 1,
        "blue": 66,
        "hue": 333,
        "saturation": 99,
        "lightness": 29
    }, {
        "hex": "#21000F",
        "rgb": "rgb(33, 0, 15)",
        "hsl": "hsl(333, 100%, 6%)",
        "red": 33,
        "green": 0,
        "blue": 15,
        "hue": 333,
        "saturation": 100,
        "lightness": 6
    }, {
        "hex": "#FF348E",
        "rgb": "rgb(255, 52, 142)",
        "hsl": "hsl(333, 100%, 60%)",
        "red": 255,
        "green": 52,
        "blue": 142,
        "hue": 333,
        "saturation": 100,
        "lightness": 60
    }, {
        "hex": "#87586C",
        "rgb": "rgb(135, 88, 108)",
        "hsl": "hsl(334, 21%, 44%)",
        "red": 135,
        "green": 88,
        "blue": 108,
        "hue": 334,
        "saturation": 21,
        "lightness": 44
    }, {
        "hex": "#9C667D",
        "rgb": "rgb(156, 102, 125)",
        "hsl": "hsl(334, 21%, 51%)",
        "red": 156,
        "green": 102,
        "blue": 125,
        "hue": 334,
        "saturation": 21,
        "lightness": 51
    }, {
        "hex": "#613C4C",
        "rgb": "rgb(97, 60, 76)",
        "hsl": "hsl(334, 24%, 31%)",
        "red": 97,
        "green": 60,
        "blue": 76,
        "hue": 334,
        "saturation": 24,
        "lightness": 31
    }, {
        "hex": "#442432",
        "rgb": "rgb(68, 36, 50)",
        "hsl": "hsl(334, 31%, 20%)",
        "red": 68,
        "green": 36,
        "blue": 50,
        "hue": 334,
        "saturation": 31,
        "lightness": 20
    }, {
        "hex": "#703951",
        "rgb": "rgb(112, 57, 81)",
        "hsl": "hsl(334, 33%, 33%)",
        "red": 112,
        "green": 57,
        "blue": 81,
        "hue": 334,
        "saturation": 33,
        "lightness": 33
    }, {
        "hex": "#1A0C12",
        "rgb": "rgb(26, 12, 18)",
        "hsl": "hsl(334, 37%, 7%)",
        "red": 26,
        "green": 12,
        "blue": 18,
        "hue": 334,
        "saturation": 37,
        "lightness": 7
    }, {
        "hex": "#541E35",
        "rgb": "rgb(84, 30, 53)",
        "hsl": "hsl(334, 47%, 22%)",
        "red": 84,
        "green": 30,
        "blue": 53,
        "hue": 334,
        "saturation": 47,
        "lightness": 22
    }, {
        "hex": "#A13866",
        "rgb": "rgb(161, 56, 102)",
        "hsl": "hsl(334, 48%, 43%)",
        "red": 161,
        "green": 56,
        "blue": 102,
        "hue": 334,
        "saturation": 48,
        "lightness": 43
    }, {
        "hex": "#63203D",
        "rgb": "rgb(99, 32, 61)",
        "hsl": "hsl(334, 51%, 26%)",
        "red": 99,
        "green": 32,
        "blue": 61,
        "hue": 334,
        "saturation": 51,
        "lightness": 26
    }, {
        "hex": "#79254A",
        "rgb": "rgb(121, 37, 74)",
        "hsl": "hsl(334, 53%, 31%)",
        "red": 121,
        "green": 37,
        "blue": 74,
        "hue": 334,
        "saturation": 53,
        "lightness": 31
    }, {
        "hex": "#2F0618",
        "rgb": "rgb(47, 6, 24)",
        "hsl": "hsl(334, 77%, 10%)",
        "red": 47,
        "green": 6,
        "blue": 24,
        "hue": 334,
        "saturation": 77,
        "lightness": 10
    }, {
        "hex": "#B50D57",
        "rgb": "rgb(181, 13, 87)",
        "hsl": "hsl(334, 87%, 38%)",
        "red": 181,
        "green": 13,
        "blue": 87,
        "hue": 334,
        "saturation": 87,
        "lightness": 38
    }, {
        "hex": "#BD0D59",
        "rgb": "rgb(189, 13, 89)",
        "hsl": "hsl(334, 87%, 40%)",
        "red": 189,
        "green": 13,
        "blue": 89,
        "hue": 334,
        "saturation": 87,
        "lightness": 40
    }, {
        "hex": "#80043A",
        "rgb": "rgb(128, 4, 58)",
        "hsl": "hsl(334, 94%, 26%)",
        "red": 128,
        "green": 4,
        "blue": 58,
        "hue": 334,
        "saturation": 94,
        "lightness": 26
    }, {
        "hex": "#F70A71",
        "rgb": "rgb(247, 10, 113)",
        "hsl": "hsl(334, 94%, 50%)",
        "red": 247,
        "green": 10,
        "blue": 113,
        "hue": 334,
        "saturation": 94,
        "lightness": 50
    }, {
        "hex": "#F60069",
        "rgb": "rgb(246, 0, 105)",
        "hsl": "hsl(334, 100%, 48%)",
        "red": 246,
        "green": 0,
        "blue": 105,
        "hue": 334,
        "saturation": 100,
        "lightness": 48
    }, {
        "hex": "#FF006F",
        "rgb": "rgb(255, 0, 111)",
        "hsl": "hsl(334, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 111,
        "hue": 334,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#947280",
        "rgb": "rgb(148, 114, 128)",
        "hsl": "hsl(335, 14%, 51%)",
        "red": 148,
        "green": 114,
        "blue": 128,
        "hue": 335,
        "saturation": 14,
        "lightness": 51
    }, {
        "hex": "#855E6E",
        "rgb": "rgb(133, 94, 110)",
        "hsl": "hsl(335, 17%, 45%)",
        "red": 133,
        "green": 94,
        "blue": 110,
        "hue": 335,
        "saturation": 17,
        "lightness": 45
    }, {
        "hex": "#C0A1AE",
        "rgb": "rgb(192, 161, 174)",
        "hsl": "hsl(335, 20%, 69%)",
        "red": 192,
        "green": 161,
        "blue": 174,
        "hue": 335,
        "saturation": 20,
        "lightness": 69
    }, {
        "hex": "#784D5F",
        "rgb": "rgb(120, 77, 95)",
        "hsl": "hsl(335, 22%, 39%)",
        "red": 120,
        "green": 77,
        "blue": 95,
        "hue": 335,
        "saturation": 22,
        "lightness": 39
    }, {
        "hex": "#5E3848",
        "rgb": "rgb(94, 56, 72)",
        "hsl": "hsl(335, 25%, 29%)",
        "red": 94,
        "green": 56,
        "blue": 72,
        "hue": 335,
        "saturation": 25,
        "lightness": 29
    }, {
        "hex": "#411F2D",
        "rgb": "rgb(65, 31, 45)",
        "hsl": "hsl(335, 35%, 19%)",
        "red": 65,
        "green": 31,
        "blue": 45,
        "hue": 335,
        "saturation": 35,
        "lightness": 19
    }, {
        "hex": "#2C0D1A",
        "rgb": "rgb(44, 13, 26)",
        "hsl": "hsl(335, 54%, 11%)",
        "red": 44,
        "green": 13,
        "blue": 26,
        "hue": 335,
        "saturation": 54,
        "lightness": 11
    }, {
        "hex": "#FBEFF4",
        "rgb": "rgb(251, 239, 244)",
        "hsl": "hsl(335, 60%, 96%)",
        "red": 251,
        "green": 239,
        "blue": 244,
        "hue": 335,
        "saturation": 60,
        "lightness": 96
    }, {
        "hex": "#7F1E47",
        "rgb": "rgb(127, 30, 71)",
        "hsl": "hsl(335, 62%, 31%)",
        "red": 127,
        "green": 30,
        "blue": 71,
        "hue": 335,
        "saturation": 62,
        "lightness": 31
    }, {
        "hex": "#D64783",
        "rgb": "rgb(214, 71, 131)",
        "hsl": "hsl(335, 64%, 56%)",
        "red": 214,
        "green": 71,
        "blue": 131,
        "hue": 335,
        "saturation": 64,
        "lightness": 56
    }, {
        "hex": "#DE528C",
        "rgb": "rgb(222, 82, 140)",
        "hsl": "hsl(335, 68%, 60%)",
        "red": 222,
        "green": 82,
        "blue": 140,
        "hue": 335,
        "saturation": 68,
        "lightness": 60
    }, {
        "hex": "#BF1E62",
        "rgb": "rgb(191, 30, 98)",
        "hsl": "hsl(335, 73%, 43%)",
        "red": 191,
        "green": 30,
        "blue": 98,
        "hue": 335,
        "saturation": 73,
        "lightness": 43
    }, {
        "hex": "#680E34",
        "rgb": "rgb(104, 14, 52)",
        "hsl": "hsl(335, 76%, 23%)",
        "red": 104,
        "green": 14,
        "blue": 52,
        "hue": 335,
        "saturation": 76,
        "lightness": 23
    }, {
        "hex": "#D40F60",
        "rgb": "rgb(212, 15, 96)",
        "hsl": "hsl(335, 87%, 45%)",
        "red": 212,
        "green": 15,
        "blue": 96,
        "hue": 335,
        "saturation": 87,
        "lightness": 45
    }, {
        "hex": "#DD0B64",
        "rgb": "rgb(221, 11, 100)",
        "hsl": "hsl(335, 91%, 45%)",
        "red": 221,
        "green": 11,
        "blue": 100,
        "hue": 335,
        "saturation": 91,
        "lightness": 45
    }, {
        "hex": "#44021E",
        "rgb": "rgb(68, 2, 30)",
        "hsl": "hsl(335, 94%, 14%)",
        "red": 68,
        "green": 2,
        "blue": 30,
        "hue": 335,
        "saturation": 94,
        "lightness": 14
    }, {
        "hex": "#C00353",
        "rgb": "rgb(192, 3, 83)",
        "hsl": "hsl(335, 97%, 38%)",
        "red": 192,
        "green": 3,
        "blue": 83,
        "hue": 335,
        "saturation": 97,
        "lightness": 38
    }, {
        "hex": "#FC036C",
        "rgb": "rgb(252, 3, 108)",
        "hsl": "hsl(335, 98%, 50%)",
        "red": 252,
        "green": 3,
        "blue": 108,
        "hue": 335,
        "saturation": 98,
        "lightness": 50
    }, {
        "hex": "#340016",
        "rgb": "rgb(52, 0, 22)",
        "hsl": "hsl(335, 100%, 10%)",
        "red": 52,
        "green": 0,
        "blue": 22,
        "hue": 335,
        "saturation": 100,
        "lightness": 10
    }, {
        "hex": "#C60052",
        "rgb": "rgb(198, 0, 82)",
        "hsl": "hsl(335, 100%, 39%)",
        "red": 198,
        "green": 0,
        "blue": 82,
        "hue": 335,
        "saturation": 100,
        "lightness": 39
    }, {
        "hex": "#EA0063",
        "rgb": "rgb(234, 0, 99)",
        "hsl": "hsl(335, 100%, 46%)",
        "red": 234,
        "green": 0,
        "blue": 99,
        "hue": 335,
        "saturation": 100,
        "lightness": 46
    }, {
        "hex": "#F00065",
        "rgb": "rgb(240, 0, 101)",
        "hsl": "hsl(335, 100%, 47%)",
        "red": 240,
        "green": 0,
        "blue": 101,
        "hue": 335,
        "saturation": 100,
        "lightness": 47
    }, {
        "hex": "#FF0C71",
        "rgb": "rgb(255, 12, 113)",
        "hsl": "hsl(335, 100%, 52%)",
        "red": 255,
        "green": 12,
        "blue": 113,
        "hue": 335,
        "saturation": 100,
        "lightness": 52
    }, {
        "hex": "#544F51",
        "rgb": "rgb(84, 79, 81)",
        "hsl": "hsl(336, 3%, 32%)",
        "red": 84,
        "green": 79,
        "blue": 81,
        "hue": 336,
        "saturation": 3,
        "lightness": 32
    }, {
        "hex": "#666163",
        "rgb": "rgb(102, 97, 99)",
        "hsl": "hsl(336, 3%, 39%)",
        "red": 102,
        "green": 97,
        "blue": 99,
        "hue": 336,
        "saturation": 3,
        "lightness": 39
    }, {
        "hex": "#2B2628",
        "rgb": "rgb(43, 38, 40)",
        "hsl": "hsl(336, 6%, 16%)",
        "red": 43,
        "green": 38,
        "blue": 40,
        "hue": 336,
        "saturation": 6,
        "lightness": 16
    }, {
        "hex": "#805566",
        "rgb": "rgb(128, 85, 102)",
        "hsl": "hsl(336, 20%, 42%)",
        "red": 128,
        "green": 85,
        "blue": 102,
        "hue": 336,
        "saturation": 20,
        "lightness": 42
    }, {
        "hex": "#AA6581",
        "rgb": "rgb(170, 101, 129)",
        "hsl": "hsl(336, 29%, 53%)",
        "red": 170,
        "green": 101,
        "blue": 129,
        "hue": 336,
        "saturation": 29,
        "lightness": 53
    }, {
        "hex": "#432330",
        "rgb": "rgb(67, 35, 48)",
        "hsl": "hsl(336, 31%, 20%)",
        "red": 67,
        "green": 35,
        "blue": 48,
        "hue": 336,
        "saturation": 31,
        "lightness": 20
    }, {
        "hex": "#542437",
        "rgb": "rgb(84, 36, 55)",
        "hsl": "hsl(336, 40%, 24%)",
        "red": 84,
        "green": 36,
        "blue": 55,
        "hue": 336,
        "saturation": 40,
        "lightness": 24
    }, {
        "hex": "#CE7095",
        "rgb": "rgb(206, 112, 149)",
        "hsl": "hsl(336, 49%, 62%)",
        "red": 206,
        "green": 112,
        "blue": 149,
        "hue": 336,
        "saturation": 49,
        "lightness": 62
    }, {
        "hex": "#9C325C",
        "rgb": "rgb(156, 50, 92)",
        "hsl": "hsl(336, 51%, 40%)",
        "red": 156,
        "green": 50,
        "blue": 92,
        "hue": 336,
        "saturation": 51,
        "lightness": 40
    }, {
        "hex": "#5C1B35",
        "rgb": "rgb(92, 27, 53)",
        "hsl": "hsl(336, 55%, 23%)",
        "red": 92,
        "green": 27,
        "blue": 53,
        "hue": 336,
        "saturation": 55,
        "lightness": 23
    }, {
        "hex": "#D13775",
        "rgb": "rgb(209, 55, 117)",
        "hsl": "hsl(336, 63%, 52%)",
        "red": 209,
        "green": 55,
        "blue": 117,
        "hue": 336,
        "saturation": 63,
        "lightness": 52
    }, {
        "hex": "#91204D",
        "rgb": "rgb(145, 32, 77)",
        "hsl": "hsl(336, 64%, 35%)",
        "red": 145,
        "green": 32,
        "blue": 77,
        "hue": 336,
        "saturation": 64,
        "lightness": 35
    }, {
        "hex": "#F0B9CF",
        "rgb": "rgb(240, 185, 207)",
        "hsl": "hsl(336, 65%, 83%)",
        "red": 240,
        "green": 185,
        "blue": 207,
        "hue": 336,
        "saturation": 65,
        "lightness": 83
    }, {
        "hex": "#9D2053",
        "rgb": "rgb(157, 32, 83)",
        "hsl": "hsl(336, 66%, 37%)",
        "red": 157,
        "green": 32,
        "blue": 83,
        "hue": 336,
        "saturation": 66,
        "lightness": 37
    }, {
        "hex": "#6E1538",
        "rgb": "rgb(110, 21, 56)",
        "hsl": "hsl(336, 68%, 26%)",
        "red": 110,
        "green": 21,
        "blue": 56,
        "hue": 336,
        "saturation": 68,
        "lightness": 26
    }, {
        "hex": "#DE1D6A",
        "rgb": "rgb(222, 29, 106)",
        "hsl": "hsl(336, 77%, 49%)",
        "red": 222,
        "green": 29,
        "blue": 106,
        "hue": 336,
        "saturation": 77,
        "lightness": 49
    }, {
        "hex": "#E63C80",
        "rgb": "rgb(230, 60, 128)",
        "hsl": "hsl(336, 77%, 57%)",
        "red": 230,
        "green": 60,
        "blue": 128,
        "hue": 336,
        "saturation": 77,
        "lightness": 57
    }, {
        "hex": "#8D1042",
        "rgb": "rgb(141, 16, 66)",
        "hsl": "hsl(336, 80%, 31%)",
        "red": 141,
        "green": 16,
        "blue": 66,
        "hue": 336,
        "saturation": 80,
        "lightness": 31
    }, {
        "hex": "#910F43",
        "rgb": "rgb(145, 15, 67)",
        "hsl": "hsl(336, 81%, 31%)",
        "red": 145,
        "green": 15,
        "blue": 67,
        "hue": 336,
        "saturation": 81,
        "lightness": 31
    }, {
        "hex": "#63072C",
        "rgb": "rgb(99, 7, 44)",
        "hsl": "hsl(336, 87%, 21%)",
        "red": 99,
        "green": 7,
        "blue": 44,
        "hue": 336,
        "saturation": 87,
        "lightness": 21
    }, {
        "hex": "#F02475",
        "rgb": "rgb(240, 36, 117)",
        "hsl": "hsl(336, 87%, 54%)",
        "red": 240,
        "green": 36,
        "blue": 117,
        "hue": 336,
        "saturation": 87,
        "lightness": 54
    }, {
        "hex": "#F2116C",
        "rgb": "rgb(242, 17, 108)",
        "hsl": "hsl(336, 90%, 51%)",
        "red": 242,
        "green": 17,
        "blue": 108,
        "hue": 336,
        "saturation": 90,
        "lightness": 51
    }, {
        "hex": "#ED0B65",
        "rgb": "rgb(237, 11, 101)",
        "hsl": "hsl(336, 91%, 49%)",
        "red": 237,
        "green": 11,
        "blue": 101,
        "hue": 336,
        "saturation": 91,
        "lightness": 49
    }, {
        "hex": "#C70452",
        "rgb": "rgb(199, 4, 82)",
        "hsl": "hsl(336, 96%, 40%)",
        "red": 199,
        "green": 4,
        "blue": 82,
        "hue": 336,
        "saturation": 96,
        "lightness": 40
    }, {
        "hex": "#E80560",
        "rgb": "rgb(232, 5, 96)",
        "hsl": "hsl(336, 96%, 46%)",
        "red": 232,
        "green": 5,
        "blue": 96,
        "hue": 336,
        "saturation": 96,
        "lightness": 46
    }, {
        "hex": "#D60257",
        "rgb": "rgb(214, 2, 87)",
        "hsl": "hsl(336, 98%, 42%)",
        "red": 214,
        "green": 2,
        "blue": 87,
        "hue": 336,
        "saturation": 98,
        "lightness": 42
    }, {
        "hex": "#300013",
        "rgb": "rgb(48, 0, 19)",
        "hsl": "hsl(336, 100%, 9%)",
        "red": 48,
        "green": 0,
        "blue": 19,
        "hue": 336,
        "saturation": 100,
        "lightness": 9
    }, {
        "hex": "#D90057",
        "rgb": "rgb(217, 0, 87)",
        "hsl": "hsl(336, 100%, 43%)",
        "red": 217,
        "green": 0,
        "blue": 87,
        "hue": 336,
        "saturation": 100,
        "lightness": 43
    }, {
        "hex": "#452632",
        "rgb": "rgb(69, 38, 50)",
        "hsl": "hsl(337, 29%, 21%)",
        "red": 69,
        "green": 38,
        "blue": 50,
        "hue": 337,
        "saturation": 29,
        "lightness": 21
    }, {
        "hex": "#542638",
        "rgb": "rgb(84, 38, 56)",
        "hsl": "hsl(337, 38%, 24%)",
        "red": 84,
        "green": 38,
        "blue": 56,
        "hue": 337,
        "saturation": 38,
        "lightness": 24
    }, {
        "hex": "#401C2A",
        "rgb": "rgb(64, 28, 42)",
        "hsl": "hsl(337, 39%, 18%)",
        "red": 64,
        "green": 28,
        "blue": 42,
        "hue": 337,
        "saturation": 39,
        "lightness": 18
    }, {
        "hex": "#8F244D",
        "rgb": "rgb(143, 36, 77)",
        "hsl": "hsl(337, 60%, 35%)",
        "red": 143,
        "green": 36,
        "blue": 77,
        "hue": 337,
        "saturation": 60,
        "lightness": 35
    }, {
        "hex": "#C9306B",
        "rgb": "rgb(201, 48, 107)",
        "hsl": "hsl(337, 61%, 49%)",
        "red": 201,
        "green": 48,
        "blue": 107,
        "hue": 337,
        "saturation": 61,
        "lightness": 49
    }, {
        "hex": "#E86F9E",
        "rgb": "rgb(232, 111, 158)",
        "hsl": "hsl(337, 72%, 67%)",
        "red": 232,
        "green": 111,
        "blue": 158,
        "hue": 337,
        "saturation": 72,
        "lightness": 67
    }, {
        "hex": "#E00B5B",
        "rgb": "rgb(224, 11, 91)",
        "hsl": "hsl(337, 91%, 46%)",
        "red": 224,
        "green": 11,
        "blue": 91,
        "hue": 337,
        "saturation": 91,
        "lightness": 46
    }, {
        "hex": "#FD65A0",
        "rgb": "rgb(253, 101, 160)",
        "hsl": "hsl(337, 97%, 69%)",
        "red": 253,
        "green": 101,
        "blue": 160,
        "hue": 337,
        "saturation": 97,
        "lightness": 69
    }, {
        "hex": "#95003A",
        "rgb": "rgb(149, 0, 58)",
        "hsl": "hsl(337, 100%, 29%)",
        "red": 149,
        "green": 0,
        "blue": 58,
        "hue": 337,
        "saturation": 100,
        "lightness": 29
    }, {
        "hex": "#BE0049",
        "rgb": "rgb(190, 0, 73)",
        "hsl": "hsl(337, 100%, 37%)",
        "red": 190,
        "green": 0,
        "blue": 73,
        "hue": 337,
        "saturation": 100,
        "lightness": 37
    }, {
        "hex": "#FFEAF2",
        "rgb": "rgb(255, 234, 242)",
        "hsl": "hsl(337, 100%, 96%)",
        "red": 255,
        "green": 234,
        "blue": 242,
        "hue": 337,
        "saturation": 100,
        "lightness": 96
    }, {
        "hex": "#C79EAD",
        "rgb": "rgb(199, 158, 173)",
        "hsl": "hsl(338, 27%, 70%)",
        "red": 199,
        "green": 158,
        "blue": 173,
        "hue": 338,
        "saturation": 27,
        "lightness": 70
    }, {
        "hex": "#4F2B38",
        "rgb": "rgb(79, 43, 56)",
        "hsl": "hsl(338, 30%, 24%)",
        "red": 79,
        "green": 43,
        "blue": 56,
        "hue": 338,
        "saturation": 30,
        "lightness": 24
    }, {
        "hex": "#8F4D65",
        "rgb": "rgb(143, 77, 101)",
        "hsl": "hsl(338, 30%, 43%)",
        "red": 143,
        "green": 77,
        "blue": 101,
        "hue": 338,
        "saturation": 30,
        "lightness": 43
    }, {
        "hex": "#B1476D",
        "rgb": "rgb(177, 71, 109)",
        "hsl": "hsl(338, 43%, 49%)",
        "red": 177,
        "green": 71,
        "blue": 109,
        "hue": 338,
        "saturation": 43,
        "lightness": 49
    }, {
        "hex": "#7D2948",
        "rgb": "rgb(125, 41, 72)",
        "hsl": "hsl(338, 51%, 33%)",
        "red": 125,
        "green": 41,
        "blue": 72,
        "hue": 338,
        "saturation": 51,
        "lightness": 33
    }, {
        "hex": "#B83564",
        "rgb": "rgb(184, 53, 100)",
        "hsl": "hsl(338, 55%, 46%)",
        "red": 184,
        "green": 53,
        "blue": 100,
        "hue": 338,
        "saturation": 55,
        "lightness": 46
    }, {
        "hex": "#C22760",
        "rgb": "rgb(194, 39, 96)",
        "hsl": "hsl(338, 67%, 46%)",
        "red": 194,
        "green": 39,
        "blue": 96,
        "hue": 338,
        "saturation": 67,
        "lightness": 46
    }, {
        "hex": "#9E1E4C",
        "rgb": "rgb(158, 30, 76)",
        "hsl": "hsl(338, 68%, 37%)",
        "red": 158,
        "green": 30,
        "blue": 76,
        "hue": 338,
        "saturation": 68,
        "lightness": 37
    }, {
        "hex": "#E81764",
        "rgb": "rgb(232, 23, 100)",
        "hsl": "hsl(338, 82%, 50%)",
        "red": 232,
        "green": 23,
        "blue": 100,
        "hue": 338,
        "saturation": 82,
        "lightness": 50
    }, {
        "hex": "#ED4C87",
        "rgb": "rgb(237, 76, 135)",
        "hsl": "hsl(338, 82%, 61%)",
        "red": 237,
        "green": 76,
        "blue": 135,
        "hue": 338,
        "saturation": 82,
        "lightness": 61
    }, {
        "hex": "#9E0B41",
        "rgb": "rgb(158, 11, 65)",
        "hsl": "hsl(338, 87%, 33%)",
        "red": 158,
        "green": 11,
        "blue": 65,
        "hue": 338,
        "saturation": 87,
        "lightness": 33
    }, {
        "hex": "#D90F5A",
        "rgb": "rgb(217, 15, 90)",
        "hsl": "hsl(338, 87%, 45%)",
        "red": 217,
        "green": 15,
        "blue": 90,
        "hue": 338,
        "saturation": 87,
        "lightness": 45
    }, {
        "hex": "#25020F",
        "rgb": "rgb(37, 2, 15)",
        "hsl": "hsl(338, 90%, 8%)",
        "red": 37,
        "green": 2,
        "blue": 15,
        "hue": 338,
        "saturation": 90,
        "lightness": 8
    }, {
        "hex": "#AF0745",
        "rgb": "rgb(175, 7, 69)",
        "hsl": "hsl(338, 92%, 36%)",
        "red": 175,
        "green": 7,
        "blue": 69,
        "hue": 338,
        "saturation": 92,
        "lightness": 36
    }, {
        "hex": "#F00A5E",
        "rgb": "rgb(240, 10, 94)",
        "hsl": "hsl(338, 92%, 49%)",
        "red": 240,
        "green": 10,
        "blue": 94,
        "hue": 338,
        "saturation": 92,
        "lightness": 49
    }, {
        "hex": "#4E031E",
        "rgb": "rgb(78, 3, 30)",
        "hsl": "hsl(338, 93%, 16%)",
        "red": 78,
        "green": 3,
        "blue": 30,
        "hue": 338,
        "saturation": 93,
        "lightness": 16
    }, {
        "hex": "#F71568",
        "rgb": "rgb(247, 21, 104)",
        "hsl": "hsl(338, 93%, 53%)",
        "red": 247,
        "green": 21,
        "blue": 104,
        "hue": 338,
        "saturation": 93,
        "lightness": 53
    }, {
        "hex": "#F71E6C",
        "rgb": "rgb(247, 30, 108)",
        "hsl": "hsl(338, 93%, 54%)",
        "red": 247,
        "green": 30,
        "blue": 108,
        "hue": 338,
        "saturation": 93,
        "lightness": 54
    }, {
        "hex": "#5E0324",
        "rgb": "rgb(94, 3, 36)",
        "hsl": "hsl(338, 94%, 19%)",
        "red": 94,
        "green": 3,
        "blue": 36,
        "hue": 338,
        "saturation": 94,
        "lightness": 19
    }, {
        "hex": "#FA5894",
        "rgb": "rgb(250, 88, 148)",
        "hsl": "hsl(338, 94%, 66%)",
        "red": 250,
        "green": 88,
        "blue": 148,
        "hue": 338,
        "saturation": 94,
        "lightness": 66
    }, {
        "hex": "#F4065E",
        "rgb": "rgb(244, 6, 94)",
        "hsl": "hsl(338, 95%, 49%)",
        "red": 244,
        "green": 6,
        "blue": 94,
        "hue": 338,
        "saturation": 95,
        "lightness": 49
    }, {
        "hex": "#A6033F",
        "rgb": "rgb(166, 3, 63)",
        "hsl": "hsl(338, 96%, 33%)",
        "red": 166,
        "green": 3,
        "blue": 63,
        "hue": 338,
        "saturation": 96,
        "lightness": 33
    }, {
        "hex": "#D1024E",
        "rgb": "rgb(209, 2, 78)",
        "hsl": "hsl(338, 98%, 41%)",
        "red": 209,
        "green": 2,
        "blue": 78,
        "hue": 338,
        "saturation": 98,
        "lightness": 41
    }, {
        "hex": "#EB0258",
        "rgb": "rgb(235, 2, 88)",
        "hsl": "hsl(338, 98%, 46%)",
        "red": 235,
        "green": 2,
        "blue": 88,
        "hue": 338,
        "saturation": 98,
        "lightness": 46
    }, {
        "hex": "#FC1068",
        "rgb": "rgb(252, 16, 104)",
        "hsl": "hsl(338, 98%, 53%)",
        "red": 252,
        "green": 16,
        "blue": 104,
        "hue": 338,
        "saturation": 98,
        "lightness": 53
    }, {
        "hex": "#FF0C66",
        "rgb": "rgb(255, 12, 102)",
        "hsl": "hsl(338, 100%, 52%)",
        "red": 255,
        "green": 12,
        "blue": 102,
        "hue": 338,
        "saturation": 100,
        "lightness": 52
    }, {
        "hex": "#FF0D66",
        "rgb": "rgb(255, 13, 102)",
        "hsl": "hsl(338, 100%, 53%)",
        "red": 255,
        "green": 13,
        "blue": 102,
        "hue": 338,
        "saturation": 100,
        "lightness": 53
    }, {
        "hex": "#FF1168",
        "rgb": "rgb(255, 17, 104)",
        "hsl": "hsl(338, 100%, 53%)",
        "red": 255,
        "green": 17,
        "blue": 104,
        "hue": 338,
        "saturation": 100,
        "lightness": 53
    }, {
        "hex": "#8C6673",
        "rgb": "rgb(140, 102, 115)",
        "hsl": "hsl(339, 16%, 47%)",
        "red": 140,
        "green": 102,
        "blue": 115,
        "hue": 339,
        "saturation": 16,
        "lightness": 47
    }, {
        "hex": "#452B34",
        "rgb": "rgb(69, 43, 52)",
        "hsl": "hsl(339, 23%, 22%)",
        "red": 69,
        "green": 43,
        "blue": 52,
        "hue": 339,
        "saturation": 23,
        "lightness": 22
    }, {
        "hex": "#A0667A",
        "rgb": "rgb(160, 102, 122)",
        "hsl": "hsl(339, 23%, 51%)",
        "red": 160,
        "green": 102,
        "blue": 122,
        "hue": 339,
        "saturation": 23,
        "lightness": 51
    }, {
        "hex": "#54343F",
        "rgb": "rgb(84, 52, 63)",
        "hsl": "hsl(339, 24%, 27%)",
        "red": 84,
        "green": 52,
        "blue": 63,
        "hue": 339,
        "saturation": 24,
        "lightness": 27
    }, {
        "hex": "#F3E2E8",
        "rgb": "rgb(243, 226, 232)",
        "hsl": "hsl(339, 41%, 92%)",
        "red": 243,
        "green": 226,
        "blue": 232,
        "hue": 339,
        "saturation": 41,
        "lightness": 92
    }, {
        "hex": "#2B0B16",
        "rgb": "rgb(43, 11, 22)",
        "hsl": "hsl(339, 59%, 11%)",
        "red": 43,
        "green": 11,
        "blue": 22,
        "hue": 339,
        "saturation": 59,
        "lightness": 11
    }, {
        "hex": "#C91E5A",
        "rgb": "rgb(201, 30, 90)",
        "hsl": "hsl(339, 74%, 45%)",
        "red": 201,
        "green": 30,
        "blue": 90,
        "hue": 339,
        "saturation": 74,
        "lightness": 45
    }, {
        "hex": "#911440",
        "rgb": "rgb(145, 20, 64)",
        "hsl": "hsl(339, 76%, 32%)",
        "red": 145,
        "green": 20,
        "blue": 64,
        "hue": 339,
        "saturation": 76,
        "lightness": 32
    }, {
        "hex": "#BC1953",
        "rgb": "rgb(188, 25, 83)",
        "hsl": "hsl(339, 77%, 42%)",
        "red": 188,
        "green": 25,
        "blue": 83,
        "hue": 339,
        "saturation": 77,
        "lightness": 42
    }, {
        "hex": "#C71755",
        "rgb": "rgb(199, 23, 85)",
        "hsl": "hsl(339, 79%, 44%)",
        "red": 199,
        "green": 23,
        "blue": 85,
        "hue": 339,
        "saturation": 79,
        "lightness": 44
    }, {
        "hex": "#BD1550",
        "rgb": "rgb(189, 21, 80)",
        "hsl": "hsl(339, 80%, 41%)",
        "red": 189,
        "green": 21,
        "blue": 80,
        "hue": 339,
        "saturation": 80,
        "lightness": 41
    }, {
        "hex": "#FCD9E5",
        "rgb": "rgb(252, 217, 229)",
        "hsl": "hsl(339, 85%, 92%)",
        "red": 252,
        "green": 217,
        "blue": 229,
        "hue": 339,
        "saturation": 85,
        "lightness": 92
    }, {
        "hex": "#FBC5D8",
        "rgb": "rgb(251, 197, 216)",
        "hsl": "hsl(339, 87%, 88%)",
        "red": 251,
        "green": 197,
        "blue": 216,
        "hue": 339,
        "saturation": 87,
        "lightness": 88
    }, {
        "hex": "#EE0B5B",
        "rgb": "rgb(238, 11, 91)",
        "hsl": "hsl(339, 91%, 49%)",
        "red": 238,
        "green": 11,
        "blue": 91,
        "hue": 339,
        "saturation": 91,
        "lightness": 49
    }, {
        "hex": "#FD0A60",
        "rgb": "rgb(253, 10, 96)",
        "hsl": "hsl(339, 98%, 52%)",
        "red": 253,
        "green": 10,
        "blue": 96,
        "hue": 339,
        "saturation": 98,
        "lightness": 52
    }, {
        "hex": "#FD0A60",
        "rgb": "rgb(253, 10, 96)",
        "hsl": "hsl(339, 98%, 52%)",
        "red": 253,
        "green": 10,
        "blue": 96,
        "hue": 339,
        "saturation": 98,
        "lightness": 52
    }, {
        "hex": "#FF005B",
        "rgb": "rgb(255, 0, 91)",
        "hsl": "hsl(339, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 91,
        "hue": 339,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF548F",
        "rgb": "rgb(255, 84, 143)",
        "hsl": "hsl(339, 100%, 66%)",
        "red": 255,
        "green": 84,
        "blue": 143,
        "hue": 339,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#4D4A4B",
        "rgb": "rgb(77, 74, 75)",
        "hsl": "hsl(340, 2%, 30%)",
        "red": 77,
        "green": 74,
        "blue": 75,
        "hue": 340,
        "saturation": 2,
        "lightness": 30
    }, {
        "hex": "#262324",
        "rgb": "rgb(38, 35, 36)",
        "hsl": "hsl(340, 4%, 14%)",
        "red": 38,
        "green": 35,
        "blue": 36,
        "hue": 340,
        "saturation": 4,
        "lightness": 14
    }, {
        "hex": "#382F32",
        "rgb": "rgb(56, 47, 50)",
        "hsl": "hsl(340, 9%, 20%)",
        "red": 56,
        "green": 47,
        "blue": 50,
        "hue": 340,
        "saturation": 9,
        "lightness": 20
    }, {
        "hex": "#291D21",
        "rgb": "rgb(41, 29, 33)",
        "hsl": "hsl(340, 17%, 14%)",
        "red": 41,
        "green": 29,
        "blue": 33,
        "hue": 340,
        "saturation": 17,
        "lightness": 14
    }, {
        "hex": "#67434F",
        "rgb": "rgb(103, 67, 79)",
        "hsl": "hsl(340, 21%, 33%)",
        "red": 103,
        "green": 67,
        "blue": 79,
        "hue": 340,
        "saturation": 21,
        "lightness": 33
    }, {
        "hex": "#9E6B7C",
        "rgb": "rgb(158, 107, 124)",
        "hsl": "hsl(340, 21%, 52%)",
        "red": 158,
        "green": 107,
        "blue": 124,
        "hue": 340,
        "saturation": 21,
        "lightness": 52
    }, {
        "hex": "#191013",
        "rgb": "rgb(25, 16, 19)",
        "hsl": "hsl(340, 22%, 8%)",
        "red": 25,
        "green": 16,
        "blue": 19,
        "hue": 340,
        "saturation": 22,
        "lightness": 8
    }, {
        "hex": "#90425C",
        "rgb": "rgb(144, 66, 92)",
        "hsl": "hsl(340, 37%, 41%)",
        "red": 144,
        "green": 66,
        "blue": 92,
        "hue": 340,
        "saturation": 37,
        "lightness": 41
    }, {
        "hex": "#B05574",
        "rgb": "rgb(176, 85, 116)",
        "hsl": "hsl(340, 37%, 51%)",
        "red": 176,
        "green": 85,
        "blue": 116,
        "hue": 340,
        "saturation": 37,
        "lightness": 51
    }, {
        "hex": "#B05574",
        "rgb": "rgb(176, 85, 116)",
        "hsl": "hsl(340, 37%, 51%)",
        "red": 176,
        "green": 85,
        "blue": 116,
        "hue": 340,
        "saturation": 37,
        "lightness": 51
    }, {
        "hex": "#B05574",
        "rgb": "rgb(176, 85, 116)",
        "hsl": "hsl(340, 37%, 51%)",
        "red": 176,
        "green": 85,
        "blue": 116,
        "hue": 340,
        "saturation": 37,
        "lightness": 51
    }, {
        "hex": "#CC527A",
        "rgb": "rgb(204, 82, 122)",
        "hsl": "hsl(340, 54%, 56%)",
        "red": 204,
        "green": 82,
        "blue": 122,
        "hue": 340,
        "saturation": 54,
        "lightness": 56
    }, {
        "hex": "#CD4472",
        "rgb": "rgb(205, 68, 114)",
        "hsl": "hsl(340, 58%, 54%)",
        "red": 205,
        "green": 68,
        "blue": 114,
        "hue": 340,
        "saturation": 58,
        "lightness": 54
    }, {
        "hex": "#450B1E",
        "rgb": "rgb(69, 11, 30)",
        "hsl": "hsl(340, 72%, 16%)",
        "red": 69,
        "green": 11,
        "blue": 30,
        "hue": 340,
        "saturation": 72,
        "lightness": 16
    }, {
        "hex": "#E23D75",
        "rgb": "rgb(226, 61, 117)",
        "hsl": "hsl(340, 74%, 56%)",
        "red": 226,
        "green": 61,
        "blue": 117,
        "hue": 340,
        "saturation": 74,
        "lightness": 56
    }, {
        "hex": "#E64E81",
        "rgb": "rgb(230, 78, 129)",
        "hsl": "hsl(340, 75%, 60%)",
        "red": 230,
        "green": 78,
        "blue": 129,
        "hue": 340,
        "saturation": 75,
        "lightness": 60
    }, {
        "hex": "#3B0819",
        "rgb": "rgb(59, 8, 25)",
        "hsl": "hsl(340, 76%, 13%)",
        "red": 59,
        "green": 8,
        "blue": 25,
        "hue": 340,
        "saturation": 76,
        "lightness": 13
    }, {
        "hex": "#D61C59",
        "rgb": "rgb(214, 28, 89)",
        "hsl": "hsl(340, 77%, 47%)",
        "red": 214,
        "green": 28,
        "blue": 89,
        "hue": 340,
        "saturation": 77,
        "lightness": 47
    }, {
        "hex": "#EC5C8D",
        "rgb": "rgb(236, 92, 141)",
        "hsl": "hsl(340, 79%, 64%)",
        "red": 236,
        "green": 92,
        "blue": 141,
        "hue": 340,
        "saturation": 79,
        "lightness": 64
    }, {
        "hex": "#E8175D",
        "rgb": "rgb(232, 23, 93)",
        "hsl": "hsl(340, 82%, 50%)",
        "red": 232,
        "green": 23,
        "blue": 93,
        "hue": 340,
        "saturation": 82,
        "lightness": 50
    }, {
        "hex": "#B10C43",
        "rgb": "rgb(177, 12, 67)",
        "hsl": "hsl(340, 87%, 37%)",
        "red": 177,
        "green": 12,
        "blue": 67,
        "hue": 340,
        "saturation": 87,
        "lightness": 37
    }, {
        "hex": "#FA8CB1",
        "rgb": "rgb(250, 140, 177)",
        "hsl": "hsl(340, 92%, 76%)",
        "red": 250,
        "green": 140,
        "blue": 177,
        "hue": 340,
        "saturation": 92,
        "lightness": 76
    }, {
        "hex": "#B7023F",
        "rgb": "rgb(183, 2, 63)",
        "hsl": "hsl(340, 98%, 36%)",
        "red": 183,
        "green": 2,
        "blue": 63,
        "hue": 340,
        "saturation": 98,
        "lightness": 36
    }, {
        "hex": "#FE0557",
        "rgb": "rgb(254, 5, 87)",
        "hsl": "hsl(340, 99%, 51%)",
        "red": 254,
        "green": 5,
        "blue": 87,
        "hue": 340,
        "saturation": 99,
        "lightness": 51
    }, {
        "hex": "#FE3174",
        "rgb": "rgb(254, 49, 116)",
        "hsl": "hsl(340, 99%, 59%)",
        "red": 254,
        "green": 49,
        "blue": 116,
        "hue": 340,
        "saturation": 99,
        "lightness": 59
    }, {
        "hex": "#FE6196",
        "rgb": "rgb(254, 97, 150)",
        "hsl": "hsl(340, 99%, 69%)",
        "red": 254,
        "green": 97,
        "blue": 150,
        "hue": 340,
        "saturation": 99,
        "lightness": 69
    }, {
        "hex": "#660022",
        "rgb": "rgb(102, 0, 34)",
        "hsl": "hsl(340, 100%, 20%)",
        "red": 102,
        "green": 0,
        "blue": 34,
        "hue": 340,
        "saturation": 100,
        "lightness": 20
    }, {
        "hex": "#FF1964",
        "rgb": "rgb(255, 25, 100)",
        "hsl": "hsl(340, 100%, 55%)",
        "red": 255,
        "green": 25,
        "blue": 100,
        "hue": 340,
        "saturation": 100,
        "lightness": 55
    }, {
        "hex": "#FF2B73",
        "rgb": "rgb(255, 43, 115)",
        "hsl": "hsl(340, 100%, 58%)",
        "red": 255,
        "green": 43,
        "blue": 115,
        "hue": 340,
        "saturation": 100,
        "lightness": 58
    }, {
        "hex": "#FF3D7F",
        "rgb": "rgb(255, 61, 127)",
        "hsl": "hsl(340, 100%, 62%)",
        "red": 255,
        "green": 61,
        "blue": 127,
        "hue": 340,
        "saturation": 100,
        "lightness": 62
    }, {
        "hex": "#A76378",
        "rgb": "rgb(167, 99, 120)",
        "hsl": "hsl(341, 28%, 52%)",
        "red": 167,
        "green": 99,
        "blue": 120,
        "hue": 341,
        "saturation": 28,
        "lightness": 52
    }, {
        "hex": "#40202A",
        "rgb": "rgb(64, 32, 42)",
        "hsl": "hsl(341, 33%, 19%)",
        "red": 64,
        "green": 32,
        "blue": 42,
        "hue": 341,
        "saturation": 33,
        "lightness": 19
    }, {
        "hex": "#AD4C6B",
        "rgb": "rgb(173, 76, 107)",
        "hsl": "hsl(341, 39%, 49%)",
        "red": 173,
        "green": 76,
        "blue": 107,
        "hue": 341,
        "saturation": 39,
        "lightness": 49
    }, {
        "hex": "#BA456A",
        "rgb": "rgb(186, 69, 106)",
        "hsl": "hsl(341, 46%, 50%)",
        "red": 186,
        "green": 69,
        "blue": 106,
        "hue": 341,
        "saturation": 46,
        "lightness": 50
    }, {
        "hex": "#72243D",
        "rgb": "rgb(114, 36, 61)",
        "hsl": "hsl(341, 52%, 29%)",
        "red": 114,
        "green": 36,
        "blue": 61,
        "hue": 341,
        "saturation": 52,
        "lightness": 29
    }, {
        "hex": "#75233D",
        "rgb": "rgb(117, 35, 61)",
        "hsl": "hsl(341, 54%, 30%)",
        "red": 117,
        "green": 35,
        "blue": 61,
        "hue": 341,
        "saturation": 54,
        "lightness": 30
    }, {
        "hex": "#D65981",
        "rgb": "rgb(214, 89, 129)",
        "hsl": "hsl(341, 60%, 59%)",
        "red": 214,
        "green": 89,
        "blue": 129,
        "hue": 341,
        "saturation": 60,
        "lightness": 59
    }, {
        "hex": "#CF3A69",
        "rgb": "rgb(207, 58, 105)",
        "hsl": "hsl(341, 61%, 52%)",
        "red": 207,
        "green": 58,
        "blue": 105,
        "hue": 341,
        "saturation": 61,
        "lightness": 52
    }, {
        "hex": "#C22557",
        "rgb": "rgb(194, 37, 87)",
        "hsl": "hsl(341, 68%, 45%)",
        "red": 194,
        "green": 37,
        "blue": 87,
        "hue": 341,
        "saturation": 68,
        "lightness": 45
    }, {
        "hex": "#DB3C6E",
        "rgb": "rgb(219, 60, 110)",
        "hsl": "hsl(341, 69%, 55%)",
        "red": 219,
        "green": 60,
        "blue": 110,
        "hue": 341,
        "saturation": 69,
        "lightness": 55
    }, {
        "hex": "#E8608C",
        "rgb": "rgb(232, 96, 140)",
        "hsl": "hsl(341, 75%, 64%)",
        "red": 232,
        "green": 96,
        "blue": 140,
        "hue": 341,
        "saturation": 75,
        "lightness": 64
    }, {
        "hex": "#E21B5A",
        "rgb": "rgb(226, 27, 90)",
        "hsl": "hsl(341, 79%, 50%)",
        "red": 226,
        "green": 27,
        "blue": 90,
        "hue": 341,
        "saturation": 79,
        "lightness": 50
    }, {
        "hex": "#ED5887",
        "rgb": "rgb(237, 88, 135)",
        "hsl": "hsl(341, 81%, 64%)",
        "red": 237,
        "green": 88,
        "blue": 135,
        "hue": 341,
        "saturation": 81,
        "lightness": 64
    }, {
        "hex": "#AE0C3E",
        "rgb": "rgb(174, 12, 62)",
        "hsl": "hsl(341, 87%, 36%)",
        "red": 174,
        "green": 12,
        "blue": 62,
        "hue": 341,
        "saturation": 87,
        "lightness": 36
    }, {
        "hex": "#4E051C",
        "rgb": "rgb(78, 5, 28)",
        "hsl": "hsl(341, 88%, 16%)",
        "red": 78,
        "green": 5,
        "blue": 28,
        "hue": 341,
        "saturation": 88,
        "lightness": 16
    }, {
        "hex": "#F2306D",
        "rgb": "rgb(242, 48, 109)",
        "hsl": "hsl(341, 88%, 57%)",
        "red": 242,
        "green": 48,
        "blue": 109,
        "hue": 341,
        "saturation": 88,
        "lightness": 57
    }, {
        "hex": "#940533",
        "rgb": "rgb(148, 5, 51)",
        "hsl": "hsl(341, 93%, 30%)",
        "red": 148,
        "green": 5,
        "blue": 51,
        "hue": 341,
        "saturation": 93,
        "lightness": 30
    }, {
        "hex": "#C7003F",
        "rgb": "rgb(199, 0, 63)",
        "hsl": "hsl(341, 100%, 39%)",
        "red": 199,
        "green": 0,
        "blue": 63,
        "hue": 341,
        "saturation": 100,
        "lightness": 39
    }, {
        "hex": "#F90050",
        "rgb": "rgb(249, 0, 80)",
        "hsl": "hsl(341, 100%, 49%)",
        "red": 249,
        "green": 0,
        "blue": 80,
        "hue": 341,
        "saturation": 100,
        "lightness": 49
    }, {
        "hex": "#FF0051",
        "rgb": "rgb(255, 0, 81)",
        "hsl": "hsl(341, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 81,
        "hue": 341,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#997F87",
        "rgb": "rgb(153, 127, 135)",
        "hsl": "hsl(342, 11%, 55%)",
        "red": 153,
        "green": 127,
        "blue": 135,
        "hue": 342,
        "saturation": 11,
        "lightness": 55
    }, {
        "hex": "#723E4E",
        "rgb": "rgb(114, 62, 78)",
        "hsl": "hsl(342, 30%, 35%)",
        "red": 114,
        "green": 62,
        "blue": 78,
        "hue": 342,
        "saturation": 30,
        "lightness": 35
    }, {
        "hex": "#6C3948",
        "rgb": "rgb(108, 57, 72)",
        "hsl": "hsl(342, 31%, 32%)",
        "red": 108,
        "green": 57,
        "blue": 72,
        "hue": 342,
        "saturation": 31,
        "lightness": 32
    }, {
        "hex": "#632739",
        "rgb": "rgb(99, 39, 57)",
        "hsl": "hsl(342, 43%, 27%)",
        "red": 99,
        "green": 39,
        "blue": 57,
        "hue": 342,
        "saturation": 43,
        "lightness": 27
    }, {
        "hex": "#91334F",
        "rgb": "rgb(145, 51, 79)",
        "hsl": "hsl(342, 48%, 38%)",
        "red": 145,
        "green": 51,
        "blue": 79,
        "hue": 342,
        "saturation": 48,
        "lightness": 38
    }, {
        "hex": "#962C4C",
        "rgb": "rgb(150, 44, 76)",
        "hsl": "hsl(342, 55%, 38%)",
        "red": 150,
        "green": 44,
        "blue": 76,
        "hue": 342,
        "saturation": 55,
        "lightness": 38
    }, {
        "hex": "#B0254F",
        "rgb": "rgb(176, 37, 79)",
        "hsl": "hsl(342, 65%, 42%)",
        "red": 176,
        "green": 37,
        "blue": 79,
        "hue": 342,
        "saturation": 65,
        "lightness": 42
    }, {
        "hex": "#B3204D",
        "rgb": "rgb(179, 32, 77)",
        "hsl": "hsl(342, 70%, 41%)",
        "red": 179,
        "green": 32,
        "blue": 77,
        "hue": 342,
        "saturation": 70,
        "lightness": 41
    }, {
        "hex": "#98173D",
        "rgb": "rgb(152, 23, 61)",
        "hsl": "hsl(342, 74%, 34%)",
        "red": 152,
        "green": 23,
        "blue": 61,
        "hue": 342,
        "saturation": 74,
        "lightness": 34
    }, {
        "hex": "#EC225E",
        "rgb": "rgb(236, 34, 94)",
        "hsl": "hsl(342, 84%, 53%)",
        "red": 236,
        "green": 34,
        "blue": 94,
        "hue": 342,
        "saturation": 84,
        "lightness": 53
    }, {
        "hex": "#9E0C39",
        "rgb": "rgb(158, 12, 57)",
        "hsl": "hsl(342, 86%, 33%)",
        "red": 158,
        "green": 12,
        "blue": 57,
        "hue": 342,
        "saturation": 86,
        "lightness": 33
    }, {
        "hex": "#BD0A41",
        "rgb": "rgb(189, 10, 65)",
        "hsl": "hsl(342, 90%, 39%)",
        "red": 189,
        "green": 10,
        "blue": 65,
        "hue": 342,
        "saturation": 90,
        "lightness": 39
    }, {
        "hex": "#F91659",
        "rgb": "rgb(249, 22, 89)",
        "hsl": "hsl(342, 95%, 53%)",
        "red": 249,
        "green": 22,
        "blue": 89,
        "hue": 342,
        "saturation": 95,
        "lightness": 53
    }, {
        "hex": "#FD0A54",
        "rgb": "rgb(253, 10, 84)",
        "hsl": "hsl(342, 98%, 52%)",
        "red": 253,
        "green": 10,
        "blue": 84,
        "hue": 342,
        "saturation": 98,
        "lightness": 52
    }, {
        "hex": "#FD135A",
        "rgb": "rgb(253, 19, 90)",
        "hsl": "hsl(342, 98%, 53%)",
        "red": 253,
        "green": 19,
        "blue": 90,
        "hue": 342,
        "saturation": 98,
        "lightness": 53
    }, {
        "hex": "#FFE8EF",
        "rgb": "rgb(255, 232, 239)",
        "hsl": "hsl(342, 100%, 95%)",
        "red": 255,
        "green": 232,
        "blue": 239,
        "hue": 342,
        "saturation": 100,
        "lightness": 95
    }, {
        "hex": "#795C64",
        "rgb": "rgb(121, 92, 100)",
        "hsl": "hsl(343, 14%, 42%)",
        "red": 121,
        "green": 92,
        "blue": 100,
        "hue": 343,
        "saturation": 14,
        "lightness": 42
    }, {
        "hex": "#66424C",
        "rgb": "rgb(102, 66, 76)",
        "hsl": "hsl(343, 21%, 33%)",
        "red": 102,
        "green": 66,
        "blue": 76,
        "hue": 343,
        "saturation": 21,
        "lightness": 33
    }, {
        "hex": "#5C323E",
        "rgb": "rgb(92, 50, 62)",
        "hsl": "hsl(343, 30%, 28%)",
        "red": 92,
        "green": 50,
        "blue": 62,
        "hue": 343,
        "saturation": 30,
        "lightness": 28
    }, {
        "hex": "#AB5C72",
        "rgb": "rgb(171, 92, 114)",
        "hsl": "hsl(343, 32%, 52%)",
        "red": 171,
        "green": 92,
        "blue": 114,
        "hue": 343,
        "saturation": 32,
        "lightness": 52
    }, {
        "hex": "#AB526B",
        "rgb": "rgb(171, 82, 107)",
        "hsl": "hsl(343, 35%, 50%)",
        "red": 171,
        "green": 82,
        "blue": 107,
        "hue": 343,
        "saturation": 35,
        "lightness": 50
    }, {
        "hex": "#C06C84",
        "rgb": "rgb(192, 108, 132)",
        "hsl": "hsl(343, 40%, 59%)",
        "red": 192,
        "green": 108,
        "blue": 132,
        "hue": 343,
        "saturation": 40,
        "lightness": 59
    }, {
        "hex": "#D78FA3",
        "rgb": "rgb(215, 143, 163)",
        "hsl": "hsl(343, 47%, 70%)",
        "red": 215,
        "green": 143,
        "blue": 163,
        "hue": 343,
        "saturation": 47,
        "lightness": 70
    }, {
        "hex": "#BF496A",
        "rgb": "rgb(191, 73, 106)",
        "hsl": "hsl(343, 48%, 52%)",
        "red": 191,
        "green": 73,
        "blue": 106,
        "hue": 343,
        "saturation": 48,
        "lightness": 52
    }, {
        "hex": "#D48299",
        "rgb": "rgb(212, 130, 153)",
        "hsl": "hsl(343, 49%, 67%)",
        "red": 212,
        "green": 130,
        "blue": 153,
        "hue": 343,
        "saturation": 49,
        "lightness": 67
    }, {
        "hex": "#C95C7A",
        "rgb": "rgb(201, 92, 122)",
        "hsl": "hsl(343, 50%, 57%)",
        "red": 201,
        "green": 92,
        "blue": 122,
        "hue": 343,
        "saturation": 50,
        "lightness": 57
    }, {
        "hex": "#992F4D",
        "rgb": "rgb(153, 47, 77)",
        "hsl": "hsl(343, 53%, 39%)",
        "red": 153,
        "green": 47,
        "blue": 77,
        "hue": 343,
        "saturation": 53,
        "lightness": 39
    }, {
        "hex": "#992C4B",
        "rgb": "rgb(153, 44, 75)",
        "hsl": "hsl(343, 55%, 39%)",
        "red": 153,
        "green": 44,
        "blue": 75,
        "hue": 343,
        "saturation": 55,
        "lightness": 39
    }, {
        "hex": "#C74066",
        "rgb": "rgb(199, 64, 102)",
        "hsl": "hsl(343, 55%, 52%)",
        "red": 199,
        "green": 64,
        "blue": 102,
        "hue": 343,
        "saturation": 55,
        "lightness": 52
    }, {
        "hex": "#BA3259",
        "rgb": "rgb(186, 50, 89)",
        "hsl": "hsl(343, 58%, 46%)",
        "red": 186,
        "green": 50,
        "blue": 89,
        "hue": 343,
        "saturation": 58,
        "lightness": 46
    }, {
        "hex": "#D45E80",
        "rgb": "rgb(212, 94, 128)",
        "hsl": "hsl(343, 58%, 60%)",
        "red": 212,
        "green": 94,
        "blue": 128,
        "hue": 343,
        "saturation": 58,
        "lightness": 60
    }, {
        "hex": "#9A2848",
        "rgb": "rgb(154, 40, 72)",
        "hsl": "hsl(343, 59%, 38%)",
        "red": 154,
        "green": 40,
        "blue": 72,
        "hue": 343,
        "saturation": 59,
        "lightness": 38
    }, {
        "hex": "#CE3762",
        "rgb": "rgb(206, 55, 98)",
        "hsl": "hsl(343, 61%, 51%)",
        "red": 206,
        "green": 55,
        "blue": 98,
        "hue": 343,
        "saturation": 61,
        "lightness": 51
    }, {
        "hex": "#D4486F",
        "rgb": "rgb(212, 72, 111)",
        "hsl": "hsl(343, 62%, 56%)",
        "red": 212,
        "green": 72,
        "blue": 111,
        "hue": 343,
        "saturation": 62,
        "lightness": 56
    }, {
        "hex": "#BA1E4A",
        "rgb": "rgb(186, 30, 74)",
        "hsl": "hsl(343, 72%, 42%)",
        "red": 186,
        "green": 30,
        "blue": 74,
        "hue": 343,
        "saturation": 72,
        "lightness": 42
    }, {
        "hex": "#A51A41",
        "rgb": "rgb(165, 26, 65)",
        "hsl": "hsl(343, 73%, 37%)",
        "red": 165,
        "green": 26,
        "blue": 65,
        "hue": 343,
        "saturation": 73,
        "lightness": 37
    }, {
        "hex": "#99173C",
        "rgb": "rgb(153, 23, 60)",
        "hsl": "hsl(343, 74%, 35%)",
        "red": 153,
        "green": 23,
        "blue": 60,
        "hue": 343,
        "saturation": 74,
        "lightness": 35
    }, {
        "hex": "#B81C48",
        "rgb": "rgb(184, 28, 72)",
        "hsl": "hsl(343, 74%, 42%)",
        "red": 184,
        "green": 28,
        "blue": 72,
        "hue": 343,
        "saturation": 74,
        "lightness": 42
    }, {
        "hex": "#E63C6D",
        "rgb": "rgb(230, 60, 109)",
        "hsl": "hsl(343, 77%, 57%)",
        "red": 230,
        "green": 60,
        "blue": 109,
        "hue": 343,
        "saturation": 77,
        "lightness": 57
    }, {
        "hex": "#300511",
        "rgb": "rgb(48, 5, 17)",
        "hsl": "hsl(343, 81%, 10%)",
        "red": 48,
        "green": 5,
        "blue": 17,
        "hue": 343,
        "saturation": 81,
        "lightness": 10
    }, {
        "hex": "#ED2860",
        "rgb": "rgb(237, 40, 96)",
        "hsl": "hsl(343, 85%, 54%)",
        "red": 237,
        "green": 40,
        "blue": 96,
        "hue": 343,
        "saturation": 85,
        "lightness": 54
    }, {
        "hex": "#F1396D",
        "rgb": "rgb(241, 57, 109)",
        "hsl": "hsl(343, 87%, 58%)",
        "red": 241,
        "green": 57,
        "blue": 109,
        "hue": 343,
        "saturation": 87,
        "lightness": 58
    }, {
        "hex": "#F1396D",
        "rgb": "rgb(241, 57, 109)",
        "hsl": "hsl(343, 87%, 58%)",
        "red": 241,
        "green": 57,
        "blue": 109,
        "hue": 343,
        "saturation": 87,
        "lightness": 58
    }, {
        "hex": "#5F051F",
        "rgb": "rgb(95, 5, 31)",
        "hsl": "hsl(343, 90%, 20%)",
        "red": 95,
        "green": 5,
        "blue": 31,
        "hue": 343,
        "saturation": 90,
        "lightness": 20
    }, {
        "hex": "#CC063E",
        "rgb": "rgb(204, 6, 62)",
        "hsl": "hsl(343, 94%, 41%)",
        "red": 204,
        "green": 6,
        "blue": 62,
        "hue": 343,
        "saturation": 94,
        "lightness": 41
    }, {
        "hex": "#FC2F68",
        "rgb": "rgb(252, 47, 104)",
        "hsl": "hsl(343, 97%, 59%)",
        "red": 252,
        "green": 47,
        "blue": 104,
        "hue": 343,
        "saturation": 97,
        "lightness": 59
    }, {
        "hex": "#FC3D73",
        "rgb": "rgb(252, 61, 115)",
        "hsl": "hsl(343, 97%, 61%)",
        "red": 252,
        "green": 61,
        "blue": 115,
        "hue": 343,
        "saturation": 97,
        "lightness": 61
    }, {
        "hex": "#CF023B",
        "rgb": "rgb(207, 2, 59)",
        "hsl": "hsl(343, 98%, 41%)",
        "red": 207,
        "green": 2,
        "blue": 59,
        "hue": 343,
        "saturation": 98,
        "lightness": 41
    }, {
        "hex": "#FC0F52",
        "rgb": "rgb(252, 15, 82)",
        "hsl": "hsl(343, 98%, 52%)",
        "red": 252,
        "green": 15,
        "blue": 82,
        "hue": 343,
        "saturation": 98,
        "lightness": 52
    }, {
        "hex": "#770021",
        "rgb": "rgb(119, 0, 33)",
        "hsl": "hsl(343, 100%, 23%)",
        "red": 119,
        "green": 0,
        "blue": 33,
        "hue": 343,
        "saturation": 100,
        "lightness": 23
    }, {
        "hex": "#FF0048",
        "rgb": "rgb(255, 0, 72)",
        "hsl": "hsl(343, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 72,
        "hue": 343,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF0048",
        "rgb": "rgb(255, 0, 72)",
        "hsl": "hsl(343, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 72,
        "hue": 343,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF0D51",
        "rgb": "rgb(255, 13, 81)",
        "hsl": "hsl(343, 100%, 53%)",
        "red": 255,
        "green": 13,
        "blue": 81,
        "hue": 343,
        "saturation": 100,
        "lightness": 53
    }, {
        "hex": "#FF1457",
        "rgb": "rgb(255, 20, 87)",
        "hsl": "hsl(343, 100%, 54%)",
        "red": 255,
        "green": 20,
        "blue": 87,
        "hue": 343,
        "saturation": 100,
        "lightness": 54
    }, {
        "hex": "#FF2C69",
        "rgb": "rgb(255, 44, 105)",
        "hsl": "hsl(343, 100%, 59%)",
        "red": 255,
        "green": 44,
        "blue": 105,
        "hue": 343,
        "saturation": 100,
        "lightness": 59
    }, {
        "hex": "#3B1922",
        "rgb": "rgb(59, 25, 34)",
        "hsl": "hsl(344, 40%, 16%)",
        "red": 59,
        "green": 25,
        "blue": 34,
        "hue": 344,
        "saturation": 40,
        "lightness": 16
    }, {
        "hex": "#B94866",
        "rgb": "rgb(185, 72, 102)",
        "hsl": "hsl(344, 45%, 50%)",
        "red": 185,
        "green": 72,
        "blue": 102,
        "hue": 344,
        "saturation": 45,
        "lightness": 50
    }, {
        "hex": "#AB3E5B",
        "rgb": "rgb(171, 62, 91)",
        "hsl": "hsl(344, 47%, 46%)",
        "red": 171,
        "green": 62,
        "blue": 91,
        "hue": 344,
        "saturation": 47,
        "lightness": 46
    }, {
        "hex": "#A43955",
        "rgb": "rgb(164, 57, 85)",
        "hsl": "hsl(344, 48%, 43%)",
        "red": 164,
        "green": 57,
        "blue": 85,
        "hue": 344,
        "saturation": 48,
        "lightness": 43
    }, {
        "hex": "#3A111C",
        "rgb": "rgb(58, 17, 28)",
        "hsl": "hsl(344, 55%, 15%)",
        "red": 58,
        "green": 17,
        "blue": 28,
        "hue": 344,
        "saturation": 55,
        "lightness": 15
    }, {
        "hex": "#D76483",
        "rgb": "rgb(215, 100, 131)",
        "hsl": "hsl(344, 59%, 62%)",
        "red": 215,
        "green": 100,
        "blue": 131,
        "hue": 344,
        "saturation": 59,
        "lightness": 62
    }, {
        "hex": "#240910",
        "rgb": "rgb(36, 9, 16)",
        "hsl": "hsl(344, 60%, 9%)",
        "red": 36,
        "green": 9,
        "blue": 16,
        "hue": 344,
        "saturation": 60,
        "lightness": 9
    }, {
        "hex": "#DF5C7E",
        "rgb": "rgb(223, 92, 126)",
        "hsl": "hsl(344, 67%, 62%)",
        "red": 223,
        "green": 92,
        "blue": 126,
        "hue": 344,
        "saturation": 67,
        "lightness": 62
    }, {
        "hex": "#D62957",
        "rgb": "rgb(214, 41, 87)",
        "hsl": "hsl(344, 68%, 50%)",
        "red": 214,
        "green": 41,
        "blue": 87,
        "hue": 344,
        "saturation": 68,
        "lightness": 50
    }, {
        "hex": "#B22148",
        "rgb": "rgb(178, 33, 72)",
        "hsl": "hsl(344, 69%, 41%)",
        "red": 178,
        "green": 33,
        "blue": 72,
        "hue": 344,
        "saturation": 69,
        "lightness": 41
    }, {
        "hex": "#170409",
        "rgb": "rgb(23, 4, 9)",
        "hsl": "hsl(344, 70%, 5%)",
        "red": 23,
        "green": 4,
        "blue": 9,
        "hue": 344,
        "saturation": 70,
        "lightness": 5
    }, {
        "hex": "#E42355",
        "rgb": "rgb(228, 35, 85)",
        "hsl": "hsl(344, 78%, 52%)",
        "red": 228,
        "green": 35,
        "blue": 85,
        "hue": 344,
        "saturation": 78,
        "lightness": 52
    }, {
        "hex": "#E94E77",
        "rgb": "rgb(233, 78, 119)",
        "hsl": "hsl(344, 78%, 61%)",
        "red": 233,
        "green": 78,
        "blue": 119,
        "hue": 344,
        "saturation": 78,
        "lightness": 61
    }, {
        "hex": "#CE1446",
        "rgb": "rgb(206, 20, 70)",
        "hsl": "hsl(344, 82%, 44%)",
        "red": 206,
        "green": 20,
        "blue": 70,
        "hue": 344,
        "saturation": 82,
        "lightness": 44
    }, {
        "hex": "#CA1444",
        "rgb": "rgb(202, 20, 68)",
        "hsl": "hsl(344, 82%, 44%)",
        "red": 202,
        "green": 20,
        "blue": 68,
        "hue": 344,
        "saturation": 82,
        "lightness": 44
    }, {
        "hex": "#B9113F",
        "rgb": "rgb(185, 17, 63)",
        "hsl": "hsl(344, 83%, 40%)",
        "red": 185,
        "green": 17,
        "blue": 63,
        "hue": 344,
        "saturation": 83,
        "lightness": 40
    }, {
        "hex": "#F10C49",
        "rgb": "rgb(241, 12, 73)",
        "hsl": "hsl(344, 91%, 50%)",
        "red": 241,
        "green": 12,
        "blue": 73,
        "hue": 344,
        "saturation": 91,
        "lightness": 50
    }, {
        "hex": "#E30842",
        "rgb": "rgb(227, 8, 66)",
        "hsl": "hsl(344, 93%, 46%)",
        "red": 227,
        "green": 8,
        "blue": 66,
        "hue": 344,
        "saturation": 93,
        "lightness": 46
    }, {
        "hex": "#F60C49",
        "rgb": "rgb(246, 12, 73)",
        "hsl": "hsl(344, 93%, 51%)",
        "red": 246,
        "green": 12,
        "blue": 73,
        "hue": 344,
        "saturation": 93,
        "lightness": 51
    }, {
        "hex": "#FE5380",
        "rgb": "rgb(254, 83, 128)",
        "hsl": "hsl(344, 99%, 66%)",
        "red": 254,
        "green": 83,
        "blue": 128,
        "hue": 344,
        "saturation": 99,
        "lightness": 66
    }, {
        "hex": "#830024",
        "rgb": "rgb(131, 0, 36)",
        "hsl": "hsl(344, 100%, 26%)",
        "red": 131,
        "green": 0,
        "blue": 36,
        "hue": 344,
        "saturation": 100,
        "lightness": 26
    }, {
        "hex": "#555152",
        "rgb": "rgb(85, 81, 82)",
        "hsl": "hsl(345, 2%, 33%)",
        "red": 85,
        "green": 81,
        "blue": 82,
        "hue": 345,
        "saturation": 2,
        "lightness": 33
    }, {
        "hex": "#372B2E",
        "rgb": "rgb(55, 43, 46)",
        "hsl": "hsl(345, 12%, 19%)",
        "red": 55,
        "green": 43,
        "blue": 46,
        "hue": 345,
        "saturation": 12,
        "lightness": 19
    }, {
        "hex": "#AD5C70",
        "rgb": "rgb(173, 92, 112)",
        "hsl": "hsl(345, 33%, 52%)",
        "red": 173,
        "green": 92,
        "blue": 112,
        "hue": 345,
        "saturation": 33,
        "lightness": 52
    }, {
        "hex": "#47232C",
        "rgb": "rgb(71, 35, 44)",
        "hsl": "hsl(345, 34%, 21%)",
        "red": 71,
        "green": 35,
        "blue": 44,
        "hue": 345,
        "saturation": 34,
        "lightness": 21
    }, {
        "hex": "#50232E",
        "rgb": "rgb(80, 35, 46)",
        "hsl": "hsl(345, 39%, 23%)",
        "red": 80,
        "green": 35,
        "blue": 46,
        "hue": 345,
        "saturation": 39,
        "lightness": 23
    }, {
        "hex": "#B13756",
        "rgb": "rgb(177, 55, 86)",
        "hsl": "hsl(345, 53%, 45%)",
        "red": 177,
        "green": 55,
        "blue": 86,
        "hue": 345,
        "saturation": 53,
        "lightness": 45
    }, {
        "hex": "#4B1623",
        "rgb": "rgb(75, 22, 35)",
        "hsl": "hsl(345, 55%, 19%)",
        "red": 75,
        "green": 22,
        "blue": 35,
        "hue": 345,
        "saturation": 55,
        "lightness": 19
    }, {
        "hex": "#9E2D4A",
        "rgb": "rgb(158, 45, 74)",
        "hsl": "hsl(345, 56%, 40%)",
        "red": 158,
        "green": 45,
        "blue": 74,
        "hue": 345,
        "saturation": 56,
        "lightness": 40
    }, {
        "hex": "#D6496C",
        "rgb": "rgb(214, 73, 108)",
        "hsl": "hsl(345, 63%, 56%)",
        "red": 214,
        "green": 73,
        "blue": 108,
        "hue": 345,
        "saturation": 63,
        "lightness": 56
    }, {
        "hex": "#5B1023",
        "rgb": "rgb(91, 16, 35)",
        "hsl": "hsl(345, 70%, 21%)",
        "red": 91,
        "green": 16,
        "blue": 35,
        "hue": 345,
        "saturation": 70,
        "lightness": 21
    }, {
        "hex": "#E8728F",
        "rgb": "rgb(232, 114, 143)",
        "hsl": "hsl(345, 72%, 68%)",
        "red": 232,
        "green": 114,
        "blue": 143,
        "hue": 345,
        "saturation": 72,
        "lightness": 68
    }, {
        "hex": "#BD1B43",
        "rgb": "rgb(189, 27, 67)",
        "hsl": "hsl(345, 75%, 42%)",
        "red": 189,
        "green": 27,
        "blue": 67,
        "hue": 345,
        "saturation": 75,
        "lightness": 42
    }, {
        "hex": "#F13565",
        "rgb": "rgb(241, 53, 101)",
        "hsl": "hsl(345, 87%, 58%)",
        "red": 241,
        "green": 53,
        "blue": 101,
        "hue": 345,
        "saturation": 87,
        "lightness": 58
    }, {
        "hex": "#F4436F",
        "rgb": "rgb(244, 67, 111)",
        "hsl": "hsl(345, 89%, 61%)",
        "red": 244,
        "green": 67,
        "blue": 111,
        "hue": 345,
        "saturation": 89,
        "lightness": 61
    }, {
        "hex": "#EB0A44",
        "rgb": "rgb(235, 10, 68)",
        "hsl": "hsl(345, 92%, 48%)",
        "red": 235,
        "green": 10,
        "blue": 68,
        "hue": 345,
        "saturation": 92,
        "lightness": 48
    }, {
        "hex": "#F7114B",
        "rgb": "rgb(247, 17, 75)",
        "hsl": "hsl(345, 93%, 52%)",
        "red": 247,
        "green": 17,
        "blue": 75,
        "hue": 345,
        "saturation": 93,
        "lightness": 52
    }, {
        "hex": "#CF0638",
        "rgb": "rgb(207, 6, 56)",
        "hsl": "hsl(345, 94%, 42%)",
        "red": 207,
        "green": 6,
        "blue": 56,
        "hue": 345,
        "saturation": 94,
        "lightness": 42
    }, {
        "hex": "#4A0013",
        "rgb": "rgb(74, 0, 19)",
        "hsl": "hsl(345, 100%, 15%)",
        "red": 74,
        "green": 0,
        "blue": 19,
        "hue": 345,
        "saturation": 100,
        "lightness": 15
    }, {
        "hex": "#FF275E",
        "rgb": "rgb(255, 39, 94)",
        "hsl": "hsl(345, 100%, 58%)",
        "red": 255,
        "green": 39,
        "blue": 94,
        "hue": 345,
        "saturation": 100,
        "lightness": 58
    }, {
        "hex": "#FF3366",
        "rgb": "rgb(255, 51, 102)",
        "hsl": "hsl(345, 100%, 60%)",
        "red": 255,
        "green": 51,
        "blue": 102,
        "hue": 345,
        "saturation": 100,
        "lightness": 60
    }, {
        "hex": "#FF3366",
        "rgb": "rgb(255, 51, 102)",
        "hsl": "hsl(345, 100%, 60%)",
        "red": 255,
        "green": 51,
        "blue": 102,
        "hue": 345,
        "saturation": 100,
        "lightness": 60
    }, {
        "hex": "#FF3366",
        "rgb": "rgb(255, 51, 102)",
        "hsl": "hsl(345, 100%, 60%)",
        "red": 255,
        "green": 51,
        "blue": 102,
        "hue": 345,
        "saturation": 100,
        "lightness": 60
    }, {
        "hex": "#FF90AB",
        "rgb": "rgb(255, 144, 171)",
        "hsl": "hsl(345, 100%, 78%)",
        "red": 255,
        "green": 144,
        "blue": 171,
        "hue": 345,
        "saturation": 100,
        "lightness": 78
    }, {
        "hex": "#4E383D",
        "rgb": "rgb(78, 56, 61)",
        "hsl": "hsl(346, 16%, 26%)",
        "red": 78,
        "green": 56,
        "blue": 61,
        "hue": 346,
        "saturation": 16,
        "lightness": 26
    }, {
        "hex": "#402B30",
        "rgb": "rgb(64, 43, 48)",
        "hsl": "hsl(346, 20%, 21%)",
        "red": 64,
        "green": 43,
        "blue": 48,
        "hue": 346,
        "saturation": 20,
        "lightness": 21
    }, {
        "hex": "#4D3339",
        "rgb": "rgb(77, 51, 57)",
        "hsl": "hsl(346, 20%, 25%)",
        "red": 77,
        "green": 51,
        "blue": 57,
        "hue": 346,
        "saturation": 20,
        "lightness": 25
    }, {
        "hex": "#2C171C",
        "rgb": "rgb(44, 23, 28)",
        "hsl": "hsl(346, 31%, 13%)",
        "red": 44,
        "green": 23,
        "blue": 28,
        "hue": 346,
        "saturation": 31,
        "lightness": 13
    }, {
        "hex": "#A04F62",
        "rgb": "rgb(160, 79, 98)",
        "hsl": "hsl(346, 34%, 47%)",
        "red": 160,
        "green": 79,
        "blue": 98,
        "hue": 346,
        "saturation": 34,
        "lightness": 47
    }, {
        "hex": "#8F4254",
        "rgb": "rgb(143, 66, 84)",
        "hsl": "hsl(346, 37%, 41%)",
        "red": 143,
        "green": 66,
        "blue": 84,
        "hue": 346,
        "saturation": 37,
        "lightness": 41
    }, {
        "hex": "#C0576F",
        "rgb": "rgb(192, 87, 111)",
        "hsl": "hsl(346, 45%, 55%)",
        "red": 192,
        "green": 87,
        "blue": 111,
        "hue": 346,
        "saturation": 45,
        "lightness": 55
    }, {
        "hex": "#CB6F84",
        "rgb": "rgb(203, 111, 132)",
        "hsl": "hsl(346, 47%, 62%)",
        "red": 203,
        "green": 111,
        "blue": 132,
        "hue": 346,
        "saturation": 47,
        "lightness": 62
    }, {
        "hex": "#C75F77",
        "rgb": "rgb(199, 95, 119)",
        "hsl": "hsl(346, 48%, 58%)",
        "red": 199,
        "green": 95,
        "blue": 119,
        "hue": 346,
        "saturation": 48,
        "lightness": 58
    }, {
        "hex": "#8F2F45",
        "rgb": "rgb(143, 47, 69)",
        "hsl": "hsl(346, 51%, 37%)",
        "red": 143,
        "green": 47,
        "blue": 69,
        "hue": 346,
        "saturation": 51,
        "lightness": 37
    }, {
        "hex": "#D04969",
        "rgb": "rgb(208, 73, 105)",
        "hsl": "hsl(346, 59%, 55%)",
        "red": 208,
        "green": 73,
        "blue": 105,
        "hue": 346,
        "saturation": 59,
        "lightness": 55
    }, {
        "hex": "#E394A7",
        "rgb": "rgb(227, 148, 167)",
        "hsl": "hsl(346, 59%, 74%)",
        "red": 227,
        "green": 148,
        "blue": 167,
        "hue": 346,
        "saturation": 59,
        "lightness": 74
    }, {
        "hex": "#D24D6C",
        "rgb": "rgb(210, 77, 108)",
        "hsl": "hsl(346, 60%, 56%)",
        "red": 210,
        "green": 77,
        "blue": 108,
        "hue": 346,
        "saturation": 60,
        "lightness": 56
    }, {
        "hex": "#D24D6C",
        "rgb": "rgb(210, 77, 108)",
        "hsl": "hsl(346, 60%, 56%)",
        "red": 210,
        "green": 77,
        "blue": 108,
        "hue": 346,
        "saturation": 60,
        "lightness": 56
    }, {
        "hex": "#E2869B",
        "rgb": "rgb(226, 134, 155)",
        "hsl": "hsl(346, 61%, 71%)",
        "red": 226,
        "green": 134,
        "blue": 155,
        "hue": 346,
        "saturation": 61,
        "lightness": 71
    }, {
        "hex": "#A22543",
        "rgb": "rgb(162, 37, 67)",
        "hsl": "hsl(346, 63%, 39%)",
        "red": 162,
        "green": 37,
        "blue": 67,
        "hue": 346,
        "saturation": 63,
        "lightness": 39
    }, {
        "hex": "#D1284F",
        "rgb": "rgb(209, 40, 79)",
        "hsl": "hsl(346, 68%, 49%)",
        "red": 209,
        "green": 40,
        "blue": 79,
        "hue": 346,
        "saturation": 68,
        "lightness": 49
    }, {
        "hex": "#E05576",
        "rgb": "rgb(224, 85, 118)",
        "hsl": "hsl(346, 69%, 61%)",
        "red": 224,
        "green": 85,
        "blue": 118,
        "hue": 346,
        "saturation": 69,
        "lightness": 61
    }, {
        "hex": "#D6254D",
        "rgb": "rgb(214, 37, 77)",
        "hsl": "hsl(346, 71%, 49%)",
        "red": 214,
        "green": 37,
        "blue": 77,
        "hue": 346,
        "saturation": 71,
        "lightness": 49
    }, {
        "hex": "#C22047",
        "rgb": "rgb(194, 32, 71)",
        "hsl": "hsl(346, 72%, 44%)",
        "red": 194,
        "green": 32,
        "blue": 71,
        "hue": 346,
        "saturation": 72,
        "lightness": 44
    }, {
        "hex": "#E86786",
        "rgb": "rgb(232, 103, 134)",
        "hsl": "hsl(346, 74%, 66%)",
        "red": 232,
        "green": 103,
        "blue": 134,
        "hue": 346,
        "saturation": 74,
        "lightness": 66
    }, {
        "hex": "#D11E48",
        "rgb": "rgb(209, 30, 72)",
        "hsl": "hsl(346, 75%, 47%)",
        "red": 209,
        "green": 30,
        "blue": 72,
        "hue": 346,
        "saturation": 75,
        "lightness": 47
    }, {
        "hex": "#E75A7A",
        "rgb": "rgb(231, 90, 122)",
        "hsl": "hsl(346, 75%, 63%)",
        "red": 231,
        "green": 90,
        "blue": 122,
        "hue": 346,
        "saturation": 75,
        "lightness": 63
    }, {
        "hex": "#E32551",
        "rgb": "rgb(227, 37, 81)",
        "hsl": "hsl(346, 77%, 52%)",
        "red": 227,
        "green": 37,
        "blue": 81,
        "hue": 346,
        "saturation": 77,
        "lightness": 52
    }, {
        "hex": "#E64066",
        "rgb": "rgb(230, 64, 102)",
        "hsl": "hsl(346, 77%, 58%)",
        "red": 230,
        "green": 64,
        "blue": 102,
        "hue": 346,
        "saturation": 77,
        "lightness": 58
    }, {
        "hex": "#EB5E7F",
        "rgb": "rgb(235, 94, 127)",
        "hsl": "hsl(346, 78%, 65%)",
        "red": 235,
        "green": 94,
        "blue": 127,
        "hue": 346,
        "saturation": 78,
        "lightness": 65
    }, {
        "hex": "#C91842",
        "rgb": "rgb(201, 24, 66)",
        "hsl": "hsl(346, 79%, 44%)",
        "red": 201,
        "green": 24,
        "blue": 66,
        "hue": 346,
        "saturation": 79,
        "lightness": 44
    }, {
        "hex": "#F4A1B5",
        "rgb": "rgb(244, 161, 181)",
        "hsl": "hsl(346, 79%, 79%)",
        "red": 244,
        "green": 161,
        "blue": 181,
        "hue": 346,
        "saturation": 79,
        "lightness": 79
    }, {
        "hex": "#E7204E",
        "rgb": "rgb(231, 32, 78)",
        "hsl": "hsl(346, 81%, 52%)",
        "red": 231,
        "green": 32,
        "blue": 78,
        "hue": 346,
        "saturation": 81,
        "lightness": 52
    }, {
        "hex": "#B31237",
        "rgb": "rgb(179, 18, 55)",
        "hsl": "hsl(346, 82%, 39%)",
        "red": 179,
        "green": 18,
        "blue": 55,
        "hue": 346,
        "saturation": 82,
        "lightness": 39
    }, {
        "hex": "#9E0E30",
        "rgb": "rgb(158, 14, 48)",
        "hsl": "hsl(346, 84%, 34%)",
        "red": 158,
        "green": 14,
        "blue": 48,
        "hue": 346,
        "saturation": 84,
        "lightness": 34
    }, {
        "hex": "#F1416B",
        "rgb": "rgb(241, 65, 107)",
        "hsl": "hsl(346, 86%, 60%)",
        "red": 241,
        "green": 65,
        "blue": 107,
        "hue": 346,
        "saturation": 86,
        "lightness": 60
    }, {
        "hex": "#F12F5D",
        "rgb": "rgb(241, 47, 93)",
        "hsl": "hsl(346, 87%, 56%)",
        "red": 241,
        "green": 47,
        "blue": 93,
        "hue": 346,
        "saturation": 87,
        "lightness": 56
    }, {
        "hex": "#F23460",
        "rgb": "rgb(242, 52, 96)",
        "hsl": "hsl(346, 88%, 58%)",
        "red": 242,
        "green": 52,
        "blue": 96,
        "hue": 346,
        "saturation": 88,
        "lightness": 58
    }, {
        "hex": "#98092B",
        "rgb": "rgb(152, 9, 43)",
        "hsl": "hsl(346, 89%, 32%)",
        "red": 152,
        "green": 9,
        "blue": 43,
        "hue": 346,
        "saturation": 89,
        "lightness": 32
    }, {
        "hex": "#CC0C39",
        "rgb": "rgb(204, 12, 57)",
        "hsl": "hsl(346, 89%, 42%)",
        "red": 204,
        "green": 12,
        "blue": 57,
        "hue": 346,
        "saturation": 89,
        "lightness": 42
    }, {
        "hex": "#FA154B",
        "rgb": "rgb(250, 21, 75)",
        "hsl": "hsl(346, 96%, 53%)",
        "red": 250,
        "green": 21,
        "blue": 75,
        "hue": 346,
        "saturation": 96,
        "lightness": 53
    }, {
        "hex": "#FA023C",
        "rgb": "rgb(250, 2, 60)",
        "hsl": "hsl(346, 98%, 49%)",
        "red": 250,
        "green": 2,
        "blue": 60,
        "hue": 346,
        "saturation": 98,
        "lightness": 49
    }, {
        "hex": "#FD6084",
        "rgb": "rgb(253, 96, 132)",
        "hsl": "hsl(346, 98%, 68%)",
        "red": 253,
        "green": 96,
        "blue": 132,
        "hue": 346,
        "saturation": 98,
        "lightness": 68
    }, {
        "hex": "#FE4B74",
        "rgb": "rgb(254, 75, 116)",
        "hsl": "hsl(346, 99%, 65%)",
        "red": 254,
        "green": 75,
        "blue": 116,
        "hue": 346,
        "saturation": 99,
        "lightness": 65
    }, {
        "hex": "#FF003D",
        "rgb": "rgb(255, 0, 61)",
        "hsl": "hsl(346, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 61,
        "hue": 346,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF003C",
        "rgb": "rgb(255, 0, 60)",
        "hsl": "hsl(346, 100%, 50%)",
        "red": 255,
        "green": 0,
        "blue": 60,
        "hue": 346,
        "saturation": 100,
        "lightness": 50
    }, {
        "hex": "#FF0841",
        "rgb": "rgb(255, 8, 65)",
        "hsl": "hsl(346, 100%, 52%)",
        "red": 255,
        "green": 8,
        "blue": 65,
        "hue": 346,
        "saturation": 100,
        "lightness": 52
    }, {
        "hex": "#FF2E5F",
        "rgb": "rgb(255, 46, 95)",
        "hsl": "hsl(346, 100%, 59%)",
        "red": 255,
        "green": 46,
        "blue": 95,
        "hue": 346,
        "saturation": 100,
        "lightness": 59
    }, {
        "hex": "#42393B",
        "rgb": "rgb(66, 57, 59)",
        "hsl": "hsl(347, 7%, 24%)",
        "red": 66,
        "green": 57,
        "blue": 59,
        "hue": 347,
        "saturation": 7,
        "lightness": 24
    }, {
        "hex": "#E2D9DB",
        "rgb": "rgb(226, 217, 219)",
        "hsl": "hsl(347, 13%, 87%)",
        "red": 226,
        "green": 217,
        "blue": 219,
        "hue": 347,
        "saturation": 13,
        "lightness": 87
    }, {
        "hex": "#27191C",
        "rgb": "rgb(39, 25, 28)",
        "hsl": "hsl(347, 22%, 13%)",
        "red": 39,
        "green": 25,
        "blue": 28,
        "hue": 347,
        "saturation": 22,
        "lightness": 13
    }, {
        "hex": "#70454E",
        "rgb": "rgb(112, 69, 78)",
        "hsl": "hsl(347, 24%, 35%)",
        "red": 112,
        "green": 69,
        "blue": 78,
        "hue": 347,
        "saturation": 24,
        "lightness": 35
    }, {
        "hex": "#5E363F",
        "rgb": "rgb(94, 54, 63)",
        "hsl": "hsl(347, 27%, 29%)",
        "red": 94,
        "green": 54,
        "blue": 63,
        "hue": 347,
        "saturation": 27,
        "lightness": 29
    }, {
        "hex": "#E0C0C7",
        "rgb": "rgb(224, 192, 199)",
        "hsl": "hsl(347, 34%, 82%)",
        "red": 224,
        "green": 192,
        "blue": 199,
        "hue": 347,
        "saturation": 34,
        "lightness": 82
    }, {
        "hex": "#B5485F",
        "rgb": "rgb(181, 72, 95)",
        "hsl": "hsl(347, 43%, 50%)",
        "red": 181,
        "green": 72,
        "blue": 95,
        "hue": 347,
        "saturation": 43,
        "lightness": 50
    }, {
        "hex": "#A82743",
        "rgb": "rgb(168, 39, 67)",
        "hsl": "hsl(347, 62%, 41%)",
        "red": 168,
        "green": 39,
        "blue": 67,
        "hue": 347,
        "saturation": 62,
        "lightness": 41
    }, {
        "hex": "#CC2649",
        "rgb": "rgb(204, 38, 73)",
        "hsl": "hsl(347, 69%, 47%)",
        "red": 204,
        "green": 38,
        "blue": 73,
        "hue": 347,
        "saturation": 69,
        "lightness": 47
    }, {
        "hex": "#D41E45",
        "rgb": "rgb(212, 30, 69)",
        "hsl": "hsl(347, 75%, 47%)",
        "red": 212,
        "green": 30,
        "blue": 69,
        "hue": 347,
        "saturation": 75,
        "lightness": 47
    }, {
        "hex": "#E33258",
        "rgb": "rgb(227, 50, 88)",
        "hsl": "hsl(347, 76%, 54%)",
        "red": 227,
        "green": 50,
        "blue": 88,
        "hue": 347,
        "saturation": 76,
        "lightness": 54
    }, {
        "hex": "#E81E4A",
        "rgb": "rgb(232, 30, 74)",
        "hsl": "hsl(347, 81%, 51%)",
        "red": 232,
        "green": 30,
        "blue": 74,
        "hue": 347,
        "saturation": 81,
        "lightness": 51
    }, {
        "hex": "#EB214E",
        "rgb": "rgb(235, 33, 78)",
        "hsl": "hsl(347, 83%, 53%)",
        "red": 235,
        "green": 33,
        "blue": 78,
        "hue": 347,
        "saturation": 83,
        "lightness": 53
    }, {
        "hex": "#EE2853",
        "rgb": "rgb(238, 40, 83)",
        "hsl": "hsl(347, 85%, 55%)",
        "red": 238,
        "green": 40,
        "blue": 83,
        "hue": 347,
        "saturation": 85,
        "lightness": 55
    }, {
        "hex": "#F79EB1",
        "rgb": "rgb(247, 158, 177)",
        "hsl": "hsl(347, 85%, 79%)",
        "red": 247,
        "green": 158,
        "blue": 177,
        "hue": 347,
        "saturation": 85,
        "lightness": 79
    }, {
        "hex": "#F22B56",
        "rgb": "rgb(242, 43, 86)",
        "hsl": "hsl(347, 88%, 56%)",
        "red": 242,
        "green": 43,
        "blue": 86,
        "hue": 347,
        "saturation": 88,
        "lightness": 56
    }, {
        "hex": "#F3214E",
        "rgb": "rgb(243, 33, 78)",
        "hsl": "hsl(347, 90%, 54%)",
        "red": 243,
        "green": 33,
        "blue": 78,
        "hue": 347,
        "saturation": 90,
        "lightness": 54
    }, {
        "hex": "#FA2E59",
        "rgb": "rgb(250, 46, 89)",
        "hsl": "hsl(347, 95%, 58%)",
        "red": 250,
        "green": 46,
        "blue": 89,
        "hue": 347,
        "saturation": 95,
        "lightness": 58
    }, {
        "hex": "#FA4069",
        "rgb": "rgb(250, 64, 105)",
        "hsl": "hsl(347, 95%, 62%)",
        "red": 250,
        "green": 64,
        "blue": 105,
        "hue": 347,
        "saturation": 95,
        "lightness": 62
    }, {
        "hex": "#FD6081",
        "rgb": "rgb(253, 96, 129)",
        "hsl": "hsl(347, 98%, 68%)",
        "red": 253,
        "green": 96,
        "blue": 129,
        "hue": 347,
        "saturation": 98,
        "lightness": 68
    }, {
        "hex": "#C0012A",
        "rgb": "rgb(192, 1, 42)",
        "hsl": "hsl(347, 99%, 38%)",
        "red": 192,
        "green": 1,
        "blue": 42,
        "hue": 347,
        "saturation": 99,
        "lightness": 38
    }, {
        "hex": "#F40034",
        "rgb": "rgb(244, 0, 52)",
        "hsl": "hsl(347, 100%, 48%)",
        "red": 244,
        "green": 0,
        "blue": 52,
        "hue": 347,
        "saturation": 100,
        "lightness": 48
    }, {
        "hex": "#FF194B",
        "rgb": "rgb(255, 25, 75)",
        "hsl": "hsl(347, 100%, 55%)",
        "red": 255,
        "green": 25,
        "blue": 75,
        "hue": 347,
        "saturation": 100,
        "lightness": 55
    }, {
        "hex": "#FF2654",
        "rgb": "rgb(255, 38, 84)",
        "hsl": "hsl(347, 100%, 57%)",
        "red": 255,
        "green": 38,
        "blue": 84,
        "hue": 347,
        "saturation": 100,
        "lightness": 57
    }, {
        "hex": "#FF335F",
        "rgb": "rgb(255, 51, 95)",
        "hsl": "hsl(347, 100%, 60%)",
        "red": 255,
        "green": 51,
        "blue": 95,
        "hue": 347,
        "saturation": 100,
        "lightness": 60
    }, {
        "hex": "#FF426A",
        "rgb": "rgb(255, 66, 106)",
        "hsl": "hsl(347, 100%, 63%)",
        "red": 255,
        "green": 66,
        "blue": 106,
        "hue": 347,
        "saturation": 100,
        "lightness": 63
    }, {
        "hex": "#574D4F",
        "rgb": "rgb(87, 77, 79)",
        "hsl": "hsl(348, 6%, 32%)",
        "red": 87,
        "green": 77,
        "blue": 79,
        "hue": 348,
        "saturation": 6,
        "lightness": 32
    }, {
        "hex": "#89666D",
        "rgb": "rgb(137, 102, 109)",
        "hsl": "hsl(348, 15%, 47%)",
        "red": 137,
        "green": 102,
        "blue": 109,
        "hue": 348,
        "saturation": 15,
        "lightness": 47
    }, {
        "hex": "#825E65",
        "rgb": "rgb(130, 94, 101)",
        "hsl": "hsl(348, 16%, 44%)",
        "red": 130,
        "green": 94,
        "blue": 101,
        "hue": 348,
        "saturation": 16,
        "lightness": 44
    }, {
        "hex": "#A7848B",
        "rgb": "rgb(167, 132, 139)",
        "hsl": "hsl(348, 17%, 59%)",
        "red": 167,
        "green": 132,
        "blue": 139,
        "hue": 348,
        "saturation": 17,
        "lightness": 59
    }, {
        "hex": "#83555E",
        "rgb": "rgb(131, 85, 94)",
        "hsl": "hsl(348, 21%, 42%)",
        "red": 131,
        "green": 85,
        "blue": 94,
        "hue": 348,
        "saturation": 21,
        "lightness": 42
    }, {
        "hex": "#A3606D",
        "rgb": "rgb(163, 96, 109)",
        "hsl": "hsl(348, 27%, 51%)",
        "red": 163,
        "green": 96,
        "blue": 109,
        "hue": 348,
        "saturation": 27,
        "lightness": 51
    }, {
        "hex": "#A85163",
        "rgb": "rgb(168, 81, 99)",
        "hsl": "hsl(348, 35%, 49%)",
        "red": 168,
        "green": 81,
        "blue": 99,
        "hue": 348,
        "saturation": 35,
        "lightness": 49
    }, {
        "hex": "#92394B",
        "rgb": "rgb(146, 57, 75)",
        "hsl": "hsl(348, 44%, 40%)",
        "red": 146,
        "green": 57,
        "blue": 75,
        "hue": 348,
        "saturation": 44,
        "lightness": 40
    }, {
        "hex": "#B03851",
        "rgb": "rgb(176, 56, 81)",
        "hsl": "hsl(348, 52%, 45%)",
        "red": 176,
        "green": 56,
        "blue": 81,
        "hue": 348,
        "saturation": 52,
        "lightness": 45
    }, {
        "hex": "#C94D65",
        "rgb": "rgb(201, 77, 101)",
        "hsl": "hsl(348, 53%, 55%)",
        "red": 201,
        "green": 77,
        "blue": 101,
        "hue": 348,
        "saturation": 53,
        "lightness": 55
    }, {
        "hex": "#CC4D66",
        "rgb": "rgb(204, 77, 102)",
        "hsl": "hsl(348, 55%, 55%)",
        "red": 204,
        "green": 77,
        "blue": 102,
        "hue": 348,
        "saturation": 55,
        "lightness": 55
    }, {
        "hex": "#6F1B2C",
        "rgb": "rgb(111, 27, 44)",
        "hsl": "hsl(348, 61%, 27%)",
        "red": 111,
        "green": 27,
        "blue": 44,
        "hue": 348,
        "saturation": 61,
        "lightness": 27
    }, {
        "hex": "#8D2036",
        "rgb": "rgb(141, 32, 54)",
        "hsl": "hsl(348, 63%, 34%)",
        "red": 141,
        "green": 32,
        "blue": 54,
        "hue": 348,
        "saturation": 63,
        "lightness": 34
    }, {
        "hex": "#D43F5D",
        "rgb": "rgb(212, 63, 93)",
        "hsl": "hsl(348, 63%, 54%)",
        "red": 212,
        "green": 63,
        "blue": 93,
        "hue": 348,
        "saturation": 63,
        "lightness": 54
    }, {
        "hex": "#C02948",
        "rgb": "rgb(192, 41, 72)",
        "hsl": "hsl(348, 65%, 46%)",
        "red": 192,
        "green": 41,
        "blue": 72,
        "hue": 348,
        "saturation": 65,
        "lightness": 46
    }, {
        "hex": "#9D1D36",
        "rgb": "rgb(157, 29, 54)",
        "hsl": "hsl(348, 69%, 36%)",
        "red": 157,
        "green": 29,
        "blue": 54,
        "hue": 348,
        "saturation": 69,
        "lightness": 36
    }, {
        "hex": "#C72546",
        "rgb": "rgb(199, 37, 70)",
        "hsl": "hsl(348, 69%, 46%)",
        "red": 199,
        "green": 37,
        "blue": 70,
        "hue": 348,
        "saturation": 69,
        "lightness": 46
    }, {
        "hex": "#C21F40",
        "rgb": "rgb(194, 31, 64)",
        "hsl": "hsl(348, 72%, 44%)",
        "red": 194,
        "green": 31,
        "blue": 64,
        "hue": 348,
        "saturation": 72,
        "lightness": 44
    }, {
        "hex": "#A2122F",
        "rgb": "rgb(162, 18, 47)",
        "hsl": "hsl(348, 80%, 35%)",
        "red": 162,
        "green": 18,
        "blue": 47,
        "hue": 348,
        "saturation": 80,
        "lightness": 35
    }, {
        "hex": "#680A1D",
        "rgb": "rgb(104, 10, 29)",
        "hsl": "hsl(348, 82%, 22%)",
        "red": 104,
        "green": 10,
        "blue": 29,
        "hue": 348,
        "saturation": 82,
        "lightness": 22
    }, {
        "hex": "#820D25",
        "rgb": "rgb(130, 13, 37)",
        "hsl": "hsl(348, 82%, 28%)",
        "red": 130,
        "green": 13,
        "blue": 37,
        "hue": 348,
        "saturation": 82,
        "lightness": 28
    }, {
        "hex": "#9F102C",
        "rgb": "rgb(159, 16, 44)",
        "hsl": "hsl(348, 82%, 34%)",
        "red": 159,
        "green": 16,
        "blue": 44,
        "hue": 348,
        "saturation": 82,
        "lightness": 34
    }, {
        "hex": "#ED4A6A",
        "rgb": "rgb(237, 74, 106)",
        "hsl": "hsl(348, 82%, 61%)",
        "red": 237,
        "green": 74,
        "blue": 106,
        "hue": 348,
        "saturation": 82,
        "lightness": 61
    }, {
        "hex": "#9F0A28",
        "rgb": "rgb(159, 10, 40)",
        "hsl": "hsl(348, 88%, 33%)",
        "red": 159,
        "green": 10,
        "blue": 40,
        "hue": 348,
        "saturation": 88,
        "lightness": 33
    }, {
        "hex": "#F01945",
        "rgb": "rgb(240, 25, 69)",
        "hsl": "hsl(348, 88%, 52%)",
        "red": 240,
        "green": 25,
        "blue": 69,
        "hue": 348,
        "saturation": 88,
        "lightness": 52
    }, {
        "hex": "#CE0A31",
        "rgb": "rgb(206, 10, 49)",
        "hsl": "hsl(348, 91%, 42%)",
        "red": 206,
        "green": 10,
        "blue": 49,
        "hue": 348,
        "saturation": 91,
        "lightness": 42
    }, {
        "hex": "#F97992",
        "rgb": "rgb(249, 121, 146)",
        "hsl": "hsl(348, 91%, 73%)",
        "red": 249,
        "green": 121,
        "blue": 146,
        "hue": 348,
        "saturation": 91,
        "lightness": 73
    }, {
        "hex": "#F51441",
        "rgb": "rgb(245, 20, 65)",
        "hsl": "hsl(348, 92%, 52%)",
        "red": 245,
        "green": 20,
        "blue": 65,
        "hue": 348,
        "saturation": 92,
        "lightness": 52
    }, {
        "hex": "#F7345B",
        "rgb": "rgb(247, 52, 91)",
        "hsl": "hsl(348, 92%, 59%)",
        "red": 247,
        "green": 52,
        "blue": 91,
        "hue": 348,
        "saturation": 92,
        "lightness": 59
    }, {
        "hex": "#C3062C",
        "rgb": "rgb(195, 6, 44)",
        "hsl": "hsl(348, 94%, 39%)",
        "red": 195,
        "green": 6,
        "blue": 44,
        "hue": 348,
        "saturation": 94,
        "lightness": 39
    }, {
        "hex": "#FC325B",
        "rgb": "rgb(252, 50, 91)",
        "hsl": "hsl(348, 97%, 59%)",
        "red": 252,
        "green": 50,
        "blue": 91,
        "hue": 348,
        "saturation": 97,
        "lightness": 59
    }, {
        "hex": "#FD6E8A",
        "rgb": "rgb(253, 110, 138)",
        "hsl": "hsl(348, 97%, 71%)",
        "red": 253,
        "green": 110,
        "blue": 138,
        "hue": 348,
        "saturation": 97,
        "lightness": 71
    }, {
        "hex": "#4B000F",
        "rgb": "rgb(75, 0, 15)",
        "hsl": "hsl(348, 100%, 15%)",
        "red": 75,
        "green": 0,
        "blue": 15,
        "hue": 348,
        "saturation": 100,
        "lightness": 15
    }, {
        "hex": "#FF1F4C",
        "rgb": "rgb(255, 31, 76)",
        "hsl": "hsl(348, 100%, 56%)",
        "red": 255,
        "green": 31,
        "blue": 76,
        "hue": 348,
        "saturation": 100,
        "lightness": 56
    }, {
        "hex": "#FF5475",
        "rgb": "rgb(255, 84, 117)",
        "hsl": "hsl(348, 100%, 66%)",
        "red": 255,
        "green": 84,
        "blue": 117,
        "hue": 348,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FFB2C1",
        "rgb": "rgb(255, 178, 193)",
        "hsl": "hsl(348, 100%, 85%)",
        "red": 255,
        "green": 178,
        "blue": 193,
        "hue": 348,
        "saturation": 100,
        "lightness": 85
    }, {
        "hex": "#FFC2CE",
        "rgb": "rgb(255, 194, 206)",
        "hsl": "hsl(348, 100%, 88%)",
        "red": 255,
        "green": 194,
        "blue": 206,
        "hue": 348,
        "saturation": 100,
        "lightness": 88
    }, {
        "hex": "#B69198",
        "rgb": "rgb(182, 145, 152)",
        "hsl": "hsl(349, 20%, 64%)",
        "red": 182,
        "green": 145,
        "blue": 152,
        "hue": 349,
        "saturation": 20,
        "lightness": 64
    }, {
        "hex": "#B37883",
        "rgb": "rgb(179, 120, 131)",
        "hsl": "hsl(349, 28%, 59%)",
        "red": 179,
        "green": 120,
        "blue": 131,
        "hue": 349,
        "saturation": 28,
        "lightness": 59
    }, {
        "hex": "#DA4C66",
        "rgb": "rgb(218, 76, 102)",
        "hsl": "hsl(349, 66%, 58%)",
        "red": 218,
        "green": 76,
        "blue": 102,
        "hue": 349,
        "saturation": 66,
        "lightness": 58
    }, {
        "hex": "#D83957",
        "rgb": "rgb(216, 57, 87)",
        "hsl": "hsl(349, 67%, 54%)",
        "red": 216,
        "green": 57,
        "blue": 87,
        "hue": 349,
        "saturation": 67,
        "lightness": 54
    }, {
        "hex": "#DA3754",
        "rgb": "rgb(218, 55, 84)",
        "hsl": "hsl(349, 69%, 54%)",
        "red": 218,
        "green": 55,
        "blue": 84,
        "hue": 349,
        "saturation": 69,
        "lightness": 54
    }, {
        "hex": "#D22042",
        "rgb": "rgb(210, 32, 66)",
        "hsl": "hsl(349, 74%, 47%)",
        "red": 210,
        "green": 32,
        "blue": 66,
        "hue": 349,
        "saturation": 74,
        "lightness": 47
    }, {
        "hex": "#EB5874",
        "rgb": "rgb(235, 88, 116)",
        "hsl": "hsl(349, 79%, 63%)",
        "red": 235,
        "green": 88,
        "blue": 116,
        "hue": 349,
        "saturation": 79,
        "lightness": 63
    }, {
        "hex": "#ED5672",
        "rgb": "rgb(237, 86, 114)",
        "hsl": "hsl(349, 81%, 63%)",
        "red": 237,
        "green": 86,
        "blue": 114,
        "hue": 349,
        "saturation": 81,
        "lightness": 63
    }, {
        "hex": "#EA284B",
        "rgb": "rgb(234, 40, 75)",
        "hsl": "hsl(349, 82%, 54%)",
        "red": 234,
        "green": 40,
        "blue": 75,
        "hue": 349,
        "saturation": 82,
        "lightness": 54
    }, {
        "hex": "#F05D77",
        "rgb": "rgb(240, 93, 119)",
        "hsl": "hsl(349, 83%, 65%)",
        "red": 240,
        "green": 93,
        "blue": 119,
        "hue": 349,
        "saturation": 83,
        "lightness": 65
    }, {
        "hex": "#FB7991",
        "rgb": "rgb(251, 121, 145)",
        "hsl": "hsl(349, 94%, 73%)",
        "red": 251,
        "green": 121,
        "blue": 145,
        "hue": 349,
        "saturation": 94,
        "lightness": 73
    }, {
        "hex": "#FB718A",
        "rgb": "rgb(251, 113, 138)",
        "hsl": "hsl(349, 95%, 71%)",
        "red": 251,
        "green": 113,
        "blue": 138,
        "hue": 349,
        "saturation": 95,
        "lightness": 71
    }, {
        "hex": "#FC284F",
        "rgb": "rgb(252, 40, 79)",
        "hsl": "hsl(349, 97%, 57%)",
        "red": 252,
        "green": 40,
        "blue": 79,
        "hue": 349,
        "saturation": 97,
        "lightness": 57
    }, {
        "hex": "#FD4E6D",
        "rgb": "rgb(253, 78, 109)",
        "hsl": "hsl(349, 98%, 65%)",
        "red": 253,
        "green": 78,
        "blue": 109,
        "hue": 349,
        "saturation": 98,
        "lightness": 65
    }, {
        "hex": "#FE4365",
        "rgb": "rgb(254, 67, 101)",
        "hsl": "hsl(349, 99%, 63%)",
        "red": 254,
        "green": 67,
        "blue": 101,
        "hue": 349,
        "saturation": 99,
        "lightness": 63
    }, {
        "hex": "#969091",
        "rgb": "rgb(150, 144, 145)",
        "hsl": "hsl(350, 3%, 58%)",
        "red": 150,
        "green": 144,
        "blue": 145,
        "hue": 350,
        "saturation": 3,
        "lightness": 58
    }, {
        "hex": "#4D4143",
        "rgb": "rgb(77, 65, 67)",
        "hsl": "hsl(350, 8%, 28%)",
        "red": 77,
        "green": 65,
        "blue": 67,
        "hue": 350,
        "saturation": 8,
        "lightness": 28
    }, {
        "hex": "#231D1E",
        "rgb": "rgb(35, 29, 30)",
        "hsl": "hsl(350, 9%, 13%)",
        "red": 35,
        "green": 29,
        "blue": 30,
        "hue": 350,
        "saturation": 9,
        "lightness": 13
    }, {
        "hex": "#493D3F",
        "rgb": "rgb(73, 61, 63)",
        "hsl": "hsl(350, 9%, 26%)",
        "red": 73,
        "green": 61,
        "blue": 63,
        "hue": 350,
        "saturation": 9,
        "lightness": 26
    }, {
        "hex": "#A8636E",
        "rgb": "rgb(168, 99, 110)",
        "hsl": "hsl(350, 28%, 52%)",
        "red": 168,
        "green": 99,
        "blue": 110,
        "hue": 350,
        "saturation": 28,
        "lightness": 52
    }, {
        "hex": "#C1858F",
        "rgb": "rgb(193, 133, 143)",
        "hsl": "hsl(350, 33%, 64%)",
        "red": 193,
        "green": 133,
        "blue": 143,
        "hue": 350,
        "saturation": 33,
        "lightness": 64
    }, {
        "hex": "#BA5F6E",
        "rgb": "rgb(186, 95, 110)",
        "hsl": "hsl(350, 40%, 55%)",
        "red": 186,
        "green": 95,
        "blue": 110,
        "hue": 350,
        "saturation": 40,
        "lightness": 55
    }, {
        "hex": "#87313F",
        "rgb": "rgb(135, 49, 63)",
        "hsl": "hsl(350, 47%, 36%)",
        "red": 135,
        "green": 49,
        "blue": 63,
        "hue": 350,
        "saturation": 47,
        "lightness": 36
    }, {
        "hex": "#9F3647",
        "rgb": "rgb(159, 54, 71)",
        "hsl": "hsl(350, 49%, 42%)",
        "red": 159,
        "green": 54,
        "blue": 71,
        "hue": 350,
        "saturation": 49,
        "lightness": 42
    }, {
        "hex": "#DC6378",
        "rgb": "rgb(220, 99, 120)",
        "hsl": "hsl(350, 63%, 63%)",
        "red": 220,
        "green": 99,
        "blue": 120,
        "hue": 350,
        "saturation": 63,
        "lightness": 63
    }, {
        "hex": "#C02942",
        "rgb": "rgb(192, 41, 66)",
        "hsl": "hsl(350, 65%, 46%)",
        "red": 192,
        "green": 41,
        "blue": 66,
        "hue": 350,
        "saturation": 65,
        "lightness": 46
    }, {
        "hex": "#811628",
        "rgb": "rgb(129, 22, 40)",
        "hsl": "hsl(350, 71%, 30%)",
        "red": 129,
        "green": 22,
        "blue": 40,
        "hue": 350,
        "saturation": 71,
        "lightness": 30
    }, {
        "hex": "#CE2340",
        "rgb": "rgb(206, 35, 64)",
        "hsl": "hsl(350, 71%, 47%)",
        "red": 206,
        "green": 35,
        "blue": 64,
        "hue": 350,
        "saturation": 71,
        "lightness": 47
    }, {
        "hex": "#DA2644",
        "rgb": "rgb(218, 38, 68)",
        "hsl": "hsl(350, 71%, 50%)",
        "red": 218,
        "green": 38,
        "blue": 68,
        "hue": 350,
        "saturation": 71,
        "lightness": 50
    }, {
        "hex": "#E3536C",
        "rgb": "rgb(227, 83, 108)",
        "hsl": "hsl(350, 72%, 61%)",
        "red": 227,
        "green": 83,
        "blue": 108,
        "hue": 350,
        "saturation": 72,
        "lightness": 61
    }, {
        "hex": "#8C162A",
        "rgb": "rgb(140, 22, 42)",
        "hsl": "hsl(350, 73%, 32%)",
        "red": 140,
        "green": 22,
        "blue": 42,
        "hue": 350,
        "saturation": 73,
        "lightness": 32
    }, {
        "hex": "#EB6077",
        "rgb": "rgb(235, 96, 119)",
        "hsl": "hsl(350, 78%, 65%)",
        "red": 235,
        "green": 96,
        "blue": 119,
        "hue": 350,
        "saturation": 78,
        "lightness": 65
    }, {
        "hex": "#CE1836",
        "rgb": "rgb(206, 24, 54)",
        "hsl": "hsl(350, 79%, 45%)",
        "red": 206,
        "green": 24,
        "blue": 54,
        "hue": 350,
        "saturation": 79,
        "lightness": 45
    }, {
        "hex": "#EF3353",
        "rgb": "rgb(239, 51, 83)",
        "hsl": "hsl(350, 85%, 57%)",
        "red": 239,
        "green": 51,
        "blue": 83,
        "hue": 350,
        "saturation": 85,
        "lightness": 57
    }, {
        "hex": "#F25872",
        "rgb": "rgb(242, 88, 114)",
        "hsl": "hsl(350, 86%, 65%)",
        "red": 242,
        "green": 88,
        "blue": 114,
        "hue": 350,
        "saturation": 86,
        "lightness": 65
    }, {
        "hex": "#F21D41",
        "rgb": "rgb(242, 29, 65)",
        "hsl": "hsl(350, 89%, 53%)",
        "red": 242,
        "green": 29,
        "blue": 65,
        "hue": 350,
        "saturation": 89,
        "lightness": 53
    }, {
        "hex": "#FF1D44",
        "rgb": "rgb(255, 29, 68)",
        "hsl": "hsl(350, 100%, 56%)",
        "red": 255,
        "green": 29,
        "blue": 68,
        "hue": 350,
        "saturation": 100,
        "lightness": 56
    }, {
        "hex": "#FF1D44",
        "rgb": "rgb(255, 29, 68)",
        "hsl": "hsl(350, 100%, 56%)",
        "red": 255,
        "green": 29,
        "blue": 68,
        "hue": 350,
        "saturation": 100,
        "lightness": 56
    }, {
        "hex": "#302325",
        "rgb": "rgb(48, 35, 37)",
        "hsl": "hsl(351, 16%, 16%)",
        "red": 48,
        "green": 35,
        "blue": 37,
        "hue": 351,
        "saturation": 16,
        "lightness": 16
    }, {
        "hex": "#AB8288",
        "rgb": "rgb(171, 130, 136)",
        "hsl": "hsl(351, 20%, 59%)",
        "red": 171,
        "green": 130,
        "blue": 136,
        "hue": 351,
        "saturation": 20,
        "lightness": 59
    }, {
        "hex": "#42282C",
        "rgb": "rgb(66, 40, 44)",
        "hsl": "hsl(351, 25%, 21%)",
        "red": 66,
        "green": 40,
        "blue": 44,
        "hue": 351,
        "saturation": 25,
        "lightness": 21
    }, {
        "hex": "#A4626C",
        "rgb": "rgb(164, 98, 108)",
        "hsl": "hsl(351, 27%, 51%)",
        "red": 164,
        "green": 98,
        "blue": 108,
        "hue": 351,
        "saturation": 27,
        "lightness": 51
    }, {
        "hex": "#AB505E",
        "rgb": "rgb(171, 80, 94)",
        "hsl": "hsl(351, 36%, 49%)",
        "red": 171,
        "green": 80,
        "blue": 94,
        "hue": 351,
        "saturation": 36,
        "lightness": 49
    }, {
        "hex": "#B35966",
        "rgb": "rgb(179, 89, 102)",
        "hsl": "hsl(351, 37%, 53%)",
        "red": 179,
        "green": 89,
        "blue": 102,
        "hue": 351,
        "saturation": 37,
        "lightness": 53
    }, {
        "hex": "#DDA8B0",
        "rgb": "rgb(221, 168, 176)",
        "hsl": "hsl(351, 44%, 76%)",
        "red": 221,
        "green": 168,
        "blue": 176,
        "hue": 351,
        "saturation": 44,
        "lightness": 76
    }, {
        "hex": "#C76B79",
        "rgb": "rgb(199, 107, 121)",
        "hsl": "hsl(351, 45%, 60%)",
        "red": 199,
        "green": 107,
        "blue": 121,
        "hue": 351,
        "saturation": 45,
        "lightness": 60
    }, {
        "hex": "#D4838F",
        "rgb": "rgb(212, 131, 143)",
        "hsl": "hsl(351, 49%, 67%)",
        "red": 212,
        "green": 131,
        "blue": 143,
        "hue": 351,
        "saturation": 49,
        "lightness": 67
    }, {
        "hex": "#5E1F28",
        "rgb": "rgb(94, 31, 40)",
        "hsl": "hsl(351, 50%, 25%)",
        "red": 94,
        "green": 31,
        "blue": 40,
        "hue": 351,
        "saturation": 50,
        "lightness": 25
    }, {
        "hex": "#C5485A",
        "rgb": "rgb(197, 72, 90)",
        "hsl": "hsl(351, 52%, 53%)",
        "red": 197,
        "green": 72,
        "blue": 90,
        "hue": 351,
        "saturation": 52,
        "lightness": 53
    }, {
        "hex": "#BD374C",
        "rgb": "rgb(189, 55, 76)",
        "hsl": "hsl(351, 55%, 48%)",
        "red": 189,
        "green": 55,
        "blue": 76,
        "hue": 351,
        "saturation": 55,
        "lightness": 48
    }, {
        "hex": "#E7A8B1",
        "rgb": "rgb(231, 168, 177)",
        "hsl": "hsl(351, 57%, 78%)",
        "red": 231,
        "green": 168,
        "blue": 177,
        "hue": 351,
        "saturation": 57,
        "lightness": 78
    }, {
        "hex": "#CC2A41",
        "rgb": "rgb(204, 42, 65)",
        "hsl": "hsl(351, 66%, 48%)",
        "red": 204,
        "green": 42,
        "blue": 65,
        "hue": 351,
        "saturation": 66,
        "lightness": 48
    }, {
        "hex": "#D02941",
        "rgb": "rgb(208, 41, 65)",
        "hsl": "hsl(351, 67%, 49%)",
        "red": 208,
        "green": 41,
        "blue": 65,
        "hue": 351,
        "saturation": 67,
        "lightness": 49
    }, {
        "hex": "#BA2339",
        "rgb": "rgb(186, 35, 57)",
        "hsl": "hsl(351, 68%, 43%)",
        "red": 186,
        "green": 35,
        "blue": 57,
        "hue": 351,
        "saturation": 68,
        "lightness": 43
    }, {
        "hex": "#E6546B",
        "rgb": "rgb(230, 84, 107)",
        "hsl": "hsl(351, 74%, 62%)",
        "red": 230,
        "green": 84,
        "blue": 107,
        "hue": 351,
        "saturation": 74,
        "lightness": 62
    }, {
        "hex": "#EF7689",
        "rgb": "rgb(239, 118, 137)",
        "hsl": "hsl(351, 79%, 70%)",
        "red": 239,
        "green": 118,
        "blue": 137,
        "hue": 351,
        "saturation": 79,
        "lightness": 70
    }, {
        "hex": "#F5A3AF",
        "rgb": "rgb(245, 163, 175)",
        "hsl": "hsl(351, 80%, 80%)",
        "red": 245,
        "green": 163,
        "blue": 175,
        "hue": 351,
        "saturation": 80,
        "lightness": 80
    }, {
        "hex": "#F58696",
        "rgb": "rgb(245, 134, 150)",
        "hsl": "hsl(351, 85%, 74%)",
        "red": 245,
        "green": 134,
        "blue": 150,
        "hue": 351,
        "saturation": 85,
        "lightness": 74
    }, {
        "hex": "#F2445E",
        "rgb": "rgb(242, 68, 94)",
        "hsl": "hsl(351, 87%, 61%)",
        "red": 242,
        "green": 68,
        "blue": 94,
        "hue": 351,
        "saturation": 87,
        "lightness": 61
    }, {
        "hex": "#BC0B27",
        "rgb": "rgb(188, 11, 39)",
        "hsl": "hsl(351, 89%, 39%)",
        "red": 188,
        "green": 11,
        "blue": 39,
        "hue": 351,
        "saturation": 89,
        "lightness": 39
    }, {
        "hex": "#E30224",
        "rgb": "rgb(227, 2, 36)",
        "hsl": "hsl(351, 98%, 45%)",
        "red": 227,
        "green": 2,
        "blue": 36,
        "hue": 351,
        "saturation": 98,
        "lightness": 45
    }, {
        "hex": "#070001",
        "rgb": "rgb(7, 0, 1)",
        "hsl": "hsl(351, 100%, 1%)",
        "red": 7,
        "green": 0,
        "blue": 1,
        "hue": 351,
        "saturation": 100,
        "lightness": 1
    }, {
        "hex": "#8A0015",
        "rgb": "rgb(138, 0, 21)",
        "hsl": "hsl(351, 100%, 27%)",
        "red": 138,
        "green": 0,
        "blue": 21,
        "hue": 351,
        "saturation": 100,
        "lightness": 27
    }, {
        "hex": "#FF0F35",
        "rgb": "rgb(255, 15, 53)",
        "hsl": "hsl(351, 100%, 53%)",
        "red": 255,
        "green": 15,
        "blue": 53,
        "hue": 351,
        "saturation": 100,
        "lightness": 53
    }, {
        "hex": "#FF3D5A",
        "rgb": "rgb(255, 61, 90)",
        "hsl": "hsl(351, 100%, 62%)",
        "red": 255,
        "green": 61,
        "blue": 90,
        "hue": 351,
        "saturation": 100,
        "lightness": 62
    }, {
        "hex": "#FF3B58",
        "rgb": "rgb(255, 59, 88)",
        "hsl": "hsl(351, 100%, 62%)",
        "red": 255,
        "green": 59,
        "blue": 88,
        "hue": 351,
        "saturation": 100,
        "lightness": 62
    }, {
        "hex": "#FF516C",
        "rgb": "rgb(255, 81, 108)",
        "hsl": "hsl(351, 100%, 66%)",
        "red": 255,
        "green": 81,
        "blue": 108,
        "hue": 351,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FF667C",
        "rgb": "rgb(255, 102, 124)",
        "hsl": "hsl(351, 100%, 70%)",
        "red": 255,
        "green": 102,
        "blue": 124,
        "hue": 351,
        "saturation": 100,
        "lightness": 70
    }, {
        "hex": "#4F393C",
        "rgb": "rgb(79, 57, 60)",
        "hsl": "hsl(352, 16%, 27%)",
        "red": 79,
        "green": 57,
        "blue": 60,
        "hue": 352,
        "saturation": 16,
        "lightness": 27
    }, {
        "hex": "#87555C",
        "rgb": "rgb(135, 85, 92)",
        "hsl": "hsl(352, 23%, 43%)",
        "red": 135,
        "green": 85,
        "blue": 92,
        "hue": 352,
        "saturation": 23,
        "lightness": 43
    }, {
        "hex": "#D6ABB1",
        "rgb": "rgb(214, 171, 177)",
        "hsl": "hsl(352, 34%, 75%)",
        "red": 214,
        "green": 171,
        "blue": 177,
        "hue": 352,
        "saturation": 34,
        "lightness": 75
    }, {
        "hex": "#C6838C",
        "rgb": "rgb(198, 131, 140)",
        "hsl": "hsl(352, 37%, 65%)",
        "red": 198,
        "green": 131,
        "blue": 140,
        "hue": 352,
        "saturation": 37,
        "lightness": 65
    }, {
        "hex": "#BF6370",
        "rgb": "rgb(191, 99, 112)",
        "hsl": "hsl(352, 42%, 57%)",
        "red": 191,
        "green": 99,
        "blue": 112,
        "hue": 352,
        "saturation": 42,
        "lightness": 57
    }, {
        "hex": "#C25C6A",
        "rgb": "rgb(194, 92, 106)",
        "hsl": "hsl(352, 46%, 56%)",
        "red": 194,
        "green": 92,
        "blue": 106,
        "hue": 352,
        "saturation": 46,
        "lightness": 56
    }, {
        "hex": "#722731",
        "rgb": "rgb(114, 39, 49)",
        "hsl": "hsl(352, 49%, 30%)",
        "red": 114,
        "green": 39,
        "blue": 49,
        "hue": 352,
        "saturation": 49,
        "lightness": 30
    }, {
        "hex": "#A93545",
        "rgb": "rgb(169, 53, 69)",
        "hsl": "hsl(352, 52%, 44%)",
        "red": 169,
        "green": 53,
        "blue": 69,
        "hue": 352,
        "saturation": 52,
        "lightness": 44
    }, {
        "hex": "#EF97A3",
        "rgb": "rgb(239, 151, 163)",
        "hsl": "hsl(352, 73%, 76%)",
        "red": 239,
        "green": 151,
        "blue": 163,
        "hue": 352,
        "saturation": 73,
        "lightness": 76
    }, {
        "hex": "#E84A5F",
        "rgb": "rgb(232, 74, 95)",
        "hsl": "hsl(352, 77%, 60%)",
        "red": 232,
        "green": 74,
        "blue": 95,
        "hue": 352,
        "saturation": 77,
        "lightness": 60
    }, {
        "hex": "#AF162A",
        "rgb": "rgb(175, 22, 42)",
        "hsl": "hsl(352, 78%, 39%)",
        "red": 175,
        "green": 22,
        "blue": 42,
        "hue": 352,
        "saturation": 78,
        "lightness": 39
    }, {
        "hex": "#E6324B",
        "rgb": "rgb(230, 50, 75)",
        "hsl": "hsl(352, 78%, 55%)",
        "red": 230,
        "green": 50,
        "blue": 75,
        "hue": 352,
        "saturation": 78,
        "lightness": 55
    }, {
        "hex": "#EB445B",
        "rgb": "rgb(235, 68, 91)",
        "hsl": "hsl(352, 81%, 59%)",
        "red": 235,
        "green": 68,
        "blue": 91,
        "hue": 352,
        "saturation": 81,
        "lightness": 59
    }, {
        "hex": "#F04158",
        "rgb": "rgb(240, 65, 88)",
        "hsl": "hsl(352, 85%, 60%)",
        "red": 240,
        "green": 65,
        "blue": 88,
        "hue": 352,
        "saturation": 85,
        "lightness": 60
    }, {
        "hex": "#2A0308",
        "rgb": "rgb(42, 3, 8)",
        "hsl": "hsl(352, 87%, 9%)",
        "red": 42,
        "green": 3,
        "blue": 8,
        "hue": 352,
        "saturation": 87,
        "lightness": 9
    }, {
        "hex": "#FF5C71",
        "rgb": "rgb(255, 92, 113)",
        "hsl": "hsl(352, 100%, 68%)",
        "red": 255,
        "green": 92,
        "blue": 113,
        "hue": 352,
        "saturation": 100,
        "lightness": 68
    }, {
        "hex": "#3A3132",
        "rgb": "rgb(58, 49, 50)",
        "hsl": "hsl(353, 8%, 21%)",
        "red": 58,
        "green": 49,
        "blue": 50,
        "hue": 353,
        "saturation": 8,
        "lightness": 21
    }, {
        "hex": "#281F20",
        "rgb": "rgb(40, 31, 32)",
        "hsl": "hsl(353, 13%, 14%)",
        "red": 40,
        "green": 31,
        "blue": 32,
        "hue": 353,
        "saturation": 13,
        "lightness": 14
    }, {
        "hex": "#CFBDBF",
        "rgb": "rgb(207, 189, 191)",
        "hsl": "hsl(353, 16%, 78%)",
        "red": 207,
        "green": 189,
        "blue": 191,
        "hue": 353,
        "saturation": 16,
        "lightness": 78
    }, {
        "hex": "#361D20",
        "rgb": "rgb(54, 29, 32)",
        "hsl": "hsl(353, 30%, 16%)",
        "red": 54,
        "green": 29,
        "blue": 32,
        "hue": 353,
        "saturation": 30,
        "lightness": 16
    }, {
        "hex": "#9B4B54",
        "rgb": "rgb(155, 75, 84)",
        "hsl": "hsl(353, 35%, 45%)",
        "red": 155,
        "green": 75,
        "blue": 84,
        "hue": 353,
        "saturation": 35,
        "lightness": 45
    }, {
        "hex": "#C93E4F",
        "rgb": "rgb(201, 62, 79)",
        "hsl": "hsl(353, 56%, 52%)",
        "red": 201,
        "green": 62,
        "blue": 79,
        "hue": 353,
        "saturation": 56,
        "lightness": 52
    }, {
        "hex": "#D24858",
        "rgb": "rgb(210, 72, 88)",
        "hsl": "hsl(353, 61%, 55%)",
        "red": 210,
        "green": 72,
        "blue": 88,
        "hue": 353,
        "saturation": 61,
        "lightness": 55
    }, {
        "hex": "#D33649",
        "rgb": "rgb(211, 54, 73)",
        "hsl": "hsl(353, 64%, 52%)",
        "red": 211,
        "green": 54,
        "blue": 73,
        "hue": 353,
        "saturation": 64,
        "lightness": 52
    }, {
        "hex": "#D94052",
        "rgb": "rgb(217, 64, 82)",
        "hsl": "hsl(353, 67%, 55%)",
        "red": 217,
        "green": 64,
        "blue": 82,
        "hue": 353,
        "saturation": 67,
        "lightness": 55
    }, {
        "hex": "#E15E6E",
        "rgb": "rgb(225, 94, 110)",
        "hsl": "hsl(353, 69%, 63%)",
        "red": 225,
        "green": 94,
        "blue": 110,
        "hue": 353,
        "saturation": 69,
        "lightness": 63
    }, {
        "hex": "#BC162A",
        "rgb": "rgb(188, 22, 42)",
        "hsl": "hsl(353, 79%, 41%)",
        "red": 188,
        "green": 22,
        "blue": 42,
        "hue": 353,
        "saturation": 79,
        "lightness": 41
    }, {
        "hex": "#F26B7A",
        "rgb": "rgb(242, 107, 122)",
        "hsl": "hsl(353, 84%, 68%)",
        "red": 242,
        "green": 107,
        "blue": 122,
        "hue": 353,
        "saturation": 84,
        "lightness": 68
    }, {
        "hex": "#F8AFB8",
        "rgb": "rgb(248, 175, 184)",
        "hsl": "hsl(353, 84%, 83%)",
        "red": 248,
        "green": 175,
        "blue": 184,
        "hue": 353,
        "saturation": 84,
        "lightness": 83
    }, {
        "hex": "#C41026",
        "rgb": "rgb(196, 16, 38)",
        "hsl": "hsl(353, 85%, 42%)",
        "red": 196,
        "green": 16,
        "blue": 38,
        "hue": 353,
        "saturation": 85,
        "lightness": 42
    }, {
        "hex": "#F04155",
        "rgb": "rgb(240, 65, 85)",
        "hsl": "hsl(353, 85%, 60%)",
        "red": 240,
        "green": 65,
        "blue": 85,
        "hue": 353,
        "saturation": 85,
        "lightness": 60
    }, {
        "hex": "#EF2B41",
        "rgb": "rgb(239, 43, 65)",
        "hsl": "hsl(353, 86%, 55%)",
        "red": 239,
        "green": 43,
        "blue": 65,
        "hue": 353,
        "saturation": 86,
        "lightness": 55
    }, {
        "hex": "#F99FA9",
        "rgb": "rgb(249, 159, 169)",
        "hsl": "hsl(353, 88%, 80%)",
        "red": 249,
        "green": 159,
        "blue": 169,
        "hue": 353,
        "saturation": 88,
        "lightness": 80
    }, {
        "hex": "#F4324A",
        "rgb": "rgb(244, 50, 74)",
        "hsl": "hsl(353, 90%, 58%)",
        "red": 244,
        "green": 50,
        "blue": 74,
        "hue": 353,
        "saturation": 90,
        "lightness": 58
    }, {
        "hex": "#F87887",
        "rgb": "rgb(248, 120, 135)",
        "hsl": "hsl(353, 90%, 72%)",
        "red": 248,
        "green": 120,
        "blue": 135,
        "hue": 353,
        "saturation": 90,
        "lightness": 72
    }, {
        "hex": "#790614",
        "rgb": "rgb(121, 6, 20)",
        "hsl": "hsl(353, 91%, 25%)",
        "red": 121,
        "green": 6,
        "blue": 20,
        "hue": 353,
        "saturation": 91,
        "lightness": 25
    }, {
        "hex": "#C9031A",
        "rgb": "rgb(201, 3, 26)",
        "hsl": "hsl(353, 97%, 40%)",
        "red": 201,
        "green": 3,
        "blue": 26,
        "hue": 353,
        "saturation": 97,
        "lightness": 40
    }, {
        "hex": "#FC354C",
        "rgb": "rgb(252, 53, 76)",
        "hsl": "hsl(353, 97%, 60%)",
        "red": 252,
        "green": 53,
        "blue": 76,
        "hue": 353,
        "saturation": 97,
        "lightness": 60
    }, {
        "hex": "#FC3A51",
        "rgb": "rgb(252, 58, 81)",
        "hsl": "hsl(353, 97%, 61%)",
        "red": 252,
        "green": 58,
        "blue": 81,
        "hue": 353,
        "saturation": 97,
        "lightness": 61
    }, {
        "hex": "#FE495F",
        "rgb": "rgb(254, 73, 95)",
        "hsl": "hsl(353, 99%, 64%)",
        "red": 254,
        "green": 73,
        "blue": 95,
        "hue": 353,
        "saturation": 99,
        "lightness": 64
    }, {
        "hex": "#574345",
        "rgb": "rgb(87, 67, 69)",
        "hsl": "hsl(354, 13%, 30%)",
        "red": 87,
        "green": 67,
        "blue": 69,
        "hue": 354,
        "saturation": 13,
        "lightness": 30
    }, {
        "hex": "#C6A9AC",
        "rgb": "rgb(198, 169, 172)",
        "hsl": "hsl(354, 20%, 72%)",
        "red": 198,
        "green": 169,
        "blue": 172,
        "hue": 354,
        "saturation": 20,
        "lightness": 72
    }, {
        "hex": "#B88F93",
        "rgb": "rgb(184, 143, 147)",
        "hsl": "hsl(354, 22%, 64%)",
        "red": 184,
        "green": 143,
        "blue": 147,
        "hue": 354,
        "saturation": 22,
        "lightness": 64
    }, {
        "hex": "#2B1719",
        "rgb": "rgb(43, 23, 25)",
        "hsl": "hsl(354, 30%, 13%)",
        "red": 43,
        "green": 23,
        "blue": 25,
        "hue": 354,
        "saturation": 30,
        "lightness": 13
    }, {
        "hex": "#E2C3C6",
        "rgb": "rgb(226, 195, 198)",
        "hsl": "hsl(354, 35%, 83%)",
        "red": 226,
        "green": 195,
        "blue": 198,
        "hue": 354,
        "saturation": 35,
        "lightness": 83
    }, {
        "hex": "#853C43",
        "rgb": "rgb(133, 60, 67)",
        "hsl": "hsl(354, 38%, 38%)",
        "red": 133,
        "green": 60,
        "blue": 67,
        "hue": 354,
        "saturation": 38,
        "lightness": 38
    }, {
        "hex": "#C7777F",
        "rgb": "rgb(199, 119, 127)",
        "hsl": "hsl(354, 42%, 62%)",
        "red": 199,
        "green": 119,
        "blue": 127,
        "hue": 354,
        "saturation": 42,
        "lightness": 62
    }, {
        "hex": "#BA4C57",
        "rgb": "rgb(186, 76, 87)",
        "hsl": "hsl(354, 44%, 51%)",
        "red": 186,
        "green": 76,
        "blue": 87,
        "hue": 354,
        "saturation": 44,
        "lightness": 51
    }, {
        "hex": "#C44D58",
        "rgb": "rgb(196, 77, 88)",
        "hsl": "hsl(354, 50%, 54%)",
        "red": 196,
        "green": 77,
        "blue": 88,
        "hue": 354,
        "saturation": 50,
        "lightness": 54
    }, {
        "hex": "#1C090B",
        "rgb": "rgb(28, 9, 11)",
        "hsl": "hsl(354, 51%, 7%)",
        "red": 28,
        "green": 9,
        "blue": 11,
        "hue": 354,
        "saturation": 51,
        "lightness": 7
    }, {
        "hex": "#D68189",
        "rgb": "rgb(214, 129, 137)",
        "hsl": "hsl(354, 51%, 67%)",
        "red": 214,
        "green": 129,
        "blue": 137,
        "hue": 354,
        "saturation": 51,
        "lightness": 67
    }, {
        "hex": "#CC3747",
        "rgb": "rgb(204, 55, 71)",
        "hsl": "hsl(354, 59%, 51%)",
        "red": 204,
        "green": 55,
        "blue": 71,
        "hue": 354,
        "saturation": 59,
        "lightness": 51
    }, {
        "hex": "#951F2B",
        "rgb": "rgb(149, 31, 43)",
        "hsl": "hsl(354, 66%, 35%)",
        "red": 149,
        "green": 31,
        "blue": 43,
        "hue": 354,
        "saturation": 66,
        "lightness": 35
    }, {
        "hex": "#EF9CA4",
        "rgb": "rgb(239, 156, 164)",
        "hsl": "hsl(354, 72%, 77%)",
        "red": 239,
        "green": 156,
        "blue": 164,
        "hue": 354,
        "saturation": 72,
        "lightness": 77
    }, {
        "hex": "#E6626F",
        "rgb": "rgb(230, 98, 111)",
        "hsl": "hsl(354, 73%, 64%)",
        "red": 230,
        "green": 98,
        "blue": 111,
        "hue": 354,
        "saturation": 73,
        "lightness": 64
    }, {
        "hex": "#E32D40",
        "rgb": "rgb(227, 45, 64)",
        "hsl": "hsl(354, 76%, 53%)",
        "red": 227,
        "green": 45,
        "blue": 64,
        "hue": 354,
        "saturation": 76,
        "lightness": 53
    }, {
        "hex": "#ED616F",
        "rgb": "rgb(237, 97, 111)",
        "hsl": "hsl(354, 80%, 65%)",
        "red": 237,
        "green": 97,
        "blue": 111,
        "hue": 354,
        "saturation": 80,
        "lightness": 65
    }, {
        "hex": "#F58F9A",
        "rgb": "rgb(245, 143, 154)",
        "hsl": "hsl(354, 84%, 76%)",
        "red": 245,
        "green": 143,
        "blue": 154,
        "hue": 354,
        "saturation": 84,
        "lightness": 76
    }, {
        "hex": "#F46472",
        "rgb": "rgb(244, 100, 114)",
        "hsl": "hsl(354, 87%, 67%)",
        "red": 244,
        "green": 100,
        "blue": 114,
        "hue": 354,
        "saturation": 87,
        "lightness": 67
    }, {
        "hex": "#F67280",
        "rgb": "rgb(246, 114, 128)",
        "hsl": "hsl(354, 88%, 71%)",
        "red": 246,
        "green": 114,
        "blue": 128,
        "hue": 354,
        "saturation": 88,
        "lightness": 71
    }, {
        "hex": "#F85A69",
        "rgb": "rgb(248, 90, 105)",
        "hsl": "hsl(354, 92%, 66%)",
        "red": 248,
        "green": 90,
        "blue": 105,
        "hue": 354,
        "saturation": 92,
        "lightness": 66
    }, {
        "hex": "#FA7785",
        "rgb": "rgb(250, 119, 133)",
        "hsl": "hsl(354, 93%, 72%)",
        "red": 250,
        "green": 119,
        "blue": 133,
        "hue": 354,
        "saturation": 93,
        "lightness": 72
    }, {
        "hex": "#F5061D",
        "rgb": "rgb(245, 6, 29)",
        "hsl": "hsl(354, 95%, 49%)",
        "red": 245,
        "green": 6,
        "blue": 29,
        "hue": 354,
        "saturation": 95,
        "lightness": 49
    }, {
        "hex": "#FF5A6A",
        "rgb": "rgb(255, 90, 106)",
        "hsl": "hsl(354, 100%, 68%)",
        "red": 255,
        "green": 90,
        "blue": 106,
        "hue": 354,
        "saturation": 100,
        "lightness": 68
    }, {
        "hex": "#FF8591",
        "rgb": "rgb(255, 133, 145)",
        "hsl": "hsl(354, 100%, 76%)",
        "red": 255,
        "green": 133,
        "blue": 145,
        "hue": 354,
        "saturation": 100,
        "lightness": 76
    }, {
        "hex": "#FFCCD1",
        "rgb": "rgb(255, 204, 209)",
        "hsl": "hsl(354, 100%, 90%)",
        "red": 255,
        "green": 204,
        "blue": 209,
        "hue": 354,
        "saturation": 100,
        "lightness": 90
    }, {
        "hex": "#AB9597",
        "rgb": "rgb(171, 149, 151)",
        "hsl": "hsl(355, 12%, 63%)",
        "red": 171,
        "green": 149,
        "blue": 151,
        "hue": 355,
        "saturation": 12,
        "lightness": 63
    }, {
        "hex": "#8C686B",
        "rgb": "rgb(140, 104, 107)",
        "hsl": "hsl(355, 15%, 48%)",
        "red": 140,
        "green": 104,
        "blue": 107,
        "hue": 355,
        "saturation": 15,
        "lightness": 48
    }, {
        "hex": "#965D62",
        "rgb": "rgb(150, 93, 98)",
        "hsl": "hsl(355, 23%, 48%)",
        "red": 150,
        "green": 93,
        "blue": 98,
        "hue": 355,
        "saturation": 23,
        "lightness": 48
    }, {
        "hex": "#A9767A",
        "rgb": "rgb(169, 118, 122)",
        "hsl": "hsl(355, 23%, 56%)",
        "red": 169,
        "green": 118,
        "blue": 122,
        "hue": 355,
        "saturation": 23,
        "lightness": 56
    }, {
        "hex": "#5E2025",
        "rgb": "rgb(94, 32, 37)",
        "hsl": "hsl(355, 49%, 25%)",
        "red": 94,
        "green": 32,
        "blue": 37,
        "hue": 355,
        "saturation": 49,
        "lightness": 25
    }, {
        "hex": "#CC333F",
        "rgb": "rgb(204, 51, 63)",
        "hsl": "hsl(355, 60%, 50%)",
        "red": 204,
        "green": 51,
        "blue": 63,
        "hue": 355,
        "saturation": 60,
        "lightness": 50
    }, {
        "hex": "#D9434F",
        "rgb": "rgb(217, 67, 79)",
        "hsl": "hsl(355, 66%, 56%)",
        "red": 217,
        "green": 67,
        "blue": 79,
        "hue": 355,
        "saturation": 66,
        "lightness": 56
    }, {
        "hex": "#9D1722",
        "rgb": "rgb(157, 23, 34)",
        "hsl": "hsl(355, 74%, 35%)",
        "red": 157,
        "green": 23,
        "blue": 34,
        "hue": 355,
        "saturation": 74,
        "lightness": 35
    }, {
        "hex": "#E02130",
        "rgb": "rgb(224, 33, 48)",
        "hsl": "hsl(355, 75%, 50%)",
        "red": 224,
        "green": 33,
        "blue": 48,
        "hue": 355,
        "saturation": 75,
        "lightness": 50
    }, {
        "hex": "#E84D5B",
        "rgb": "rgb(232, 77, 91)",
        "hsl": "hsl(355, 77%, 61%)",
        "red": 232,
        "green": 77,
        "blue": 91,
        "hue": 355,
        "saturation": 77,
        "lightness": 61
    }, {
        "hex": "#B11623",
        "rgb": "rgb(177, 22, 35)",
        "hsl": "hsl(355, 78%, 39%)",
        "red": 177,
        "green": 22,
        "blue": 35,
        "hue": 355,
        "saturation": 78,
        "lightness": 39
    }, {
        "hex": "#EA525F",
        "rgb": "rgb(234, 82, 95)",
        "hsl": "hsl(355, 78%, 62%)",
        "red": 234,
        "green": 82,
        "blue": 95,
        "hue": 355,
        "saturation": 78,
        "lightness": 62
    }, {
        "hex": "#DA1A29",
        "rgb": "rgb(218, 26, 41)",
        "hsl": "hsl(355, 79%, 48%)",
        "red": 218,
        "green": 26,
        "blue": 41,
        "hue": 355,
        "saturation": 79,
        "lightness": 48
    }, {
        "hex": "#EC4B59",
        "rgb": "rgb(236, 75, 89)",
        "hsl": "hsl(355, 81%, 61%)",
        "red": 236,
        "green": 75,
        "blue": 89,
        "hue": 355,
        "saturation": 81,
        "lightness": 61
    }, {
        "hex": "#FCD7DA",
        "rgb": "rgb(252, 215, 218)",
        "hsl": "hsl(355, 86%, 92%)",
        "red": 252,
        "green": 215,
        "blue": 218,
        "hue": 355,
        "saturation": 86,
        "lightness": 92
    }, {
        "hex": "#FA2A3A",
        "rgb": "rgb(250, 42, 58)",
        "hsl": "hsl(355, 95%, 57%)",
        "red": 250,
        "green": 42,
        "blue": 58,
        "hue": 355,
        "saturation": 95,
        "lightness": 57
    }, {
        "hex": "#BDA0A2",
        "rgb": "rgb(189, 160, 162)",
        "hsl": "hsl(356, 18%, 68%)",
        "red": 189,
        "green": 160,
        "blue": 162,
        "hue": 356,
        "saturation": 18,
        "lightness": 68
    }, {
        "hex": "#B38184",
        "rgb": "rgb(179, 129, 132)",
        "hsl": "hsl(356, 25%, 60%)",
        "red": 179,
        "green": 129,
        "blue": 132,
        "hue": 356,
        "saturation": 25,
        "lightness": 60
    }, {
        "hex": "#AB6A6E",
        "rgb": "rgb(171, 106, 110)",
        "hsl": "hsl(356, 28%, 54%)",
        "red": 171,
        "green": 106,
        "blue": 110,
        "hue": 356,
        "saturation": 28,
        "lightness": 54
    }, {
        "hex": "#B97479",
        "rgb": "rgb(185, 116, 121)",
        "hsl": "hsl(356, 33%, 59%)",
        "red": 185,
        "green": 116,
        "blue": 121,
        "hue": 356,
        "saturation": 33,
        "lightness": 59
    }, {
        "hex": "#A24D52",
        "rgb": "rgb(162, 77, 82)",
        "hsl": "hsl(356, 36%, 47%)",
        "red": 162,
        "green": 77,
        "blue": 82,
        "hue": 356,
        "saturation": 36,
        "lightness": 47
    }, {
        "hex": "#89373D",
        "rgb": "rgb(137, 55, 61)",
        "hsl": "hsl(356, 43%, 38%)",
        "red": 137,
        "green": 55,
        "blue": 61,
        "hue": 356,
        "saturation": 43,
        "lightness": 38
    }, {
        "hex": "#BE4C54",
        "rgb": "rgb(190, 76, 84)",
        "hsl": "hsl(356, 47%, 52%)",
        "red": 190,
        "green": 76,
        "blue": 84,
        "hue": 356,
        "saturation": 47,
        "lightness": 52
    }, {
        "hex": "#CB4F57",
        "rgb": "rgb(203, 79, 87)",
        "hsl": "hsl(356, 54%, 55%)",
        "red": 203,
        "green": 79,
        "blue": 87,
        "hue": 356,
        "saturation": 54,
        "lightness": 55
    }, {
        "hex": "#851E25",
        "rgb": "rgb(133, 30, 37)",
        "hsl": "hsl(356, 63%, 32%)",
        "red": 133,
        "green": 30,
        "blue": 37,
        "hue": 356,
        "saturation": 63,
        "lightness": 32
    }, {
        "hex": "#D1313D",
        "rgb": "rgb(209, 49, 61)",
        "hsl": "hsl(356, 63%, 51%)",
        "red": 209,
        "green": 49,
        "blue": 61,
        "hue": 356,
        "saturation": 63,
        "lightness": 51
    }, {
        "hex": "#77181E",
        "rgb": "rgb(119, 24, 30)",
        "hsl": "hsl(356, 66%, 28%)",
        "red": 119,
        "green": 24,
        "blue": 30,
        "hue": 356,
        "saturation": 66,
        "lightness": 28
    }, {
        "hex": "#E88087",
        "rgb": "rgb(232, 128, 135)",
        "hsl": "hsl(356, 69%, 71%)",
        "red": 232,
        "green": 128,
        "blue": 135,
        "hue": 356,
        "saturation": 69,
        "lightness": 71
    }, {
        "hex": "#EC8A90",
        "rgb": "rgb(236, 138, 144)",
        "hsl": "hsl(356, 72%, 73%)",
        "red": 236,
        "green": 138,
        "blue": 144,
        "hue": 356,
        "saturation": 72,
        "lightness": 73
    }, {
        "hex": "#ED7B83",
        "rgb": "rgb(237, 123, 131)",
        "hsl": "hsl(356, 76%, 71%)",
        "red": 237,
        "green": 123,
        "blue": 131,
        "hue": 356,
        "saturation": 76,
        "lightness": 71
    }, {
        "hex": "#9F111B",
        "rgb": "rgb(159, 17, 27)",
        "hsl": "hsl(356, 81%, 35%)",
        "red": 159,
        "green": 17,
        "blue": 27,
        "hue": 356,
        "saturation": 81,
        "lightness": 35
    }, {
        "hex": "#EF6771",
        "rgb": "rgb(239, 103, 113)",
        "hsl": "hsl(356, 81%, 67%)",
        "red": 239,
        "green": 103,
        "blue": 113,
        "hue": 356,
        "saturation": 81,
        "lightness": 67
    }, {
        "hex": "#ED4C57",
        "rgb": "rgb(237, 76, 87)",
        "hsl": "hsl(356, 82%, 61%)",
        "red": 237,
        "green": 76,
        "blue": 87,
        "hue": 356,
        "saturation": 82,
        "lightness": 61
    }, {
        "hex": "#F05D67",
        "rgb": "rgb(240, 93, 103)",
        "hsl": "hsl(356, 83%, 65%)",
        "red": 240,
        "green": 93,
        "blue": 103,
        "hue": 356,
        "saturation": 83,
        "lightness": 65
    }, {
        "hex": "#ED303C",
        "rgb": "rgb(237, 48, 60)",
        "hsl": "hsl(356, 84%, 56%)",
        "red": 237,
        "green": 48,
        "blue": 60,
        "hue": 356,
        "saturation": 84,
        "lightness": 56
    }, {
        "hex": "#FDC5C9",
        "rgb": "rgb(253, 197, 201)",
        "hsl": "hsl(356, 93%, 88%)",
        "red": 253,
        "green": 197,
        "blue": 201,
        "hue": 356,
        "saturation": 93,
        "lightness": 88
    }, {
        "hex": "#FECDD0",
        "rgb": "rgb(254, 205, 208)",
        "hsl": "hsl(356, 96%, 90%)",
        "red": 254,
        "green": 205,
        "blue": 208,
        "hue": 356,
        "saturation": 96,
        "lightness": 90
    }, {
        "hex": "#B9030F",
        "rgb": "rgb(185, 3, 15)",
        "hsl": "hsl(356, 97%, 37%)",
        "red": 185,
        "green": 3,
        "blue": 15,
        "hue": 356,
        "saturation": 97,
        "lightness": 37
    }, {
        "hex": "#FF8C94",
        "rgb": "rgb(255, 140, 148)",
        "hsl": "hsl(356, 100%, 77%)",
        "red": 255,
        "green": 140,
        "blue": 148,
        "hue": 356,
        "saturation": 100,
        "lightness": 77
    }, {
        "hex": "#4E3A3B",
        "rgb": "rgb(78, 58, 59)",
        "hsl": "hsl(357, 15%, 27%)",
        "red": 78,
        "green": 58,
        "blue": 59,
        "hue": 357,
        "saturation": 15,
        "lightness": 27
    }, {
        "hex": "#473334",
        "rgb": "rgb(71, 51, 52)",
        "hsl": "hsl(357, 16%, 24%)",
        "red": 71,
        "green": 51,
        "blue": 52,
        "hue": 357,
        "saturation": 16,
        "lightness": 24
    }, {
        "hex": "#CEA4A6",
        "rgb": "rgb(206, 164, 166)",
        "hsl": "hsl(357, 30%, 73%)",
        "red": 206,
        "green": 164,
        "blue": 166,
        "hue": 357,
        "saturation": 30,
        "lightness": 73
    }, {
        "hex": "#B4585D",
        "rgb": "rgb(180, 88, 93)",
        "hsl": "hsl(357, 38%, 53%)",
        "red": 180,
        "green": 88,
        "blue": 93,
        "hue": 357,
        "saturation": 38,
        "lightness": 53
    }, {
        "hex": "#7B3336",
        "rgb": "rgb(123, 51, 54)",
        "hsl": "hsl(357, 41%, 34%)",
        "red": 123,
        "green": 51,
        "blue": 54,
        "hue": 357,
        "saturation": 41,
        "lightness": 34
    }, {
        "hex": "#AC4147",
        "rgb": "rgb(172, 65, 71)",
        "hsl": "hsl(357, 45%, 46%)",
        "red": 172,
        "green": 65,
        "blue": 71,
        "hue": 357,
        "saturation": 45,
        "lightness": 46
    }, {
        "hex": "#3F1719",
        "rgb": "rgb(63, 23, 25)",
        "hsl": "hsl(357, 47%, 17%)",
        "red": 63,
        "green": 23,
        "blue": 25,
        "hue": 357,
        "saturation": 47,
        "lightness": 17
    }, {
        "hex": "#1F0B0C",
        "rgb": "rgb(31, 11, 12)",
        "hsl": "hsl(357, 48%, 8%)",
        "red": 31,
        "green": 11,
        "blue": 12,
        "hue": 357,
        "saturation": 48,
        "lightness": 8
    }, {
        "hex": "#F5E1E2",
        "rgb": "rgb(245, 225, 226)",
        "hsl": "hsl(357, 50%, 92%)",
        "red": 245,
        "green": 225,
        "blue": 226,
        "hue": 357,
        "saturation": 50,
        "lightness": 92
    }, {
        "hex": "#CF5A60",
        "rgb": "rgb(207, 90, 96)",
        "hsl": "hsl(357, 55%, 58%)",
        "red": 207,
        "green": 90,
        "blue": 96,
        "hue": 357,
        "saturation": 55,
        "lightness": 58
    }, {
        "hex": "#BD3038",
        "rgb": "rgb(189, 48, 56)",
        "hsl": "hsl(357, 59%, 46%)",
        "red": 189,
        "green": 48,
        "blue": 56,
        "hue": 357,
        "saturation": 59,
        "lightness": 46
    }, {
        "hex": "#D55D63",
        "rgb": "rgb(213, 93, 99)",
        "hsl": "hsl(357, 59%, 60%)",
        "red": 213,
        "green": 93,
        "blue": 99,
        "hue": 357,
        "saturation": 59,
        "lightness": 60
    }, {
        "hex": "#ED9DA1",
        "rgb": "rgb(237, 157, 161)",
        "hsl": "hsl(357, 69%, 77%)",
        "red": 237,
        "green": 157,
        "blue": 161,
        "hue": 357,
        "saturation": 69,
        "lightness": 77
    }, {
        "hex": "#DF2A33",
        "rgb": "rgb(223, 42, 51)",
        "hsl": "hsl(357, 74%, 52%)",
        "red": 223,
        "green": 42,
        "blue": 51,
        "hue": 357,
        "saturation": 74,
        "lightness": 52
    }, {
        "hex": "#AC151C",
        "rgb": "rgb(172, 21, 28)",
        "hsl": "hsl(357, 78%, 38%)",
        "red": 172,
        "green": 21,
        "blue": 28,
        "hue": 357,
        "saturation": 78,
        "lightness": 38
    }, {
        "hex": "#F06E75",
        "rgb": "rgb(240, 110, 117)",
        "hsl": "hsl(357, 81%, 69%)",
        "red": 240,
        "green": 110,
        "blue": 117,
        "hue": 357,
        "saturation": 81,
        "lightness": 69
    }, {
        "hex": "#F36A71",
        "rgb": "rgb(243, 106, 113)",
        "hsl": "hsl(357, 85%, 68%)",
        "red": 243,
        "green": 106,
        "blue": 113,
        "hue": 357,
        "saturation": 85,
        "lightness": 68
    }, {
        "hex": "#F76D75",
        "rgb": "rgb(247, 109, 117)",
        "hsl": "hsl(357, 90%, 70%)",
        "red": 247,
        "green": 109,
        "blue": 117,
        "hue": 357,
        "saturation": 90,
        "lightness": 70
    }, {
        "hex": "#F70B17",
        "rgb": "rgb(247, 11, 23)",
        "hsl": "hsl(357, 94%, 51%)",
        "red": 247,
        "green": 11,
        "blue": 23,
        "hue": 357,
        "saturation": 94,
        "lightness": 51
    }, {
        "hex": "#FB545C",
        "rgb": "rgb(251, 84, 92)",
        "hsl": "hsl(357, 95%, 66%)",
        "red": 251,
        "green": 84,
        "blue": 92,
        "hue": 357,
        "saturation": 95,
        "lightness": 66
    }, {
        "hex": "#FD8086",
        "rgb": "rgb(253, 128, 134)",
        "hsl": "hsl(357, 97%, 75%)",
        "red": 253,
        "green": 128,
        "blue": 134,
        "hue": 357,
        "saturation": 97,
        "lightness": 75
    }, {
        "hex": "#8F0006",
        "rgb": "rgb(143, 0, 6)",
        "hsl": "hsl(357, 100%, 28%)",
        "red": 143,
        "green": 0,
        "blue": 6,
        "hue": 357,
        "saturation": 100,
        "lightness": 28
    }, {
        "hex": "#FF8C91",
        "rgb": "rgb(255, 140, 145)",
        "hsl": "hsl(357, 100%, 77%)",
        "red": 255,
        "green": 140,
        "blue": 145,
        "hue": 357,
        "saturation": 100,
        "lightness": 77
    }, {
        "hex": "#FFA5AA",
        "rgb": "rgb(255, 165, 170)",
        "hsl": "hsl(357, 100%, 82%)",
        "red": 255,
        "green": 165,
        "blue": 170,
        "hue": 357,
        "saturation": 100,
        "lightness": 82
    }, {
        "hex": "#8A6A6B",
        "rgb": "rgb(138, 106, 107)",
        "hsl": "hsl(358, 13%, 48%)",
        "red": 138,
        "green": 106,
        "blue": 107,
        "hue": 358,
        "saturation": 13,
        "lightness": 48
    }, {
        "hex": "#907071",
        "rgb": "rgb(144, 112, 113)",
        "hsl": "hsl(358, 13%, 50%)",
        "red": 144,
        "green": 112,
        "blue": 113,
        "hue": 358,
        "saturation": 13,
        "lightness": 50
    }, {
        "hex": "#7B5D5E",
        "rgb": "rgb(123, 93, 94)",
        "hsl": "hsl(358, 14%, 42%)",
        "red": 123,
        "green": 93,
        "blue": 94,
        "hue": 358,
        "saturation": 14,
        "lightness": 42
    }, {
        "hex": "#4B3132",
        "rgb": "rgb(75, 49, 50)",
        "hsl": "hsl(358, 21%, 24%)",
        "red": 75,
        "green": 49,
        "blue": 50,
        "hue": 358,
        "saturation": 21,
        "lightness": 24
    }, {
        "hex": "#995052",
        "rgb": "rgb(153, 80, 82)",
        "hsl": "hsl(358, 31%, 46%)",
        "red": 153,
        "green": 80,
        "blue": 82,
        "hue": 358,
        "saturation": 31,
        "lightness": 46
    }, {
        "hex": "#E59DA0",
        "rgb": "rgb(229, 157, 160)",
        "hsl": "hsl(358, 58%, 76%)",
        "red": 229,
        "green": 157,
        "blue": 160,
        "hue": 358,
        "saturation": 58,
        "lightness": 76
    }, {
        "hex": "#E06F72",
        "rgb": "rgb(224, 111, 114)",
        "hsl": "hsl(358, 65%, 66%)",
        "red": 224,
        "green": 111,
        "blue": 114,
        "hue": 358,
        "saturation": 65,
        "lightness": 66
    }, {
        "hex": "#E47F83",
        "rgb": "rgb(228, 127, 131)",
        "hsl": "hsl(358, 65%, 70%)",
        "red": 228,
        "green": 127,
        "blue": 131,
        "hue": 358,
        "saturation": 65,
        "lightness": 70
    }, {
        "hex": "#EBA2A4",
        "rgb": "rgb(235, 162, 164)",
        "hsl": "hsl(358, 65%, 78%)",
        "red": 235,
        "green": 162,
        "blue": 164,
        "hue": 358,
        "saturation": 65,
        "lightness": 78
    }, {
        "hex": "#B42529",
        "rgb": "rgb(180, 37, 41)",
        "hsl": "hsl(358, 66%, 43%)",
        "red": 180,
        "green": 37,
        "blue": 41,
        "hue": 358,
        "saturation": 66,
        "lightness": 43
    }, {
        "hex": "#EA777B",
        "rgb": "rgb(234, 119, 123)",
        "hsl": "hsl(358, 73%, 69%)",
        "red": 234,
        "green": 119,
        "blue": 123,
        "hue": 358,
        "saturation": 73,
        "lightness": 69
    }, {
        "hex": "#9A151A",
        "rgb": "rgb(154, 21, 26)",
        "hsl": "hsl(358, 76%, 34%)",
        "red": 154,
        "green": 21,
        "blue": 26,
        "hue": 358,
        "saturation": 76,
        "lightness": 34
    }, {
        "hex": "#EF8184",
        "rgb": "rgb(239, 129, 132)",
        "hsl": "hsl(358, 77%, 72%)",
        "red": 239,
        "green": 129,
        "blue": 132,
        "hue": 358,
        "saturation": 77,
        "lightness": 72
    }, {
        "hex": "#F8C7C9",
        "rgb": "rgb(248, 199, 201)",
        "hsl": "hsl(358, 78%, 88%)",
        "red": 248,
        "green": 199,
        "blue": 201,
        "hue": 358,
        "saturation": 78,
        "lightness": 88
    }, {
        "hex": "#E8373E",
        "rgb": "rgb(232, 55, 62)",
        "hsl": "hsl(358, 79%, 56%)",
        "red": 232,
        "green": 55,
        "blue": 62,
        "hue": 358,
        "saturation": 79,
        "lightness": 56
    }, {
        "hex": "#F07F83",
        "rgb": "rgb(240, 127, 131)",
        "hsl": "hsl(358, 79%, 72%)",
        "red": 240,
        "green": 127,
        "blue": 131,
        "hue": 358,
        "saturation": 79,
        "lightness": 72
    }, {
        "hex": "#5F0609",
        "rgb": "rgb(95, 6, 9)",
        "hsl": "hsl(358, 88%, 20%)",
        "red": 95,
        "green": 6,
        "blue": 9,
        "hue": 358,
        "saturation": 88,
        "lightness": 20
    }, {
        "hex": "#FAB4B6",
        "rgb": "rgb(250, 180, 182)",
        "hsl": "hsl(358, 88%, 84%)",
        "red": 250,
        "green": 180,
        "blue": 182,
        "hue": 358,
        "saturation": 88,
        "lightness": 84
    }, {
        "hex": "#F5565B",
        "rgb": "rgb(245, 86, 91)",
        "hsl": "hsl(358, 89%, 65%)",
        "red": 245,
        "green": 86,
        "blue": 91,
        "hue": 358,
        "saturation": 89,
        "lightness": 65
    }, {
        "hex": "#FB6066",
        "rgb": "rgb(251, 96, 102)",
        "hsl": "hsl(358, 95%, 68%)",
        "red": 251,
        "green": 96,
        "blue": 102,
        "hue": 358,
        "saturation": 95,
        "lightness": 68
    }, {
        "hex": "#8C0005",
        "rgb": "rgb(140, 0, 5)",
        "hsl": "hsl(358, 100%, 27%)",
        "red": 140,
        "green": 0,
        "blue": 5,
        "hue": 358,
        "saturation": 100,
        "lightness": 27
    }, {
        "hex": "#9E0004",
        "rgb": "rgb(158, 0, 4)",
        "hsl": "hsl(358, 100%, 31%)",
        "red": 158,
        "green": 0,
        "blue": 4,
        "hue": 358,
        "saturation": 100,
        "lightness": 31
    }, {
        "hex": "#A30006",
        "rgb": "rgb(163, 0, 6)",
        "hsl": "hsl(358, 100%, 32%)",
        "red": 163,
        "green": 0,
        "blue": 6,
        "hue": 358,
        "saturation": 100,
        "lightness": 32
    }, {
        "hex": "#A27879",
        "rgb": "rgb(162, 120, 121)",
        "hsl": "hsl(359, 18%, 55%)",
        "red": 162,
        "green": 120,
        "blue": 121,
        "hue": 359,
        "saturation": 18,
        "lightness": 55
    }, {
        "hex": "#B66E6F",
        "rgb": "rgb(182, 110, 111)",
        "hsl": "hsl(359, 33%, 57%)",
        "red": 182,
        "green": 110,
        "blue": 111,
        "hue": 359,
        "saturation": 33,
        "lightness": 57
    }, {
        "hex": "#532728",
        "rgb": "rgb(83, 39, 40)",
        "hsl": "hsl(359, 36%, 24%)",
        "red": 83,
        "green": 39,
        "blue": 40,
        "hue": 359,
        "saturation": 36,
        "lightness": 24
    }, {
        "hex": "#D18E8F",
        "rgb": "rgb(209, 142, 143)",
        "hsl": "hsl(359, 42%, 69%)",
        "red": 209,
        "green": 142,
        "blue": 143,
        "hue": 359,
        "saturation": 42,
        "lightness": 69
    }, {
        "hex": "#D18E8F",
        "rgb": "rgb(209, 142, 143)",
        "hsl": "hsl(359, 42%, 69%)",
        "red": 209,
        "green": 142,
        "blue": 143,
        "hue": 359,
        "saturation": 42,
        "lightness": 69
    }, {
        "hex": "#C84648",
        "rgb": "rgb(200, 70, 72)",
        "hsl": "hsl(359, 54%, 53%)",
        "red": 200,
        "green": 70,
        "blue": 72,
        "hue": 359,
        "saturation": 54,
        "lightness": 53
    }, {
        "hex": "#DB4648",
        "rgb": "rgb(219, 70, 72)",
        "hsl": "hsl(359, 67%, 57%)",
        "red": 219,
        "green": 70,
        "blue": 72,
        "hue": 359,
        "saturation": 67,
        "lightness": 57
    }, {
        "hex": "#340A0B",
        "rgb": "rgb(52, 10, 11)",
        "hsl": "hsl(359, 68%, 12%)",
        "red": 52,
        "green": 10,
        "blue": 11,
        "hue": 359,
        "saturation": 68,
        "lightness": 12
    }, {
        "hex": "#E35B5D",
        "rgb": "rgb(227, 91, 93)",
        "hsl": "hsl(359, 71%, 62%)",
        "red": 227,
        "green": 91,
        "blue": 93,
        "hue": 359,
        "saturation": 71,
        "lightness": 62
    }, {
        "hex": "#EB7072",
        "rgb": "rgb(235, 112, 114)",
        "hsl": "hsl(359, 75%, 68%)",
        "red": 235,
        "green": 112,
        "blue": 114,
        "hue": 359,
        "saturation": 75,
        "lightness": 68
    }, {
        "hex": "#330708",
        "rgb": "rgb(51, 7, 8)",
        "hsl": "hsl(359, 76%, 11%)",
        "red": 51,
        "green": 7,
        "blue": 8,
        "hue": 359,
        "saturation": 76,
        "lightness": 11
    }, {
        "hex": "#670D0F",
        "rgb": "rgb(103, 13, 15)",
        "hsl": "hsl(359, 78%, 23%)",
        "red": 103,
        "green": 13,
        "blue": 15,
        "hue": 359,
        "saturation": 78,
        "lightness": 23
    }, {
        "hex": "#F25C5E",
        "rgb": "rgb(242, 92, 94)",
        "hsl": "hsl(359, 85%, 65%)",
        "red": 242,
        "green": 92,
        "blue": 94,
        "hue": 359,
        "saturation": 85,
        "lightness": 65
    }, {
        "hex": "#F89FA1",
        "rgb": "rgb(248, 159, 161)",
        "hsl": "hsl(359, 86%, 80%)",
        "red": 248,
        "green": 159,
        "blue": 161,
        "hue": 359,
        "saturation": 86,
        "lightness": 80
    }, {
        "hex": "#BF0A0D",
        "rgb": "rgb(191, 10, 13)",
        "hsl": "hsl(359, 90%, 39%)",
        "red": 191,
        "green": 10,
        "blue": 13,
        "hue": 359,
        "saturation": 90,
        "lightness": 39
    }, {
        "hex": "#F6464A",
        "rgb": "rgb(246, 70, 74)",
        "hsl": "hsl(359, 91%, 62%)",
        "red": 246,
        "green": 70,
        "blue": 74,
        "hue": 359,
        "saturation": 91,
        "lightness": 62
    }, {
        "hex": "#6B0103",
        "rgb": "rgb(107, 1, 3)",
        "hsl": "hsl(359, 98%, 21%)",
        "red": 107,
        "green": 1,
        "blue": 3,
        "hue": 359,
        "saturation": 98,
        "lightness": 21
    }, {
        "hex": "#FF494B",
        "rgb": "rgb(255, 73, 75)",
        "hsl": "hsl(359, 100%, 64%)",
        "red": 255,
        "green": 73,
        "blue": 75,
        "hue": 359,
        "saturation": 100,
        "lightness": 64
    }, {
        "hex": "#FF4E50",
        "rgb": "rgb(255, 78, 80)",
        "hsl": "hsl(359, 100%, 65%)",
        "red": 255,
        "green": 78,
        "blue": 80,
        "hue": 359,
        "saturation": 100,
        "lightness": 65
    }, {
        "hex": "#FF4E50",
        "rgb": "rgb(255, 78, 80)",
        "hsl": "hsl(359, 100%, 65%)",
        "red": 255,
        "green": 78,
        "blue": 80,
        "hue": 359,
        "saturation": 100,
        "lightness": 65
    }, {
        "hex": "#FF5254",
        "rgb": "rgb(255, 82, 84)",
        "hsl": "hsl(359, 100%, 66%)",
        "red": 255,
        "green": 82,
        "blue": 84,
        "hue": 359,
        "saturation": 100,
        "lightness": 66
    }, {
        "hex": "#FF7F81",
        "rgb": "rgb(255, 127, 129)",
        "hsl": "hsl(359, 100%, 75%)",
        "red": 255,
        "green": 127,
        "blue": 129,
        "hue": 359,
        "saturation": 100,
        "lightness": 75
    }, {
        "hex": "#BA3C3D",
        "rgb": "rgb(186, 60, 61)",
        "hsl": "hsl(360, 51%, 48%)",
        "red": 186,
        "green": 60,
        "blue": 61,
        "hue": 360,
        "saturation": 51,
        "lightness": 48
    }, {
        "hex": "#CF4647",
        "rgb": "rgb(207, 70, 71)",
        "hsl": "hsl(360, 59%, 54%)",
        "red": 207,
        "green": 70,
        "blue": 71,
        "hue": 360,
        "saturation": 59,
        "lightness": 54
    }, {
        "hex": "#F57576",
        "rgb": "rgb(245, 117, 118)",
        "hsl": "hsl(360, 86%, 71%)",
        "red": 245,
        "green": 117,
        "blue": 118,
        "hue": 360,
        "saturation": 86,
        "lightness": 71
    }, {
        "hex": "#BE0001",
        "rgb": "rgb(190, 0, 1)",
        "hsl": "hsl(360, 100%, 37%)",
        "red": 190,
        "green": 0,
        "blue": 1,
        "hue": 360,
        "saturation": 100,
        "lightness": 37
    }],
    "sortInformation": {
        "primarySort": "hue",
        "secondarySort": "saturation",
        "tertiarySort": "lightness",
        "reversed": false
    },
    "hexArray": ["#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#020202", "#161616", "#1F1F1F", "#2B2B2B", "#2E2E2E", "#333333", "#333333", "#363636", "#373737", "#3B3B3B", "#404040", "#424242", "#454545", "#444444", "#484848", "#474747", "#484848", "#4D4D4D", "#525252", "#545454", "#5E5E5E", "#636363", "#666666", "#666666", "#6B6B6B", "#6B6B6B", "#737373", "#757575", "#787878", "#8F8F8F", "#999999", "#9E9E9E", "#A1A1A1", "#BCBCBC", "#CACACA", "#CCCCCC", "#CCCCCC", "#CCCCCC", "#CFCFCF", "#D2D2D2", "#D9D9D9", "#D8D8D8", "#D8D8D8", "#E0E0E0", "#E0E0E0", "#E6E6E6", "#E5E5E5", "#E9E9E9", "#E9E9E9", "#E8E8E8", "#ECECEC", "#F0F0F0", "#F2F2F2", "#F5F5F5", "#F6F6F6", "#F4F4F4", "#F7F7F7", "#FAFAFA", "#FCFCFC", "#FCFCFC", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#262525", "#A8A7A7", "#413D3D", "#524E4E", "#615C5C", "#0D0C0C", "#3B3737", "#706767", "#433D3D", "#595151", "#594F4F", "#776A6A", "#3A3232", "#807070", "#EBE8E8", "#302727", "#4A3D3D", "#615050", "#594747", "#836868", "#856A6A", "#4D3B3B", "#382A2A", "#604848", "#604848", "#755858", "#A88C8C", "#CDBBBB", "#EEE8E8", "#2A1E1E", "#BDA2A2", "#4A3333", "#F1EBEB", "#130D0D", "#332222", "#996666", "#AD8484", "#1D1313", "#281A1A", "#DFCCCC", "#965959", "#301A1A", "#5A2E2E", "#663333", "#994D4D", "#7B3B3B", "#823C3C", "#BA6868", "#CC8383", "#BA5252", "#260D0D", "#C04848", "#D17878", "#4D1A1A", "#CC6666", "#D88A8A", "#822626", "#BD3737", "#BD3737", "#E8ACAC", "#BA2D2D", "#330C0C", "#942222", "#A92727", "#C92C2C", "#941F1F", "#DE6262", "#F1BBBB", "#A62121", "#D62E2E", "#E36B6B", "#110303", "#E25858", "#661111", "#E87474", "#991818", "#EB7F7F", "#8F1414", "#EB6E6E", "#EC6363", "#FAD6D6", "#320606", "#ED6464", "#ED6362", "#E83535", "#F07877", "#F38A8A", "#F5A2A2", "#F27C7C", "#DB1414", "#AC0D0D", "#F24E4E", "#FABDBD", "#700808", "#800909", "#E50E0E", "#FA9B9B", "#880606", "#FA3E3E", "#690202", "#B90504", "#FB4848", "#FC1A1A", "#050000", "#050000", "#080000", "#990100", "#FF2121", "#FF2121", "#FF3D3D", "#FF4242", "#FF4746", "#FF4A4A", "#FF5252", "#FF5252", "#FF6161", "#FF6B6B", "#FF7474", "#FF7373", "#FF7575", "#FFA4A4", "#FFABAB", "#FFD3D3", "#FFD8D8", "#C46564", "#8A2F2E", "#D54C4A", "#CA221F", "#EB6765", "#F18886", "#EF7270", "#FCD0CF", "#F76F6D", "#F87E7B", "#400403", "#FB0C06", "#FC5956", "#FF4845", "#FF7876", "#FF8482", "#FF9E9D", "#5A3938", "#C97C7A", "#752E2B", "#D15C57", "#E1918E", "#A22C27", "#A32C28", "#DE7571", "#8A211D", "#E17572", "#DD423E", "#E77A77", "#590F0C", "#E4211B", "#EF746F", "#F06F6B", "#810E0B", "#F04842", "#3D0604", "#F67975", "#3B0503", "#FA6A64", "#FC9D9A", "#C90A02", "#FE6763", "#FF5D57", "#493736", "#703E3B", "#D6B3B1", "#B3544F", "#CF8884", "#F1DBDA", "#D65C56", "#DF7670", "#BD2F28", "#D83A31", "#BF2A23", "#DE4C45", "#F0AFAB", "#DB3026", "#E5625C", "#E03E36", "#E1473F", "#C21B12", "#F05C54", "#F7A29E", "#F88F89", "#F88D87", "#F84339", "#FE857E", "#FE958F", "#FE9D97", "#FEA6A2", "#FE6960", "#FE6C63", "#FE6962", "#9B0800", "#C90A00", "#FF4E44", "#FF5248", "#FF8A84", "#FF9C97", "#FFAAA6", "#654B49", "#9B726F", "#C1A2A0", "#AE736F", "#1C0F0E", "#B56A65", "#C88984", "#6B312D", "#622824", "#D18681", "#AE2F27", "#EEAEAA", "#EFA09B", "#DE3C2F", "#C0261C", "#E85A50", "#E32F21", "#F35F55", "#F76157", "#FA7F77", "#FF847C", "#FFC5C1", "#3E3433", "#BF9692", "#DAAEAA", "#B6554C", "#CD5B51", "#D97F76", "#D43B2D", "#E47267", "#C02C20", "#DD4538", "#E15244", "#7E1C13", "#70160E", "#F06D61", "#F5938B", "#E72313", "#EF4335", "#F34739", "#F75E50", "#F86254", "#F96153", "#FC8A80", "#FF695C", "#FF695C", "#FF7C70", "#FF948B", "#E2D9D8", "#8A6662", "#E6DDDC", "#42302E", "#342220", "#B88C87", "#71443F", "#ECDAD8", "#A95A52", "#4A2723", "#D39088", "#E6B0AA", "#F5DBD8", "#D14334", "#D96153", "#EFB0A9", "#EFAAA3", "#8C2318", "#E35241", "#C42311", "#EA2A15", "#F45D4C", "#F78376", "#FC4630", "#FE9B91", "#6F0B00", "#CF1500", "#FF6A5A", "#FF705F", "#FF9B8F", "#FFC2BB", "#FFDCD8", "#FFDBD7", "#56413E", "#9A736E", "#7E514B", "#7A4E48", "#A65D53", "#4F2621", "#CE938B", "#E3B8B2", "#C4594B", "#CE6B5D", "#E48679", "#E6867A", "#EE9C92", "#EE887A", "#F2A297", "#EB624F", "#7D1A0C", "#F07868", "#F18273", "#F59D92", "#F7A398", "#F67968", "#F67968", "#F85741", "#F95842", "#FCA89D", "#FB7968", "#FA3419", "#FC7765", "#D31900", "#514442", "#9D7E79", "#BD928B", "#4E2D28", "#CC8C82", "#75372D", "#913F33", "#C25848", "#DFA49B", "#CC5D4C", "#C2412D", "#E07767", "#D8523D", "#DB5643", "#BA3622", "#DE4F3A", "#E3604D", "#EA8676", "#D83018", "#280904", "#F07360", "#330A04", "#F68B7B", "#F0371A", "#F79585", "#6C1305", "#FCA699", "#C21A01", "#FF745F", "#FF8D7B", "#FFCDC5", "#FFD2CB", "#C6AEAA", "#A73E2B", "#E6AA9F", "#E49183", "#D95B45", "#A7321C", "#DE4126", "#CF391D", "#EF8E7D", "#F5B9AE", "#F9A799", "#F5634A", "#F54828", "#FAA191", "#FB573B", "#FC8C77", "#FC4B2A", "#FE9E8E", "#FF6D54", "#AF9C98", "#A48B86", "#473430", "#C3AAA5", "#281916", "#57342D", "#AE5543", "#EDC5BD", "#541F14", "#D95B43", "#D74F33", "#EB9D8D", "#F5C8BF", "#EC7963", "#E84B2C", "#E84624", "#EC6349", "#F06B50", "#F03813", "#F57E67", "#F88F79", "#AC2005", "#AD2003", "#FC694D", "#FA2A00", "#FF360E", "#FF370F", "#FFA492", "#7E6762", "#2C2321", "#423431", "#241714", "#301E1A", "#D28574", "#DC5B3E", "#EDAD9E", "#E45635", "#F09580", "#CC3917", "#F26C4F", "#F2502C", "#F36444", "#FC6747", "#FC370C", "#FF6543", "#FFA590", "#353130", "#2B2726", "#785D56", "#875346", "#C99E93", "#B77463", "#EAD1CB", "#E5B8AD", "#A8462D", "#E08E79", "#C54B2C", "#E0846D", "#EDA08C", "#E77155", "#F59982", "#F85931", "#F8572D", "#FEA189", "#FF6E49", "#FF6E4A", "#FF704D", "#FF7857", "#FFC1B2", "#9C8680", "#977E77", "#A78B83", "#4D3B36", "#33211C", "#49281F", "#C75233", "#D16344", "#E49D89", "#F3C6B9", "#DB4B23", "#CC3E18", "#E4491C", "#D34017", "#EB613B", "#F08E73", "#ED6D4A", "#F2977E", "#F38264", "#F2643D", "#F5886B", "#FB9274", "#FA3C08", "#FC3903", "#FEBEAC", "#F63700", "#FF714B", "#FF7752", "#4A403D", "#443A37", "#3B2E2A", "#412E28", "#3F2C26", "#C6A49A", "#ECDFDB", "#5A372C", "#5A3226", "#C98D7B", "#59291B", "#E47C5D", "#F7D7CD", "#EB7B59", "#EB6841", "#F6A68D", "#F6AA93", "#F59275", "#F7A48B", "#B9340B", "#F3450F", "#F89B7E", "#F66B40", "#F8764E", "#F98F6F", "#F98F6F", "#E33C08", "#FB6A3D", "#FB6B41", "#B32900", "#FF3D00", "#FF7E57", "#2F2C2B", "#70615C", "#604E48", "#382924", "#B18272", "#1A110E", "#F2E9E6", "#E6D1CA", "#A25D47", "#693726", "#CC7254", "#BD5532", "#E4A691", "#BF4D28", "#E3967D", "#B14623", "#E89A80", "#E68A6C", "#EB9A7F", "#E15E32", "#F0A991", "#F4BFAD", "#F6C7B7", "#F19474", "#F07951", "#F5A489", "#D53D0C", "#F2511B", "#F68C68", "#F68C68", "#F88863", "#FBBAA4", "#FDCFBF", "#FC6E3D", "#F03C02", "#F23E02", "#FEC0AB", "#B52C00", "#BE3100", "#FF4000", "#FF703F", "#FF9D7D", "#FFA588", "#98908D", "#6E5B54", "#52423C", "#4A362F", "#3D2922", "#EECFC4", "#D3643B", "#0D0502", "#DF5D2E", "#F0B49E", "#F0B49E", "#E16639", "#E88460", "#D54B1A", "#F17144", "#FAC7B4", "#FA6632", "#FCA483", "#FEAB8D", "#FEB89F", "#BD3200", "#D43A00", "#FF6933", "#FF8E65", "#6E6460", "#55443D", "#493831", "#482C21", "#633D2E", "#3F261C", "#D2A391", "#DA8F72", "#DA825F", "#D55C2B", "#E48B69", "#EFB198", "#EE9F80", "#F9DED3", "#DE4F15", "#F39772", "#F07241", "#F07848", "#F18052", "#F8B195", "#FAAD8E", "#FBB498", "#F85313", "#FEA887", "#EC4401", "#FE5412", "#FE7945", "#F84600", "#FFB294", "#766862", "#29221F", "#BCA297", "#6A4A3C", "#B28774", "#5E3929", "#CC9E8A", "#D6A692", "#A04B26", "#EFCABA", "#E8AE96", "#D9764D", "#E39B7D", "#E9A385", "#A14016", "#F2B8A0", "#B34212", "#E8591C", "#FA7F4B", "#FB8351", "#FEBEA3", "#FE6C2B", "#FA4B00", "#FFBDA1", "#FFCDB8", "#FFD2BF", "#FFE6DB", "#7D5D4E", "#D39679", "#F5D5C6", "#341405", "#EB6427", "#EE7E4C", "#F59B71", "#4C1B05", "#F8AF8C", "#F9A177", "#FA7F46", "#FC8E5B", "#FDAF8A", "#FC580C", "#230B00", "#FF824A", "#FF9563", "#FFB391", "#6E6662", "#574B45", "#85685A", "#83563F", "#A86B4C", "#C27B57", "#E6B39A", "#EECCBB", "#4A2512", "#DC8051", "#D96831", "#DE733E", "#F0C0A8", "#EDAB8B", "#61290E", "#A84818", "#EEAA88", "#EB9064", "#301406", "#EA804C", "#EB783F", "#ED834E", "#F5B494", "#EC6C2B", "#BA460D", "#F27435", "#C94B0C", "#F56217", "#F56218", "#F77C3E", "#F78145", "#F76E2A", "#FE9C6B", "#481800", "#FF6E27", "#FF9966", "#FFB48F", "#FFC4A6", "#D6C3B9", "#C5A898", "#94654C", "#D3AD98", "#CC9476", "#E7A17A", "#F2A176", "#F6B794", "#2C1001", "#FB6F24", "#F15500", "#FFDBC8", "#99928E", "#59483E", "#705647", "#A5826E", "#D7C7BE", "#805841", "#241811", "#774F38", "#D9AB91", "#D99973", "#CF6123", "#F0B593", "#DF621C", "#E46D29", "#FEF9F6", "#240F03", "#F7803C", "#FBBE9A", "#FC8D4D", "#FF823A", "#FF985E", "#FF995E", "#FFC6A5", "#998B82", "#4D433D", "#745E50", "#5C493D", "#D4C7BF", "#554236", "#C9AD9B", "#5E412F", "#9E6D4E", "#D1B4A2", "#DBC4B6", "#DEB297", "#E2AA87", "#F5E0D3", "#E6A37A", "#F7DECE", "#2C1507", "#E4844A", "#EB9E6E", "#E57C3A", "#D7621A", "#CC5B14", "#F0823F", "#F28A49", "#F7A472", "#EB5F07", "#FDD1B6", "#FEBF97", "#FEBF97", "#CC4E00", "#FF8030", "#FFB88C", "#FFD0B3", "#937460", "#A17457", "#D1B39F", "#EDD5C5", "#DBA887", "#EFD5C4", "#E7BFA5", "#EFD2BE", "#E6AC84", "#E19563", "#EB9961", "#D46419", "#DB6516", "#E86E1C", "#F4B58A", "#F1731F", "#F49859", "#F6A570", "#F6A168", "#F7A168", "#FCDDC8", "#F77014", "#F77825", "#FA8331", "#FB9553", "#FC6B0A", "#9E3F00", "#FF6600", "#FF7A24", "#FF9C5B", "#FFD3B5", "#FFD1B3", "#87796F", "#5C483A", "#BF9F88", "#CCAC95", "#20130A", "#E7C7B0", "#DEA37A", "#EBC4A9", "#EECAB1", "#E7A97E", "#C96823", "#E6A06F", "#EFBC98", "#4B2409", "#E87624", "#F2A772", "#F5BA90", "#F3A36B", "#F9CDAD", "#FB9C5A", "#FC7D23", "#FEC49B", "#FEA667", "#FA6900", "#FB6900", "#FF6A00", "#FF9A52", "#FF9A52", "#FF9A52", "#FFA463", "#FFA566", "#FFB884", "#FFBF91", "#FFCFAD", "#FFDABF", "#FFDABF", "#292522", "#5D544D", "#67594E", "#A39081", "#615145", "#6F5846", "#574435", "#564334", "#503D2E", "#E0C4AE", "#CB8E5F", "#CC8F60", "#EED7C5", "#633B1C", "#79451D", "#E3B18B", "#F3D7C2", "#1F1106", "#924F1B", "#ECA36C", "#F3A76D", "#F7C097", "#F38630", "#F8872E", "#FA8D3B", "#3B1A01", "#FC8020", "#FDA664", "#AC4A00", "#F96A00", "#FF8830", "#FFAA67", "#9A9088", "#A69A90", "#938172", "#E2DDD9", "#EEE9E5", "#4C3D31", "#594433", "#E3CEBD", "#68462B", "#C7956D", "#452C18", "#D5A57F", "#E0BA9B", "#D9A071", "#DE9153", "#7F4311", "#EFAE78", "#F8DAC2", "#E6781E", "#EE9B57", "#9D4E0F", "#EE7F27", "#F7C69F", "#ED7615", "#F07818", "#FAD3B2", "#FCE1CB", "#F68B36", "#FBC599", "#FBC599", "#FC913A", "#FD8D32", "#FECEA8", "#FF7D10", "#FF8826", "#FF9036", "#FFBD87", "#FFC391", "#FFE1C9", "#FFF9F4", "#403831", "#67594D", "#332C26", "#987F69", "#B49B85", "#D3B9A3", "#1C140D", "#F2E9E1", "#D7B89C", "#E5CBB4", "#CD8C52", "#E8CAAF", "#EDD4BE", "#E6A972", "#E58634", "#F4C9A3", "#F8D9BD", "#F07C19", "#F9BA84", "#E46F0A", "#FAB87F", "#FD9A42", "#FEBD84", "#3D1C00", "#FFAD64", "#FFBA7F", "#FFC897", "#7B7066", "#736558", "#917F6E", "#8D7966", "#BBAA9A", "#C9B8A8", "#CDBDAE", "#B39980", "#B39980", "#E0D2C5", "#7A5B3E", "#D1B8A0", "#E6D8CB", "#B47941", "#E6B280", "#E3A56B", "#5F3711", "#DE8531", "#EDB886", "#F07E13", "#F9C593", "#F58723", "#F67704", "#D46700", "#FF8006", "#FF8716", "#FFE3C9", "#3D3C3B", "#B2AEAA", "#665C52", "#B7AEA5", "#332D27", "#211D19", "#574C41", "#A6988A", "#85725F", "#917C67", "#AB9A89", "#E4DDD6", "#4E3F30", "#30261C", "#9D7C5B", "#D8C8B8", "#E7DDD3", "#D8A878", "#E4B17D", "#E8B787", "#F0CDAB", "#EBB57F", "#F0C69C", "#E68A2E", "#EB9C4D", "#F7D0A9", "#F3B578", "#7F440A", "#DC7612", "#FCE7D2", "#F2861B", "#F59330", "#F8B068", "#FA9F43", "#FEDCBA", "#FC7F03", "#FF8207", "#FF9934", "#FFA446", "#FFB870", "#FFC994", "#876F55", "#7A6248", "#D3B390", "#F7EADC", "#EAC195", "#E3A868", "#FAEDDF", "#F5DABD", "#E88A25", "#D8770C", "#F7AF63", "#F8A348", "#D56F00", "#FFC27F", "#605951", "#575048", "#B3ACA4", "#D4CDC5", "#6B5D4D", "#B39C82", "#B8A38B", "#5C4B37", "#E9E2DA", "#9F7B51", "#CFB699", "#E6D5C1", "#EFE1D1", "#D4A979", "#F8F1E9", "#99662D", "#CC883A", "#D69E60", "#EEC290", "#F1C694", "#EAA353", "#F2AF60", "#F2AD5E", "#F4A854", "#F7C081", "#F7BB75", "#FACB97", "#FCDFBD", "#F6921D", "#F8A13F", "#FCD8AF", "#E97F02", "#FE8B05", "#FF8800", "#FF8A00", "#FF9317", "#FF9D2E", "#FFBA6B", "#FFB969", "#5E5953", "#A8A39D", "#3A352F", "#63594D", "#9B8E7E", "#A69785", "#A69682", "#B0A18F", "#B5A28B", "#B9A58D", "#BFAB93", "#EFEAE4", "#B19676", "#A2825C", "#C6B299", "#DACDBD", "#C7B299", "#D7C3AB", "#CFB698", "#926D40", "#855F30", "#D6B58C", "#BB8138", "#E8C8A1", "#CF872E", "#F1C691", "#F6D5AD", "#F4C790", "#F9D6AC", "#3D2304", "#F7A541", "#F9BF76", "#F18809", "#FAB96B", "#DE7C04", "#FEAE4B", "#FFA02E", "#FFA739", "#FFB353", "#FFD6A3", "#85827E", "#655643", "#C0B19E", "#463A2A", "#7A6448", "#A68C69", "#C3B199", "#332717", "#C4975C", "#CC9E61", "#EDDBC4", "#F3E7D7", "#F6EBDD", "#DDB37D", "#E8CAA4", "#D89845", "#F7EAD9", "#F6E7D3", "#BD7A22", "#F1D4AF", "#F1D3AB", "#E8A249", "#ECB163", "#E79A32", "#E79022", "#DF8615", "#F2BD76", "#F7D3A3", "#FAE1C0", "#FCDCB3", "#FABA66", "#FEF1E0", "#FC930A", "#FD9407", "#361F00", "#FF9915", "#FFB350", "#FFBD68", "#FFDAAB", "#FFDEB3", "#58534C", "#978F84", "#7A6A53", "#B29A78", "#2B2318", "#AC8C5E", "#CFB590", "#DFCDB4", "#E6D0B1", "#B7833A", "#E6CBA5", "#E7CBA4", "#EDD8BB", "#C78933", "#E9CFAA", "#E0AE67", "#EBC288", "#E19F41", "#EDC68E", "#F5DDBB", "#EAB05E", "#EEB15B", "#F8DFBD", "#F0B96B", "#EFAE54", "#F8DCB4", "#D07E0E", "#F2A73D", "#F9D9AC", "#F0971C", "#FADDB4", "#F8C681", "#FBDCB0", "#F6AA3D", "#FCBF6B", "#FCBF6B", "#FCB653", "#E88700", "#FE9600", "#FF9F15", "#FFB145", "#FFB752", "#FFBB5E", "#FFDAA6", "#FFE2BA", "#FFE2BA", "#FFEACC", "#FFECD1", "#5E5A54", "#807462", "#4A4031", "#5A4E3C", "#B8AA95", "#E2D5C1", "#3A2D19", "#CDB28A", "#D1B68D", "#DABD90", "#E6D1B1", "#E8D5B9", "#D1A664", "#37260C", "#DEB069", "#DA9C3C", "#865A19", "#F6E6CE", "#EAC388", "#F6E5CB", "#EBB970", "#EBB667", "#FAEDD9", "#F5C273", "#F5B04B", "#FAD9A6", "#F6B149", "#FAB243", "#F99400", "#FF9900", "#FFA927", "#FFC978", "#FFF4E3", "#9C9994", "#2B2823", "#847B6D", "#403B33", "#7A6F5D", "#776C5A", "#52493A", "#8C7C62", "#8B7A5E", "#AD9978", "#DED6C9", "#967C52", "#E6DAC6", "#E8DDCB", "#EBDFCC", "#E8D5B7", "#5E4318", "#E2C18D", "#F9F2E7", "#EBCEA0", "#EBC588", "#E8B666", "#F7E4C6", "#F3D5A5", "#DF931B", "#EFAC41", "#F8D8A5", "#FBE2B9", "#F5B349", "#FCE4BE", "#F69A0B", "#F7A21B", "#F39708", "#F8A523", "#FBCF86", "#FDBF5C", "#FEDFAE", "#FFB238", "#FFB43E", "#FFC870", "#FFCC7A", "#FFDFAB", "#FFE4B8", "#FFE6BD", "#59554E", "#9D9382", "#302C25", "#B4A68E", "#EBE7E0", "#413726", "#A38A5F", "#BFAC8B", "#CCBCA1", "#E3DACB", "#E9E0D1", "#BFA374", "#D4BE99", "#EEE5D6", "#B99555", "#CDAF7B", "#DBC092", "#E7D3B0", "#CEA45C", "#E2C99F", "#F6EEE0", "#E8CC9C", "#F0DDBD", "#EFD9B4", "#F1DEBD", "#F1DDBA", "#E1B365", "#E8C382", "#F3DDB6", "#F4DDB4", "#EABA68", "#E7A83E", "#EEC276", "#F8E6C6", "#F8E4C1", "#EDB552", "#F6DAAB", "#FCF3E3", "#F4D092", "#F0A830", "#F6BE5F", "#FAD089", "#FDE6BD", "#EB9605", "#FEA304", "#FEAD26", "#FFC55F", "#FFD791", "#FFE3B3", "#FFE3B3", "#FFE7BF", "#FFECCB", "#FFEFD3", "#FFFCF7", "#837D72", "#635A49", "#BBB2A1", "#D1CBC0", "#665C49", "#524835", "#7A6949", "#C5B89F", "#D3C8B4", "#D3C8B4", "#B7A075", "#B9A173", "#BDA372", "#E9DFCC", "#D6BF93", "#674F23", "#F2E7D2", "#ECDBBC", "#F6EDDC", "#E0BE7E", "#EAD2A4", "#DFBA74", "#F3DCB2", "#F3DAAA", "#F5D393", "#F9E5C0", "#E89D10", "#EDA011", "#F5BE58", "#F8D28B", "#F4B036", "#F1A20B", "#FACF7D", "#FAC055", "#FCD487", "#FCCB6F", "#FCAB10", "#FFCA64", "#FFF1D7", "#353432", "#90856F", "#8A7E66", "#A89D87", "#A79B83", "#C1B398", "#C2B291", "#CCBD9E", "#CFBF9E", "#DED1B6", "#D1BD95", "#E0D3B8", "#C8B080", "#C9B180", "#D4C098", "#CDB380", "#CDB27B", "#E6D7B8", "#C59538", "#E9D6AF", "#E8D3A9", "#F2E3C6", "#F0DEBB", "#E1B866", "#E3BA6A", "#EFD8A9", "#F0D8A8", "#F0D8A8", "#F8ECD4", "#E2AC3F", "#E3AD40", "#F0D399", "#E3A72F", "#EEC77A", "#F6E2BB", "#F7E4BE", "#F3D597", "#E8A726", "#352504", "#F3C363", "#F0A818", "#F1AE2B", "#FDEECF", "#FCAF14", "#FCAE11", "#FFAA00", "#FFAB07", "#FFAB03", "#FFAD08", "#FFB319", "#FFB727", "#FFBE40", "#FFCE6F", "#FFF3DB", "#BDB8AD", "#A69A81", "#D8CCB2", "#D2C29F", "#CDBB93", "#CDBB93", "#A08447", "#AC8D49", "#C3AA72", "#806835", "#9F8241", "#DFD0AF", "#DDCAA2", "#EBDFC6", "#C39738", "#F4EAD5", "#E3C88F", "#DFBA69", "#CC982A", "#F0DDB5", "#E2BB64", "#E2B24C", "#F4E1B8", "#F5E2B8", "#F7E5BF", "#F1C972", "#F7DEA8", "#FBEED3", "#F1C15D", "#FDEECD", "#FACA66", "#FABA32", "#FCDA90", "#FCC755", "#FCAC03", "#FEE5AD", "#FAAB00", "#FFE4AA", "#FFEBBF", "#8A8780", "#7D7769", "#BCB7AB", "#24211A", "#29251C", "#9E906E", "#9E906E", "#312C20", "#988864", "#A59571", "#AD9A6F", "#E4DED0", "#E1DACA", "#B3A176", "#B39D69", "#E5DDCB", "#B59E67", "#EAE2CF", "#F5F1E8", "#D9C9A5", "#E5DAC0", "#C6AD71", "#D6C396", "#D6C292", "#DECBA0", "#DEC790", "#DABD7B", "#E1C78C", "#CC9B25", "#EFD8A4", "#ECCF8D", "#F2DFB1", "#F3E1B6", "#E6B33D", "#F2D694", "#F7E6BE", "#E6AC27", "#F2C45A", "#FDF6E6", "#F3C75F", "#FBE4AE", "#FAD889", "#FCE5B1", "#B88000", "#D59500", "#FFB300", "#FFB300", "#FFB914", "#FFCD57", "#FFDC8A", "#FFDD8C", "#FFE8B3", "#FFF1CF", "#FFF2D4", "#FFF5DE", "#FFF7E5", "#948A71", "#B7B09E", "#EDEBE6", "#7C7052", "#BCB091", "#C7BA99", "#3B331F", "#D4C9AD", "#D9CEB2", "#BCA875", "#594C2A", "#DCD1B4", "#E2D9C2", "#EAE3D1", "#DACDAC", "#F1ECDF", "#D6C496", "#DDC996", "#AD8B32", "#E3CF9E", "#F0E5C9", "#E2CB92", "#E9D7A9", "#F0E2BE", "#F5E8C6", "#E6BC56", "#F8EDD1", "#E8BF56", "#F7E3B2", "#B68810", "#F4D279", "#F7D683", "#F7CD67", "#FBE5AC", "#FABE28", "#FDCA49", "#FFBC11", "#FFE29A", "#FFE9AF", "#FFEBB9", "#FFEDBF", "#FFEEC2", "#FFF1CE", "#D1C5A5", "#C4B282", "#EAE3D0", "#F4F0E5", "#D0BC87", "#F2ECDC", "#E1D2A9", "#EBE1C5", "#E7D9B4", "#ECE1C3", "#E8D7A9", "#F7F1E1", "#EFE2BF", "#E3C77B", "#F0DDAA", "#A47F1A", "#EDD48E", "#F9EFD4", "#F5DD9D", "#F9EBC4", "#F9EABF", "#FAEDCA", "#EDB92E", "#F2CC67", "#F6D169", "#FACB4B", "#FDD86E", "#FEEDBF", "#FFC018", "#FFC219", "#FFC52C", "#FFE498", "#FFFBF0", "#4E4D4A", "#5C584C", "#948C75", "#9A927B", "#DAD6CA", "#BAB195", "#C0B698", "#96875A", "#C2B48A", "#DBD1B3", "#A89048", "#EDE7D5", "#EDE5CE", "#E8DDBD", "#392E0E", "#DBBF6B", "#EEE0B7", "#D1AA34", "#E8D18E", "#EEDEAD", "#F7EFD8", "#EBD592", "#F0DDA6", "#EDD58F", "#EBD07F", "#ECD079", "#EBCC6E", "#F0D890", "#E7C049", "#EAC761", "#F5E3AE", "#F5E1A4", "#F2D680", "#ECC039", "#FAEECA", "#F2C94E", "#F9DF94", "#795C06", "#FCEBB6", "#FDF1CC", "#F7BC05", "#7F6000", "#E6AE00", "#F0B300", "#FFCC33", "#FFCD37", "#FFD452", "#FFEAAD", "#FFEFC1", "#FFF5D6", "#FFF5D6", "#FFFAEB", "#D5D2C8", "#93865A", "#403A26", "#83764C", "#332E1D", "#EFECE2", "#C3B68C", "#D2C8A7", "#B39E58", "#D1C089", "#ECE5CE", "#F9F6EC", "#F1E7C5", "#F9F4E3", "#F3E6BC", "#FAF4E0", "#ECD078", "#EED47F", "#EDC951", "#F5DF98", "#F2CD4F", "#FBEEC2", "#AD860A", "#F8DB7E", "#F7C41F", "#FEF7E1", "#FCE185", "#FEE9A6", "#F8BE00", "#FFC300", "#FFC501", "#FFCA1B", "#FFDC68", "#FFE181", "#FFEFB9", "#FFF1C1", "#999175", "#A39B7E", "#A69E80", "#B7AE8F", "#BDB495", "#C2B895", "#9C8C51", "#E6E1CF", "#BCAC71", "#E6DDBC", "#897632", "#99822D", "#E3D49C", "#E8DBAD", "#F6F1DE", "#E1CE8A", "#E5D599", "#DEC87A", "#F5EED4", "#F2E8C4", "#EEDA95", "#F2E0A0", "#A88914", "#F8EBBE", "#F5E19C", "#F0CE4E", "#F7E6A6", "#ECBE13", "#ECBE13", "#F5DA7A", "#F2CC49", "#FCF3D2", "#F6D86B", "#F6D76B", "#F8DF82", "#FBEBAF", "#ECBA09", "#FCE07F", "#FDEBA9", "#FCD036", "#E4B302", "#FECD23", "#FFC803", "#FFD952", "#FFE792", "#FFE999", "#FFEFB5", "#FFF0B8", "#FFF4CE", "#706F6B", "#9A947C", "#DCD7C2", "#EDEADE", "#A19153", "#C7BD93", "#D1C8A3", "#E6E1CD", "#D9D0AC", "#D3C795", "#BCA95B", "#EBE5CE", "#F7F4E8", "#C5AD4B", "#CCB24C", "#E2D397", "#E9DEB0", "#F8F4E4", "#D7BF5E", "#EEDD99", "#EDD269", "#F4E196", "#F2D974", "#FAEFC2", "#F5DD7E", "#151101", "#FDF2C5", "#1E1801", "#FEE78A", "#FEDC57", "#FFD41F", "#FFEEAC", "#C6BE9A", "#C5BD99", "#D4CDAD", "#D6CEAA", "#BAAB6A", "#E6E0C5", "#CCBF82", "#D5CA98", "#DACB8A", "#D9C777", "#F4EED4", "#EDE3B4", "#E9DB9C", "#E8D890", "#F4EBC3", "#F0E2A4", "#F7E9AA", "#F7E8A6", "#F5CC17", "#F9CE07", "#FDEFB0", "#F0C505", "#F8CA00", "#FFEFA9", "#FFF9DE", "#FFFAE3", "#2C2B26", "#A9A17A", "#928854", "#E7E4D5", "#C5BC8E", "#1F1C0D", "#D9CC8C", "#C4AC30", "#D8C358", "#EEE097", "#EAD56C", "#FDFAEB", "#F0D442", "#F9D423", "#F9D423", "#FEF7D5", "#FEF7D5", "#FEF5C8", "#FEF5C6", "#FFE461", "#FFF2AF", "#FFF6C7", "#FFF8D4", "#85847E", "#939185", "#5B5847", "#A29D7F", "#A49E7E", "#CFCCBB", "#D4CEAA", "#E0DBBD", "#93842F", "#F1E9BB", "#F2EABC", "#F1E8B4", "#F7F1CD", "#F8F2CE", "#F5ECB7", "#F5EBB0", "#EDD75A", "#FCF6D2", "#FCF6D2", "#FAD928", "#FDF2B4", "#FEF0A5", "#FFF19E", "#FFF9D8", "#8C886F", "#595643", "#CBC8B5", "#D9D5BB", "#D6D1AF", "#CFC89A", "#E6E1C2", "#EEE9C7", "#C9B849", "#E8E0AE", "#DBCE79", "#F2ECC3", "#F2EAB7", "#F3ECBE", "#F5EEC3", "#F2E9B0", "#E9D558", "#F9F0B7", "#F1DB42", "#FCF7D7", "#F4DD51", "#F9E14B", "#FBEA80", "#FCEF9C", "#FCF09F", "#FCEE8C", "#696758", "#ACAA9B", "#A39C67", "#C5BE8B", "#CCC591", "#D8D3AB", "#928941", "#D4CE9E", "#CFC88F", "#BFB35A", "#DCD392", "#E9E4BB", "#D9CF85", "#F1EDD0", "#EFEAC5", "#9A8C29", "#DFD487", "#C4B432", "#E8DF9C", "#EBE3AA", "#E7DD96", "#E8DE92", "#EEE6AB", "#EFE8B2", "#E4D673", "#F7F3D5", "#F7F0BA", "#F5EA95", "#F7EEAA", "#F8F0AF", "#FBF6D0", "#FCF7D3", "#FCF7D1", "#F3D915", "#FCF4B6", "#F7DB15", "#FDF4B0", "#FDEC6F", "#FFEC5E", "#FFF18C", "#FFF7BD", "#FFF7BC", "#FFFAD3", "#26251C", "#BDBA9E", "#968F4B", "#D4CFA5", "#C6C085", "#CCC68D", "#D9D4A8", "#E0DCB8", "#E3DFBC", "#E3DFBA", "#ADA241", "#D6CE8B", "#E0DAA3", "#F0ECC9", "#EBE5B2", "#E5DB84", "#E9E199", "#CFBE27", "#F7F3CF", "#E8DA5E", "#E7D84B", "#F6F0BC", "#F4EB9E", "#FAF6D0", "#FAF5C8", "#F7EFA2", "#A89907", "#FFEE4A", "#FFF8BC", "#FFFBD4", "#96958A", "#CCC9AA", "#555231", "#CFCCA8", "#D9D5A7", "#DDD9AB", "#E0DBA4", "#E0DA96", "#DED787", "#EBE7B7", "#F2EFCE", "#DAD061", "#E1D772", "#EDE7A5", "#ECE488", "#F2ECB0", "#F0E999", "#E0D124", "#E6D839", "#F8F4C4", "#F8F3BF", "#E8D826", "#FCF9D8", "#FAF4B1", "#FCF7C5", "#FDF5A4", "#FDF37A", "#FFFCDD", "#7C7B6C", "#C2BF92", "#C6C39A", "#8C873E", "#E3E0B3", "#DFDB9C", "#EBE7A7", "#EBE7A7", "#EDE89D", "#A89F1D", "#EDE574", "#EDE574", "#E4D829", "#FCFADE", "#FCF9CE", "#FBF6B5", "#FCF59B", "#FDF57E", "#FEFAC2", "#B2A700", "#FFFAAC", "#FFFAB3", "#5D5C49", "#C1C0AE", "#9E9C71", "#E4E3CD", "#BFBC84", "#E8E7D2", "#DBD9B7", "#AFAB50", "#D1CE95", "#9E9A41", "#DBD8A2", "#D9D593", "#EDEBC9", "#F7F6E4", "#E0DC8B", "#E8E490", "#EFEBA9", "#EBE68D", "#F6F3C2", "#C4BC16", "#F8F5C1", "#FCF9C2", "#FDFAC7", "#FEFCD0", "#B8AF03", "#FEFAB6", "#B5AC01", "#BAB100", "#FFF538", "#FFFBB7", "#FFFDD1", "#FFFEEA", "#918F61", "#BAB997", "#535233", "#A5A36C", "#C2C092", "#DEDDC4", "#C8C696", "#D2D09F", "#E6E5C4", "#C5C376", "#DAD8A7", "#EDECCF", "#BBB749", "#E0DEAB", "#E3E1B1", "#E4E2AF", "#EFEECC", "#E2DF9A", "#F5F4D7", "#F6F5DA", "#D3CE3D", "#F1EFA5", "#4B490B", "#F6F4C2", "#EBE54D", "#FFFDC0", "#FFFDC0", "#FFFEDB", "#FFFEDF", "#FFFEE1", "#FFFEE4", "#757449", "#B1B080", "#BAB986", "#B5B479", "#DCDBAF", "#E0DFB1", "#D0CF75", "#DBDA97", "#E0DF9F", "#D6D578", "#D9D766", "#E4E391", "#EBEAA9", "#EDECB3", "#DEDB53", "#F6F5CD", "#EFED89", "#F8F69F", "#FDFCCE", "#FFFEC7", "#FFFEC8", "#FFFEC6", "#FFFEC7", "#10100F", "#DADAD8", "#2D2D29", "#848478", "#9D9D93", "#121210", "#161613", "#505045", "#3D3D34", "#F4F4F2", "#35352B", "#8B8B70", "#AAAA91", "#CCCCBB", "#ADAD8E", "#C0C0A8", "#070705", "#919167", "#919167", "#B0B087", "#A8A878", "#C8C8A9", "#C8C8A9", "#D8D8C0", "#D8D8C0", "#E3E3D1", "#B8B884", "#BBBB88", "#D7D7B8", "#DADABD", "#ECECDD", "#D8D8B2", "#E4E4C5", "#C9C987", "#C7C77F", "#E0E0B6", "#F9F9F1", "#F0F0D8", "#F0F0D8", "#F0F0D8", "#F0F0D8", "#F0F0D8", "#F0F0D8", "#F0F0D8", "#F0F0D8", "#E2E2B2", "#F8F8EC", "#F8F8EC", "#CDCD76", "#D4D489", "#E0E0A8", "#CCCC66", "#FEFEFC", "#F4F4DD", "#DDDD92", "#F6F6E2", "#EBEBBC", "#F9F9E7", "#C7C730", "#E7E79D", "#EBEBAB", "#F1F1C1", "#D6D644", "#E0E05A", "#F0F0AF", "#F8F8D6", "#D4D323", "#EBEB7F", "#F7F7C6", "#FAFAD7", "#FAFAD4", "#FCFCE2", "#F2F26F", "#F7F7A1", "#F7F799", "#FCFCD7", "#FEFEEB", "#FFFF00", "#FFFF96", "#FFFF99", "#FFFF99", "#FFFFC0", "#FFFFC2", "#FFFFCC", "#FFFFDD", "#FFFFE5", "#FFFFE5", "#FFFFEA", "#FFFFF7", "#FFFFFD", "#8F9044", "#A7A844", "#DDDEAD", "#E5E6B8", "#D8D989", "#D0D26F", "#D0D167", "#F0F1BC", "#F6F7BD", "#F9FAD2", "#F9FAD2", "#FEFFD4", "#FEFFD6", "#939473", "#A2A384", "#D8D9C0", "#DEDFC5", "#E5E6C9", "#ECEDD5", "#C4C776", "#EFF0D5", "#CDD071", "#E1E3AC", "#D5D87D", "#F1F2CE", "#C8CD3B", "#909320", "#F9FADC", "#FAFBE3", "#F5F7BD", "#ECF081", "#83870E", "#C8CE13", "#C8CF02", "#B0B19F", "#B2B39F", "#C8C9B5", "#D7D8C5", "#696B46", "#BBBD91", "#BDBF90", "#D3D5B0", "#A6AA56", "#DBDDB4", "#E4E6C3", "#DBDEA6", "#E7E9C4", "#B4B943", "#E9EBBF", "#F4F5DE", "#8B911A", "#E8ED76", "#FCFDEB", "#FAFCD3", "#FDFFD9", "#FDFFD9", "#BCBDAC", "#A8AB7B", "#C6C99D", "#B4B969", "#E4E6C9", "#A3A948", "#F3F4E5", "#B7BE5F", "#DEE1B6", "#A6AD3C", "#DDE29F", "#D8DE7D", "#E7EBB0", "#E5EAA4", "#CCD91A", "#EAF27E", "#E5F04C", "#EBF74F", "#F8FCC1", "#C4D004", "#6A6B5F", "#898B75", "#9D9F89", "#AEB18E", "#A8AB84", "#CED0BA", "#CDCFB7", "#D2D5AF", "#BEC47E", "#F0F2DC", "#CAD17A", "#D6DD90", "#CDD56E", "#C0CC39", "#8F9924", "#E6EBA9", "#D1DC5A", "#0C0D02", "#FBFFCC", "#FBFFCD", "#FCFFD9", "#9D9E94", "#E2E3D9", "#BCBFA3", "#95A131", "#E0E6AE", "#EBEFC9", "#EFF3CD", "#D4E067", "#C4D428", "#D8E472", "#F0F6B9", "#849112", "#DCEB5B", "#8D9C09", "#DAF204", "#929867", "#7B8055", "#A2AB5E", "#CAD197", "#9DAB34", "#C0D23E", "#DAE681", "#808F12", "#B7CC18", "#D9EB52", "#8A9B0F", "#EDF79E", "#A3B808", "#F4FCB8", "#FBFEE5", "#F6FFB3", "#9BA657", "#C2C995", "#0C0D05", "#E5EBBC", "#93A42A", "#B3C631", "#EDF3C5", "#F1F6CE", "#E3E5D7", "#CBCFB4", "#C6CCA5", "#C8D197", "#B1BF63", "#A0B046", "#B3C262", "#9DAD42", "#DFE9A8", "#DAE98A", "#E6F0AF", "#F1F7CD", "#D1E751", "#F4FAD2", "#FAFDEA", "#EEFAA8", "#DBF73B", "#E8FF65", "#FBFFE3", "#A9AD94", "#AEB395", "#A4AB80", "#C5CBA6", "#E0E4CC", "#B7C27E", "#BECB7C", "#CED89D", "#E1EAB5", "#A8C030", "#D6E68A", "#9BB61B", "#CDE54E", "#8CA315", "#ECF6BB", "#CED1C0", "#D5D8C7", "#DDE0CF", "#BCC499", "#E0E4CE", "#E3E8CD", "#B6C474", "#DAE5AB", "#E9F0C9", "#758918", "#D4EE5E", "#EAFF87", "#82837E", "#474843", "#B1BA8E", "#899752", "#D4DDB1", "#A7BA59", "#F6F8EE", "#B0C65A", "#99B333", "#E2EDB7", "#C0D860", "#D1E389", "#CBE65B", "#A7CC15", "#D8F171", "#E6F99D", "#E8F9A2", "#B0DA09", "#BDEB07", "#83A300", "#D2FF1F", "#81876C", "#25271E", "#B2BB91", "#C8CFAE", "#D8DEC3", "#BBCD77", "#B3CC57", "#F4F8E6", "#191F04", "#FCFEF5", "#CAF729", "#BEF202", "#C8FF00", "#C4CAB0", "#99A66D", "#A7B381", "#DDE3CA", "#E5EAD4", "#A9BD68", "#BED084", "#E7EED0", "#DEE8BE", "#B5CC6A", "#DBE7B4", "#E1EDB9", "#CAE081", "#F0F7DA", "#F0F7DA", "#A7CD2C", "#C0DE5D", "#CEE879", "#C5E65C", "#CBE86B", "#CBE86B", "#EDFFB3", "#D4D6CE", "#E1E3DB", "#D9DDCD", "#C6D1A6", "#C3D297", "#D5E0B5", "#DCEBAF", "#E5F3BA", "#B4DF37", "#E4F5B1", "#E6F8B1", "#8FBE00", "#C4FF0D", "#CCFF33", "#F0FFC2", "#F3FFCF", "#7C8071", "#D7DACF", "#E1E6D3", "#D1DAB9", "#B3C67F", "#D2E1A7", "#ACC95F", "#D9E8AE", "#C9DF8A", "#BADA5F", "#BADE57", "#B9DE51", "#ABDB25", "#AEDD2B", "#C8EB6A", "#BEEE3B", "#6B8F0B", "#F3FFD2", "#939E78", "#F0F2EB", "#C5CEAE", "#97AA66", "#95AA61", "#D7DFC3", "#CAD5AD", "#E0EEBD", "#E3F5B7", "#B6FF00", "#CAFF42", "#F0FFC9", "#C8CBC1", "#A1AC88", "#B8C2A0", "#95A868", "#C7D1AF", "#94B053", "#D0DCB3", "#DCE9BE", "#D0E799", "#DCEEB1", "#CEE891", "#E0F3B2", "#AEE239", "#F4FCE2", "#BFFA37", "#88C100", "#F1FFCF", "#7C8569", "#8F9E6F", "#C3CCAF", "#91A566", "#BAC99A", "#657A38", "#C6D7A0", "#C9DAA4", "#D4E2B6", "#B1CF72", "#C0D88C", "#BADB73", "#AEE637", "#E6F9BC", "#C7F464", "#EFFFCD", "#121310", "#C4CEB0", "#768A4F", "#789048", "#A8C078", "#A6BF73", "#C0D890", "#D6E6B7", "#ECF8D4", "#AAFF00", "#F1FFD5", "#AFB7A0", "#C4CBB7", "#A5B090", "#DAE2CB", "#CAD7B2", "#D2E7AA", "#CCEE8D", "#CEF781", "#E0FBAC", "#D8FD94", "#DFFDA7", "#A6B985", "#92B35A", "#D0DEB8", "#647E37", "#CCDEAD", "#E3EDD2", "#B9D48B", "#A0C55F", "#BDDB88", "#D0EAA3", "#C8E98E", "#7AB317", "#9EAF83", "#C0CEAA", "#B8C99D", "#B8C99D", "#C4D4AB", "#C7D8AB", "#88C425", "#C2FC63", "#C0C2BD", "#E6E8E3", "#11130E", "#CCD6BD", "#B1C592", "#92B55F", "#DCEDC2", "#E1F5C4", "#E1F5C4", "#E1F5C4", "#E1F5C4", "#CCF390", "#E5FCC2", "#DDFFAB", "#A3AB98", "#88A65E", "#D6E1C7", "#D6E4C3", "#DBEDC2", "#CDEDA1", "#E9FCCF", "#3B3E37", "#697060", "#E1EDD1", "#A4C972", "#A3D95B", "#BEED80", "#BDED7E", "#D9F5B5", "#A9F04D", "#AEF055", "#CCFC8E", "#E5FEC5", "#AAB69B", "#AAB69B", "#9EAE8A", "#9EAE8A", "#BACCA4", "#94BA65", "#D6E6C3", "#99DB49", "#7A8370", "#839074", "#879676", "#96A782", "#BAC9A9", "#9FB982", "#94BB68", "#CDE4B3", "#E7FCCF", "#EEFFDB", "#A0AB94", "#ACBA9D", "#A6C288", "#A7C686", "#A5CC7A", "#C4E0A6", "#90FF17", "#DCFFB6", "#2D2E2C", "#353634", "#949A8E", "#7C8A6E", "#CAD1C3", "#384030", "#607848", "#C6D4B8", "#A8C090", "#E1ECD6", "#BAF77C", "#D8FCB3", "#E0FFC2", "#718063", "#89A46F", "#BCD9A0", "#C9E5AF", "#8FD053", "#9FD86B", "#E2F7CE", "#E0FFC3", "#A4AC9D", "#8FA080", "#D1DBC8", "#A8BD95", "#C6D6B8", "#BFD4AD", "#B6D0A0", "#9FB38F", "#A6BF91", "#BED6AB", "#D3E4C5", "#ACCE91", "#B9D7A1", "#E4F3D8", "#A9B79E", "#ABBB9F", "#BFCDB4", "#AABE9B", "#B7C9A9", "#CDDBC2", "#D2DFC8", "#B7D1A3", "#A6C88C", "#C0DBAB", "#B6D89C", "#9EB48E", "#A8BB9A", "#C4DBB4", "#CDE0BF", "#BFD8AD", "#9ACC77", "#B2DE93", "#BFFF91", "#AEBEA3", "#668C4D", "#B5CEA4", "#A3C68C", "#A4CA8B", "#BADDA3", "#BCDEA5", "#A9DA88", "#F8FEF4", "#E0FFCC", "#F3FFEB", "#708066", "#C8D6BF", "#2A5C0B", "#D1F7BA", "#7F9473", "#B3C8A7", "#ACC59D", "#B2CBA3", "#A8C896", "#77AB59", "#B6D3A5", "#B3E099", "#E6FCD9", "#E4FFD4", "#C8D9BF", "#B7E1A1", "#A4F479", "#829D74", "#A2CA8E", "#D3EBC7", "#010300", "#85AE72", "#9ABC8A", "#BCE1AB", "#6ECF42", "#B8FD99", "#56704B", "#D0DCCB", "#9BB78F", "#A2BC97", "#CBE5C0", "#9AE07D", "#BEC3BC", "#92A68A", "#BFD4B7", "#78AE62", "#BBDEAD", "#6D756A", "#93BA85", "#ABEE93", "#E9FFE1", "#84967E", "#7B9971", "#C6D8C0", "#B9D3B0", "#34502B", "#D1FFC2", "#BDD3B6", "#A8C99E", "#A6E094", "#CAF2BE", "#D8FFCC", "#575E55", "#496940", "#B8D6B0", "#7ABF66", "#7CD164", "#AFCCA8", "#79B36B", "#D8F5D1", "#394736", "#A8C4A2", "#3D423C", "#9FB39B", "#6E9167", "#EAFDE6", "#8CCC81", "#D3F7CD", "#AEC2AB", "#B2CBAE", "#8DB986", "#B9D9B4", "#95C68F", "#519548", "#36802D", "#8E978D", "#9CAD9A", "#B2CCAF", "#D7E8D5", "#C8E3C5", "#CDE9CA", "#CDE9CA", "#A9CBA6", "#CAE0C8", "#9EC89A", "#B1CEAF", "#73B06F", "#91C68D", "#234D20", "#95DE90", "#8CA38B", "#A3B6A2", "#8EA88D", "#99B898", "#CDECCC", "#4F784E", "#B4DFB3", "#A4D9A3", "#BFEDBE", "#4F504F", "#8C998C", "#AABFAA", "#648A64", "#CAD9CA", "#A1C0A1", "#9DC19D", "#CDDFCD", "#DDEADD", "#80B380", "#9ED99E", "#E0F7E0", "#C2FFC2", "#AAE3AB", "#C5FEC6", "#96B397", "#BFE0C0", "#BFE3C0", "#B1FCB3", "#72AD75", "#AADEAD", "#79DD7E", "#AEBFAF", "#A5C3A7", "#B0D1B2", "#A2CCA5", "#91C494", "#53AC59", "#B6DEB9", "#7A907C", "#5C735E", "#8FA691", "#92B395", "#91BE95", "#A2CAA5", "#86C28B", "#A7DBAB", "#8EE696", "#C4FFC9", "#859987", "#C5CFC6", "#A3C9A7", "#BCD8BF", "#CEEBD1", "#AAB3AB", "#C0D1C2", "#B1CCB4", "#EDF6EE", "#BFE3C3", "#ACDEB2", "#7FDA89", "#B5F4BC", "#042608", "#A6F6AF", "#BAFDC2", "#678D6C", "#8EBE94", "#A6ADA7", "#7C917F", "#5D7E62", "#C7DCCA", "#B1D4B6", "#ADE4B5", "#637566", "#79927D", "#79927D", "#829B86", "#93BD9A", "#B6D4BB", "#ABCCB1", "#909A92", "#96B49C", "#97B59D", "#B4CCB9", "#9DBFA4", "#CCE4D1", "#D4DDD6", "#8EAA94", "#98C3A1", "#3E6B48", "#C1DDC7", "#77B885", "#A3E3B1", "#38C958", "#738C79", "#75A480", "#6DA67A", "#6DA67A", "#B2D5BA", "#B4DEBE", "#BCE3C5", "#D4F1DB", "#9DE0AD", "#58CE74", "#D4F7DC", "#C4C8C5", "#8CAB94", "#87B091", "#65A675", "#8CBF99", "#8CD19D", "#CDF2D6", "#7CF49A", "#5E8C6A", "#C2E4CB", "#B5E8C3", "#6D8D76", "#A1C5AB", "#92BF9F", "#91C09E", "#8BC59B", "#B6DEC1", "#BDEBCA", "#A9BAAE", "#6D997A", "#A3CCAF", "#B6D8C0", "#9CD0AC", "#3B8952", "#A1DBB2", "#31A252", "#8DE0A6", "#D1F3DB", "#BFF1CE", "#13CD4A", "#C7FCD7", "#CFFFDD", "#79A687", "#92C7A3", "#BBDEC6", "#B4DEC1", "#75C58E", "#85CC9C", "#A0E8B7", "#161917", "#B8CABE", "#6A9277", "#0B110D", "#CCDED2", "#85B394", "#9DC9AC", "#9DC9AC", "#3A7B50", "#9AEDB5", "#A5B3AA", "#BFD6C7", "#7CB490", "#96C3A6", "#94C5A5", "#9FD9B3", "#A5B5AB", "#ADC0B4", "#96B7A2", "#84B295", "#BED9C8", "#80BC96", "#8CC2A0", "#B6D9C3", "#ADD6BC", "#78BD91", "#A4DCB9", "#94E0B0", "#B5F7CD", "#89FCB3", "#91A398", "#B3C5BA", "#BECEC4", "#89B399", "#88B499", "#BED6C7", "#BFE4CD", "#9BDAB3", "#C0EFD2", "#E1E6E3", "#B7CBBF", "#62A07B", "#70AA87", "#6BB88A", "#D2FAE2", "#A3FEC7", "#76877D", "#AFC7B9", "#66997B", "#A1C0AE", "#67B588", "#73BC91", "#D6ECDF", "#3FD97F", "#00B34C", "#6E9A81", "#7BA58D", "#63997A", "#62997A", "#92BEA5", "#C8DFD2", "#429867", "#A7E3C1", "#94F9BF", "#D5DED9", "#67917A", "#84AF97", "#7DAD93", "#A9CCB9", "#59A87D", "#4FB37C", "#89A194", "#619177", "#96BDA8", "#97BEA9", "#79AE92", "#7CBC9A", "#53BA83", "#88D3AB", "#98D9B6", "#9ADCB9", "#BAD3C6", "#599476", "#78B395", "#97C4AD", "#B8D9C8", "#6BB38E", "#9ED1B7", "#C3E6D4", "#595B5A", "#343635", "#494D4B", "#E7EDEA", "#78A890", "#78A890", "#C1D9CD", "#5D9E7E", "#A0CAB5", "#82BFA0", "#45936C", "#8DCCAD", "#59D999", "#A7EBC9", "#83988E", "#96B5A6", "#74AB90", "#98C7B0", "#26503C", "#CDEADC", "#B9F1D6", "#3DDB8F", "#A6B5AE", "#5E8271", "#9DBFAF", "#A8CABA", "#CEE1D8", "#DFECE6", "#88BAA3", "#B3DBC8", "#77CCA4", "#A5E6C8", "#A8E7CA", "#83AF9B", "#8BB6A3", "#ABCCBD", "#74BF9D", "#75C9A3", "#057C46", "#C5FFE5", "#7CAA96", "#00C16C", "#ACBFB7", "#688A7C", "#6E9987", "#80AB99", "#88B6A3", "#ACCEC0", "#72AE95", "#66AF91", "#81BDA4", "#80BCA3", "#7BBDA1", "#7EBEA3", "#489C79", "#95CFB7", "#258A60", "#A4F7D4", "#7B8A84", "#5F9982", "#95D0B8", "#67BE9B", "#B1E6D1", "#85E6C0", "#46685B", "#77A493", "#89B2A2", "#5D917D", "#9EC7B7", "#9ECFBC", "#92CCB6", "#59B390", "#C6E5D9", "#A8E6CE", "#D3F7E9", "#149C68", "#00C176", "#51615B", "#6B9E8B", "#C1D9D0", "#93C2B1", "#7DB8A2", "#65AC92", "#66AC92", "#82BDA7", "#2D5E4C", "#73C8A9", "#ABDECB", "#DAF3EA", "#07F9A2", "#748B83", "#5B756C", "#6D9788", "#92B2A7", "#BAD1C9", "#A3C3B8", "#619885", "#8AB8A8", "#9EC6B8", "#63B397", "#60B99A", "#379F7A", "#A9E4CF", "#6E837C", "#718F85", "#CBDAD5", "#395A4F", "#59A68C", "#76B5A0", "#94C7B6", "#6BB39B", "#78C0A8", "#8DC9B5", "#4DAB8C", "#79C3AA", "#8ACBB5", "#7FC7AF", "#73C5AA", "#BDEADB", "#79D6B7", "#0F684B", "#60F0C0", "#09C184", "#C4FFEB", "#88B8A9", "#A2C7BB", "#8CBFAF", "#67B79E", "#72BCA5", "#9CDDC8", "#77D4B6", "#61D4B0", "#D0F2E7", "#98E9D0", "#7E9991", "#6E8F85", "#B1CCC4", "#51BD9C", "#125A44", "#88EED0", "#0A996F", "#00875E", "#74AA9B", "#C4DDD6", "#C3DFD7", "#77B8A6", "#8FC9B9", "#6CBAA4", "#80D3BB", "#69D0B3", "#A2E5D2", "#11644D", "#0DE5A8", "#849B95", "#89A09A", "#8CAAA2", "#A7C5BD", "#83B8AA", "#75BAA8", "#84C1B1", "#40957F", "#9DDBCA", "#AEE1D3", "#5AC7AA", "#259073", "#ADEADA", "#0A8967", "#49FECF", "#ACFFE9", "#7B8F8A", "#9EAEAA", "#D3DBD9", "#D9E1DF", "#96B5AD", "#78B3A4", "#99C9BD", "#A2D3C7", "#9DDACB", "#BCEBDF", "#3EC9A7", "#29FFC9", "#9EC4BB", "#53A08E", "#8DC4B7", "#88C3B5", "#6CB6A5", "#6FBCAA", "#3F8978", "#9CD6C8", "#ADDFD3", "#24B694", "#394240", "#566965", "#4D8F81", "#56A292", "#76BCAD", "#65B8A6", "#AAE6D9", "#22806B", "#2ECBAA", "#25E4BC", "#6CF3D5", "#00755C", "#525C5A", "#1A1F1E", "#607873", "#56877D", "#72B1A4", "#1C997F", "#AAF2E4", "#5A7F78", "#3E5954", "#5E9188", "#79ABA2", "#7FB1A8", "#548C82", "#74B3A7", "#7EBEB2", "#68BAAB", "#59BAA9", "#52BAA7", "#24B399", "#14C3A2", "#0B8770", "#028F76", "#7A8C89", "#4E6B66", "#54736E", "#36544F", "#3D615B", "#6EA49B", "#BDD6D2", "#335650", "#498379", "#61ADA0", "#37AB98", "#77F2DE", "#06D9B6", "#8B9E9B", "#426B65", "#7BB0A8", "#8EBDB6", "#79B5AC", "#C5E0DC", "#36BBA6", "#DCF7F3", "#0D6759", "#02483E", "#000706", "#485755", "#85A29E", "#64908A", "#86B8B1", "#487D76", "#77B1A9", "#7FB8B0", "#33605A", "#72BAB0", "#66B6AB", "#A0DED6", "#C7EDE8", "#16453F", "#5BCEBF", "#2EB3A1", "#C5F7F0", "#BCF7EF", "#4AEDD7", "#B9F8F0", "#02907D", "#C1C9C8", "#58706D", "#8FBFB9", "#6CC4B9", "#81D7CD", "#4ACABB", "#34BAAB", "#ABECE4", "#0C5149", "#03453D", "#069E8C", "#A1C1BE", "#314D4A", "#80B0AB", "#82B3AE", "#5A9B95", "#7DBEB8", "#93CCC6", "#6CBDB5", "#42988F", "#88D1CA", "#ADE0DB", "#091C1A", "#53CBBF", "#31ADA1", "#23998E", "#19B5A5", "#13C8B5", "#009989", "#495453", "#88A19F", "#71CBC4", "#7CD7CF", "#25857D", "#288D85", "#2FB8AC", "#2EB8AC", "#71DBD2", "#11665F", "#11766D", "#11BAAC", "#0CCABA", "#6D8B89", "#A3C4C2", "#2F615E", "#9FD6D2", "#D0ECEA", "#31827C", "#3FB8AF", "#349E97", "#4ECDC4", "#32C2B9", "#00988D", "#00CCBE", "#4D6160", "#6B9795", "#6B9997", "#6CA19E", "#213635", "#6CA6A3", "#79B7B4", "#459A96", "#3B8C88", "#A7DBD8", "#45ADA8", "#7ECECA", "#2D938E", "#69D2CD", "#2CB8B2", "#1EA49D", "#0F928C", "#00FFF2", "#A4BDBC", "#84ABAA", "#4F8B89", "#ADD4D3", "#368986", "#1F6764", "#1F6764", "#1CA39E", "#0A837F", "#0DB2AC", "#076461", "#08807B", "#078A85", "#02FCF3", "#69A5A4", "#5B9B9A", "#5BB7B6", "#319190", "#50C8C6", "#248F8D", "#36CECC", "#166665", "#0A5C5A", "#0EAEAB", "#09A6A3", "#0ABFBC", "#036564", "#026F6E", "#029B99", "#002C2B", "#004443", "#383939", "#D3D5D5", "#585D5D", "#D9DBDB", "#343838", "#4B5757", "#5C6E6E", "#789090", "#C6D6D6", "#DEE7E7", "#80A8A8", "#8CB0B0", "#9DBCBC", "#669999", "#EBF2F2", "#080D0D", "#C0D8D8", "#1A2B2B", "#3D6868", "#244242", "#336666", "#99CCCC", "#C1E0E0", "#418E8E", "#3CA2A2", "#184848", "#339999", "#309292", "#2A8B8B", "#49CCCC", "#259B9B", "#114D4D", "#1C8080", "#21A3A3", "#21B6B6", "#17A7A8", "#0C7E7E", "#0C8F8F", "#0EC0C1", "#059B9A", "#006060", "#006666", "#007878", "#008584", "#66FFFF", "#C0FFFF", "#7DB4B5", "#57C5C7", "#134647", "#0F7D7E", "#10898B", "#0CE3E8", "#058789", "#D2FDFE", "#006465", "#007E80", "#00B5B9", "#00B9BD", "#C5DFE0", "#539FA2", "#3B8183", "#142F30", "#348E91", "#1C5052", "#339194", "#1F5F61", "#2C9FA3", "#32B9BE", "#30C4C9", "#14888B", "#16C1C8", "#0E9094", "#0B8185", "#07A2A6", "#027B7F", "#00686C", "#17F9FF", "#A8BCBD", "#283D3E", "#213435", "#A5C8CA", "#5E9FA3", "#43777A", "#429398", "#1B676B", "#31D5DE", "#0E8D94", "#03484C", "#079EA6", "#00C9D2", "#AFFBFF", "#909D9E", "#8D9C9D", "#668284", "#AFCACC", "#B9D7D9", "#61A6AB", "#84BFC3", "#3D7B80", "#6AC5CB", "#195E63", "#269199", "#26979F", "#1E8C93", "#136066", "#0CA5B0", "#09A3AD", "#05676E", "#05A1AD", "#018790", "#001F21", "#B8FAFF", "#B9C3C4", "#2D3839", "#648285", "#689195", "#53777A", "#EBF7F8", "#CEECEF", "#40C0CB", "#207178", "#13747D", "#0AABBA", "#00A0B0", "#E8FDFF", "#69A2A8", "#44878F", "#58AFB8", "#3EA3AF", "#185B63", "#2197A3", "#27B1BF", "#029DAF", "#3B4344", "#54787D", "#AECED2", "#E0EFF1", "#3E838C", "#45AAB8", "#45B5C4", "#2B818C", "#063940", "#002E34", "#005F6B", "#008C9E", "#00B4CC", "#00DFFC", "#60ECFF", "#85AAB0", "#334F53", "#649EA7", "#6AABB5", "#2C6B74", "#D1EAEE", "#2A6E78", "#1B8798", "#1693A5", "#1693A5", "#158FA2", "#1693A7", "#00272D", "#004853", "#8F9A9C", "#BDCDD0", "#CBDCDF", "#72A5AE", "#B1E1E9", "#1D5E69", "#13444D", "#2B9EB3", "#5ECDE0", "#157A8C", "#05D3F8", "#002930", "#00A8C6", "#99B2B7", "#2E4347", "#547980", "#538A95", "#1C5560", "#4BB4CA", "#69D2E7", "#0A3740", "#1BB0CE", "#0FC3E8", "#00CEF5", "#657275", "#506266", "#8BA6AC", "#0B1D21", "#9DD3DF", "#1EC3EA", "#09738A", "#00CAF8", "#C9D1D3", "#4D686F", "#A8BDC2", "#314C53", "#24434B", "#CBE4EA", "#2B879E", "#88A1A8", "#466067", "#89ABB4", "#A9C2C9", "#2C4D56", "#5CCEEE", "#24C0EB", "#046D8B", "#0194BE", "#003E4F", "#6BACBF", "#5CACC4", "#061013", "#2E97B7", "#2790B0", "#96D7EB", "#106B87", "#50595C", "#6F8B94", "#7A959E", "#B8C7CC", "#89A7B1", "#9FB9C2", "#4F8699", "#215A6D", "#194756", "#3299BB", "#095169", "#02779E", "#6D7578", "#678C99", "#2D6073", "#8AC7DE", "#0A6789", "#033649", "#038BBB", "#616668", "#4A5F67", "#176585", "#26ADE4", "#4DBCE9", "#0A516D", "#04394E", "#005C81", "#009DDD", "#00B4FC", "#63D3FF", "#899AA1", "#1E2528", "#2A363B", "#295264", "#204B5E", "#4EB3DE", "#045071", "#3E4B51", "#7E949E", "#457D97", "#268FBE", "#013750", "#ABE4FF", "#C1C5C7", "#0A0C0D", "#33454E", "#5B7C8D", "#142026", "#030506", "#3B657A", "#00AAFF", "#8EB2C5", "#2B5166", "#0E2430", "#123142", "#D7EEFA", "#0B4462", "#066699", "#0074B4", "#405059", "#3C515D", "#65727A", "#434D53", "#98A5AD", "#8DAEC3", "#447390", "#0A5483", "#021B2B", "#36393B", "#47667B", "#5B88A5", "#1F2F3A", "#49708A", "#88ABC2", "#BDD1DE", "#090F13", "#D0E0EB", "#8AB3CF", "#4180AB", "#0A4B75", "#09456C", "#003F69", "#E4EBF0", "#1E6495", "#02416D", "#171F25", "#15212A", "#487AA1", "#274862", "#172C3C", "#5191C1", "#152B3C", "#E9F2F9", "#8CBFE6", "#B2D9F7", "#001F36", "#A1A6AA", "#586875", "#3A89C9", "#9CC4E4", "#0F4571", "#031C30", "#A2A9AF", "#4E5861", "#355C7D", "#44749D", "#142738", "#027FE9", "#4E5C69", "#C6D4E1", "#142433", "#8DBDEB", "#03223F", "#68B2F8", "#7A7B7C", "#838689", "#1A1B1C", "#45484B", "#626970", "#15191D", "#7890A8", "#839CB5", "#020304", "#2B4E72", "#556270", "#556270", "#536D88", "#253342", "#228DFF", "#51647A", "#122F51", "#005BC5", "#566981", "#4771A3", "#0B2E59", "#6E7B8C", "#424E5E", "#536C8D", "#041122", "#969BA2", "#48586F", "#092B5A", "#606D80", "#DCE0E6", "#3B5274", "#567EBB", "#2B4C7E", "#0D192B", "#386DBD", "#80B3FF", "#384252", "#333E50", "#1C232E", "#08295E", "#031634", "#273142", "#6C788E", "#2B364A", "#010D23", "#3E4147", "#CFD5E1", "#364461", "#020305", "#304878", "#1B325F", "#001848", "#1B66FF", "#FCFDFF", "#74819D", "#243A69", "#012677", "#373B44", "#A6AEC1", "#294380", "#DCE4F7", "#000511", "#2A2C31", "#3B3F49", "#BFCFF7", "#6F737E", "#4C5E91", "#19274E", "#001449", "#6F95FF", "#495168", "#1C2130", "#111625", "#575A65", "#292C37", "#3A415A", "#141827", "#2B2C30", "#5C627A", "#1D2440", "#F7F8FC", "#506EE5", "#D1D3DC", "#33384E", "#101942", "#53576B", "#3B4058", "#464D70", "#1A1C27", "#242739", "#2F3559", "#272D4D", "#1C31A5", "#101F78", "#010937", "#020F59", "#0F132E", "#030D4F", "#000524", "#17181F", "#4B538B", "#404467", "#D0D2E3", "#A5AAD9", "#1B1C26", "#525574", "#5C65C0", "#101652", "#5A5C75", "#616382", "#888DDA", "#0D0F36", "#7375A5", "#02031A", "#1F1F20", "#626266", "#D9D9DB", "#161618", "#66666E", "#111113", "#4B4B55", "#0B0B0D", "#383845", "#73738D", "#282832", "#606078", "#424254", "#3E3E53", "#77779D", "#EDEDF2", "#34344E", "#2F2F4D", "#12122B", "#181848", "#000039", "#2C2B4B", "#21203F", "#2F2BAD", "#141325", "#322C8E", "#8E8CA3", "#45444E", "#171430", "#0E0B29", "#03001C", "#7B7893", "#4A4857", "#565175", "#413B6B", "#7B6ED6", "#0C0636", "#D1D0D7", "#282634", "#8870FF", "#656273", "#171133", "#434247", "#333237", "#25232D", "#322F3E", "#9A8FC8", "#231B42", "#412A9C", "#E0DAF7", "#221D34", "#211C33", "#2A2344", "#160E32", "#23145B", "#232226", "#413E4A", "#060212", "#565164", "#39324D", "#504375", "#1F192F", "#0E0036", "#726C81", "#453C5C", "#676077", "#1A1623", "#3F3557", "#0E002F", "#5E5473", "#5C4F79", "#2E2444", "#291E40", "#412973", "#7345D6", "#353437", "#94919A", "#484450", "#81749C", "#4D3E6B", "#483078", "#301860", "#1E0C42", "#686077", "#9380B7", "#5015BD", "#75727A", "#5C5863", "#473469", "#6743A5", "#7037CD", "#551BB3", "#35313B", "#706482", "#615375", "#5A4C6E", "#2E1E45", "#EDE3FB", "#817A8A", "#352F3D", "#583B7E", "#200E38", "#766788", "#554865", "#4B3C5D", "#1F0441", "#170132", "#11091A", "#736681", "#51445F", "#3F324D", "#331D4A", "#9061C2", "#1A0B2A", "#BE80FF", "#2F2E30", "#4B4452", "#796C86", "#635274", "#1B1521", "#604878", "#23192D", "#472F5F", "#5B1D99", "#010002", "#BAAFC4", "#51425F", "#31233E", "#6C5B7B", "#140D1A", "#301C41", "#E0D1ED", "#1C0B2B", "#0A0310", "#948E99", "#160921", "#2A044A", "#D9ABFF", "#C3BBC9", "#9684A3", "#4E395D", "#352640", "#49007E", "#6A5E72", "#322938", "#63526E", "#3B2B46", "#2E2633", "#3B234A", "#3E3742", "#523961", "#3F264D", "#391B4A", "#413249", "#260D33", "#F2E5F9", "#252326", "#181619", "#312736", "#7E638C", "#773D94", "#B380CC", "#582770", "#F2E4F9", "#AA00FF", "#615566", "#87758F", "#270A33", "#6B666D", "#594461", "#AE8FBA", "#311D39", "#230F2B", "#420B58", "#72577C", "#361542", "#BA01FF", "#524656", "#2D1B33", "#331B3B", "#2E1437", "#360745", "#2F003F", "#4D4250", "#471754", "#1A081F", "#E1B7ED", "#0D0210", "#181419", "#130716", "#360B41", "#770493", "#160D18", "#4F2958", "#36173D", "#2F1335", "#3D0A49", "#7E5686", "#5C3E62", "#43204A", "#827085", "#605063", "#1D0C20", "#651F71", "#4B3E4D", "#77477E", "#261329", "#574759", "#725B75", "#46294A", "#37193B", "#320139", "#2B222C", "#744F78", "#331436", "#260729", "#674D69", "#4E3150", "#753979", "#F6E7F7", "#37053B", "#210123", "#7D677E", "#9C7A9D", "#5E405F", "#6B456C", "#422343", "#512B52", "#651366", "#340735", "#4B004C", "#2E292E", "#B8AEB8", "#453745", "#635063", "#503850", "#906090", "#492D49", "#663366", "#4D1D4D", "#AD2BAD", "#040004", "#300030", "#390039", "#480048", "#820081", "#FFFCFF", "#FFFBFF", "#613860", "#703D6F", "#643263", "#562155", "#5C3D5B", "#4C264B", "#4F2C4D", "#413040", "#620E5D", "#660860", "#692764", "#641F5E", "#641F5E", "#81657E", "#5E405B", "#482344", "#130912", "#1F0A1D", "#A795A5", "#C9B7C7", "#573E54", "#4F364C", "#322030", "#4F2D4B", "#341931", "#943D8A", "#40223C", "#84407B", "#55024A", "#C7B9C5", "#351330", "#6E1E62", "#520647", "#730662", "#3B0032", "#3C363B", "#5E525C", "#451A3E", "#66245B", "#2E0527", "#4A3A47", "#B998B3", "#321D2E", "#391D34", "#742365", "#490A3D", "#540045", "#878286", "#221D21", "#4F364A", "#572E4F", "#30182B", "#470D3B", "#410936", "#866A80", "#3B2D38", "#71556B", "#5D4157", "#84567A", "#4D3147", "#823772", "#6D165A", "#4A073C", "#9D007A", "#B80090", "#62455B", "#A75293", "#9C3C86", "#3D1734", "#300D28", "#73185E", "#3F0632", "#8E6D86", "#B88BAD", "#B877A8", "#8E407A", "#D940B3", "#B8008A", "#6F646C", "#5F545C", "#392A35", "#9E6A90", "#612A52", "#5A1E4A", "#390D2D", "#493443", "#381C30", "#310A26", "#370128", "#5C5259", "#73626E", "#281B24", "#2D1C28", "#632F53", "#3D1C33", "#1F0E1A", "#7F135F", "#6F0550", "#5D2D4E", "#3E1C33", "#4B1139", "#27081D", "#3B0C2C", "#210518", "#680148", "#85005B", "#990069", "#352630", "#452D3D", "#2E0D23", "#601848", "#1C0113", "#FF00AA", "#A78D9E", "#836177", "#8C5B7B", "#6A3D5A", "#581E44", "#A6026C", "#5C4152", "#37192C", "#741952", "#FE1CAC", "#FE40B9", "#FE59C2", "#452E3C", "#361F2D", "#331327", "#5A0E3D", "#671045", "#6A0E47", "#C4037A", "#A70267", "#78576B", "#A45785", "#5D2747", "#602749", "#991766", "#400428", "#050003", "#FF0099", "#6D6168", "#A18093", "#502940", "#2A091C", "#220315", "#220114", "#260016", "#574951", "#A35481", "#4B1D37", "#8A2F62", "#40122C", "#BF2A7F", "#5F0D3B", "#E42692", "#750E49", "#4D002B", "#FF0092", "#6C6368", "#5E4352", "#571B3C", "#440A2A", "#B8136F", "#5E4B55", "#AD849A", "#5C374B", "#7D3F60", "#52223C", "#8F3C68", "#C97BA5", "#55203C", "#772A53", "#A0346E", "#30091E", "#7D144C", "#6C043C", "#917081", "#743455", "#C9729F", "#400E28", "#A22365", "#991D5D", "#B31D6A", "#520C30", "#D11174", "#FC0284", "#E30075", "#FF0084", "#2A2829", "#686466", "#75616B", "#45373E", "#261C21", "#66324C", "#7E2F56", "#F9EBF2", "#F0077B", "#90044A", "#020001", "#FF41A1", "#966C80", "#452A37", "#A46583", "#5A3044", "#5E2F46", "#6C3751", "#8E3F65", "#CB7CA2", "#8C315D", "#42142A", "#541734", "#E04891", "#6D0839", "#A40B54", "#FF97CA", "#C7B6BE", "#D3C6CC", "#33242B", "#9B5F7B", "#563444", "#5A3546", "#1D1016", "#432332", "#442433", "#793A57", "#7A1745", "#A71A5B", "#801245", "#1F0310", "#8C0E48", "#840943", "#2B0215", "#F80174", "#85586C", "#9A5071", "#7A1E48", "#D92D7A", "#DE1A72", "#210210", "#9E064A", "#910142", "#21000F", "#FF348E", "#87586C", "#9C667D", "#613C4C", "#442432", "#703951", "#1A0C12", "#541E35", "#A13866", "#63203D", "#79254A", "#2F0618", "#B50D57", "#BD0D59", "#80043A", "#F70A71", "#F60069", "#FF006F", "#947280", "#855E6E", "#C0A1AE", "#784D5F", "#5E3848", "#411F2D", "#2C0D1A", "#FBEFF4", "#7F1E47", "#D64783", "#DE528C", "#BF1E62", "#680E34", "#D40F60", "#DD0B64", "#44021E", "#C00353", "#FC036C", "#340016", "#C60052", "#EA0063", "#F00065", "#FF0C71", "#544F51", "#666163", "#2B2628", "#805566", "#AA6581", "#432330", "#542437", "#CE7095", "#9C325C", "#5C1B35", "#D13775", "#91204D", "#F0B9CF", "#9D2053", "#6E1538", "#DE1D6A", "#E63C80", "#8D1042", "#910F43", "#63072C", "#F02475", "#F2116C", "#ED0B65", "#C70452", "#E80560", "#D60257", "#300013", "#D90057", "#452632", "#542638", "#401C2A", "#8F244D", "#C9306B", "#E86F9E", "#E00B5B", "#FD65A0", "#95003A", "#BE0049", "#FFEAF2", "#C79EAD", "#4F2B38", "#8F4D65", "#B1476D", "#7D2948", "#B83564", "#C22760", "#9E1E4C", "#E81764", "#ED4C87", "#9E0B41", "#D90F5A", "#25020F", "#AF0745", "#F00A5E", "#4E031E", "#F71568", "#F71E6C", "#5E0324", "#FA5894", "#F4065E", "#A6033F", "#D1024E", "#EB0258", "#FC1068", "#FF0C66", "#FF0D66", "#FF1168", "#8C6673", "#452B34", "#A0667A", "#54343F", "#F3E2E8", "#2B0B16", "#C91E5A", "#911440", "#BC1953", "#C71755", "#BD1550", "#FCD9E5", "#FBC5D8", "#EE0B5B", "#FD0A60", "#FD0A60", "#FF005B", "#FF548F", "#4D4A4B", "#262324", "#382F32", "#291D21", "#67434F", "#9E6B7C", "#191013", "#90425C", "#B05574", "#B05574", "#B05574", "#CC527A", "#CD4472", "#450B1E", "#E23D75", "#E64E81", "#3B0819", "#D61C59", "#EC5C8D", "#E8175D", "#B10C43", "#FA8CB1", "#B7023F", "#FE0557", "#FE3174", "#FE6196", "#660022", "#FF1964", "#FF2B73", "#FF3D7F", "#A76378", "#40202A", "#AD4C6B", "#BA456A", "#72243D", "#75233D", "#D65981", "#CF3A69", "#C22557", "#DB3C6E", "#E8608C", "#E21B5A", "#ED5887", "#AE0C3E", "#4E051C", "#F2306D", "#940533", "#C7003F", "#F90050", "#FF0051", "#997F87", "#723E4E", "#6C3948", "#632739", "#91334F", "#962C4C", "#B0254F", "#B3204D", "#98173D", "#EC225E", "#9E0C39", "#BD0A41", "#F91659", "#FD0A54", "#FD135A", "#FFE8EF", "#795C64", "#66424C", "#5C323E", "#AB5C72", "#AB526B", "#C06C84", "#D78FA3", "#BF496A", "#D48299", "#C95C7A", "#992F4D", "#992C4B", "#C74066", "#BA3259", "#D45E80", "#9A2848", "#CE3762", "#D4486F", "#BA1E4A", "#A51A41", "#99173C", "#B81C48", "#E63C6D", "#300511", "#ED2860", "#F1396D", "#F1396D", "#5F051F", "#CC063E", "#FC2F68", "#FC3D73", "#CF023B", "#FC0F52", "#770021", "#FF0048", "#FF0048", "#FF0D51", "#FF1457", "#FF2C69", "#3B1922", "#B94866", "#AB3E5B", "#A43955", "#3A111C", "#D76483", "#240910", "#DF5C7E", "#D62957", "#B22148", "#170409", "#E42355", "#E94E77", "#CE1446", "#CA1444", "#B9113F", "#F10C49", "#E30842", "#F60C49", "#FE5380", "#830024", "#555152", "#372B2E", "#AD5C70", "#47232C", "#50232E", "#B13756", "#4B1623", "#9E2D4A", "#D6496C", "#5B1023", "#E8728F", "#BD1B43", "#F13565", "#F4436F", "#EB0A44", "#F7114B", "#CF0638", "#4A0013", "#FF275E", "#FF3366", "#FF3366", "#FF3366", "#FF90AB", "#4E383D", "#402B30", "#4D3339", "#2C171C", "#A04F62", "#8F4254", "#C0576F", "#CB6F84", "#C75F77", "#8F2F45", "#D04969", "#E394A7", "#D24D6C", "#D24D6C", "#E2869B", "#A22543", "#D1284F", "#E05576", "#D6254D", "#C22047", "#E86786", "#D11E48", "#E75A7A", "#E32551", "#E64066", "#EB5E7F", "#C91842", "#F4A1B5", "#E7204E", "#B31237", "#9E0E30", "#F1416B", "#F12F5D", "#F23460", "#98092B", "#CC0C39", "#FA154B", "#FA023C", "#FD6084", "#FE4B74", "#FF003D", "#FF003C", "#FF0841", "#FF2E5F", "#42393B", "#E2D9DB", "#27191C", "#70454E", "#5E363F", "#E0C0C7", "#B5485F", "#A82743", "#CC2649", "#D41E45", "#E33258", "#E81E4A", "#EB214E", "#EE2853", "#F79EB1", "#F22B56", "#F3214E", "#FA2E59", "#FA4069", "#FD6081", "#C0012A", "#F40034", "#FF194B", "#FF2654", "#FF335F", "#FF426A", "#574D4F", "#89666D", "#825E65", "#A7848B", "#83555E", "#A3606D", "#A85163", "#92394B", "#B03851", "#C94D65", "#CC4D66", "#6F1B2C", "#8D2036", "#D43F5D", "#C02948", "#9D1D36", "#C72546", "#C21F40", "#A2122F", "#680A1D", "#820D25", "#9F102C", "#ED4A6A", "#9F0A28", "#F01945", "#CE0A31", "#F97992", "#F51441", "#F7345B", "#C3062C", "#FC325B", "#FD6E8A", "#4B000F", "#FF1F4C", "#FF5475", "#FFB2C1", "#FFC2CE", "#B69198", "#B37883", "#DA4C66", "#D83957", "#DA3754", "#D22042", "#EB5874", "#ED5672", "#EA284B", "#F05D77", "#FB7991", "#FB718A", "#FC284F", "#FD4E6D", "#FE4365", "#969091", "#4D4143", "#231D1E", "#493D3F", "#A8636E", "#C1858F", "#BA5F6E", "#87313F", "#9F3647", "#DC6378", "#C02942", "#811628", "#CE2340", "#DA2644", "#E3536C", "#8C162A", "#EB6077", "#CE1836", "#EF3353", "#F25872", "#F21D41", "#FF1D44", "#FF1D44", "#302325", "#AB8288", "#42282C", "#A4626C", "#AB505E", "#B35966", "#DDA8B0", "#C76B79", "#D4838F", "#5E1F28", "#C5485A", "#BD374C", "#E7A8B1", "#CC2A41", "#D02941", "#BA2339", "#E6546B", "#EF7689", "#F5A3AF", "#F58696", "#F2445E", "#BC0B27", "#E30224", "#070001", "#8A0015", "#FF0F35", "#FF3D5A", "#FF3B58", "#FF516C", "#FF667C", "#4F393C", "#87555C", "#D6ABB1", "#C6838C", "#BF6370", "#C25C6A", "#722731", "#A93545", "#EF97A3", "#E84A5F", "#AF162A", "#E6324B", "#EB445B", "#F04158", "#2A0308", "#FF5C71", "#3A3132", "#281F20", "#CFBDBF", "#361D20", "#9B4B54", "#C93E4F", "#D24858", "#D33649", "#D94052", "#E15E6E", "#BC162A", "#F26B7A", "#F8AFB8", "#C41026", "#F04155", "#EF2B41", "#F99FA9", "#F4324A", "#F87887", "#790614", "#C9031A", "#FC354C", "#FC3A51", "#FE495F", "#574345", "#C6A9AC", "#B88F93", "#2B1719", "#E2C3C6", "#853C43", "#C7777F", "#BA4C57", "#C44D58", "#1C090B", "#D68189", "#CC3747", "#951F2B", "#EF9CA4", "#E6626F", "#E32D40", "#ED616F", "#F58F9A", "#F46472", "#F67280", "#F85A69", "#FA7785", "#F5061D", "#FF5A6A", "#FF8591", "#FFCCD1", "#AB9597", "#8C686B", "#965D62", "#A9767A", "#5E2025", "#CC333F", "#D9434F", "#9D1722", "#E02130", "#E84D5B", "#B11623", "#EA525F", "#DA1A29", "#EC4B59", "#FCD7DA", "#FA2A3A", "#BDA0A2", "#B38184", "#AB6A6E", "#B97479", "#A24D52", "#89373D", "#BE4C54", "#CB4F57", "#851E25", "#D1313D", "#77181E", "#E88087", "#EC8A90", "#ED7B83", "#9F111B", "#EF6771", "#ED4C57", "#F05D67", "#ED303C", "#FDC5C9", "#FECDD0", "#B9030F", "#FF8C94", "#4E3A3B", "#473334", "#CEA4A6", "#B4585D", "#7B3336", "#AC4147", "#3F1719", "#1F0B0C", "#F5E1E2", "#CF5A60", "#BD3038", "#D55D63", "#ED9DA1", "#DF2A33", "#AC151C", "#F06E75", "#F36A71", "#F76D75", "#F70B17", "#FB545C", "#FD8086", "#8F0006", "#FF8C91", "#FFA5AA", "#8A6A6B", "#907071", "#7B5D5E", "#4B3132", "#995052", "#E59DA0", "#E06F72", "#E47F83", "#EBA2A4", "#B42529", "#EA777B", "#9A151A", "#EF8184", "#F8C7C9", "#E8373E", "#F07F83", "#5F0609", "#FAB4B6", "#F5565B", "#FB6066", "#8C0005", "#9E0004", "#A30006", "#A27879", "#B66E6F", "#532728", "#D18E8F", "#D18E8F", "#C84648", "#DB4648", "#340A0B", "#E35B5D", "#EB7072", "#330708", "#670D0F", "#F25C5E", "#F89FA1", "#BF0A0D", "#F6464A", "#6B0103", "#FF494B", "#FF4E50", "#FF4E50", "#FF5254", "#FF7F81", "#BA3C3D", "#CF4647", "#F57576", "#BE0001"],
    "rgbArray": ["rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)", "rgb(2, 2, 2)", "rgb(22, 22, 22)", "rgb(31, 31, 31)", "rgb(43, 43, 43)", "rgb(46, 46, 46)", "rgb(51, 51, 51)", "rgb(51, 51, 51)", "rgb(54, 54, 54)", "rgb(55, 55, 55)", "rgb(59, 59, 59)", "rgb(64, 64, 64)", "rgb(66, 66, 66)", "rgb(69, 69, 69)", "rgb(68, 68, 68)", "rgb(72, 72, 72)", "rgb(71, 71, 71)", "rgb(72, 72, 72)", "rgb(77, 77, 77)", "rgb(82, 82, 82)", "rgb(84, 84, 84)", "rgb(94, 94, 94)", "rgb(99, 99, 99)", "rgb(102, 102, 102)", "rgb(102, 102, 102)", "rgb(107, 107, 107)", "rgb(107, 107, 107)", "rgb(115, 115, 115)", "rgb(117, 117, 117)", "rgb(120, 120, 120)", "rgb(143, 143, 143)", "rgb(153, 153, 153)", "rgb(158, 158, 158)", "rgb(161, 161, 161)", "rgb(188, 188, 188)", "rgb(202, 202, 202)", "rgb(204, 204, 204)", "rgb(204, 204, 204)", "rgb(204, 204, 204)", "rgb(207, 207, 207)", "rgb(210, 210, 210)", "rgb(217, 217, 217)", "rgb(216, 216, 216)", "rgb(216, 216, 216)", "rgb(224, 224, 224)", "rgb(224, 224, 224)", "rgb(230, 230, 230)", "rgb(229, 229, 229)", "rgb(233, 233, 233)", "rgb(233, 233, 233)", "rgb(232, 232, 232)", "rgb(236, 236, 236)", "rgb(240, 240, 240)", "rgb(242, 242, 242)", "rgb(245, 245, 245)", "rgb(246, 246, 246)", "rgb(244, 244, 244)", "rgb(247, 247, 247)", "rgb(250, 250, 250)", "rgb(252, 252, 252)", "rgb(252, 252, 252)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(255, 255, 255)", "rgb(38, 37, 37)", "rgb(168, 167, 167)", "rgb(65, 61, 61)", "rgb(82, 78, 78)", "rgb(97, 92, 92)", "rgb(13, 12, 12)", "rgb(59, 55, 55)", "rgb(112, 103, 103)", "rgb(67, 61, 61)", "rgb(89, 81, 81)", "rgb(89, 79, 79)", "rgb(119, 106, 106)", "rgb(58, 50, 50)", "rgb(128, 112, 112)", "rgb(235, 232, 232)", "rgb(48, 39, 39)", "rgb(74, 61, 61)", "rgb(97, 80, 80)", "rgb(89, 71, 71)", "rgb(131, 104, 104)", "rgb(133, 106, 106)", "rgb(77, 59, 59)", "rgb(56, 42, 42)", "rgb(96, 72, 72)", "rgb(96, 72, 72)", "rgb(117, 88, 88)", "rgb(168, 140, 140)", "rgb(205, 187, 187)", "rgb(238, 232, 232)", "rgb(42, 30, 30)", "rgb(189, 162, 162)", "rgb(74, 51, 51)", "rgb(241, 235, 235)", "rgb(19, 13, 13)", "rgb(51, 34, 34)", "rgb(153, 102, 102)", "rgb(173, 132, 132)", "rgb(29, 19, 19)", "rgb(40, 26, 26)", "rgb(223, 204, 204)", "rgb(150, 89, 89)", "rgb(48, 26, 26)", "rgb(90, 46, 46)", "rgb(102, 51, 51)", "rgb(153, 77, 77)", "rgb(123, 59, 59)", "rgb(130, 60, 60)", "rgb(186, 104, 104)", "rgb(204, 131, 131)", "rgb(186, 82, 82)", "rgb(38, 13, 13)", "rgb(192, 72, 72)", "rgb(209, 120, 120)", "rgb(77, 26, 26)", "rgb(204, 102, 102)", "rgb(216, 138, 138)", "rgb(130, 38, 38)", "rgb(189, 55, 55)", "rgb(189, 55, 55)", "rgb(232, 172, 172)", "rgb(186, 45, 45)", "rgb(51, 12, 12)", "rgb(148, 34, 34)", "rgb(169, 39, 39)", "rgb(201, 44, 44)", "rgb(148, 31, 31)", "rgb(222, 98, 98)", "rgb(241, 187, 187)", "rgb(166, 33, 33)", "rgb(214, 46, 46)", "rgb(227, 107, 107)", "rgb(17, 3, 3)", "rgb(226, 88, 88)", "rgb(102, 17, 17)", "rgb(232, 116, 116)", "rgb(153, 24, 24)", "rgb(235, 127, 127)", "rgb(143, 20, 20)", "rgb(235, 110, 110)", "rgb(236, 99, 99)", "rgb(250, 214, 214)", "rgb(50, 6, 6)", "rgb(237, 100, 100)", "rgb(237, 99, 98)", "rgb(232, 53, 53)", "rgb(240, 120, 119)", "rgb(243, 138, 138)", "rgb(245, 162, 162)", "rgb(242, 124, 124)", "rgb(219, 20, 20)", "rgb(172, 13, 13)", "rgb(242, 78, 78)", "rgb(250, 189, 189)", "rgb(112, 8, 8)", "rgb(128, 9, 9)", "rgb(229, 14, 14)", "rgb(250, 155, 155)", "rgb(136, 6, 6)", "rgb(250, 62, 62)", "rgb(105, 2, 2)", "rgb(185, 5, 4)", "rgb(251, 72, 72)", "rgb(252, 26, 26)", "rgb(5, 0, 0)", "rgb(5, 0, 0)", "rgb(8, 0, 0)", "rgb(153, 1, 0)", "rgb(255, 33, 33)", "rgb(255, 33, 33)", "rgb(255, 61, 61)", "rgb(255, 66, 66)", "rgb(255, 71, 70)", "rgb(255, 74, 74)", "rgb(255, 82, 82)", "rgb(255, 82, 82)", "rgb(255, 97, 97)", "rgb(255, 107, 107)", "rgb(255, 116, 116)", "rgb(255, 115, 115)", "rgb(255, 117, 117)", "rgb(255, 164, 164)", "rgb(255, 171, 171)", "rgb(255, 211, 211)", "rgb(255, 216, 216)", "rgb(196, 101, 100)", "rgb(138, 47, 46)", "rgb(213, 76, 74)", "rgb(202, 34, 31)", "rgb(235, 103, 101)", "rgb(241, 136, 134)", "rgb(239, 114, 112)", "rgb(252, 208, 207)", "rgb(247, 111, 109)", "rgb(248, 126, 123)", "rgb(64, 4, 3)", "rgb(251, 12, 6)", "rgb(252, 89, 86)", "rgb(255, 72, 69)", "rgb(255, 120, 118)", "rgb(255, 132, 130)", "rgb(255, 158, 157)", "rgb(90, 57, 56)", "rgb(201, 124, 122)", "rgb(117, 46, 43)", "rgb(209, 92, 87)", "rgb(225, 145, 142)", "rgb(162, 44, 39)", "rgb(163, 44, 40)", "rgb(222, 117, 113)", "rgb(138, 33, 29)", "rgb(225, 117, 114)", "rgb(221, 66, 62)", "rgb(231, 122, 119)", "rgb(89, 15, 12)", "rgb(228, 33, 27)", "rgb(239, 116, 111)", "rgb(240, 111, 107)", "rgb(129, 14, 11)", "rgb(240, 72, 66)", "rgb(61, 6, 4)", "rgb(246, 121, 117)", "rgb(59, 5, 3)", "rgb(250, 106, 100)", "rgb(252, 157, 154)", "rgb(201, 10, 2)", "rgb(254, 103, 99)", "rgb(255, 93, 87)", "rgb(73, 55, 54)", "rgb(112, 62, 59)", "rgb(214, 179, 177)", "rgb(179, 84, 79)", "rgb(207, 136, 132)", "rgb(241, 219, 218)", "rgb(214, 92, 86)", "rgb(223, 118, 112)", "rgb(189, 47, 40)", "rgb(216, 58, 49)", "rgb(191, 42, 35)", "rgb(222, 76, 69)", "rgb(240, 175, 171)", "rgb(219, 48, 38)", "rgb(229, 98, 92)", "rgb(224, 62, 54)", "rgb(225, 71, 63)", "rgb(194, 27, 18)", "rgb(240, 92, 84)", "rgb(247, 162, 158)", "rgb(248, 143, 137)", "rgb(248, 141, 135)", "rgb(248, 67, 57)", "rgb(254, 133, 126)", "rgb(254, 149, 143)", "rgb(254, 157, 151)", "rgb(254, 166, 162)", "rgb(254, 105, 96)", "rgb(254, 108, 99)", "rgb(254, 105, 98)", "rgb(155, 8, 0)", "rgb(201, 10, 0)", "rgb(255, 78, 68)", "rgb(255, 82, 72)", "rgb(255, 138, 132)", "rgb(255, 156, 151)", "rgb(255, 170, 166)", "rgb(101, 75, 73)", "rgb(155, 114, 111)", "rgb(193, 162, 160)", "rgb(174, 115, 111)", "rgb(28, 15, 14)", "rgb(181, 106, 101)", "rgb(200, 137, 132)", "rgb(107, 49, 45)", "rgb(98, 40, 36)", "rgb(209, 134, 129)", "rgb(174, 47, 39)", "rgb(238, 174, 170)", "rgb(239, 160, 155)", "rgb(222, 60, 47)", "rgb(192, 38, 28)", "rgb(232, 90, 80)", "rgb(227, 47, 33)", "rgb(243, 95, 85)", "rgb(247, 97, 87)", "rgb(250, 127, 119)", "rgb(255, 132, 124)", "rgb(255, 197, 193)", "rgb(62, 52, 51)", "rgb(191, 150, 146)", "rgb(218, 174, 170)", "rgb(182, 85, 76)", "rgb(205, 91, 81)", "rgb(217, 127, 118)", "rgb(212, 59, 45)", "rgb(228, 114, 103)", "rgb(192, 44, 32)", "rgb(221, 69, 56)", "rgb(225, 82, 68)", "rgb(126, 28, 19)", "rgb(112, 22, 14)", "rgb(240, 109, 97)", "rgb(245, 147, 139)", "rgb(231, 35, 19)", "rgb(239, 67, 53)", "rgb(243, 71, 57)", "rgb(247, 94, 80)", "rgb(248, 98, 84)", "rgb(249, 97, 83)", "rgb(252, 138, 128)", "rgb(255, 105, 92)", "rgb(255, 105, 92)", "rgb(255, 124, 112)", "rgb(255, 148, 139)", "rgb(226, 217, 216)", "rgb(138, 102, 98)", "rgb(230, 221, 220)", "rgb(66, 48, 46)", "rgb(52, 34, 32)", "rgb(184, 140, 135)", "rgb(113, 68, 63)", "rgb(236, 218, 216)", "rgb(169, 90, 82)", "rgb(74, 39, 35)", "rgb(211, 144, 136)", "rgb(230, 176, 170)", "rgb(245, 219, 216)", "rgb(209, 67, 52)", "rgb(217, 97, 83)", "rgb(239, 176, 169)", "rgb(239, 170, 163)", "rgb(140, 35, 24)", "rgb(227, 82, 65)", "rgb(196, 35, 17)", "rgb(234, 42, 21)", "rgb(244, 93, 76)", "rgb(247, 131, 118)", "rgb(252, 70, 48)", "rgb(254, 155, 145)", "rgb(111, 11, 0)", "rgb(207, 21, 0)", "rgb(255, 106, 90)", "rgb(255, 112, 95)", "rgb(255, 155, 143)", "rgb(255, 194, 187)", "rgb(255, 220, 216)", "rgb(255, 219, 215)", "rgb(86, 65, 62)", "rgb(154, 115, 110)", "rgb(126, 81, 75)", "rgb(122, 78, 72)", "rgb(166, 93, 83)", "rgb(79, 38, 33)", "rgb(206, 147, 139)", "rgb(227, 184, 178)", "rgb(196, 89, 75)", "rgb(206, 107, 93)", "rgb(228, 134, 121)", "rgb(230, 134, 122)", "rgb(238, 156, 146)", "rgb(238, 136, 122)", "rgb(242, 162, 151)", "rgb(235, 98, 79)", "rgb(125, 26, 12)", "rgb(240, 120, 104)", "rgb(241, 130, 115)", "rgb(245, 157, 146)", "rgb(247, 163, 152)", "rgb(246, 121, 104)", "rgb(246, 121, 104)", "rgb(248, 87, 65)", "rgb(249, 88, 66)", "rgb(252, 168, 157)", "rgb(251, 121, 104)", "rgb(250, 52, 25)", "rgb(252, 119, 101)", "rgb(211, 25, 0)", "rgb(81, 68, 66)", "rgb(157, 126, 121)", "rgb(189, 146, 139)", "rgb(78, 45, 40)", "rgb(204, 140, 130)", "rgb(117, 55, 45)", "rgb(145, 63, 51)", "rgb(194, 88, 72)", "rgb(223, 164, 155)", "rgb(204, 93, 76)", "rgb(194, 65, 45)", "rgb(224, 119, 103)", "rgb(216, 82, 61)", "rgb(219, 86, 67)", "rgb(186, 54, 34)", "rgb(222, 79, 58)", "rgb(227, 96, 77)", "rgb(234, 134, 118)", "rgb(216, 48, 24)", "rgb(40, 9, 4)", "rgb(240, 115, 96)", "rgb(51, 10, 4)", "rgb(246, 139, 123)", "rgb(240, 55, 26)", "rgb(247, 149, 133)", "rgb(108, 19, 5)", "rgb(252, 166, 153)", "rgb(194, 26, 1)", "rgb(255, 116, 95)", "rgb(255, 141, 123)", "rgb(255, 205, 197)", "rgb(255, 210, 203)", "rgb(198, 174, 170)", "rgb(167, 62, 43)", "rgb(230, 170, 159)", "rgb(228, 145, 131)", "rgb(217, 91, 69)", "rgb(167, 50, 28)", "rgb(222, 65, 38)", "rgb(207, 57, 29)", "rgb(239, 142, 125)", "rgb(245, 185, 174)", "rgb(249, 167, 153)", "rgb(245, 99, 74)", "rgb(245, 72, 40)", "rgb(250, 161, 145)", "rgb(251, 87, 59)", "rgb(252, 140, 119)", "rgb(252, 75, 42)", "rgb(254, 158, 142)", "rgb(255, 109, 84)", "rgb(175, 156, 152)", "rgb(164, 139, 134)", "rgb(71, 52, 48)", "rgb(195, 170, 165)", "rgb(40, 25, 22)", "rgb(87, 52, 45)", "rgb(174, 85, 67)", "rgb(237, 197, 189)", "rgb(84, 31, 20)", "rgb(217, 91, 67)", "rgb(215, 79, 51)", "rgb(235, 157, 141)", "rgb(245, 200, 191)", "rgb(236, 121, 99)", "rgb(232, 75, 44)", "rgb(232, 70, 36)", "rgb(236, 99, 73)", "rgb(240, 107, 80)", "rgb(240, 56, 19)", "rgb(245, 126, 103)", "rgb(248, 143, 121)", "rgb(172, 32, 5)", "rgb(173, 32, 3)", "rgb(252, 105, 77)", "rgb(250, 42, 0)", "rgb(255, 54, 14)", "rgb(255, 55, 15)", "rgb(255, 164, 146)", "rgb(126, 103, 98)", "rgb(44, 35, 33)", "rgb(66, 52, 49)", "rgb(36, 23, 20)", "rgb(48, 30, 26)", "rgb(210, 133, 116)", "rgb(220, 91, 62)", "rgb(237, 173, 158)", "rgb(228, 86, 53)", "rgb(240, 149, 128)", "rgb(204, 57, 23)", "rgb(242, 108, 79)", "rgb(242, 80, 44)", "rgb(243, 100, 68)", "rgb(252, 103, 71)", "rgb(252, 55, 12)", "rgb(255, 101, 67)", "rgb(255, 165, 144)", "rgb(53, 49, 48)", "rgb(43, 39, 38)", "rgb(120, 93, 86)", "rgb(135, 83, 70)", "rgb(201, 158, 147)", "rgb(183, 116, 99)", "rgb(234, 209, 203)", "rgb(229, 184, 173)", "rgb(168, 70, 45)", "rgb(224, 142, 121)", "rgb(197, 75, 44)", "rgb(224, 132, 109)", "rgb(237, 160, 140)", "rgb(231, 113, 85)", "rgb(245, 153, 130)", "rgb(248, 89, 49)", "rgb(248, 87, 45)", "rgb(254, 161, 137)", "rgb(255, 110, 73)", "rgb(255, 110, 74)", "rgb(255, 112, 77)", "rgb(255, 120, 87)", "rgb(255, 193, 178)", "rgb(156, 134, 128)", "rgb(151, 126, 119)", "rgb(167, 139, 131)", "rgb(77, 59, 54)", "rgb(51, 33, 28)", "rgb(73, 40, 31)", "rgb(199, 82, 51)", "rgb(209, 99, 68)", "rgb(228, 157, 137)", "rgb(243, 198, 185)", "rgb(219, 75, 35)", "rgb(204, 62, 24)", "rgb(228, 73, 28)", "rgb(211, 64, 23)", "rgb(235, 97, 59)", "rgb(240, 142, 115)", "rgb(237, 109, 74)", "rgb(242, 151, 126)", "rgb(243, 130, 100)", "rgb(242, 100, 61)", "rgb(245, 136, 107)", "rgb(251, 146, 116)", "rgb(250, 60, 8)", "rgb(252, 57, 3)", "rgb(254, 190, 172)", "rgb(246, 55, 0)", "rgb(255, 113, 75)", "rgb(255, 119, 82)", "rgb(74, 64, 61)", "rgb(68, 58, 55)", "rgb(59, 46, 42)", "rgb(65, 46, 40)", "rgb(63, 44, 38)", "rgb(198, 164, 154)", "rgb(236, 223, 219)", "rgb(90, 55, 44)", "rgb(90, 50, 38)", "rgb(201, 141, 123)", "rgb(89, 41, 27)", "rgb(228, 124, 93)", "rgb(247, 215, 205)", "rgb(235, 123, 89)", "rgb(235, 104, 65)", "rgb(246, 166, 141)", "rgb(246, 170, 147)", "rgb(245, 146, 117)", "rgb(247, 164, 139)", "rgb(185, 52, 11)", "rgb(243, 69, 15)", "rgb(248, 155, 126)", "rgb(246, 107, 64)", "rgb(248, 118, 78)", "rgb(249, 143, 111)", "rgb(249, 143, 111)", "rgb(227, 60, 8)", "rgb(251, 106, 61)", "rgb(251, 107, 65)", "rgb(179, 41, 0)", "rgb(255, 61, 0)", "rgb(255, 126, 87)", "rgb(47, 44, 43)", "rgb(112, 97, 92)", "rgb(96, 78, 72)", "rgb(56, 41, 36)", "rgb(177, 130, 114)", "rgb(26, 17, 14)", "rgb(242, 233, 230)", "rgb(230, 209, 202)", "rgb(162, 93, 71)", "rgb(105, 55, 38)", "rgb(204, 114, 84)", "rgb(189, 85, 50)", "rgb(228, 166, 145)", "rgb(191, 77, 40)", "rgb(227, 150, 125)", "rgb(177, 70, 35)", "rgb(232, 154, 128)", "rgb(230, 138, 108)", "rgb(235, 154, 127)", "rgb(225, 94, 50)", "rgb(240, 169, 145)", "rgb(244, 191, 173)", "rgb(246, 199, 183)", "rgb(241, 148, 116)", "rgb(240, 121, 81)", "rgb(245, 164, 137)", "rgb(213, 61, 12)", "rgb(242, 81, 27)", "rgb(246, 140, 104)", "rgb(246, 140, 104)", "rgb(248, 136, 99)", "rgb(251, 186, 164)", "rgb(253, 207, 191)", "rgb(252, 110, 61)", "rgb(240, 60, 2)", "rgb(242, 62, 2)", "rgb(254, 192, 171)", "rgb(181, 44, 0)", "rgb(190, 49, 0)", "rgb(255, 64, 0)", "rgb(255, 112, 63)", "rgb(255, 157, 125)", "rgb(255, 165, 136)", "rgb(152, 144, 141)", "rgb(110, 91, 84)", "rgb(82, 66, 60)", "rgb(74, 54, 47)", "rgb(61, 41, 34)", "rgb(238, 207, 196)", "rgb(211, 100, 59)", "rgb(13, 5, 2)", "rgb(223, 93, 46)", "rgb(240, 180, 158)", "rgb(240, 180, 158)", "rgb(225, 102, 57)", "rgb(232, 132, 96)", "rgb(213, 75, 26)", "rgb(241, 113, 68)", "rgb(250, 199, 180)", "rgb(250, 102, 50)", "rgb(252, 164, 131)", "rgb(254, 171, 141)", "rgb(254, 184, 159)", "rgb(189, 50, 0)", "rgb(212, 58, 0)", "rgb(255, 105, 51)", "rgb(255, 142, 101)", "rgb(110, 100, 96)", "rgb(85, 68, 61)", "rgb(73, 56, 49)", "rgb(72, 44, 33)", "rgb(99, 61, 46)", "rgb(63, 38, 28)", "rgb(210, 163, 145)", "rgb(218, 143, 114)", "rgb(218, 130, 95)", "rgb(213, 92, 43)", "rgb(228, 139, 105)", "rgb(239, 177, 152)", "rgb(238, 159, 128)", "rgb(249, 222, 211)", "rgb(222, 79, 21)", "rgb(243, 151, 114)", "rgb(240, 114, 65)", "rgb(240, 120, 72)", "rgb(241, 128, 82)", "rgb(248, 177, 149)", "rgb(250, 173, 142)", "rgb(251, 180, 152)", "rgb(248, 83, 19)", "rgb(254, 168, 135)", "rgb(236, 68, 1)", "rgb(254, 84, 18)", "rgb(254, 121, 69)", "rgb(248, 70, 0)", "rgb(255, 178, 148)", "rgb(118, 104, 98)", "rgb(41, 34, 31)", "rgb(188, 162, 151)", "rgb(106, 74, 60)", "rgb(178, 135, 116)", "rgb(94, 57, 41)", "rgb(204, 158, 138)", "rgb(214, 166, 146)", "rgb(160, 75, 38)", "rgb(239, 202, 186)", "rgb(232, 174, 150)", "rgb(217, 118, 77)", "rgb(227, 155, 125)", "rgb(233, 163, 133)", "rgb(161, 64, 22)", "rgb(242, 184, 160)", "rgb(179, 66, 18)", "rgb(232, 89, 28)", "rgb(250, 127, 75)", "rgb(251, 131, 81)", "rgb(254, 190, 163)", "rgb(254, 108, 43)", "rgb(250, 75, 0)", "rgb(255, 189, 161)", "rgb(255, 205, 184)", "rgb(255, 210, 191)", "rgb(255, 230, 219)", "rgb(125, 93, 78)", "rgb(211, 150, 121)", "rgb(245, 213, 198)", "rgb(52, 20, 5)", "rgb(235, 100, 39)", "rgb(238, 126, 76)", "rgb(245, 155, 113)", "rgb(76, 27, 5)", "rgb(248, 175, 140)", "rgb(249, 161, 119)", "rgb(250, 127, 70)", "rgb(252, 142, 91)", "rgb(253, 175, 138)", "rgb(252, 88, 12)", "rgb(35, 11, 0)", "rgb(255, 130, 74)", "rgb(255, 149, 99)", "rgb(255, 179, 145)", "rgb(110, 102, 98)", "rgb(87, 75, 69)", "rgb(133, 104, 90)", "rgb(131, 86, 63)", "rgb(168, 107, 76)", "rgb(194, 123, 87)", "rgb(230, 179, 154)", "rgb(238, 204, 187)", "rgb(74, 37, 18)", "rgb(220, 128, 81)", "rgb(217, 104, 49)", "rgb(222, 115, 62)", "rgb(240, 192, 168)", "rgb(237, 171, 139)", "rgb(97, 41, 14)", "rgb(168, 72, 24)", "rgb(238, 170, 136)", "rgb(235, 144, 100)", "rgb(48, 20, 6)", "rgb(234, 128, 76)", "rgb(235, 120, 63)", "rgb(237, 131, 78)", "rgb(245, 180, 148)", "rgb(236, 108, 43)", "rgb(186, 70, 13)", "rgb(242, 116, 53)", "rgb(201, 75, 12)", "rgb(245, 98, 23)", "rgb(245, 98, 24)", "rgb(247, 124, 62)", "rgb(247, 129, 69)", "rgb(247, 110, 42)", "rgb(254, 156, 107)", "rgb(72, 24, 0)", "rgb(255, 110, 39)", "rgb(255, 153, 102)", "rgb(255, 180, 143)", "rgb(255, 196, 166)", "rgb(214, 195, 185)", "rgb(197, 168, 152)", "rgb(148, 101, 76)", "rgb(211, 173, 152)", "rgb(204, 148, 118)", "rgb(231, 161, 122)", "rgb(242, 161, 118)", "rgb(246, 183, 148)", "rgb(44, 16, 1)", "rgb(251, 111, 36)", "rgb(241, 85, 0)", "rgb(255, 219, 200)", "rgb(153, 146, 142)", "rgb(89, 72, 62)", "rgb(112, 86, 71)", "rgb(165, 130, 110)", "rgb(215, 199, 190)", "rgb(128, 88, 65)", "rgb(36, 24, 17)", "rgb(119, 79, 56)", "rgb(217, 171, 145)", "rgb(217, 153, 115)", "rgb(207, 97, 35)", "rgb(240, 181, 147)", "rgb(223, 98, 28)", "rgb(228, 109, 41)", "rgb(254, 249, 246)", "rgb(36, 15, 3)", "rgb(247, 128, 60)", "rgb(251, 190, 154)", "rgb(252, 141, 77)", "rgb(255, 130, 58)", "rgb(255, 152, 94)", "rgb(255, 153, 94)", "rgb(255, 198, 165)", "rgb(153, 139, 130)", "rgb(77, 67, 61)", "rgb(116, 94, 80)", "rgb(92, 73, 61)", "rgb(212, 199, 191)", "rgb(85, 66, 54)", "rgb(201, 173, 155)", "rgb(94, 65, 47)", "rgb(158, 109, 78)", "rgb(209, 180, 162)", "rgb(219, 196, 182)", "rgb(222, 178, 151)", "rgb(226, 170, 135)", "rgb(245, 224, 211)", "rgb(230, 163, 122)", "rgb(247, 222, 206)", "rgb(44, 21, 7)", "rgb(228, 132, 74)", "rgb(235, 158, 110)", "rgb(229, 124, 58)", "rgb(215, 98, 26)", "rgb(204, 91, 20)", "rgb(240, 130, 63)", "rgb(242, 138, 73)", "rgb(247, 164, 114)", "rgb(235, 95, 7)", "rgb(253, 209, 182)", "rgb(254, 191, 151)", "rgb(254, 191, 151)", "rgb(204, 78, 0)", "rgb(255, 128, 48)", "rgb(255, 184, 140)", "rgb(255, 208, 179)", "rgb(147, 116, 96)", "rgb(161, 116, 87)", "rgb(209, 179, 159)", "rgb(237, 213, 197)", "rgb(219, 168, 135)", "rgb(239, 213, 196)", "rgb(231, 191, 165)", "rgb(239, 210, 190)", "rgb(230, 172, 132)", "rgb(225, 149, 99)", "rgb(235, 153, 97)", "rgb(212, 100, 25)", "rgb(219, 101, 22)", "rgb(232, 110, 28)", "rgb(244, 181, 138)", "rgb(241, 115, 31)", "rgb(244, 152, 89)", "rgb(246, 165, 112)", "rgb(246, 161, 104)", "rgb(247, 161, 104)", "rgb(252, 221, 200)", "rgb(247, 112, 20)", "rgb(247, 120, 37)", "rgb(250, 131, 49)", "rgb(251, 149, 83)", "rgb(252, 107, 10)", "rgb(158, 63, 0)", "rgb(255, 102, 0)", "rgb(255, 122, 36)", "rgb(255, 156, 91)", "rgb(255, 211, 181)", "rgb(255, 209, 179)", "rgb(135, 121, 111)", "rgb(92, 72, 58)", "rgb(191, 159, 136)", "rgb(204, 172, 149)", "rgb(32, 19, 10)", "rgb(231, 199, 176)", "rgb(222, 163, 122)", "rgb(235, 196, 169)", "rgb(238, 202, 177)", "rgb(231, 169, 126)", "rgb(201, 104, 35)", "rgb(230, 160, 111)", "rgb(239, 188, 152)", "rgb(75, 36, 9)", "rgb(232, 118, 36)", "rgb(242, 167, 114)", "rgb(245, 186, 144)", "rgb(243, 163, 107)", "rgb(249, 205, 173)", "rgb(251, 156, 90)", "rgb(252, 125, 35)", "rgb(254, 196, 155)", "rgb(254, 166, 103)", "rgb(250, 105, 0)", "rgb(251, 105, 0)", "rgb(255, 106, 0)", "rgb(255, 154, 82)", "rgb(255, 154, 82)", "rgb(255, 154, 82)", "rgb(255, 164, 99)", "rgb(255, 165, 102)", "rgb(255, 184, 132)", "rgb(255, 191, 145)", "rgb(255, 207, 173)", "rgb(255, 218, 191)", "rgb(255, 218, 191)", "rgb(41, 37, 34)", "rgb(93, 84, 77)", "rgb(103, 89, 78)", "rgb(163, 144, 129)", "rgb(97, 81, 69)", "rgb(111, 88, 70)", "rgb(87, 68, 53)", "rgb(86, 67, 52)", "rgb(80, 61, 46)", "rgb(224, 196, 174)", "rgb(203, 142, 95)", "rgb(204, 143, 96)", "rgb(238, 215, 197)", "rgb(99, 59, 28)", "rgb(121, 69, 29)", "rgb(227, 177, 139)", "rgb(243, 215, 194)", "rgb(31, 17, 6)", "rgb(146, 79, 27)", "rgb(236, 163, 108)", "rgb(243, 167, 109)", "rgb(247, 192, 151)", "rgb(243, 134, 48)", "rgb(248, 135, 46)", "rgb(250, 141, 59)", "rgb(59, 26, 1)", "rgb(252, 128, 32)", "rgb(253, 166, 100)", "rgb(172, 74, 0)", "rgb(249, 106, 0)", "rgb(255, 136, 48)", "rgb(255, 170, 103)", "rgb(154, 144, 136)", "rgb(166, 154, 144)", "rgb(147, 129, 114)", "rgb(226, 221, 217)", "rgb(238, 233, 229)", "rgb(76, 61, 49)", "rgb(89, 68, 51)", "rgb(227, 206, 189)", "rgb(104, 70, 43)", "rgb(199, 149, 109)", "rgb(69, 44, 24)", "rgb(213, 165, 127)", "rgb(224, 186, 155)", "rgb(217, 160, 113)", "rgb(222, 145, 83)", "rgb(127, 67, 17)", "rgb(239, 174, 120)", "rgb(248, 218, 194)", "rgb(230, 120, 30)", "rgb(238, 155, 87)", "rgb(157, 78, 15)", "rgb(238, 127, 39)", "rgb(247, 198, 159)", "rgb(237, 118, 21)", "rgb(240, 120, 24)", "rgb(250, 211, 178)", "rgb(252, 225, 203)", "rgb(246, 139, 54)", "rgb(251, 197, 153)", "rgb(251, 197, 153)", "rgb(252, 145, 58)", "rgb(253, 141, 50)", "rgb(254, 206, 168)", "rgb(255, 125, 16)", "rgb(255, 136, 38)", "rgb(255, 144, 54)", "rgb(255, 189, 135)", "rgb(255, 195, 145)", "rgb(255, 225, 201)", "rgb(255, 249, 244)", "rgb(64, 56, 49)", "rgb(103, 89, 77)", "rgb(51, 44, 38)", "rgb(152, 127, 105)", "rgb(180, 155, 133)", "rgb(211, 185, 163)", "rgb(28, 20, 13)", "rgb(242, 233, 225)", "rgb(215, 184, 156)", "rgb(229, 203, 180)", "rgb(205, 140, 82)", "rgb(232, 202, 175)", "rgb(237, 212, 190)", "rgb(230, 169, 114)", "rgb(229, 134, 52)", "rgb(244, 201, 163)", "rgb(248, 217, 189)", "rgb(240, 124, 25)", "rgb(249, 186, 132)", "rgb(228, 111, 10)", "rgb(250, 184, 127)", "rgb(253, 154, 66)", "rgb(254, 189, 132)", "rgb(61, 28, 0)", "rgb(255, 173, 100)", "rgb(255, 186, 127)", "rgb(255, 200, 151)", "rgb(123, 112, 102)", "rgb(115, 101, 88)", "rgb(145, 127, 110)", "rgb(141, 121, 102)", "rgb(187, 170, 154)", "rgb(201, 184, 168)", "rgb(205, 189, 174)", "rgb(179, 153, 128)", "rgb(179, 153, 128)", "rgb(224, 210, 197)", "rgb(122, 91, 62)", "rgb(209, 184, 160)", "rgb(230, 216, 203)", "rgb(180, 121, 65)", "rgb(230, 178, 128)", "rgb(227, 165, 107)", "rgb(95, 55, 17)", "rgb(222, 133, 49)", "rgb(237, 184, 134)", "rgb(240, 126, 19)", "rgb(249, 197, 147)", "rgb(245, 135, 35)", "rgb(246, 119, 4)", "rgb(212, 103, 0)", "rgb(255, 128, 6)", "rgb(255, 135, 22)", "rgb(255, 227, 201)", "rgb(61, 60, 59)", "rgb(178, 174, 170)", "rgb(102, 92, 82)", "rgb(183, 174, 165)", "rgb(51, 45, 39)", "rgb(33, 29, 25)", "rgb(87, 76, 65)", "rgb(166, 152, 138)", "rgb(133, 114, 95)", "rgb(145, 124, 103)", "rgb(171, 154, 137)", "rgb(228, 221, 214)", "rgb(78, 63, 48)", "rgb(48, 38, 28)", "rgb(157, 124, 91)", "rgb(216, 200, 184)", "rgb(231, 221, 211)", "rgb(216, 168, 120)", "rgb(228, 177, 125)", "rgb(232, 183, 135)", "rgb(240, 205, 171)", "rgb(235, 181, 127)", "rgb(240, 198, 156)", "rgb(230, 138, 46)", "rgb(235, 156, 77)", "rgb(247, 208, 169)", "rgb(243, 181, 120)", "rgb(127, 68, 10)", "rgb(220, 118, 18)", "rgb(252, 231, 210)", "rgb(242, 134, 27)", "rgb(245, 147, 48)", "rgb(248, 176, 104)", "rgb(250, 159, 67)", "rgb(254, 220, 186)", "rgb(252, 127, 3)", "rgb(255, 130, 7)", "rgb(255, 153, 52)", "rgb(255, 164, 70)", "rgb(255, 184, 112)", "rgb(255, 201, 148)", "rgb(135, 111, 85)", "rgb(122, 98, 72)", "rgb(211, 179, 144)", "rgb(247, 234, 220)", "rgb(234, 193, 149)", "rgb(227, 168, 104)", "rgb(250, 237, 223)", "rgb(245, 218, 189)", "rgb(232, 138, 37)", "rgb(216, 119, 12)", "rgb(247, 175, 99)", "rgb(248, 163, 72)", "rgb(213, 111, 0)", "rgb(255, 194, 127)", "rgb(96, 89, 81)", "rgb(87, 80, 72)", "rgb(179, 172, 164)", "rgb(212, 205, 197)", "rgb(107, 93, 77)", "rgb(179, 156, 130)", "rgb(184, 163, 139)", "rgb(92, 75, 55)", "rgb(233, 226, 218)", "rgb(159, 123, 81)", "rgb(207, 182, 153)", "rgb(230, 213, 193)", "rgb(239, 225, 209)", "rgb(212, 169, 121)", "rgb(248, 241, 233)", "rgb(153, 102, 45)", "rgb(204, 136, 58)", "rgb(214, 158, 96)", "rgb(238, 194, 144)", "rgb(241, 198, 148)", "rgb(234, 163, 83)", "rgb(242, 175, 96)", "rgb(242, 173, 94)", "rgb(244, 168, 84)", "rgb(247, 192, 129)", "rgb(247, 187, 117)", "rgb(250, 203, 151)", "rgb(252, 223, 189)", "rgb(246, 146, 29)", "rgb(248, 161, 63)", "rgb(252, 216, 175)", "rgb(233, 127, 2)", "rgb(254, 139, 5)", "rgb(255, 136, 0)", "rgb(255, 138, 0)", "rgb(255, 147, 23)", "rgb(255, 157, 46)", "rgb(255, 186, 107)", "rgb(255, 185, 105)", "rgb(94, 89, 83)", "rgb(168, 163, 157)", "rgb(58, 53, 47)", "rgb(99, 89, 77)", "rgb(155, 142, 126)", "rgb(166, 151, 133)", "rgb(166, 150, 130)", "rgb(176, 161, 143)", "rgb(181, 162, 139)", "rgb(185, 165, 141)", "rgb(191, 171, 147)", "rgb(239, 234, 228)", "rgb(177, 150, 118)", "rgb(162, 130, 92)", "rgb(198, 178, 153)", "rgb(218, 205, 189)", "rgb(199, 178, 153)", "rgb(215, 195, 171)", "rgb(207, 182, 152)", "rgb(146, 109, 64)", "rgb(133, 95, 48)", "rgb(214, 181, 140)", "rgb(187, 129, 56)", "rgb(232, 200, 161)", "rgb(207, 135, 46)", "rgb(241, 198, 145)", "rgb(246, 213, 173)", "rgb(244, 199, 144)", "rgb(249, 214, 172)", "rgb(61, 35, 4)", "rgb(247, 165, 65)", "rgb(249, 191, 118)", "rgb(241, 136, 9)", "rgb(250, 185, 107)", "rgb(222, 124, 4)", "rgb(254, 174, 75)", "rgb(255, 160, 46)", "rgb(255, 167, 57)", "rgb(255, 179, 83)", "rgb(255, 214, 163)", "rgb(133, 130, 126)", "rgb(101, 86, 67)", "rgb(192, 177, 158)", "rgb(70, 58, 42)", "rgb(122, 100, 72)", "rgb(166, 140, 105)", "rgb(195, 177, 153)", "rgb(51, 39, 23)", "rgb(196, 151, 92)", "rgb(204, 158, 97)", "rgb(237, 219, 196)", "rgb(243, 231, 215)", "rgb(246, 235, 221)", "rgb(221, 179, 125)", "rgb(232, 202, 164)", "rgb(216, 152, 69)", "rgb(247, 234, 217)", "rgb(246, 231, 211)", "rgb(189, 122, 34)", "rgb(241, 212, 175)", "rgb(241, 211, 171)", "rgb(232, 162, 73)", "rgb(236, 177, 99)", "rgb(231, 154, 50)", "rgb(231, 144, 34)", "rgb(223, 134, 21)", "rgb(242, 189, 118)", "rgb(247, 211, 163)", "rgb(250, 225, 192)", "rgb(252, 220, 179)", "rgb(250, 186, 102)", "rgb(254, 241, 224)", "rgb(252, 147, 10)", "rgb(253, 148, 7)", "rgb(54, 31, 0)", "rgb(255, 153, 21)", "rgb(255, 179, 80)", "rgb(255, 189, 104)", "rgb(255, 218, 171)", "rgb(255, 222, 179)", "rgb(88, 83, 76)", "rgb(151, 143, 132)", "rgb(122, 106, 83)", "rgb(178, 154, 120)", "rgb(43, 35, 24)", "rgb(172, 140, 94)", "rgb(207, 181, 144)", "rgb(223, 205, 180)", "rgb(230, 208, 177)", "rgb(183, 131, 58)", "rgb(230, 203, 165)", "rgb(231, 203, 164)", "rgb(237, 216, 187)", "rgb(199, 137, 51)", "rgb(233, 207, 170)", "rgb(224, 174, 103)", "rgb(235, 194, 136)", "rgb(225, 159, 65)", "rgb(237, 198, 142)", "rgb(245, 221, 187)", "rgb(234, 176, 94)", "rgb(238, 177, 91)", "rgb(248, 223, 189)", "rgb(240, 185, 107)", "rgb(239, 174, 84)", "rgb(248, 220, 180)", "rgb(208, 126, 14)", "rgb(242, 167, 61)", "rgb(249, 217, 172)", "rgb(240, 151, 28)", "rgb(250, 221, 180)", "rgb(248, 198, 129)", "rgb(251, 220, 176)", "rgb(246, 170, 61)", "rgb(252, 191, 107)", "rgb(252, 191, 107)", "rgb(252, 182, 83)", "rgb(232, 135, 0)", "rgb(254, 150, 0)", "rgb(255, 159, 21)", "rgb(255, 177, 69)", "rgb(255, 183, 82)", "rgb(255, 187, 94)", "rgb(255, 218, 166)", "rgb(255, 226, 186)", "rgb(255, 226, 186)", "rgb(255, 234, 204)", "rgb(255, 236, 209)", "rgb(94, 90, 84)", "rgb(128, 116, 98)", "rgb(74, 64, 49)", "rgb(90, 78, 60)", "rgb(184, 170, 149)", "rgb(226, 213, 193)", "rgb(58, 45, 25)", "rgb(205, 178, 138)", "rgb(209, 182, 141)", "rgb(218, 189, 144)", "rgb(230, 209, 177)", "rgb(232, 213, 185)", "rgb(209, 166, 100)", "rgb(55, 38, 12)", "rgb(222, 176, 105)", "rgb(218, 156, 60)", "rgb(134, 90, 25)", "rgb(246, 230, 206)", "rgb(234, 195, 136)", "rgb(246, 229, 203)", "rgb(235, 185, 112)", "rgb(235, 182, 103)", "rgb(250, 237, 217)", "rgb(245, 194, 115)", "rgb(245, 176, 75)", "rgb(250, 217, 166)", "rgb(246, 177, 73)", "rgb(250, 178, 67)", "rgb(249, 148, 0)", "rgb(255, 153, 0)", "rgb(255, 169, 39)", "rgb(255, 201, 120)", "rgb(255, 244, 227)", "rgb(156, 153, 148)", "rgb(43, 40, 35)", "rgb(132, 123, 109)", "rgb(64, 59, 51)", "rgb(122, 111, 93)", "rgb(119, 108, 90)", "rgb(82, 73, 58)", "rgb(140, 124, 98)", "rgb(139, 122, 94)", "rgb(173, 153, 120)", "rgb(222, 214, 201)", "rgb(150, 124, 82)", "rgb(230, 218, 198)", "rgb(232, 221, 203)", "rgb(235, 223, 204)", "rgb(232, 213, 183)", "rgb(94, 67, 24)", "rgb(226, 193, 141)", "rgb(249, 242, 231)", "rgb(235, 206, 160)", "rgb(235, 197, 136)", "rgb(232, 182, 102)", "rgb(247, 228, 198)", "rgb(243, 213, 165)", "rgb(223, 147, 27)", "rgb(239, 172, 65)", "rgb(248, 216, 165)", "rgb(251, 226, 185)", "rgb(245, 179, 73)", "rgb(252, 228, 190)", "rgb(246, 154, 11)", "rgb(247, 162, 27)", "rgb(243, 151, 8)", "rgb(248, 165, 35)", "rgb(251, 207, 134)", "rgb(253, 191, 92)", "rgb(254, 223, 174)", "rgb(255, 178, 56)", "rgb(255, 180, 62)", "rgb(255, 200, 112)", "rgb(255, 204, 122)", "rgb(255, 223, 171)", "rgb(255, 228, 184)", "rgb(255, 230, 189)", "rgb(89, 85, 78)", "rgb(157, 147, 130)", "rgb(48, 44, 37)", "rgb(180, 166, 142)", "rgb(235, 231, 224)", "rgb(65, 55, 38)", "rgb(163, 138, 95)", "rgb(191, 172, 139)", "rgb(204, 188, 161)", "rgb(227, 218, 203)", "rgb(233, 224, 209)", "rgb(191, 163, 116)", "rgb(212, 190, 153)", "rgb(238, 229, 214)", "rgb(185, 149, 85)", "rgb(205, 175, 123)", "rgb(219, 192, 146)", "rgb(231, 211, 176)", "rgb(206, 164, 92)", "rgb(226, 201, 159)", "rgb(246, 238, 224)", "rgb(232, 204, 156)", "rgb(240, 221, 189)", "rgb(239, 217, 180)", "rgb(241, 222, 189)", "rgb(241, 221, 186)", "rgb(225, 179, 101)", "rgb(232, 195, 130)", "rgb(243, 221, 182)", "rgb(244, 221, 180)", "rgb(234, 186, 104)", "rgb(231, 168, 62)", "rgb(238, 194, 118)", "rgb(248, 230, 198)", "rgb(248, 228, 193)", "rgb(237, 181, 82)", "rgb(246, 218, 171)", "rgb(252, 243, 227)", "rgb(244, 208, 146)", "rgb(240, 168, 48)", "rgb(246, 190, 95)", "rgb(250, 208, 137)", "rgb(253, 230, 189)", "rgb(235, 150, 5)", "rgb(254, 163, 4)", "rgb(254, 173, 38)", "rgb(255, 197, 95)", "rgb(255, 215, 145)", "rgb(255, 227, 179)", "rgb(255, 227, 179)", "rgb(255, 231, 191)", "rgb(255, 236, 203)", "rgb(255, 239, 211)", "rgb(255, 252, 247)", "rgb(131, 125, 114)", "rgb(99, 90, 73)", "rgb(187, 178, 161)", "rgb(209, 203, 192)", "rgb(102, 92, 73)", "rgb(82, 72, 53)", "rgb(122, 105, 73)", "rgb(197, 184, 159)", "rgb(211, 200, 180)", "rgb(211, 200, 180)", "rgb(183, 160, 117)", "rgb(185, 161, 115)", "rgb(189, 163, 114)", "rgb(233, 223, 204)", "rgb(214, 191, 147)", "rgb(103, 79, 35)", "rgb(242, 231, 210)", "rgb(236, 219, 188)", "rgb(246, 237, 220)", "rgb(224, 190, 126)", "rgb(234, 210, 164)", "rgb(223, 186, 116)", "rgb(243, 220, 178)", "rgb(243, 218, 170)", "rgb(245, 211, 147)", "rgb(249, 229, 192)", "rgb(232, 157, 16)", "rgb(237, 160, 17)", "rgb(245, 190, 88)", "rgb(248, 210, 139)", "rgb(244, 176, 54)", "rgb(241, 162, 11)", "rgb(250, 207, 125)", "rgb(250, 192, 85)", "rgb(252, 212, 135)", "rgb(252, 203, 111)", "rgb(252, 171, 16)", "rgb(255, 202, 100)", "rgb(255, 241, 215)", "rgb(53, 52, 50)", "rgb(144, 133, 111)", "rgb(138, 126, 102)", "rgb(168, 157, 135)", "rgb(167, 155, 131)", "rgb(193, 179, 152)", "rgb(194, 178, 145)", "rgb(204, 189, 158)", "rgb(207, 191, 158)", "rgb(222, 209, 182)", "rgb(209, 189, 149)", "rgb(224, 211, 184)", "rgb(200, 176, 128)", "rgb(201, 177, 128)", "rgb(212, 192, 152)", "rgb(205, 179, 128)", "rgb(205, 178, 123)", "rgb(230, 215, 184)", "rgb(197, 149, 56)", "rgb(233, 214, 175)", "rgb(232, 211, 169)", "rgb(242, 227, 198)", "rgb(240, 222, 187)", "rgb(225, 184, 102)", "rgb(227, 186, 106)", "rgb(239, 216, 169)", "rgb(240, 216, 168)", "rgb(240, 216, 168)", "rgb(248, 236, 212)", "rgb(226, 172, 63)", "rgb(227, 173, 64)", "rgb(240, 211, 153)", "rgb(227, 167, 47)", "rgb(238, 199, 122)", "rgb(246, 226, 187)", "rgb(247, 228, 190)", "rgb(243, 213, 151)", "rgb(232, 167, 38)", "rgb(53, 37, 4)", "rgb(243, 195, 99)", "rgb(240, 168, 24)", "rgb(241, 174, 43)", "rgb(253, 238, 207)", "rgb(252, 175, 20)", "rgb(252, 174, 17)", "rgb(255, 170, 0)", "rgb(255, 171, 7)", "rgb(255, 171, 3)", "rgb(255, 173, 8)", "rgb(255, 179, 25)", "rgb(255, 183, 39)", "rgb(255, 190, 64)", "rgb(255, 206, 111)", "rgb(255, 243, 219)", "rgb(189, 184, 173)", "rgb(166, 154, 129)", "rgb(216, 204, 178)", "rgb(210, 194, 159)", "rgb(205, 187, 147)", "rgb(205, 187, 147)", "rgb(160, 132, 71)", "rgb(172, 141, 73)", "rgb(195, 170, 114)", "rgb(128, 104, 53)", "rgb(159, 130, 65)", "rgb(223, 208, 175)", "rgb(221, 202, 162)", "rgb(235, 223, 198)", "rgb(195, 151, 56)", "rgb(244, 234, 213)", "rgb(227, 200, 143)", "rgb(223, 186, 105)", "rgb(204, 152, 42)", "rgb(240, 221, 181)", "rgb(226, 187, 100)", "rgb(226, 178, 76)", "rgb(244, 225, 184)", "rgb(245, 226, 184)", "rgb(247, 229, 191)", "rgb(241, 201, 114)", "rgb(247, 222, 168)", "rgb(251, 238, 211)", "rgb(241, 193, 93)", "rgb(253, 238, 205)", "rgb(250, 202, 102)", "rgb(250, 186, 50)", "rgb(252, 218, 144)", "rgb(252, 199, 85)", "rgb(252, 172, 3)", "rgb(254, 229, 173)", "rgb(250, 171, 0)", "rgb(255, 228, 170)", "rgb(255, 235, 191)", "rgb(138, 135, 128)", "rgb(125, 119, 105)", "rgb(188, 183, 171)", "rgb(36, 33, 26)", "rgb(41, 37, 28)", "rgb(158, 144, 110)", "rgb(158, 144, 110)", "rgb(49, 44, 32)", "rgb(152, 136, 100)", "rgb(165, 149, 113)", "rgb(173, 154, 111)", "rgb(228, 222, 208)", "rgb(225, 218, 202)", "rgb(179, 161, 118)", "rgb(179, 157, 105)", "rgb(229, 221, 203)", "rgb(181, 158, 103)", "rgb(234, 226, 207)", "rgb(245, 241, 232)", "rgb(217, 201, 165)", "rgb(229, 218, 192)", "rgb(198, 173, 113)", "rgb(214, 195, 150)", "rgb(214, 194, 146)", "rgb(222, 203, 160)", "rgb(222, 199, 144)", "rgb(218, 189, 123)", "rgb(225, 199, 140)", "rgb(204, 155, 37)", "rgb(239, 216, 164)", "rgb(236, 207, 141)", "rgb(242, 223, 177)", "rgb(243, 225, 182)", "rgb(230, 179, 61)", "rgb(242, 214, 148)", "rgb(247, 230, 190)", "rgb(230, 172, 39)", "rgb(242, 196, 90)", "rgb(253, 246, 230)", "rgb(243, 199, 95)", "rgb(251, 228, 174)", "rgb(250, 216, 137)", "rgb(252, 229, 177)", "rgb(184, 128, 0)", "rgb(213, 149, 0)", "rgb(255, 179, 0)", "rgb(255, 179, 0)", "rgb(255, 185, 20)", "rgb(255, 205, 87)", "rgb(255, 220, 138)", "rgb(255, 221, 140)", "rgb(255, 232, 179)", "rgb(255, 241, 207)", "rgb(255, 242, 212)", "rgb(255, 245, 222)", "rgb(255, 247, 229)", "rgb(148, 138, 113)", "rgb(183, 176, 158)", "rgb(237, 235, 230)", "rgb(124, 112, 82)", "rgb(188, 176, 145)", "rgb(199, 186, 153)", "rgb(59, 51, 31)", "rgb(212, 201, 173)", "rgb(217, 206, 178)", "rgb(188, 168, 117)", "rgb(89, 76, 42)", "rgb(220, 209, 180)", "rgb(226, 217, 194)", "rgb(234, 227, 209)", "rgb(218, 205, 172)", "rgb(241, 236, 223)", "rgb(214, 196, 150)", "rgb(221, 201, 150)", "rgb(173, 139, 50)", "rgb(227, 207, 158)", "rgb(240, 229, 201)", "rgb(226, 203, 146)", "rgb(233, 215, 169)", "rgb(240, 226, 190)", "rgb(245, 232, 198)", "rgb(230, 188, 86)", "rgb(248, 237, 209)", "rgb(232, 191, 86)", "rgb(247, 227, 178)", "rgb(182, 136, 16)", "rgb(244, 210, 121)", "rgb(247, 214, 131)", "rgb(247, 205, 103)", "rgb(251, 229, 172)", "rgb(250, 190, 40)", "rgb(253, 202, 73)", "rgb(255, 188, 17)", "rgb(255, 226, 154)", "rgb(255, 233, 175)", "rgb(255, 235, 185)", "rgb(255, 237, 191)", "rgb(255, 238, 194)", "rgb(255, 241, 206)", "rgb(209, 197, 165)", "rgb(196, 178, 130)", "rgb(234, 227, 208)", "rgb(244, 240, 229)", "rgb(208, 188, 135)", "rgb(242, 236, 220)", "rgb(225, 210, 169)", "rgb(235, 225, 197)", "rgb(231, 217, 180)", "rgb(236, 225, 195)", "rgb(232, 215, 169)", "rgb(247, 241, 225)", "rgb(239, 226, 191)", "rgb(227, 199, 123)", "rgb(240, 221, 170)", "rgb(164, 127, 26)", "rgb(237, 212, 142)", "rgb(249, 239, 212)", "rgb(245, 221, 157)", "rgb(249, 235, 196)", "rgb(249, 234, 191)", "rgb(250, 237, 202)", "rgb(237, 185, 46)", "rgb(242, 204, 103)", "rgb(246, 209, 105)", "rgb(250, 203, 75)", "rgb(253, 216, 110)", "rgb(254, 237, 191)", "rgb(255, 192, 24)", "rgb(255, 194, 25)", "rgb(255, 197, 44)", "rgb(255, 228, 152)", "rgb(255, 251, 240)", "rgb(78, 77, 74)", "rgb(92, 88, 76)", "rgb(148, 140, 117)", "rgb(154, 146, 123)", "rgb(218, 214, 202)", "rgb(186, 177, 149)", "rgb(192, 182, 152)", "rgb(150, 135, 90)", "rgb(194, 180, 138)", "rgb(219, 209, 179)", "rgb(168, 144, 72)", "rgb(237, 231, 213)", "rgb(237, 229, 206)", "rgb(232, 221, 189)", "rgb(57, 46, 14)", "rgb(219, 191, 107)", "rgb(238, 224, 183)", "rgb(209, 170, 52)", "rgb(232, 209, 142)", "rgb(238, 222, 173)", "rgb(247, 239, 216)", "rgb(235, 213, 146)", "rgb(240, 221, 166)", "rgb(237, 213, 143)", "rgb(235, 208, 127)", "rgb(236, 208, 121)", "rgb(235, 204, 110)", "rgb(240, 216, 144)", "rgb(231, 192, 73)", "rgb(234, 199, 97)", "rgb(245, 227, 174)", "rgb(245, 225, 164)", "rgb(242, 214, 128)", "rgb(236, 192, 57)", "rgb(250, 238, 202)", "rgb(242, 201, 78)", "rgb(249, 223, 148)", "rgb(121, 92, 6)", "rgb(252, 235, 182)", "rgb(253, 241, 204)", "rgb(247, 188, 5)", "rgb(127, 96, 0)", "rgb(230, 174, 0)", "rgb(240, 179, 0)", "rgb(255, 204, 51)", "rgb(255, 205, 55)", "rgb(255, 212, 82)", "rgb(255, 234, 173)", "rgb(255, 239, 193)", "rgb(255, 245, 214)", "rgb(255, 245, 214)", "rgb(255, 250, 235)", "rgb(213, 210, 200)", "rgb(147, 134, 90)", "rgb(64, 58, 38)", "rgb(131, 118, 76)", "rgb(51, 46, 29)", "rgb(239, 236, 226)", "rgb(195, 182, 140)", "rgb(210, 200, 167)", "rgb(179, 158, 88)", "rgb(209, 192, 137)", "rgb(236, 229, 206)", "rgb(249, 246, 236)", "rgb(241, 231, 197)", "rgb(249, 244, 227)", "rgb(243, 230, 188)", "rgb(250, 244, 224)", "rgb(236, 208, 120)", "rgb(238, 212, 127)", "rgb(237, 201, 81)", "rgb(245, 223, 152)", "rgb(242, 205, 79)", "rgb(251, 238, 194)", "rgb(173, 134, 10)", "rgb(248, 219, 126)", "rgb(247, 196, 31)", "rgb(254, 247, 225)", "rgb(252, 225, 133)", "rgb(254, 233, 166)", "rgb(248, 190, 0)", "rgb(255, 195, 0)", "rgb(255, 197, 1)", "rgb(255, 202, 27)", "rgb(255, 220, 104)", "rgb(255, 225, 129)", "rgb(255, 239, 185)", "rgb(255, 241, 193)", "rgb(153, 145, 117)", "rgb(163, 155, 126)", "rgb(166, 158, 128)", "rgb(183, 174, 143)", "rgb(189, 180, 149)", "rgb(194, 184, 149)", "rgb(156, 140, 81)", "rgb(230, 225, 207)", "rgb(188, 172, 113)", "rgb(230, 221, 188)", "rgb(137, 118, 50)", "rgb(153, 130, 45)", "rgb(227, 212, 156)", "rgb(232, 219, 173)", "rgb(246, 241, 222)", "rgb(225, 206, 138)", "rgb(229, 213, 153)", "rgb(222, 200, 122)", "rgb(245, 238, 212)", "rgb(242, 232, 196)", "rgb(238, 218, 149)", "rgb(242, 224, 160)", "rgb(168, 137, 20)", "rgb(248, 235, 190)", "rgb(245, 225, 156)", "rgb(240, 206, 78)", "rgb(247, 230, 166)", "rgb(236, 190, 19)", "rgb(236, 190, 19)", "rgb(245, 218, 122)", "rgb(242, 204, 73)", "rgb(252, 243, 210)", "rgb(246, 216, 107)", "rgb(246, 215, 107)", "rgb(248, 223, 130)", "rgb(251, 235, 175)", "rgb(236, 186, 9)", "rgb(252, 224, 127)", "rgb(253, 235, 169)", "rgb(252, 208, 54)", "rgb(228, 179, 2)", "rgb(254, 205, 35)", "rgb(255, 200, 3)", "rgb(255, 217, 82)", "rgb(255, 231, 146)", "rgb(255, 233, 153)", "rgb(255, 239, 181)", "rgb(255, 240, 184)", "rgb(255, 244, 206)", "rgb(112, 111, 107)", "rgb(154, 148, 124)", "rgb(220, 215, 194)", "rgb(237, 234, 222)", "rgb(161, 145, 83)", "rgb(199, 189, 147)", "rgb(209, 200, 163)", "rgb(230, 225, 205)", "rgb(217, 208, 172)", "rgb(211, 199, 149)", "rgb(188, 169, 91)", "rgb(235, 229, 206)", "rgb(247, 244, 232)", "rgb(197, 173, 75)", "rgb(204, 178, 76)", "rgb(226, 211, 151)", "rgb(233, 222, 176)", "rgb(248, 244, 228)", "rgb(215, 191, 94)", "rgb(238, 221, 153)", "rgb(237, 210, 105)", "rgb(244, 225, 150)", "rgb(242, 217, 116)", "rgb(250, 239, 194)", "rgb(245, 221, 126)", "rgb(21, 17, 1)", "rgb(253, 242, 197)", "rgb(30, 24, 1)", "rgb(254, 231, 138)", "rgb(254, 220, 87)", "rgb(255, 212, 31)", "rgb(255, 238, 172)", "rgb(198, 190, 154)", "rgb(197, 189, 153)", "rgb(212, 205, 173)", "rgb(214, 206, 170)", "rgb(186, 171, 106)", "rgb(230, 224, 197)", "rgb(204, 191, 130)", "rgb(213, 202, 152)", "rgb(218, 203, 138)", "rgb(217, 199, 119)", "rgb(244, 238, 212)", "rgb(237, 227, 180)", "rgb(233, 219, 156)", "rgb(232, 216, 144)", "rgb(244, 235, 195)", "rgb(240, 226, 164)", "rgb(247, 233, 170)", "rgb(247, 232, 166)", "rgb(245, 204, 23)", "rgb(249, 206, 7)", "rgb(253, 239, 176)", "rgb(240, 197, 5)", "rgb(248, 202, 0)", "rgb(255, 239, 169)", "rgb(255, 249, 222)", "rgb(255, 250, 227)", "rgb(44, 43, 38)", "rgb(169, 161, 122)", "rgb(146, 136, 84)", "rgb(231, 228, 213)", "rgb(197, 188, 142)", "rgb(31, 28, 13)", "rgb(217, 204, 140)", "rgb(196, 172, 48)", "rgb(216, 195, 88)", "rgb(238, 224, 151)", "rgb(234, 213, 108)", "rgb(253, 250, 235)", "rgb(240, 212, 66)", "rgb(249, 212, 35)", "rgb(249, 212, 35)", "rgb(254, 247, 213)", "rgb(254, 247, 213)", "rgb(254, 245, 200)", "rgb(254, 245, 198)", "rgb(255, 228, 97)", "rgb(255, 242, 175)", "rgb(255, 246, 199)", "rgb(255, 248, 212)", "rgb(133, 132, 126)", "rgb(147, 145, 133)", "rgb(91, 88, 71)", "rgb(162, 157, 127)", "rgb(164, 158, 126)", "rgb(207, 204, 187)", "rgb(212, 206, 170)", "rgb(224, 219, 189)", "rgb(147, 132, 47)", "rgb(241, 233, 187)", "rgb(242, 234, 188)", "rgb(241, 232, 180)", "rgb(247, 241, 205)", "rgb(248, 242, 206)", "rgb(245, 236, 183)", "rgb(245, 235, 176)", "rgb(237, 215, 90)", "rgb(252, 246, 210)", "rgb(252, 246, 210)", "rgb(250, 217, 40)", "rgb(253, 242, 180)", "rgb(254, 240, 165)", "rgb(255, 241, 158)", "rgb(255, 249, 216)", "rgb(140, 136, 111)", "rgb(89, 86, 67)", "rgb(203, 200, 181)", "rgb(217, 213, 187)", "rgb(214, 209, 175)", "rgb(207, 200, 154)", "rgb(230, 225, 194)", "rgb(238, 233, 199)", "rgb(201, 184, 73)", "rgb(232, 224, 174)", "rgb(219, 206, 121)", "rgb(242, 236, 195)", "rgb(242, 234, 183)", "rgb(243, 236, 190)", "rgb(245, 238, 195)", "rgb(242, 233, 176)", "rgb(233, 213, 88)", "rgb(249, 240, 183)", "rgb(241, 219, 66)", "rgb(252, 247, 215)", "rgb(244, 221, 81)", "rgb(249, 225, 75)", "rgb(251, 234, 128)", "rgb(252, 239, 156)", "rgb(252, 240, 159)", "rgb(252, 238, 140)", "rgb(105, 103, 88)", "rgb(172, 170, 155)", "rgb(163, 156, 103)", "rgb(197, 190, 139)", "rgb(204, 197, 145)", "rgb(216, 211, 171)", "rgb(146, 137, 65)", "rgb(212, 206, 158)", "rgb(207, 200, 143)", "rgb(191, 179, 90)", "rgb(220, 211, 146)", "rgb(233, 228, 187)", "rgb(217, 207, 133)", "rgb(241, 237, 208)", "rgb(239, 234, 197)", "rgb(154, 140, 41)", "rgb(223, 212, 135)", "rgb(196, 180, 50)", "rgb(232, 223, 156)", "rgb(235, 227, 170)", "rgb(231, 221, 150)", "rgb(232, 222, 146)", "rgb(238, 230, 171)", "rgb(239, 232, 178)", "rgb(228, 214, 115)", "rgb(247, 243, 213)", "rgb(247, 240, 186)", "rgb(245, 234, 149)", "rgb(247, 238, 170)", "rgb(248, 240, 175)", "rgb(251, 246, 208)", "rgb(252, 247, 211)", "rgb(252, 247, 209)", "rgb(243, 217, 21)", "rgb(252, 244, 182)", "rgb(247, 219, 21)", "rgb(253, 244, 176)", "rgb(253, 236, 111)", "rgb(255, 236, 94)", "rgb(255, 241, 140)", "rgb(255, 247, 189)", "rgb(255, 247, 188)", "rgb(255, 250, 211)", "rgb(38, 37, 28)", "rgb(189, 186, 158)", "rgb(150, 143, 75)", "rgb(212, 207, 165)", "rgb(198, 192, 133)", "rgb(204, 198, 141)", "rgb(217, 212, 168)", "rgb(224, 220, 184)", "rgb(227, 223, 188)", "rgb(227, 223, 186)", "rgb(173, 162, 65)", "rgb(214, 206, 139)", "rgb(224, 218, 163)", "rgb(240, 236, 201)", "rgb(235, 229, 178)", "rgb(229, 219, 132)", "rgb(233, 225, 153)", "rgb(207, 190, 39)", "rgb(247, 243, 207)", "rgb(232, 218, 94)", "rgb(231, 216, 75)", "rgb(246, 240, 188)", "rgb(244, 235, 158)", "rgb(250, 246, 208)", "rgb(250, 245, 200)", "rgb(247, 239, 162)", "rgb(168, 153, 7)", "rgb(255, 238, 74)", "rgb(255, 248, 188)", "rgb(255, 251, 212)", "rgb(150, 149, 138)", "rgb(204, 201, 170)", "rgb(85, 82, 49)", "rgb(207, 204, 168)", "rgb(217, 213, 167)", "rgb(221, 217, 171)", "rgb(224, 219, 164)", "rgb(224, 218, 150)", "rgb(222, 215, 135)", "rgb(235, 231, 183)", "rgb(242, 239, 206)", "rgb(218, 208, 97)", "rgb(225, 215, 114)", "rgb(237, 231, 165)", "rgb(236, 228, 136)", "rgb(242, 236, 176)", "rgb(240, 233, 153)", "rgb(224, 209, 36)", "rgb(230, 216, 57)", "rgb(248, 244, 196)", "rgb(248, 243, 191)", "rgb(232, 216, 38)", "rgb(252, 249, 216)", "rgb(250, 244, 177)", "rgb(252, 247, 197)", "rgb(253, 245, 164)", "rgb(253, 243, 122)", "rgb(255, 252, 221)", "rgb(124, 123, 108)", "rgb(194, 191, 146)", "rgb(198, 195, 154)", "rgb(140, 135, 62)", "rgb(227, 224, 179)", "rgb(223, 219, 156)", "rgb(235, 231, 167)", "rgb(235, 231, 167)", "rgb(237, 232, 157)", "rgb(168, 159, 29)", "rgb(237, 229, 116)", "rgb(237, 229, 116)", "rgb(228, 216, 41)", "rgb(252, 250, 222)", "rgb(252, 249, 206)", "rgb(251, 246, 181)", "rgb(252, 245, 155)", "rgb(253, 245, 126)", "rgb(254, 250, 194)", "rgb(178, 167, 0)", "rgb(255, 250, 172)", "rgb(255, 250, 179)", "rgb(93, 92, 73)", "rgb(193, 192, 174)", "rgb(158, 156, 113)", "rgb(228, 227, 205)", "rgb(191, 188, 132)", "rgb(232, 231, 210)", "rgb(219, 217, 183)", "rgb(175, 171, 80)", "rgb(209, 206, 149)", "rgb(158, 154, 65)", "rgb(219, 216, 162)", "rgb(217, 213, 147)", "rgb(237, 235, 201)", "rgb(247, 246, 228)", "rgb(224, 220, 139)", "rgb(232, 228, 144)", "rgb(239, 235, 169)", "rgb(235, 230, 141)", "rgb(246, 243, 194)", "rgb(196, 188, 22)", "rgb(248, 245, 193)", "rgb(252, 249, 194)", "rgb(253, 250, 199)", "rgb(254, 252, 208)", "rgb(184, 175, 3)", "rgb(254, 250, 182)", "rgb(181, 172, 1)", "rgb(186, 177, 0)", "rgb(255, 245, 56)", "rgb(255, 251, 183)", "rgb(255, 253, 209)", "rgb(255, 254, 234)", "rgb(145, 143, 97)", "rgb(186, 185, 151)", "rgb(83, 82, 51)", "rgb(165, 163, 108)", "rgb(194, 192, 146)", "rgb(222, 221, 196)", "rgb(200, 198, 150)", "rgb(210, 208, 159)", "rgb(230, 229, 196)", "rgb(197, 195, 118)", "rgb(218, 216, 167)", "rgb(237, 236, 207)", "rgb(187, 183, 73)", "rgb(224, 222, 171)", "rgb(227, 225, 177)", "rgb(228, 226, 175)", "rgb(239, 238, 204)", "rgb(226, 223, 154)", "rgb(245, 244, 215)", "rgb(246, 245, 218)", "rgb(211, 206, 61)", "rgb(241, 239, 165)", "rgb(75, 73, 11)", "rgb(246, 244, 194)", "rgb(235, 229, 77)", "rgb(255, 253, 192)", "rgb(255, 253, 192)", "rgb(255, 254, 219)", "rgb(255, 254, 223)", "rgb(255, 254, 225)", "rgb(255, 254, 228)", "rgb(117, 116, 73)", "rgb(177, 176, 128)", "rgb(186, 185, 134)", "rgb(181, 180, 121)", "rgb(220, 219, 175)", "rgb(224, 223, 177)", "rgb(208, 207, 117)", "rgb(219, 218, 151)", "rgb(224, 223, 159)", "rgb(214, 213, 120)", "rgb(217, 215, 102)", "rgb(228, 227, 145)", "rgb(235, 234, 169)", "rgb(237, 236, 179)", "rgb(222, 219, 83)", "rgb(246, 245, 205)", "rgb(239, 237, 137)", "rgb(248, 246, 159)", "rgb(253, 252, 206)", "rgb(255, 254, 199)", "rgb(255, 254, 200)", "rgb(255, 254, 198)", "rgb(255, 254, 199)", "rgb(16, 16, 15)", "rgb(218, 218, 216)", "rgb(45, 45, 41)", "rgb(132, 132, 120)", "rgb(157, 157, 147)", "rgb(18, 18, 16)", "rgb(22, 22, 19)", "rgb(80, 80, 69)", "rgb(61, 61, 52)", "rgb(244, 244, 242)", "rgb(53, 53, 43)", "rgb(139, 139, 112)", "rgb(170, 170, 145)", "rgb(204, 204, 187)", "rgb(173, 173, 142)", "rgb(192, 192, 168)", "rgb(7, 7, 5)", "rgb(145, 145, 103)", "rgb(145, 145, 103)", "rgb(176, 176, 135)", "rgb(168, 168, 120)", "rgb(200, 200, 169)", "rgb(200, 200, 169)", "rgb(216, 216, 192)", "rgb(216, 216, 192)", "rgb(227, 227, 209)", "rgb(184, 184, 132)", "rgb(187, 187, 136)", "rgb(215, 215, 184)", "rgb(218, 218, 189)", "rgb(236, 236, 221)", "rgb(216, 216, 178)", "rgb(228, 228, 197)", "rgb(201, 201, 135)", "rgb(199, 199, 127)", "rgb(224, 224, 182)", "rgb(249, 249, 241)", "rgb(240, 240, 216)", "rgb(240, 240, 216)", "rgb(240, 240, 216)", "rgb(240, 240, 216)", "rgb(240, 240, 216)", "rgb(240, 240, 216)", "rgb(240, 240, 216)", "rgb(240, 240, 216)", "rgb(226, 226, 178)", "rgb(248, 248, 236)", "rgb(248, 248, 236)", "rgb(205, 205, 118)", "rgb(212, 212, 137)", "rgb(224, 224, 168)", "rgb(204, 204, 102)", "rgb(254, 254, 252)", "rgb(244, 244, 221)", "rgb(221, 221, 146)", "rgb(246, 246, 226)", "rgb(235, 235, 188)", "rgb(249, 249, 231)", "rgb(199, 199, 48)", "rgb(231, 231, 157)", "rgb(235, 235, 171)", "rgb(241, 241, 193)", "rgb(214, 214, 68)", "rgb(224, 224, 90)", "rgb(240, 240, 175)", "rgb(248, 248, 214)", "rgb(212, 211, 35)", "rgb(235, 235, 127)", "rgb(247, 247, 198)", "rgb(250, 250, 215)", "rgb(250, 250, 212)", "rgb(252, 252, 226)", "rgb(242, 242, 111)", "rgb(247, 247, 161)", "rgb(247, 247, 153)", "rgb(252, 252, 215)", "rgb(254, 254, 235)", "rgb(255, 255, 0)", "rgb(255, 255, 150)", "rgb(255, 255, 153)", "rgb(255, 255, 153)", "rgb(255, 255, 192)", "rgb(255, 255, 194)", "rgb(255, 255, 204)", "rgb(255, 255, 221)", "rgb(255, 255, 229)", "rgb(255, 255, 229)", "rgb(255, 255, 234)", "rgb(255, 255, 247)", "rgb(255, 255, 253)", "rgb(143, 144, 68)", "rgb(167, 168, 68)", "rgb(221, 222, 173)", "rgb(229, 230, 184)", "rgb(216, 217, 137)", "rgb(208, 210, 111)", "rgb(208, 209, 103)", "rgb(240, 241, 188)", "rgb(246, 247, 189)", "rgb(249, 250, 210)", "rgb(249, 250, 210)", "rgb(254, 255, 212)", "rgb(254, 255, 214)", "rgb(147, 148, 115)", "rgb(162, 163, 132)", "rgb(216, 217, 192)", "rgb(222, 223, 197)", "rgb(229, 230, 201)", "rgb(236, 237, 213)", "rgb(196, 199, 118)", "rgb(239, 240, 213)", "rgb(205, 208, 113)", "rgb(225, 227, 172)", "rgb(213, 216, 125)", "rgb(241, 242, 206)", "rgb(200, 205, 59)", "rgb(144, 147, 32)", "rgb(249, 250, 220)", "rgb(250, 251, 227)", "rgb(245, 247, 189)", "rgb(236, 240, 129)", "rgb(131, 135, 14)", "rgb(200, 206, 19)", "rgb(200, 207, 2)", "rgb(176, 177, 159)", "rgb(178, 179, 159)", "rgb(200, 201, 181)", "rgb(215, 216, 197)", "rgb(105, 107, 70)", "rgb(187, 189, 145)", "rgb(189, 191, 144)", "rgb(211, 213, 176)", "rgb(166, 170, 86)", "rgb(219, 221, 180)", "rgb(228, 230, 195)", "rgb(219, 222, 166)", "rgb(231, 233, 196)", "rgb(180, 185, 67)", "rgb(233, 235, 191)", "rgb(244, 245, 222)", "rgb(139, 145, 26)", "rgb(232, 237, 118)", "rgb(252, 253, 235)", "rgb(250, 252, 211)", "rgb(253, 255, 217)", "rgb(253, 255, 217)", "rgb(188, 189, 172)", "rgb(168, 171, 123)", "rgb(198, 201, 157)", "rgb(180, 185, 105)", "rgb(228, 230, 201)", "rgb(163, 169, 72)", "rgb(243, 244, 229)", "rgb(183, 190, 95)", "rgb(222, 225, 182)", "rgb(166, 173, 60)", "rgb(221, 226, 159)", "rgb(216, 222, 125)", "rgb(231, 235, 176)", "rgb(229, 234, 164)", "rgb(204, 217, 26)", "rgb(234, 242, 126)", "rgb(229, 240, 76)", "rgb(235, 247, 79)", "rgb(248, 252, 193)", "rgb(196, 208, 4)", "rgb(106, 107, 95)", "rgb(137, 139, 117)", "rgb(157, 159, 137)", "rgb(174, 177, 142)", "rgb(168, 171, 132)", "rgb(206, 208, 186)", "rgb(205, 207, 183)", "rgb(210, 213, 175)", "rgb(190, 196, 126)", "rgb(240, 242, 220)", "rgb(202, 209, 122)", "rgb(214, 221, 144)", "rgb(205, 213, 110)", "rgb(192, 204, 57)", "rgb(143, 153, 36)", "rgb(230, 235, 169)", "rgb(209, 220, 90)", "rgb(12, 13, 2)", "rgb(251, 255, 204)", "rgb(251, 255, 205)", "rgb(252, 255, 217)", "rgb(157, 158, 148)", "rgb(226, 227, 217)", "rgb(188, 191, 163)", "rgb(149, 161, 49)", "rgb(224, 230, 174)", "rgb(235, 239, 201)", "rgb(239, 243, 205)", "rgb(212, 224, 103)", "rgb(196, 212, 40)", "rgb(216, 228, 114)", "rgb(240, 246, 185)", "rgb(132, 145, 18)", "rgb(220, 235, 91)", "rgb(141, 156, 9)", "rgb(218, 242, 4)", "rgb(146, 152, 103)", "rgb(123, 128, 85)", "rgb(162, 171, 94)", "rgb(202, 209, 151)", "rgb(157, 171, 52)", "rgb(192, 210, 62)", "rgb(218, 230, 129)", "rgb(128, 143, 18)", "rgb(183, 204, 24)", "rgb(217, 235, 82)", "rgb(138, 155, 15)", "rgb(237, 247, 158)", "rgb(163, 184, 8)", "rgb(244, 252, 184)", "rgb(251, 254, 229)", "rgb(246, 255, 179)", "rgb(155, 166, 87)", "rgb(194, 201, 149)", "rgb(12, 13, 5)", "rgb(229, 235, 188)", "rgb(147, 164, 42)", "rgb(179, 198, 49)", "rgb(237, 243, 197)", "rgb(241, 246, 206)", "rgb(227, 229, 215)", "rgb(203, 207, 180)", "rgb(198, 204, 165)", "rgb(200, 209, 151)", "rgb(177, 191, 99)", "rgb(160, 176, 70)", "rgb(179, 194, 98)", "rgb(157, 173, 66)", "rgb(223, 233, 168)", "rgb(218, 233, 138)", "rgb(230, 240, 175)", "rgb(241, 247, 205)", "rgb(209, 231, 81)", "rgb(244, 250, 210)", "rgb(250, 253, 234)", "rgb(238, 250, 168)", "rgb(219, 247, 59)", "rgb(232, 255, 101)", "rgb(251, 255, 227)", "rgb(169, 173, 148)", "rgb(174, 179, 149)", "rgb(164, 171, 128)", "rgb(197, 203, 166)", "rgb(224, 228, 204)", "rgb(183, 194, 126)", "rgb(190, 203, 124)", "rgb(206, 216, 157)", "rgb(225, 234, 181)", "rgb(168, 192, 48)", "rgb(214, 230, 138)", "rgb(155, 182, 27)", "rgb(205, 229, 78)", "rgb(140, 163, 21)", "rgb(236, 246, 187)", "rgb(206, 209, 192)", "rgb(213, 216, 199)", "rgb(221, 224, 207)", "rgb(188, 196, 153)", "rgb(224, 228, 206)", "rgb(227, 232, 205)", "rgb(182, 196, 116)", "rgb(218, 229, 171)", "rgb(233, 240, 201)", "rgb(117, 137, 24)", "rgb(212, 238, 94)", "rgb(234, 255, 135)", "rgb(130, 131, 126)", "rgb(71, 72, 67)", "rgb(177, 186, 142)", "rgb(137, 151, 82)", "rgb(212, 221, 177)", "rgb(167, 186, 89)", "rgb(246, 248, 238)", "rgb(176, 198, 90)", "rgb(153, 179, 51)", "rgb(226, 237, 183)", "rgb(192, 216, 96)", "rgb(209, 227, 137)", "rgb(203, 230, 91)", "rgb(167, 204, 21)", "rgb(216, 241, 113)", "rgb(230, 249, 157)", "rgb(232, 249, 162)", "rgb(176, 218, 9)", "rgb(189, 235, 7)", "rgb(131, 163, 0)", "rgb(210, 255, 31)", "rgb(129, 135, 108)", "rgb(37, 39, 30)", "rgb(178, 187, 145)", "rgb(200, 207, 174)", "rgb(216, 222, 195)", "rgb(187, 205, 119)", "rgb(179, 204, 87)", "rgb(244, 248, 230)", "rgb(25, 31, 4)", "rgb(252, 254, 245)", "rgb(202, 247, 41)", "rgb(190, 242, 2)", "rgb(200, 255, 0)", "rgb(196, 202, 176)", "rgb(153, 166, 109)", "rgb(167, 179, 129)", "rgb(221, 227, 202)", "rgb(229, 234, 212)", "rgb(169, 189, 104)", "rgb(190, 208, 132)", "rgb(231, 238, 208)", "rgb(222, 232, 190)", "rgb(181, 204, 106)", "rgb(219, 231, 180)", "rgb(225, 237, 185)", "rgb(202, 224, 129)", "rgb(240, 247, 218)", "rgb(240, 247, 218)", "rgb(167, 205, 44)", "rgb(192, 222, 93)", "rgb(206, 232, 121)", "rgb(197, 230, 92)", "rgb(203, 232, 107)", "rgb(203, 232, 107)", "rgb(237, 255, 179)", "rgb(212, 214, 206)", "rgb(225, 227, 219)", "rgb(217, 221, 205)", "rgb(198, 209, 166)", "rgb(195, 210, 151)", "rgb(213, 224, 181)", "rgb(220, 235, 175)", "rgb(229, 243, 186)", "rgb(180, 223, 55)", "rgb(228, 245, 177)", "rgb(230, 248, 177)", "rgb(143, 190, 0)", "rgb(196, 255, 13)", "rgb(204, 255, 51)", "rgb(240, 255, 194)", "rgb(243, 255, 207)", "rgb(124, 128, 113)", "rgb(215, 218, 207)", "rgb(225, 230, 211)", "rgb(209, 218, 185)", "rgb(179, 198, 127)", "rgb(210, 225, 167)", "rgb(172, 201, 95)", "rgb(217, 232, 174)", "rgb(201, 223, 138)", "rgb(186, 218, 95)", "rgb(186, 222, 87)", "rgb(185, 222, 81)", "rgb(171, 219, 37)", "rgb(174, 221, 43)", "rgb(200, 235, 106)", "rgb(190, 238, 59)", "rgb(107, 143, 11)", "rgb(243, 255, 210)", "rgb(147, 158, 120)", "rgb(240, 242, 235)", "rgb(197, 206, 174)", "rgb(151, 170, 102)", "rgb(149, 170, 97)", "rgb(215, 223, 195)", "rgb(202, 213, 173)", "rgb(224, 238, 189)", "rgb(227, 245, 183)", "rgb(182, 255, 0)", "rgb(202, 255, 66)", "rgb(240, 255, 201)", "rgb(200, 203, 193)", "rgb(161, 172, 136)", "rgb(184, 194, 160)", "rgb(149, 168, 104)", "rgb(199, 209, 175)", "rgb(148, 176, 83)", "rgb(208, 220, 179)", "rgb(220, 233, 190)", "rgb(208, 231, 153)", "rgb(220, 238, 177)", "rgb(206, 232, 145)", "rgb(224, 243, 178)", "rgb(174, 226, 57)", "rgb(244, 252, 226)", "rgb(191, 250, 55)", "rgb(136, 193, 0)", "rgb(241, 255, 207)", "rgb(124, 133, 105)", "rgb(143, 158, 111)", "rgb(195, 204, 175)", "rgb(145, 165, 102)", "rgb(186, 201, 154)", "rgb(101, 122, 56)", "rgb(198, 215, 160)", "rgb(201, 218, 164)", "rgb(212, 226, 182)", "rgb(177, 207, 114)", "rgb(192, 216, 140)", "rgb(186, 219, 115)", "rgb(174, 230, 55)", "rgb(230, 249, 188)", "rgb(199, 244, 100)", "rgb(239, 255, 205)", "rgb(18, 19, 16)", "rgb(196, 206, 176)", "rgb(118, 138, 79)", "rgb(120, 144, 72)", "rgb(168, 192, 120)", "rgb(166, 191, 115)", "rgb(192, 216, 144)", "rgb(214, 230, 183)", "rgb(236, 248, 212)", "rgb(170, 255, 0)", "rgb(241, 255, 213)", "rgb(175, 183, 160)", "rgb(196, 203, 183)", "rgb(165, 176, 144)", "rgb(218, 226, 203)", "rgb(202, 215, 178)", "rgb(210, 231, 170)", "rgb(204, 238, 141)", "rgb(206, 247, 129)", "rgb(224, 251, 172)", "rgb(216, 253, 148)", "rgb(223, 253, 167)", "rgb(166, 185, 133)", "rgb(146, 179, 90)", "rgb(208, 222, 184)", "rgb(100, 126, 55)", "rgb(204, 222, 173)", "rgb(227, 237, 210)", "rgb(185, 212, 139)", "rgb(160, 197, 95)", "rgb(189, 219, 136)", "rgb(208, 234, 163)", "rgb(200, 233, 142)", "rgb(122, 179, 23)", "rgb(158, 175, 131)", "rgb(192, 206, 170)", "rgb(184, 201, 157)", "rgb(184, 201, 157)", "rgb(196, 212, 171)", "rgb(199, 216, 171)", "rgb(136, 196, 37)", "rgb(194, 252, 99)", "rgb(192, 194, 189)", "rgb(230, 232, 227)", "rgb(17, 19, 14)", "rgb(204, 214, 189)", "rgb(177, 197, 146)", "rgb(146, 181, 95)", "rgb(220, 237, 194)", "rgb(225, 245, 196)", "rgb(225, 245, 196)", "rgb(225, 245, 196)", "rgb(225, 245, 196)", "rgb(204, 243, 144)", "rgb(229, 252, 194)", "rgb(221, 255, 171)", "rgb(163, 171, 152)", "rgb(136, 166, 94)", "rgb(214, 225, 199)", "rgb(214, 228, 195)", "rgb(219, 237, 194)", "rgb(205, 237, 161)", "rgb(233, 252, 207)", "rgb(59, 62, 55)", "rgb(105, 112, 96)", "rgb(225, 237, 209)", "rgb(164, 201, 114)", "rgb(163, 217, 91)", "rgb(190, 237, 128)", "rgb(189, 237, 126)", "rgb(217, 245, 181)", "rgb(169, 240, 77)", "rgb(174, 240, 85)", "rgb(204, 252, 142)", "rgb(229, 254, 197)", "rgb(170, 182, 155)", "rgb(170, 182, 155)", "rgb(158, 174, 138)", "rgb(158, 174, 138)", "rgb(186, 204, 164)", "rgb(148, 186, 101)", "rgb(214, 230, 195)", "rgb(153, 219, 73)", "rgb(122, 131, 112)", "rgb(131, 144, 116)", "rgb(135, 150, 118)", "rgb(150, 167, 130)", "rgb(186, 201, 169)", "rgb(159, 185, 130)", "rgb(148, 187, 104)", "rgb(205, 228, 179)", "rgb(231, 252, 207)", "rgb(238, 255, 219)", "rgb(160, 171, 148)", "rgb(172, 186, 157)", "rgb(166, 194, 136)", "rgb(167, 198, 134)", "rgb(165, 204, 122)", "rgb(196, 224, 166)", "rgb(144, 255, 23)", "rgb(220, 255, 182)", "rgb(45, 46, 44)", "rgb(53, 54, 52)", "rgb(148, 154, 142)", "rgb(124, 138, 110)", "rgb(202, 209, 195)", "rgb(56, 64, 48)", "rgb(96, 120, 72)", "rgb(198, 212, 184)", "rgb(168, 192, 144)", "rgb(225, 236, 214)", "rgb(186, 247, 124)", "rgb(216, 252, 179)", "rgb(224, 255, 194)", "rgb(113, 128, 99)", "rgb(137, 164, 111)", "rgb(188, 217, 160)", "rgb(201, 229, 175)", "rgb(143, 208, 83)", "rgb(159, 216, 107)", "rgb(226, 247, 206)", "rgb(224, 255, 195)", "rgb(164, 172, 157)", "rgb(143, 160, 128)", "rgb(209, 219, 200)", "rgb(168, 189, 149)", "rgb(198, 214, 184)", "rgb(191, 212, 173)", "rgb(182, 208, 160)", "rgb(159, 179, 143)", "rgb(166, 191, 145)", "rgb(190, 214, 171)", "rgb(211, 228, 197)", "rgb(172, 206, 145)", "rgb(185, 215, 161)", "rgb(228, 243, 216)", "rgb(169, 183, 158)", "rgb(171, 187, 159)", "rgb(191, 205, 180)", "rgb(170, 190, 155)", "rgb(183, 201, 169)", "rgb(205, 219, 194)", "rgb(210, 223, 200)", "rgb(183, 209, 163)", "rgb(166, 200, 140)", "rgb(192, 219, 171)", "rgb(182, 216, 156)", "rgb(158, 180, 142)", "rgb(168, 187, 154)", "rgb(196, 219, 180)", "rgb(205, 224, 191)", "rgb(191, 216, 173)", "rgb(154, 204, 119)", "rgb(178, 222, 147)", "rgb(191, 255, 145)", "rgb(174, 190, 163)", "rgb(102, 140, 77)", "rgb(181, 206, 164)", "rgb(163, 198, 140)", "rgb(164, 202, 139)", "rgb(186, 221, 163)", "rgb(188, 222, 165)", "rgb(169, 218, 136)", "rgb(248, 254, 244)", "rgb(224, 255, 204)", "rgb(243, 255, 235)", "rgb(112, 128, 102)", "rgb(200, 214, 191)", "rgb(42, 92, 11)", "rgb(209, 247, 186)", "rgb(127, 148, 115)", "rgb(179, 200, 167)", "rgb(172, 197, 157)", "rgb(178, 203, 163)", "rgb(168, 200, 150)", "rgb(119, 171, 89)", "rgb(182, 211, 165)", "rgb(179, 224, 153)", "rgb(230, 252, 217)", "rgb(228, 255, 212)", "rgb(200, 217, 191)", "rgb(183, 225, 161)", "rgb(164, 244, 121)", "rgb(130, 157, 116)", "rgb(162, 202, 142)", "rgb(211, 235, 199)", "rgb(1, 3, 0)", "rgb(133, 174, 114)", "rgb(154, 188, 138)", "rgb(188, 225, 171)", "rgb(110, 207, 66)", "rgb(184, 253, 153)", "rgb(86, 112, 75)", "rgb(208, 220, 203)", "rgb(155, 183, 143)", "rgb(162, 188, 151)", "rgb(203, 229, 192)", "rgb(154, 224, 125)", "rgb(190, 195, 188)", "rgb(146, 166, 138)", "rgb(191, 212, 183)", "rgb(120, 174, 98)", "rgb(187, 222, 173)", "rgb(109, 117, 106)", "rgb(147, 186, 133)", "rgb(171, 238, 147)", "rgb(233, 255, 225)", "rgb(132, 150, 126)", "rgb(123, 153, 113)", "rgb(198, 216, 192)", "rgb(185, 211, 176)", "rgb(52, 80, 43)", "rgb(209, 255, 194)", "rgb(189, 211, 182)", "rgb(168, 201, 158)", "rgb(166, 224, 148)", "rgb(202, 242, 190)", "rgb(216, 255, 204)", "rgb(87, 94, 85)", "rgb(73, 105, 64)", "rgb(184, 214, 176)", "rgb(122, 191, 102)", "rgb(124, 209, 100)", "rgb(175, 204, 168)", "rgb(121, 179, 107)", "rgb(216, 245, 209)", "rgb(57, 71, 54)", "rgb(168, 196, 162)", "rgb(61, 66, 60)", "rgb(159, 179, 155)", "rgb(110, 145, 103)", "rgb(234, 253, 230)", "rgb(140, 204, 129)", "rgb(211, 247, 205)", "rgb(174, 194, 171)", "rgb(178, 203, 174)", "rgb(141, 185, 134)", "rgb(185, 217, 180)", "rgb(149, 198, 143)", "rgb(81, 149, 72)", "rgb(54, 128, 45)", "rgb(142, 151, 141)", "rgb(156, 173, 154)", "rgb(178, 204, 175)", "rgb(215, 232, 213)", "rgb(200, 227, 197)", "rgb(205, 233, 202)", "rgb(205, 233, 202)", "rgb(169, 203, 166)", "rgb(202, 224, 200)", "rgb(158, 200, 154)", "rgb(177, 206, 175)", "rgb(115, 176, 111)", "rgb(145, 198, 141)", "rgb(35, 77, 32)", "rgb(149, 222, 144)", "rgb(140, 163, 139)", "rgb(163, 182, 162)", "rgb(142, 168, 141)", "rgb(153, 184, 152)", "rgb(205, 236, 204)", "rgb(79, 120, 78)", "rgb(180, 223, 179)", "rgb(164, 217, 163)", "rgb(191, 237, 190)", "rgb(79, 80, 79)", "rgb(140, 153, 140)", "rgb(170, 191, 170)", "rgb(100, 138, 100)", "rgb(202, 217, 202)", "rgb(161, 192, 161)", "rgb(157, 193, 157)", "rgb(205, 223, 205)", "rgb(221, 234, 221)", "rgb(128, 179, 128)", "rgb(158, 217, 158)", "rgb(224, 247, 224)", "rgb(194, 255, 194)", "rgb(170, 227, 171)", "rgb(197, 254, 198)", "rgb(150, 179, 151)", "rgb(191, 224, 192)", "rgb(191, 227, 192)", "rgb(177, 252, 179)", "rgb(114, 173, 117)", "rgb(170, 222, 173)", "rgb(121, 221, 126)", "rgb(174, 191, 175)", "rgb(165, 195, 167)", "rgb(176, 209, 178)", "rgb(162, 204, 165)", "rgb(145, 196, 148)", "rgb(83, 172, 89)", "rgb(182, 222, 185)", "rgb(122, 144, 124)", "rgb(92, 115, 94)", "rgb(143, 166, 145)", "rgb(146, 179, 149)", "rgb(145, 190, 149)", "rgb(162, 202, 165)", "rgb(134, 194, 139)", "rgb(167, 219, 171)", "rgb(142, 230, 150)", "rgb(196, 255, 201)", "rgb(133, 153, 135)", "rgb(197, 207, 198)", "rgb(163, 201, 167)", "rgb(188, 216, 191)", "rgb(206, 235, 209)", "rgb(170, 179, 171)", "rgb(192, 209, 194)", "rgb(177, 204, 180)", "rgb(237, 246, 238)", "rgb(191, 227, 195)", "rgb(172, 222, 178)", "rgb(127, 218, 137)", "rgb(181, 244, 188)", "rgb(4, 38, 8)", "rgb(166, 246, 175)", "rgb(186, 253, 194)", "rgb(103, 141, 108)", "rgb(142, 190, 148)", "rgb(166, 173, 167)", "rgb(124, 145, 127)", "rgb(93, 126, 98)", "rgb(199, 220, 202)", "rgb(177, 212, 182)", "rgb(173, 228, 181)", "rgb(99, 117, 102)", "rgb(121, 146, 125)", "rgb(121, 146, 125)", "rgb(130, 155, 134)", "rgb(147, 189, 154)", "rgb(182, 212, 187)", "rgb(171, 204, 177)", "rgb(144, 154, 146)", "rgb(150, 180, 156)", "rgb(151, 181, 157)", "rgb(180, 204, 185)", "rgb(157, 191, 164)", "rgb(204, 228, 209)", "rgb(212, 221, 214)", "rgb(142, 170, 148)", "rgb(152, 195, 161)", "rgb(62, 107, 72)", "rgb(193, 221, 199)", "rgb(119, 184, 133)", "rgb(163, 227, 177)", "rgb(56, 201, 88)", "rgb(115, 140, 121)", "rgb(117, 164, 128)", "rgb(109, 166, 122)", "rgb(109, 166, 122)", "rgb(178, 213, 186)", "rgb(180, 222, 190)", "rgb(188, 227, 197)", "rgb(212, 241, 219)", "rgb(157, 224, 173)", "rgb(88, 206, 116)", "rgb(212, 247, 220)", "rgb(196, 200, 197)", "rgb(140, 171, 148)", "rgb(135, 176, 145)", "rgb(101, 166, 117)", "rgb(140, 191, 153)", "rgb(140, 209, 157)", "rgb(205, 242, 214)", "rgb(124, 244, 154)", "rgb(94, 140, 106)", "rgb(194, 228, 203)", "rgb(181, 232, 195)", "rgb(109, 141, 118)", "rgb(161, 197, 171)", "rgb(146, 191, 159)", "rgb(145, 192, 158)", "rgb(139, 197, 155)", "rgb(182, 222, 193)", "rgb(189, 235, 202)", "rgb(169, 186, 174)", "rgb(109, 153, 122)", "rgb(163, 204, 175)", "rgb(182, 216, 192)", "rgb(156, 208, 172)", "rgb(59, 137, 82)", "rgb(161, 219, 178)", "rgb(49, 162, 82)", "rgb(141, 224, 166)", "rgb(209, 243, 219)", "rgb(191, 241, 206)", "rgb(19, 205, 74)", "rgb(199, 252, 215)", "rgb(207, 255, 221)", "rgb(121, 166, 135)", "rgb(146, 199, 163)", "rgb(187, 222, 198)", "rgb(180, 222, 193)", "rgb(117, 197, 142)", "rgb(133, 204, 156)", "rgb(160, 232, 183)", "rgb(22, 25, 23)", "rgb(184, 202, 190)", "rgb(106, 146, 119)", "rgb(11, 17, 13)", "rgb(204, 222, 210)", "rgb(133, 179, 148)", "rgb(157, 201, 172)", "rgb(157, 201, 172)", "rgb(58, 123, 80)", "rgb(154, 237, 181)", "rgb(165, 179, 170)", "rgb(191, 214, 199)", "rgb(124, 180, 144)", "rgb(150, 195, 166)", "rgb(148, 197, 165)", "rgb(159, 217, 179)", "rgb(165, 181, 171)", "rgb(173, 192, 180)", "rgb(150, 183, 162)", "rgb(132, 178, 149)", "rgb(190, 217, 200)", "rgb(128, 188, 150)", "rgb(140, 194, 160)", "rgb(182, 217, 195)", "rgb(173, 214, 188)", "rgb(120, 189, 145)", "rgb(164, 220, 185)", "rgb(148, 224, 176)", "rgb(181, 247, 205)", "rgb(137, 252, 179)", "rgb(145, 163, 152)", "rgb(179, 197, 186)", "rgb(190, 206, 196)", "rgb(137, 179, 153)", "rgb(136, 180, 153)", "rgb(190, 214, 199)", "rgb(191, 228, 205)", "rgb(155, 218, 179)", "rgb(192, 239, 210)", "rgb(225, 230, 227)", "rgb(183, 203, 191)", "rgb(98, 160, 123)", "rgb(112, 170, 135)", "rgb(107, 184, 138)", "rgb(210, 250, 226)", "rgb(163, 254, 199)", "rgb(118, 135, 125)", "rgb(175, 199, 185)", "rgb(102, 153, 123)", "rgb(161, 192, 174)", "rgb(103, 181, 136)", "rgb(115, 188, 145)", "rgb(214, 236, 223)", "rgb(63, 217, 127)", "rgb(0, 179, 76)", "rgb(110, 154, 129)", "rgb(123, 165, 141)", "rgb(99, 153, 122)", "rgb(98, 153, 122)", "rgb(146, 190, 165)", "rgb(200, 223, 210)", "rgb(66, 152, 103)", "rgb(167, 227, 193)", "rgb(148, 249, 191)", "rgb(213, 222, 217)", "rgb(103, 145, 122)", "rgb(132, 175, 151)", "rgb(125, 173, 147)", "rgb(169, 204, 185)", "rgb(89, 168, 125)", "rgb(79, 179, 124)", "rgb(137, 161, 148)", "rgb(97, 145, 119)", "rgb(150, 189, 168)", "rgb(151, 190, 169)", "rgb(121, 174, 146)", "rgb(124, 188, 154)", "rgb(83, 186, 131)", "rgb(136, 211, 171)", "rgb(152, 217, 182)", "rgb(154, 220, 185)", "rgb(186, 211, 198)", "rgb(89, 148, 118)", "rgb(120, 179, 149)", "rgb(151, 196, 173)", "rgb(184, 217, 200)", "rgb(107, 179, 142)", "rgb(158, 209, 183)", "rgb(195, 230, 212)", "rgb(89, 91, 90)", "rgb(52, 54, 53)", "rgb(73, 77, 75)", "rgb(231, 237, 234)", "rgb(120, 168, 144)", "rgb(120, 168, 144)", "rgb(193, 217, 205)", "rgb(93, 158, 126)", "rgb(160, 202, 181)", "rgb(130, 191, 160)", "rgb(69, 147, 108)", "rgb(141, 204, 173)", "rgb(89, 217, 153)", "rgb(167, 235, 201)", "rgb(131, 152, 142)", "rgb(150, 181, 166)", "rgb(116, 171, 144)", "rgb(152, 199, 176)", "rgb(38, 80, 60)", "rgb(205, 234, 220)", "rgb(185, 241, 214)", "rgb(61, 219, 143)", "rgb(166, 181, 174)", "rgb(94, 130, 113)", "rgb(157, 191, 175)", "rgb(168, 202, 186)", "rgb(206, 225, 216)", "rgb(223, 236, 230)", "rgb(136, 186, 163)", "rgb(179, 219, 200)", "rgb(119, 204, 164)", "rgb(165, 230, 200)", "rgb(168, 231, 202)", "rgb(131, 175, 155)", "rgb(139, 182, 163)", "rgb(171, 204, 189)", "rgb(116, 191, 157)", "rgb(117, 201, 163)", "rgb(5, 124, 70)", "rgb(197, 255, 229)", "rgb(124, 170, 150)", "rgb(0, 193, 108)", "rgb(172, 191, 183)", "rgb(104, 138, 124)", "rgb(110, 153, 135)", "rgb(128, 171, 153)", "rgb(136, 182, 163)", "rgb(172, 206, 192)", "rgb(114, 174, 149)", "rgb(102, 175, 145)", "rgb(129, 189, 164)", "rgb(128, 188, 163)", "rgb(123, 189, 161)", "rgb(126, 190, 163)", "rgb(72, 156, 121)", "rgb(149, 207, 183)", "rgb(37, 138, 96)", "rgb(164, 247, 212)", "rgb(123, 138, 132)", "rgb(95, 153, 130)", "rgb(149, 208, 184)", "rgb(103, 190, 155)", "rgb(177, 230, 209)", "rgb(133, 230, 192)", "rgb(70, 104, 91)", "rgb(119, 164, 147)", "rgb(137, 178, 162)", "rgb(93, 145, 125)", "rgb(158, 199, 183)", "rgb(158, 207, 188)", "rgb(146, 204, 182)", "rgb(89, 179, 144)", "rgb(198, 229, 217)", "rgb(168, 230, 206)", "rgb(211, 247, 233)", "rgb(20, 156, 104)", "rgb(0, 193, 118)", "rgb(81, 97, 91)", "rgb(107, 158, 139)", "rgb(193, 217, 208)", "rgb(147, 194, 177)", "rgb(125, 184, 162)", "rgb(101, 172, 146)", "rgb(102, 172, 146)", "rgb(130, 189, 167)", "rgb(45, 94, 76)", "rgb(115, 200, 169)", "rgb(171, 222, 203)", "rgb(218, 243, 234)", "rgb(7, 249, 162)", "rgb(116, 139, 131)", "rgb(91, 117, 108)", "rgb(109, 151, 136)", "rgb(146, 178, 167)", "rgb(186, 209, 201)", "rgb(163, 195, 184)", "rgb(97, 152, 133)", "rgb(138, 184, 168)", "rgb(158, 198, 184)", "rgb(99, 179, 151)", "rgb(96, 185, 154)", "rgb(55, 159, 122)", "rgb(169, 228, 207)", "rgb(110, 131, 124)", "rgb(113, 143, 133)", "rgb(203, 218, 213)", "rgb(57, 90, 79)", "rgb(89, 166, 140)", "rgb(118, 181, 160)", "rgb(148, 199, 182)", "rgb(107, 179, 155)", "rgb(120, 192, 168)", "rgb(141, 201, 181)", "rgb(77, 171, 140)", "rgb(121, 195, 170)", "rgb(138, 203, 181)", "rgb(127, 199, 175)", "rgb(115, 197, 170)", "rgb(189, 234, 219)", "rgb(121, 214, 183)", "rgb(15, 104, 75)", "rgb(96, 240, 192)", "rgb(9, 193, 132)", "rgb(196, 255, 235)", "rgb(136, 184, 169)", "rgb(162, 199, 187)", "rgb(140, 191, 175)", "rgb(103, 183, 158)", "rgb(114, 188, 165)", "rgb(156, 221, 200)", "rgb(119, 212, 182)", "rgb(97, 212, 176)", "rgb(208, 242, 231)", "rgb(152, 233, 208)", "rgb(126, 153, 145)", "rgb(110, 143, 133)", "rgb(177, 204, 196)", "rgb(81, 189, 156)", "rgb(18, 90, 68)", "rgb(136, 238, 208)", "rgb(10, 153, 111)", "rgb(0, 135, 94)", "rgb(116, 170, 155)", "rgb(196, 221, 214)", "rgb(195, 223, 215)", "rgb(119, 184, 166)", "rgb(143, 201, 185)", "rgb(108, 186, 164)", "rgb(128, 211, 187)", "rgb(105, 208, 179)", "rgb(162, 229, 210)", "rgb(17, 100, 77)", "rgb(13, 229, 168)", "rgb(132, 155, 149)", "rgb(137, 160, 154)", "rgb(140, 170, 162)", "rgb(167, 197, 189)", "rgb(131, 184, 170)", "rgb(117, 186, 168)", "rgb(132, 193, 177)", "rgb(64, 149, 127)", "rgb(157, 219, 202)", "rgb(174, 225, 211)", "rgb(90, 199, 170)", "rgb(37, 144, 115)", "rgb(173, 234, 218)", "rgb(10, 137, 103)", "rgb(73, 254, 207)", "rgb(172, 255, 233)", "rgb(123, 143, 138)", "rgb(158, 174, 170)", "rgb(211, 219, 217)", "rgb(217, 225, 223)", "rgb(150, 181, 173)", "rgb(120, 179, 164)", "rgb(153, 201, 189)", "rgb(162, 211, 199)", "rgb(157, 218, 203)", "rgb(188, 235, 223)", "rgb(62, 201, 167)", "rgb(41, 255, 201)", "rgb(158, 196, 187)", "rgb(83, 160, 142)", "rgb(141, 196, 183)", "rgb(136, 195, 181)", "rgb(108, 182, 165)", "rgb(111, 188, 170)", "rgb(63, 137, 120)", "rgb(156, 214, 200)", "rgb(173, 223, 211)", "rgb(36, 182, 148)", "rgb(57, 66, 64)", "rgb(86, 105, 101)", "rgb(77, 143, 129)", "rgb(86, 162, 146)", "rgb(118, 188, 173)", "rgb(101, 184, 166)", "rgb(170, 230, 217)", "rgb(34, 128, 107)", "rgb(46, 203, 170)", "rgb(37, 228, 188)", "rgb(108, 243, 213)", "rgb(0, 117, 92)", "rgb(82, 92, 90)", "rgb(26, 31, 30)", "rgb(96, 120, 115)", "rgb(86, 135, 125)", "rgb(114, 177, 164)", "rgb(28, 153, 127)", "rgb(170, 242, 228)", "rgb(90, 127, 120)", "rgb(62, 89, 84)", "rgb(94, 145, 136)", "rgb(121, 171, 162)", "rgb(127, 177, 168)", "rgb(84, 140, 130)", "rgb(116, 179, 167)", "rgb(126, 190, 178)", "rgb(104, 186, 171)", "rgb(89, 186, 169)", "rgb(82, 186, 167)", "rgb(36, 179, 153)", "rgb(20, 195, 162)", "rgb(11, 135, 112)", "rgb(2, 143, 118)", "rgb(122, 140, 137)", "rgb(78, 107, 102)", "rgb(84, 115, 110)", "rgb(54, 84, 79)", "rgb(61, 97, 91)", "rgb(110, 164, 155)", "rgb(189, 214, 210)", "rgb(51, 86, 80)", "rgb(73, 131, 121)", "rgb(97, 173, 160)", "rgb(55, 171, 152)", "rgb(119, 242, 222)", "rgb(6, 217, 182)", "rgb(139, 158, 155)", "rgb(66, 107, 101)", "rgb(123, 176, 168)", "rgb(142, 189, 182)", "rgb(121, 181, 172)", "rgb(197, 224, 220)", "rgb(54, 187, 166)", "rgb(220, 247, 243)", "rgb(13, 103, 89)", "rgb(2, 72, 62)", "rgb(0, 7, 6)", "rgb(72, 87, 85)", "rgb(133, 162, 158)", "rgb(100, 144, 138)", "rgb(134, 184, 177)", "rgb(72, 125, 118)", "rgb(119, 177, 169)", "rgb(127, 184, 176)", "rgb(51, 96, 90)", "rgb(114, 186, 176)", "rgb(102, 182, 171)", "rgb(160, 222, 214)", "rgb(199, 237, 232)", "rgb(22, 69, 63)", "rgb(91, 206, 191)", "rgb(46, 179, 161)", "rgb(197, 247, 240)", "rgb(188, 247, 239)", "rgb(74, 237, 215)", "rgb(185, 248, 240)", "rgb(2, 144, 125)", "rgb(193, 201, 200)", "rgb(88, 112, 109)", "rgb(143, 191, 185)", "rgb(108, 196, 185)", "rgb(129, 215, 205)", "rgb(74, 202, 187)", "rgb(52, 186, 171)", "rgb(171, 236, 228)", "rgb(12, 81, 73)", "rgb(3, 69, 61)", "rgb(6, 158, 140)", "rgb(161, 193, 190)", "rgb(49, 77, 74)", "rgb(128, 176, 171)", "rgb(130, 179, 174)", "rgb(90, 155, 149)", "rgb(125, 190, 184)", "rgb(147, 204, 198)", "rgb(108, 189, 181)", "rgb(66, 152, 143)", "rgb(136, 209, 202)", "rgb(173, 224, 219)", "rgb(9, 28, 26)", "rgb(83, 203, 191)", "rgb(49, 173, 161)", "rgb(35, 153, 142)", "rgb(25, 181, 165)", "rgb(19, 200, 181)", "rgb(0, 153, 137)", "rgb(73, 84, 83)", "rgb(136, 161, 159)", "rgb(113, 203, 196)", "rgb(124, 215, 207)", "rgb(37, 133, 125)", "rgb(40, 141, 133)", "rgb(47, 184, 172)", "rgb(46, 184, 172)", "rgb(113, 219, 210)", "rgb(17, 102, 95)", "rgb(17, 118, 109)", "rgb(17, 186, 172)", "rgb(12, 202, 186)", "rgb(109, 139, 137)", "rgb(163, 196, 194)", "rgb(47, 97, 94)", "rgb(159, 214, 210)", "rgb(208, 236, 234)", "rgb(49, 130, 124)", "rgb(63, 184, 175)", "rgb(52, 158, 151)", "rgb(78, 205, 196)", "rgb(50, 194, 185)", "rgb(0, 152, 141)", "rgb(0, 204, 190)", "rgb(77, 97, 96)", "rgb(107, 151, 149)", "rgb(107, 153, 151)", "rgb(108, 161, 158)", "rgb(33, 54, 53)", "rgb(108, 166, 163)", "rgb(121, 183, 180)", "rgb(69, 154, 150)", "rgb(59, 140, 136)", "rgb(167, 219, 216)", "rgb(69, 173, 168)", "rgb(126, 206, 202)", "rgb(45, 147, 142)", "rgb(105, 210, 205)", "rgb(44, 184, 178)", "rgb(30, 164, 157)", "rgb(15, 146, 140)", "rgb(0, 255, 242)", "rgb(164, 189, 188)", "rgb(132, 171, 170)", "rgb(79, 139, 137)", "rgb(173, 212, 211)", "rgb(54, 137, 134)", "rgb(31, 103, 100)", "rgb(31, 103, 100)", "rgb(28, 163, 158)", "rgb(10, 131, 127)", "rgb(13, 178, 172)", "rgb(7, 100, 97)", "rgb(8, 128, 123)", "rgb(7, 138, 133)", "rgb(2, 252, 243)", "rgb(105, 165, 164)", "rgb(91, 155, 154)", "rgb(91, 183, 182)", "rgb(49, 145, 144)", "rgb(80, 200, 198)", "rgb(36, 143, 141)", "rgb(54, 206, 204)", "rgb(22, 102, 101)", "rgb(10, 92, 90)", "rgb(14, 174, 171)", "rgb(9, 166, 163)", "rgb(10, 191, 188)", "rgb(3, 101, 100)", "rgb(2, 111, 110)", "rgb(2, 155, 153)", "rgb(0, 44, 43)", "rgb(0, 68, 67)", "rgb(56, 57, 57)", "rgb(211, 213, 213)", "rgb(88, 93, 93)", "rgb(217, 219, 219)", "rgb(52, 56, 56)", "rgb(75, 87, 87)", "rgb(92, 110, 110)", "rgb(120, 144, 144)", "rgb(198, 214, 214)", "rgb(222, 231, 231)", "rgb(128, 168, 168)", "rgb(140, 176, 176)", "rgb(157, 188, 188)", "rgb(102, 153, 153)", "rgb(235, 242, 242)", "rgb(8, 13, 13)", "rgb(192, 216, 216)", "rgb(26, 43, 43)", "rgb(61, 104, 104)", "rgb(36, 66, 66)", "rgb(51, 102, 102)", "rgb(153, 204, 204)", "rgb(193, 224, 224)", "rgb(65, 142, 142)", "rgb(60, 162, 162)", "rgb(24, 72, 72)", "rgb(51, 153, 153)", "rgb(48, 146, 146)", "rgb(42, 139, 139)", "rgb(73, 204, 204)", "rgb(37, 155, 155)", "rgb(17, 77, 77)", "rgb(28, 128, 128)", "rgb(33, 163, 163)", "rgb(33, 182, 182)", "rgb(23, 167, 168)", "rgb(12, 126, 126)", "rgb(12, 143, 143)", "rgb(14, 192, 193)", "rgb(5, 155, 154)", "rgb(0, 96, 96)", "rgb(0, 102, 102)", "rgb(0, 120, 120)", "rgb(0, 133, 132)", "rgb(102, 255, 255)", "rgb(192, 255, 255)", "rgb(125, 180, 181)", "rgb(87, 197, 199)", "rgb(19, 70, 71)", "rgb(15, 125, 126)", "rgb(16, 137, 139)", "rgb(12, 227, 232)", "rgb(5, 135, 137)", "rgb(210, 253, 254)", "rgb(0, 100, 101)", "rgb(0, 126, 128)", "rgb(0, 181, 185)", "rgb(0, 185, 189)", "rgb(197, 223, 224)", "rgb(83, 159, 162)", "rgb(59, 129, 131)", "rgb(20, 47, 48)", "rgb(52, 142, 145)", "rgb(28, 80, 82)", "rgb(51, 145, 148)", "rgb(31, 95, 97)", "rgb(44, 159, 163)", "rgb(50, 185, 190)", "rgb(48, 196, 201)", "rgb(20, 136, 139)", "rgb(22, 193, 200)", "rgb(14, 144, 148)", "rgb(11, 129, 133)", "rgb(7, 162, 166)", "rgb(2, 123, 127)", "rgb(0, 104, 108)", "rgb(23, 249, 255)", "rgb(168, 188, 189)", "rgb(40, 61, 62)", "rgb(33, 52, 53)", "rgb(165, 200, 202)", "rgb(94, 159, 163)", "rgb(67, 119, 122)", "rgb(66, 147, 152)", "rgb(27, 103, 107)", "rgb(49, 213, 222)", "rgb(14, 141, 148)", "rgb(3, 72, 76)", "rgb(7, 158, 166)", "rgb(0, 201, 210)", "rgb(175, 251, 255)", "rgb(144, 157, 158)", "rgb(141, 156, 157)", "rgb(102, 130, 132)", "rgb(175, 202, 204)", "rgb(185, 215, 217)", "rgb(97, 166, 171)", "rgb(132, 191, 195)", "rgb(61, 123, 128)", "rgb(106, 197, 203)", "rgb(25, 94, 99)", "rgb(38, 145, 153)", "rgb(38, 151, 159)", "rgb(30, 140, 147)", "rgb(19, 96, 102)", "rgb(12, 165, 176)", "rgb(9, 163, 173)", "rgb(5, 103, 110)", "rgb(5, 161, 173)", "rgb(1, 135, 144)", "rgb(0, 31, 33)", "rgb(184, 250, 255)", "rgb(185, 195, 196)", "rgb(45, 56, 57)", "rgb(100, 130, 133)", "rgb(104, 145, 149)", "rgb(83, 119, 122)", "rgb(235, 247, 248)", "rgb(206, 236, 239)", "rgb(64, 192, 203)", "rgb(32, 113, 120)", "rgb(19, 116, 125)", "rgb(10, 171, 186)", "rgb(0, 160, 176)", "rgb(232, 253, 255)", "rgb(105, 162, 168)", "rgb(68, 135, 143)", "rgb(88, 175, 184)", "rgb(62, 163, 175)", "rgb(24, 91, 99)", "rgb(33, 151, 163)", "rgb(39, 177, 191)", "rgb(2, 157, 175)", "rgb(59, 67, 68)", "rgb(84, 120, 125)", "rgb(174, 206, 210)", "rgb(224, 239, 241)", "rgb(62, 131, 140)", "rgb(69, 170, 184)", "rgb(69, 181, 196)", "rgb(43, 129, 140)", "rgb(6, 57, 64)", "rgb(0, 46, 52)", "rgb(0, 95, 107)", "rgb(0, 140, 158)", "rgb(0, 180, 204)", "rgb(0, 223, 252)", "rgb(96, 236, 255)", "rgb(133, 170, 176)", "rgb(51, 79, 83)", "rgb(100, 158, 167)", "rgb(106, 171, 181)", "rgb(44, 107, 116)", "rgb(209, 234, 238)", "rgb(42, 110, 120)", "rgb(27, 135, 152)", "rgb(22, 147, 165)", "rgb(22, 147, 165)", "rgb(21, 143, 162)", "rgb(22, 147, 167)", "rgb(0, 39, 45)", "rgb(0, 72, 83)", "rgb(143, 154, 156)", "rgb(189, 205, 208)", "rgb(203, 220, 223)", "rgb(114, 165, 174)", "rgb(177, 225, 233)", "rgb(29, 94, 105)", "rgb(19, 68, 77)", "rgb(43, 158, 179)", "rgb(94, 205, 224)", "rgb(21, 122, 140)", "rgb(5, 211, 248)", "rgb(0, 41, 48)", "rgb(0, 168, 198)", "rgb(153, 178, 183)", "rgb(46, 67, 71)", "rgb(84, 121, 128)", "rgb(83, 138, 149)", "rgb(28, 85, 96)", "rgb(75, 180, 202)", "rgb(105, 210, 231)", "rgb(10, 55, 64)", "rgb(27, 176, 206)", "rgb(15, 195, 232)", "rgb(0, 206, 245)", "rgb(101, 114, 117)", "rgb(80, 98, 102)", "rgb(139, 166, 172)", "rgb(11, 29, 33)", "rgb(157, 211, 223)", "rgb(30, 195, 234)", "rgb(9, 115, 138)", "rgb(0, 202, 248)", "rgb(201, 209, 211)", "rgb(77, 104, 111)", "rgb(168, 189, 194)", "rgb(49, 76, 83)", "rgb(36, 67, 75)", "rgb(203, 228, 234)", "rgb(43, 135, 158)", "rgb(136, 161, 168)", "rgb(70, 96, 103)", "rgb(137, 171, 180)", "rgb(169, 194, 201)", "rgb(44, 77, 86)", "rgb(92, 206, 238)", "rgb(36, 192, 235)", "rgb(4, 109, 139)", "rgb(1, 148, 190)", "rgb(0, 62, 79)", "rgb(107, 172, 191)", "rgb(92, 172, 196)", "rgb(6, 16, 19)", "rgb(46, 151, 183)", "rgb(39, 144, 176)", "rgb(150, 215, 235)", "rgb(16, 107, 135)", "rgb(80, 89, 92)", "rgb(111, 139, 148)", "rgb(122, 149, 158)", "rgb(184, 199, 204)", "rgb(137, 167, 177)", "rgb(159, 185, 194)", "rgb(79, 134, 153)", "rgb(33, 90, 109)", "rgb(25, 71, 86)", "rgb(50, 153, 187)", "rgb(9, 81, 105)", "rgb(2, 119, 158)", "rgb(109, 117, 120)", "rgb(103, 140, 153)", "rgb(45, 96, 115)", "rgb(138, 199, 222)", "rgb(10, 103, 137)", "rgb(3, 54, 73)", "rgb(3, 139, 187)", "rgb(97, 102, 104)", "rgb(74, 95, 103)", "rgb(23, 101, 133)", "rgb(38, 173, 228)", "rgb(77, 188, 233)", "rgb(10, 81, 109)", "rgb(4, 57, 78)", "rgb(0, 92, 129)", "rgb(0, 157, 221)", "rgb(0, 180, 252)", "rgb(99, 211, 255)", "rgb(137, 154, 161)", "rgb(30, 37, 40)", "rgb(42, 54, 59)", "rgb(41, 82, 100)", "rgb(32, 75, 94)", "rgb(78, 179, 222)", "rgb(4, 80, 113)", "rgb(62, 75, 81)", "rgb(126, 148, 158)", "rgb(69, 125, 151)", "rgb(38, 143, 190)", "rgb(1, 55, 80)", "rgb(171, 228, 255)", "rgb(193, 197, 199)", "rgb(10, 12, 13)", "rgb(51, 69, 78)", "rgb(91, 124, 141)", "rgb(20, 32, 38)", "rgb(3, 5, 6)", "rgb(59, 101, 122)", "rgb(0, 170, 255)", "rgb(142, 178, 197)", "rgb(43, 81, 102)", "rgb(14, 36, 48)", "rgb(18, 49, 66)", "rgb(215, 238, 250)", "rgb(11, 68, 98)", "rgb(6, 102, 153)", "rgb(0, 116, 180)", "rgb(64, 80, 89)", "rgb(60, 81, 93)", "rgb(101, 114, 122)", "rgb(67, 77, 83)", "rgb(152, 165, 173)", "rgb(141, 174, 195)", "rgb(68, 115, 144)", "rgb(10, 84, 131)", "rgb(2, 27, 43)", "rgb(54, 57, 59)", "rgb(71, 102, 123)", "rgb(91, 136, 165)", "rgb(31, 47, 58)", "rgb(73, 112, 138)", "rgb(136, 171, 194)", "rgb(189, 209, 222)", "rgb(9, 15, 19)", "rgb(208, 224, 235)", "rgb(138, 179, 207)", "rgb(65, 128, 171)", "rgb(10, 75, 117)", "rgb(9, 69, 108)", "rgb(0, 63, 105)", "rgb(228, 235, 240)", "rgb(30, 100, 149)", "rgb(2, 65, 109)", "rgb(23, 31, 37)", "rgb(21, 33, 42)", "rgb(72, 122, 161)", "rgb(39, 72, 98)", "rgb(23, 44, 60)", "rgb(81, 145, 193)", "rgb(21, 43, 60)", "rgb(233, 242, 249)", "rgb(140, 191, 230)", "rgb(178, 217, 247)", "rgb(0, 31, 54)", "rgb(161, 166, 170)", "rgb(88, 104, 117)", "rgb(58, 137, 201)", "rgb(156, 196, 228)", "rgb(15, 69, 113)", "rgb(3, 28, 48)", "rgb(162, 169, 175)", "rgb(78, 88, 97)", "rgb(53, 92, 125)", "rgb(68, 116, 157)", "rgb(20, 39, 56)", "rgb(2, 127, 233)", "rgb(78, 92, 105)", "rgb(198, 212, 225)", "rgb(20, 36, 51)", "rgb(141, 189, 235)", "rgb(3, 34, 63)", "rgb(104, 178, 248)", "rgb(122, 123, 124)", "rgb(131, 134, 137)", "rgb(26, 27, 28)", "rgb(69, 72, 75)", "rgb(98, 105, 112)", "rgb(21, 25, 29)", "rgb(120, 144, 168)", "rgb(131, 156, 181)", "rgb(2, 3, 4)", "rgb(43, 78, 114)", "rgb(85, 98, 112)", "rgb(85, 98, 112)", "rgb(83, 109, 136)", "rgb(37, 51, 66)", "rgb(34, 141, 255)", "rgb(81, 100, 122)", "rgb(18, 47, 81)", "rgb(0, 91, 197)", "rgb(86, 105, 129)", "rgb(71, 113, 163)", "rgb(11, 46, 89)", "rgb(110, 123, 140)", "rgb(66, 78, 94)", "rgb(83, 108, 141)", "rgb(4, 17, 34)", "rgb(150, 155, 162)", "rgb(72, 88, 111)", "rgb(9, 43, 90)", "rgb(96, 109, 128)", "rgb(220, 224, 230)", "rgb(59, 82, 116)", "rgb(86, 126, 187)", "rgb(43, 76, 126)", "rgb(13, 25, 43)", "rgb(56, 109, 189)", "rgb(128, 179, 255)", "rgb(56, 66, 82)", "rgb(51, 62, 80)", "rgb(28, 35, 46)", "rgb(8, 41, 94)", "rgb(3, 22, 52)", "rgb(39, 49, 66)", "rgb(108, 120, 142)", "rgb(43, 54, 74)", "rgb(1, 13, 35)", "rgb(62, 65, 71)", "rgb(207, 213, 225)", "rgb(54, 68, 97)", "rgb(2, 3, 5)", "rgb(48, 72, 120)", "rgb(27, 50, 95)", "rgb(0, 24, 72)", "rgb(27, 102, 255)", "rgb(252, 253, 255)", "rgb(116, 129, 157)", "rgb(36, 58, 105)", "rgb(1, 38, 119)", "rgb(55, 59, 68)", "rgb(166, 174, 193)", "rgb(41, 67, 128)", "rgb(220, 228, 247)", "rgb(0, 5, 17)", "rgb(42, 44, 49)", "rgb(59, 63, 73)", "rgb(191, 207, 247)", "rgb(111, 115, 126)", "rgb(76, 94, 145)", "rgb(25, 39, 78)", "rgb(0, 20, 73)", "rgb(111, 149, 255)", "rgb(73, 81, 104)", "rgb(28, 33, 48)", "rgb(17, 22, 37)", "rgb(87, 90, 101)", "rgb(41, 44, 55)", "rgb(58, 65, 90)", "rgb(20, 24, 39)", "rgb(43, 44, 48)", "rgb(92, 98, 122)", "rgb(29, 36, 64)", "rgb(247, 248, 252)", "rgb(80, 110, 229)", "rgb(209, 211, 220)", "rgb(51, 56, 78)", "rgb(16, 25, 66)", "rgb(83, 87, 107)", "rgb(59, 64, 88)", "rgb(70, 77, 112)", "rgb(26, 28, 39)", "rgb(36, 39, 57)", "rgb(47, 53, 89)", "rgb(39, 45, 77)", "rgb(28, 49, 165)", "rgb(16, 31, 120)", "rgb(1, 9, 55)", "rgb(2, 15, 89)", "rgb(15, 19, 46)", "rgb(3, 13, 79)", "rgb(0, 5, 36)", "rgb(23, 24, 31)", "rgb(75, 83, 139)", "rgb(64, 68, 103)", "rgb(208, 210, 227)", "rgb(165, 170, 217)", "rgb(27, 28, 38)", "rgb(82, 85, 116)", "rgb(92, 101, 192)", "rgb(16, 22, 82)", "rgb(90, 92, 117)", "rgb(97, 99, 130)", "rgb(136, 141, 218)", "rgb(13, 15, 54)", "rgb(115, 117, 165)", "rgb(2, 3, 26)", "rgb(31, 31, 32)", "rgb(98, 98, 102)", "rgb(217, 217, 219)", "rgb(22, 22, 24)", "rgb(102, 102, 110)", "rgb(17, 17, 19)", "rgb(75, 75, 85)", "rgb(11, 11, 13)", "rgb(56, 56, 69)", "rgb(115, 115, 141)", "rgb(40, 40, 50)", "rgb(96, 96, 120)", "rgb(66, 66, 84)", "rgb(62, 62, 83)", "rgb(119, 119, 157)", "rgb(237, 237, 242)", "rgb(52, 52, 78)", "rgb(47, 47, 77)", "rgb(18, 18, 43)", "rgb(24, 24, 72)", "rgb(0, 0, 57)", "rgb(44, 43, 75)", "rgb(33, 32, 63)", "rgb(47, 43, 173)", "rgb(20, 19, 37)", "rgb(50, 44, 142)", "rgb(142, 140, 163)", "rgb(69, 68, 78)", "rgb(23, 20, 48)", "rgb(14, 11, 41)", "rgb(3, 0, 28)", "rgb(123, 120, 147)", "rgb(74, 72, 87)", "rgb(86, 81, 117)", "rgb(65, 59, 107)", "rgb(123, 110, 214)", "rgb(12, 6, 54)", "rgb(209, 208, 215)", "rgb(40, 38, 52)", "rgb(136, 112, 255)", "rgb(101, 98, 115)", "rgb(23, 17, 51)", "rgb(67, 66, 71)", "rgb(51, 50, 55)", "rgb(37, 35, 45)", "rgb(50, 47, 62)", "rgb(154, 143, 200)", "rgb(35, 27, 66)", "rgb(65, 42, 156)", "rgb(224, 218, 247)", "rgb(34, 29, 52)", "rgb(33, 28, 51)", "rgb(42, 35, 68)", "rgb(22, 14, 50)", "rgb(35, 20, 91)", "rgb(35, 34, 38)", "rgb(65, 62, 74)", "rgb(6, 2, 18)", "rgb(86, 81, 100)", "rgb(57, 50, 77)", "rgb(80, 67, 117)", "rgb(31, 25, 47)", "rgb(14, 0, 54)", "rgb(114, 108, 129)", "rgb(69, 60, 92)", "rgb(103, 96, 119)", "rgb(26, 22, 35)", "rgb(63, 53, 87)", "rgb(14, 0, 47)", "rgb(94, 84, 115)", "rgb(92, 79, 121)", "rgb(46, 36, 68)", "rgb(41, 30, 64)", "rgb(65, 41, 115)", "rgb(115, 69, 214)", "rgb(53, 52, 55)", "rgb(148, 145, 154)", "rgb(72, 68, 80)", "rgb(129, 116, 156)", "rgb(77, 62, 107)", "rgb(72, 48, 120)", "rgb(48, 24, 96)", "rgb(30, 12, 66)", "rgb(104, 96, 119)", "rgb(147, 128, 183)", "rgb(80, 21, 189)", "rgb(117, 114, 122)", "rgb(92, 88, 99)", "rgb(71, 52, 105)", "rgb(103, 67, 165)", "rgb(112, 55, 205)", "rgb(85, 27, 179)", "rgb(53, 49, 59)", "rgb(112, 100, 130)", "rgb(97, 83, 117)", "rgb(90, 76, 110)", "rgb(46, 30, 69)", "rgb(237, 227, 251)", "rgb(129, 122, 138)", "rgb(53, 47, 61)", "rgb(88, 59, 126)", "rgb(32, 14, 56)", "rgb(118, 103, 136)", "rgb(85, 72, 101)", "rgb(75, 60, 93)", "rgb(31, 4, 65)", "rgb(23, 1, 50)", "rgb(17, 9, 26)", "rgb(115, 102, 129)", "rgb(81, 68, 95)", "rgb(63, 50, 77)", "rgb(51, 29, 74)", "rgb(144, 97, 194)", "rgb(26, 11, 42)", "rgb(190, 128, 255)", "rgb(47, 46, 48)", "rgb(75, 68, 82)", "rgb(121, 108, 134)", "rgb(99, 82, 116)", "rgb(27, 21, 33)", "rgb(96, 72, 120)", "rgb(35, 25, 45)", "rgb(71, 47, 95)", "rgb(91, 29, 153)", "rgb(1, 0, 2)", "rgb(186, 175, 196)", "rgb(81, 66, 95)", "rgb(49, 35, 62)", "rgb(108, 91, 123)", "rgb(20, 13, 26)", "rgb(48, 28, 65)", "rgb(224, 209, 237)", "rgb(28, 11, 43)", "rgb(10, 3, 16)", "rgb(148, 142, 153)", "rgb(22, 9, 33)", "rgb(42, 4, 74)", "rgb(217, 171, 255)", "rgb(195, 187, 201)", "rgb(150, 132, 163)", "rgb(78, 57, 93)", "rgb(53, 38, 64)", "rgb(73, 0, 126)", "rgb(106, 94, 114)", "rgb(50, 41, 56)", "rgb(99, 82, 110)", "rgb(59, 43, 70)", "rgb(46, 38, 51)", "rgb(59, 35, 74)", "rgb(62, 55, 66)", "rgb(82, 57, 97)", "rgb(63, 38, 77)", "rgb(57, 27, 74)", "rgb(65, 50, 73)", "rgb(38, 13, 51)", "rgb(242, 229, 249)", "rgb(37, 35, 38)", "rgb(24, 22, 25)", "rgb(49, 39, 54)", "rgb(126, 99, 140)", "rgb(119, 61, 148)", "rgb(179, 128, 204)", "rgb(88, 39, 112)", "rgb(242, 228, 249)", "rgb(170, 0, 255)", "rgb(97, 85, 102)", "rgb(135, 117, 143)", "rgb(39, 10, 51)", "rgb(107, 102, 109)", "rgb(89, 68, 97)", "rgb(174, 143, 186)", "rgb(49, 29, 57)", "rgb(35, 15, 43)", "rgb(66, 11, 88)", "rgb(114, 87, 124)", "rgb(54, 21, 66)", "rgb(186, 1, 255)", "rgb(82, 70, 86)", "rgb(45, 27, 51)", "rgb(51, 27, 59)", "rgb(46, 20, 55)", "rgb(54, 7, 69)", "rgb(47, 0, 63)", "rgb(77, 66, 80)", "rgb(71, 23, 84)", "rgb(26, 8, 31)", "rgb(225, 183, 237)", "rgb(13, 2, 16)", "rgb(24, 20, 25)", "rgb(19, 7, 22)", "rgb(54, 11, 65)", "rgb(119, 4, 147)", "rgb(22, 13, 24)", "rgb(79, 41, 88)", "rgb(54, 23, 61)", "rgb(47, 19, 53)", "rgb(61, 10, 73)", "rgb(126, 86, 134)", "rgb(92, 62, 98)", "rgb(67, 32, 74)", "rgb(130, 112, 133)", "rgb(96, 80, 99)", "rgb(29, 12, 32)", "rgb(101, 31, 113)", "rgb(75, 62, 77)", "rgb(119, 71, 126)", "rgb(38, 19, 41)", "rgb(87, 71, 89)", "rgb(114, 91, 117)", "rgb(70, 41, 74)", "rgb(55, 25, 59)", "rgb(50, 1, 57)", "rgb(43, 34, 44)", "rgb(116, 79, 120)", "rgb(51, 20, 54)", "rgb(38, 7, 41)", "rgb(103, 77, 105)", "rgb(78, 49, 80)", "rgb(117, 57, 121)", "rgb(246, 231, 247)", "rgb(55, 5, 59)", "rgb(33, 1, 35)", "rgb(125, 103, 126)", "rgb(156, 122, 157)", "rgb(94, 64, 95)", "rgb(107, 69, 108)", "rgb(66, 35, 67)", "rgb(81, 43, 82)", "rgb(101, 19, 102)", "rgb(52, 7, 53)", "rgb(75, 0, 76)", "rgb(46, 41, 46)", "rgb(184, 174, 184)", "rgb(69, 55, 69)", "rgb(99, 80, 99)", "rgb(80, 56, 80)", "rgb(144, 96, 144)", "rgb(73, 45, 73)", "rgb(102, 51, 102)", "rgb(77, 29, 77)", "rgb(173, 43, 173)", "rgb(4, 0, 4)", "rgb(48, 0, 48)", "rgb(57, 0, 57)", "rgb(72, 0, 72)", "rgb(130, 0, 129)", "rgb(255, 252, 255)", "rgb(255, 251, 255)", "rgb(97, 56, 96)", "rgb(112, 61, 111)", "rgb(100, 50, 99)", "rgb(86, 33, 85)", "rgb(92, 61, 91)", "rgb(76, 38, 75)", "rgb(79, 44, 77)", "rgb(65, 48, 64)", "rgb(98, 14, 93)", "rgb(102, 8, 96)", "rgb(105, 39, 100)", "rgb(100, 31, 94)", "rgb(100, 31, 94)", "rgb(129, 101, 126)", "rgb(94, 64, 91)", "rgb(72, 35, 68)", "rgb(19, 9, 18)", "rgb(31, 10, 29)", "rgb(167, 149, 165)", "rgb(201, 183, 199)", "rgb(87, 62, 84)", "rgb(79, 54, 76)", "rgb(50, 32, 48)", "rgb(79, 45, 75)", "rgb(52, 25, 49)", "rgb(148, 61, 138)", "rgb(64, 34, 60)", "rgb(132, 64, 123)", "rgb(85, 2, 74)", "rgb(199, 185, 197)", "rgb(53, 19, 48)", "rgb(110, 30, 98)", "rgb(82, 6, 71)", "rgb(115, 6, 98)", "rgb(59, 0, 50)", "rgb(60, 54, 59)", "rgb(94, 82, 92)", "rgb(69, 26, 62)", "rgb(102, 36, 91)", "rgb(46, 5, 39)", "rgb(74, 58, 71)", "rgb(185, 152, 179)", "rgb(50, 29, 46)", "rgb(57, 29, 52)", "rgb(116, 35, 101)", "rgb(73, 10, 61)", "rgb(84, 0, 69)", "rgb(135, 130, 134)", "rgb(34, 29, 33)", "rgb(79, 54, 74)", "rgb(87, 46, 79)", "rgb(48, 24, 43)", "rgb(71, 13, 59)", "rgb(65, 9, 54)", "rgb(134, 106, 128)", "rgb(59, 45, 56)", "rgb(113, 85, 107)", "rgb(93, 65, 87)", "rgb(132, 86, 122)", "rgb(77, 49, 71)", "rgb(130, 55, 114)", "rgb(109, 22, 90)", "rgb(74, 7, 60)", "rgb(157, 0, 122)", "rgb(184, 0, 144)", "rgb(98, 69, 91)", "rgb(167, 82, 147)", "rgb(156, 60, 134)", "rgb(61, 23, 52)", "rgb(48, 13, 40)", "rgb(115, 24, 94)", "rgb(63, 6, 50)", "rgb(142, 109, 134)", "rgb(184, 139, 173)", "rgb(184, 119, 168)", "rgb(142, 64, 122)", "rgb(217, 64, 179)", "rgb(184, 0, 138)", "rgb(111, 100, 108)", "rgb(95, 84, 92)", "rgb(57, 42, 53)", "rgb(158, 106, 144)", "rgb(97, 42, 82)", "rgb(90, 30, 74)", "rgb(57, 13, 45)", "rgb(73, 52, 67)", "rgb(56, 28, 48)", "rgb(49, 10, 38)", "rgb(55, 1, 40)", "rgb(92, 82, 89)", "rgb(115, 98, 110)", "rgb(40, 27, 36)", "rgb(45, 28, 40)", "rgb(99, 47, 83)", "rgb(61, 28, 51)", "rgb(31, 14, 26)", "rgb(127, 19, 95)", "rgb(111, 5, 80)", "rgb(93, 45, 78)", "rgb(62, 28, 51)", "rgb(75, 17, 57)", "rgb(39, 8, 29)", "rgb(59, 12, 44)", "rgb(33, 5, 24)", "rgb(104, 1, 72)", "rgb(133, 0, 91)", "rgb(153, 0, 105)", "rgb(53, 38, 48)", "rgb(69, 45, 61)", "rgb(46, 13, 35)", "rgb(96, 24, 72)", "rgb(28, 1, 19)", "rgb(255, 0, 170)", "rgb(167, 141, 158)", "rgb(131, 97, 119)", "rgb(140, 91, 123)", "rgb(106, 61, 90)", "rgb(88, 30, 68)", "rgb(166, 2, 108)", "rgb(92, 65, 82)", "rgb(55, 25, 44)", "rgb(116, 25, 82)", "rgb(254, 28, 172)", "rgb(254, 64, 185)", "rgb(254, 89, 194)", "rgb(69, 46, 60)", "rgb(54, 31, 45)", "rgb(51, 19, 39)", "rgb(90, 14, 61)", "rgb(103, 16, 69)", "rgb(106, 14, 71)", "rgb(196, 3, 122)", "rgb(167, 2, 103)", "rgb(120, 87, 107)", "rgb(164, 87, 133)", "rgb(93, 39, 71)", "rgb(96, 39, 73)", "rgb(153, 23, 102)", "rgb(64, 4, 40)", "rgb(5, 0, 3)", "rgb(255, 0, 153)", "rgb(109, 97, 104)", "rgb(161, 128, 147)", "rgb(80, 41, 64)", "rgb(42, 9, 28)", "rgb(34, 3, 21)", "rgb(34, 1, 20)", "rgb(38, 0, 22)", "rgb(87, 73, 81)", "rgb(163, 84, 129)", "rgb(75, 29, 55)", "rgb(138, 47, 98)", "rgb(64, 18, 44)", "rgb(191, 42, 127)", "rgb(95, 13, 59)", "rgb(228, 38, 146)", "rgb(117, 14, 73)", "rgb(77, 0, 43)", "rgb(255, 0, 146)", "rgb(108, 99, 104)", "rgb(94, 67, 82)", "rgb(87, 27, 60)", "rgb(68, 10, 42)", "rgb(184, 19, 111)", "rgb(94, 75, 85)", "rgb(173, 132, 154)", "rgb(92, 55, 75)", "rgb(125, 63, 96)", "rgb(82, 34, 60)", "rgb(143, 60, 104)", "rgb(201, 123, 165)", "rgb(85, 32, 60)", "rgb(119, 42, 83)", "rgb(160, 52, 110)", "rgb(48, 9, 30)", "rgb(125, 20, 76)", "rgb(108, 4, 60)", "rgb(145, 112, 129)", "rgb(116, 52, 85)", "rgb(201, 114, 159)", "rgb(64, 14, 40)", "rgb(162, 35, 101)", "rgb(153, 29, 93)", "rgb(179, 29, 106)", "rgb(82, 12, 48)", "rgb(209, 17, 116)", "rgb(252, 2, 132)", "rgb(227, 0, 117)", "rgb(255, 0, 132)", "rgb(42, 40, 41)", "rgb(104, 100, 102)", "rgb(117, 97, 107)", "rgb(69, 55, 62)", "rgb(38, 28, 33)", "rgb(102, 50, 76)", "rgb(126, 47, 86)", "rgb(249, 235, 242)", "rgb(240, 7, 123)", "rgb(144, 4, 74)", "rgb(2, 0, 1)", "rgb(255, 65, 161)", "rgb(150, 108, 128)", "rgb(69, 42, 55)", "rgb(164, 101, 131)", "rgb(90, 48, 68)", "rgb(94, 47, 70)", "rgb(108, 55, 81)", "rgb(142, 63, 101)", "rgb(203, 124, 162)", "rgb(140, 49, 93)", "rgb(66, 20, 42)", "rgb(84, 23, 52)", "rgb(224, 72, 145)", "rgb(109, 8, 57)", "rgb(164, 11, 84)", "rgb(255, 151, 202)", "rgb(199, 182, 190)", "rgb(211, 198, 204)", "rgb(51, 36, 43)", "rgb(155, 95, 123)", "rgb(86, 52, 68)", "rgb(90, 53, 70)", "rgb(29, 16, 22)", "rgb(67, 35, 50)", "rgb(68, 36, 51)", "rgb(121, 58, 87)", "rgb(122, 23, 69)", "rgb(167, 26, 91)", "rgb(128, 18, 69)", "rgb(31, 3, 16)", "rgb(140, 14, 72)", "rgb(132, 9, 67)", "rgb(43, 2, 21)", "rgb(248, 1, 116)", "rgb(133, 88, 108)", "rgb(154, 80, 113)", "rgb(122, 30, 72)", "rgb(217, 45, 122)", "rgb(222, 26, 114)", "rgb(33, 2, 16)", "rgb(158, 6, 74)", "rgb(145, 1, 66)", "rgb(33, 0, 15)", "rgb(255, 52, 142)", "rgb(135, 88, 108)", "rgb(156, 102, 125)", "rgb(97, 60, 76)", "rgb(68, 36, 50)", "rgb(112, 57, 81)", "rgb(26, 12, 18)", "rgb(84, 30, 53)", "rgb(161, 56, 102)", "rgb(99, 32, 61)", "rgb(121, 37, 74)", "rgb(47, 6, 24)", "rgb(181, 13, 87)", "rgb(189, 13, 89)", "rgb(128, 4, 58)", "rgb(247, 10, 113)", "rgb(246, 0, 105)", "rgb(255, 0, 111)", "rgb(148, 114, 128)", "rgb(133, 94, 110)", "rgb(192, 161, 174)", "rgb(120, 77, 95)", "rgb(94, 56, 72)", "rgb(65, 31, 45)", "rgb(44, 13, 26)", "rgb(251, 239, 244)", "rgb(127, 30, 71)", "rgb(214, 71, 131)", "rgb(222, 82, 140)", "rgb(191, 30, 98)", "rgb(104, 14, 52)", "rgb(212, 15, 96)", "rgb(221, 11, 100)", "rgb(68, 2, 30)", "rgb(192, 3, 83)", "rgb(252, 3, 108)", "rgb(52, 0, 22)", "rgb(198, 0, 82)", "rgb(234, 0, 99)", "rgb(240, 0, 101)", "rgb(255, 12, 113)", "rgb(84, 79, 81)", "rgb(102, 97, 99)", "rgb(43, 38, 40)", "rgb(128, 85, 102)", "rgb(170, 101, 129)", "rgb(67, 35, 48)", "rgb(84, 36, 55)", "rgb(206, 112, 149)", "rgb(156, 50, 92)", "rgb(92, 27, 53)", "rgb(209, 55, 117)", "rgb(145, 32, 77)", "rgb(240, 185, 207)", "rgb(157, 32, 83)", "rgb(110, 21, 56)", "rgb(222, 29, 106)", "rgb(230, 60, 128)", "rgb(141, 16, 66)", "rgb(145, 15, 67)", "rgb(99, 7, 44)", "rgb(240, 36, 117)", "rgb(242, 17, 108)", "rgb(237, 11, 101)", "rgb(199, 4, 82)", "rgb(232, 5, 96)", "rgb(214, 2, 87)", "rgb(48, 0, 19)", "rgb(217, 0, 87)", "rgb(69, 38, 50)", "rgb(84, 38, 56)", "rgb(64, 28, 42)", "rgb(143, 36, 77)", "rgb(201, 48, 107)", "rgb(232, 111, 158)", "rgb(224, 11, 91)", "rgb(253, 101, 160)", "rgb(149, 0, 58)", "rgb(190, 0, 73)", "rgb(255, 234, 242)", "rgb(199, 158, 173)", "rgb(79, 43, 56)", "rgb(143, 77, 101)", "rgb(177, 71, 109)", "rgb(125, 41, 72)", "rgb(184, 53, 100)", "rgb(194, 39, 96)", "rgb(158, 30, 76)", "rgb(232, 23, 100)", "rgb(237, 76, 135)", "rgb(158, 11, 65)", "rgb(217, 15, 90)", "rgb(37, 2, 15)", "rgb(175, 7, 69)", "rgb(240, 10, 94)", "rgb(78, 3, 30)", "rgb(247, 21, 104)", "rgb(247, 30, 108)", "rgb(94, 3, 36)", "rgb(250, 88, 148)", "rgb(244, 6, 94)", "rgb(166, 3, 63)", "rgb(209, 2, 78)", "rgb(235, 2, 88)", "rgb(252, 16, 104)", "rgb(255, 12, 102)", "rgb(255, 13, 102)", "rgb(255, 17, 104)", "rgb(140, 102, 115)", "rgb(69, 43, 52)", "rgb(160, 102, 122)", "rgb(84, 52, 63)", "rgb(243, 226, 232)", "rgb(43, 11, 22)", "rgb(201, 30, 90)", "rgb(145, 20, 64)", "rgb(188, 25, 83)", "rgb(199, 23, 85)", "rgb(189, 21, 80)", "rgb(252, 217, 229)", "rgb(251, 197, 216)", "rgb(238, 11, 91)", "rgb(253, 10, 96)", "rgb(253, 10, 96)", "rgb(255, 0, 91)", "rgb(255, 84, 143)", "rgb(77, 74, 75)", "rgb(38, 35, 36)", "rgb(56, 47, 50)", "rgb(41, 29, 33)", "rgb(103, 67, 79)", "rgb(158, 107, 124)", "rgb(25, 16, 19)", "rgb(144, 66, 92)", "rgb(176, 85, 116)", "rgb(176, 85, 116)", "rgb(176, 85, 116)", "rgb(204, 82, 122)", "rgb(205, 68, 114)", "rgb(69, 11, 30)", "rgb(226, 61, 117)", "rgb(230, 78, 129)", "rgb(59, 8, 25)", "rgb(214, 28, 89)", "rgb(236, 92, 141)", "rgb(232, 23, 93)", "rgb(177, 12, 67)", "rgb(250, 140, 177)", "rgb(183, 2, 63)", "rgb(254, 5, 87)", "rgb(254, 49, 116)", "rgb(254, 97, 150)", "rgb(102, 0, 34)", "rgb(255, 25, 100)", "rgb(255, 43, 115)", "rgb(255, 61, 127)", "rgb(167, 99, 120)", "rgb(64, 32, 42)", "rgb(173, 76, 107)", "rgb(186, 69, 106)", "rgb(114, 36, 61)", "rgb(117, 35, 61)", "rgb(214, 89, 129)", "rgb(207, 58, 105)", "rgb(194, 37, 87)", "rgb(219, 60, 110)", "rgb(232, 96, 140)", "rgb(226, 27, 90)", "rgb(237, 88, 135)", "rgb(174, 12, 62)", "rgb(78, 5, 28)", "rgb(242, 48, 109)", "rgb(148, 5, 51)", "rgb(199, 0, 63)", "rgb(249, 0, 80)", "rgb(255, 0, 81)", "rgb(153, 127, 135)", "rgb(114, 62, 78)", "rgb(108, 57, 72)", "rgb(99, 39, 57)", "rgb(145, 51, 79)", "rgb(150, 44, 76)", "rgb(176, 37, 79)", "rgb(179, 32, 77)", "rgb(152, 23, 61)", "rgb(236, 34, 94)", "rgb(158, 12, 57)", "rgb(189, 10, 65)", "rgb(249, 22, 89)", "rgb(253, 10, 84)", "rgb(253, 19, 90)", "rgb(255, 232, 239)", "rgb(121, 92, 100)", "rgb(102, 66, 76)", "rgb(92, 50, 62)", "rgb(171, 92, 114)", "rgb(171, 82, 107)", "rgb(192, 108, 132)", "rgb(215, 143, 163)", "rgb(191, 73, 106)", "rgb(212, 130, 153)", "rgb(201, 92, 122)", "rgb(153, 47, 77)", "rgb(153, 44, 75)", "rgb(199, 64, 102)", "rgb(186, 50, 89)", "rgb(212, 94, 128)", "rgb(154, 40, 72)", "rgb(206, 55, 98)", "rgb(212, 72, 111)", "rgb(186, 30, 74)", "rgb(165, 26, 65)", "rgb(153, 23, 60)", "rgb(184, 28, 72)", "rgb(230, 60, 109)", "rgb(48, 5, 17)", "rgb(237, 40, 96)", "rgb(241, 57, 109)", "rgb(241, 57, 109)", "rgb(95, 5, 31)", "rgb(204, 6, 62)", "rgb(252, 47, 104)", "rgb(252, 61, 115)", "rgb(207, 2, 59)", "rgb(252, 15, 82)", "rgb(119, 0, 33)", "rgb(255, 0, 72)", "rgb(255, 0, 72)", "rgb(255, 13, 81)", "rgb(255, 20, 87)", "rgb(255, 44, 105)", "rgb(59, 25, 34)", "rgb(185, 72, 102)", "rgb(171, 62, 91)", "rgb(164, 57, 85)", "rgb(58, 17, 28)", "rgb(215, 100, 131)", "rgb(36, 9, 16)", "rgb(223, 92, 126)", "rgb(214, 41, 87)", "rgb(178, 33, 72)", "rgb(23, 4, 9)", "rgb(228, 35, 85)", "rgb(233, 78, 119)", "rgb(206, 20, 70)", "rgb(202, 20, 68)", "rgb(185, 17, 63)", "rgb(241, 12, 73)", "rgb(227, 8, 66)", "rgb(246, 12, 73)", "rgb(254, 83, 128)", "rgb(131, 0, 36)", "rgb(85, 81, 82)", "rgb(55, 43, 46)", "rgb(173, 92, 112)", "rgb(71, 35, 44)", "rgb(80, 35, 46)", "rgb(177, 55, 86)", "rgb(75, 22, 35)", "rgb(158, 45, 74)", "rgb(214, 73, 108)", "rgb(91, 16, 35)", "rgb(232, 114, 143)", "rgb(189, 27, 67)", "rgb(241, 53, 101)", "rgb(244, 67, 111)", "rgb(235, 10, 68)", "rgb(247, 17, 75)", "rgb(207, 6, 56)", "rgb(74, 0, 19)", "rgb(255, 39, 94)", "rgb(255, 51, 102)", "rgb(255, 51, 102)", "rgb(255, 51, 102)", "rgb(255, 144, 171)", "rgb(78, 56, 61)", "rgb(64, 43, 48)", "rgb(77, 51, 57)", "rgb(44, 23, 28)", "rgb(160, 79, 98)", "rgb(143, 66, 84)", "rgb(192, 87, 111)", "rgb(203, 111, 132)", "rgb(199, 95, 119)", "rgb(143, 47, 69)", "rgb(208, 73, 105)", "rgb(227, 148, 167)", "rgb(210, 77, 108)", "rgb(210, 77, 108)", "rgb(226, 134, 155)", "rgb(162, 37, 67)", "rgb(209, 40, 79)", "rgb(224, 85, 118)", "rgb(214, 37, 77)", "rgb(194, 32, 71)", "rgb(232, 103, 134)", "rgb(209, 30, 72)", "rgb(231, 90, 122)", "rgb(227, 37, 81)", "rgb(230, 64, 102)", "rgb(235, 94, 127)", "rgb(201, 24, 66)", "rgb(244, 161, 181)", "rgb(231, 32, 78)", "rgb(179, 18, 55)", "rgb(158, 14, 48)", "rgb(241, 65, 107)", "rgb(241, 47, 93)", "rgb(242, 52, 96)", "rgb(152, 9, 43)", "rgb(204, 12, 57)", "rgb(250, 21, 75)", "rgb(250, 2, 60)", "rgb(253, 96, 132)", "rgb(254, 75, 116)", "rgb(255, 0, 61)", "rgb(255, 0, 60)", "rgb(255, 8, 65)", "rgb(255, 46, 95)", "rgb(66, 57, 59)", "rgb(226, 217, 219)", "rgb(39, 25, 28)", "rgb(112, 69, 78)", "rgb(94, 54, 63)", "rgb(224, 192, 199)", "rgb(181, 72, 95)", "rgb(168, 39, 67)", "rgb(204, 38, 73)", "rgb(212, 30, 69)", "rgb(227, 50, 88)", "rgb(232, 30, 74)", "rgb(235, 33, 78)", "rgb(238, 40, 83)", "rgb(247, 158, 177)", "rgb(242, 43, 86)", "rgb(243, 33, 78)", "rgb(250, 46, 89)", "rgb(250, 64, 105)", "rgb(253, 96, 129)", "rgb(192, 1, 42)", "rgb(244, 0, 52)", "rgb(255, 25, 75)", "rgb(255, 38, 84)", "rgb(255, 51, 95)", "rgb(255, 66, 106)", "rgb(87, 77, 79)", "rgb(137, 102, 109)", "rgb(130, 94, 101)", "rgb(167, 132, 139)", "rgb(131, 85, 94)", "rgb(163, 96, 109)", "rgb(168, 81, 99)", "rgb(146, 57, 75)", "rgb(176, 56, 81)", "rgb(201, 77, 101)", "rgb(204, 77, 102)", "rgb(111, 27, 44)", "rgb(141, 32, 54)", "rgb(212, 63, 93)", "rgb(192, 41, 72)", "rgb(157, 29, 54)", "rgb(199, 37, 70)", "rgb(194, 31, 64)", "rgb(162, 18, 47)", "rgb(104, 10, 29)", "rgb(130, 13, 37)", "rgb(159, 16, 44)", "rgb(237, 74, 106)", "rgb(159, 10, 40)", "rgb(240, 25, 69)", "rgb(206, 10, 49)", "rgb(249, 121, 146)", "rgb(245, 20, 65)", "rgb(247, 52, 91)", "rgb(195, 6, 44)", "rgb(252, 50, 91)", "rgb(253, 110, 138)", "rgb(75, 0, 15)", "rgb(255, 31, 76)", "rgb(255, 84, 117)", "rgb(255, 178, 193)", "rgb(255, 194, 206)", "rgb(182, 145, 152)", "rgb(179, 120, 131)", "rgb(218, 76, 102)", "rgb(216, 57, 87)", "rgb(218, 55, 84)", "rgb(210, 32, 66)", "rgb(235, 88, 116)", "rgb(237, 86, 114)", "rgb(234, 40, 75)", "rgb(240, 93, 119)", "rgb(251, 121, 145)", "rgb(251, 113, 138)", "rgb(252, 40, 79)", "rgb(253, 78, 109)", "rgb(254, 67, 101)", "rgb(150, 144, 145)", "rgb(77, 65, 67)", "rgb(35, 29, 30)", "rgb(73, 61, 63)", "rgb(168, 99, 110)", "rgb(193, 133, 143)", "rgb(186, 95, 110)", "rgb(135, 49, 63)", "rgb(159, 54, 71)", "rgb(220, 99, 120)", "rgb(192, 41, 66)", "rgb(129, 22, 40)", "rgb(206, 35, 64)", "rgb(218, 38, 68)", "rgb(227, 83, 108)", "rgb(140, 22, 42)", "rgb(235, 96, 119)", "rgb(206, 24, 54)", "rgb(239, 51, 83)", "rgb(242, 88, 114)", "rgb(242, 29, 65)", "rgb(255, 29, 68)", "rgb(255, 29, 68)", "rgb(48, 35, 37)", "rgb(171, 130, 136)", "rgb(66, 40, 44)", "rgb(164, 98, 108)", "rgb(171, 80, 94)", "rgb(179, 89, 102)", "rgb(221, 168, 176)", "rgb(199, 107, 121)", "rgb(212, 131, 143)", "rgb(94, 31, 40)", "rgb(197, 72, 90)", "rgb(189, 55, 76)", "rgb(231, 168, 177)", "rgb(204, 42, 65)", "rgb(208, 41, 65)", "rgb(186, 35, 57)", "rgb(230, 84, 107)", "rgb(239, 118, 137)", "rgb(245, 163, 175)", "rgb(245, 134, 150)", "rgb(242, 68, 94)", "rgb(188, 11, 39)", "rgb(227, 2, 36)", "rgb(7, 0, 1)", "rgb(138, 0, 21)", "rgb(255, 15, 53)", "rgb(255, 61, 90)", "rgb(255, 59, 88)", "rgb(255, 81, 108)", "rgb(255, 102, 124)", "rgb(79, 57, 60)", "rgb(135, 85, 92)", "rgb(214, 171, 177)", "rgb(198, 131, 140)", "rgb(191, 99, 112)", "rgb(194, 92, 106)", "rgb(114, 39, 49)", "rgb(169, 53, 69)", "rgb(239, 151, 163)", "rgb(232, 74, 95)", "rgb(175, 22, 42)", "rgb(230, 50, 75)", "rgb(235, 68, 91)", "rgb(240, 65, 88)", "rgb(42, 3, 8)", "rgb(255, 92, 113)", "rgb(58, 49, 50)", "rgb(40, 31, 32)", "rgb(207, 189, 191)", "rgb(54, 29, 32)", "rgb(155, 75, 84)", "rgb(201, 62, 79)", "rgb(210, 72, 88)", "rgb(211, 54, 73)", "rgb(217, 64, 82)", "rgb(225, 94, 110)", "rgb(188, 22, 42)", "rgb(242, 107, 122)", "rgb(248, 175, 184)", "rgb(196, 16, 38)", "rgb(240, 65, 85)", "rgb(239, 43, 65)", "rgb(249, 159, 169)", "rgb(244, 50, 74)", "rgb(248, 120, 135)", "rgb(121, 6, 20)", "rgb(201, 3, 26)", "rgb(252, 53, 76)", "rgb(252, 58, 81)", "rgb(254, 73, 95)", "rgb(87, 67, 69)", "rgb(198, 169, 172)", "rgb(184, 143, 147)", "rgb(43, 23, 25)", "rgb(226, 195, 198)", "rgb(133, 60, 67)", "rgb(199, 119, 127)", "rgb(186, 76, 87)", "rgb(196, 77, 88)", "rgb(28, 9, 11)", "rgb(214, 129, 137)", "rgb(204, 55, 71)", "rgb(149, 31, 43)", "rgb(239, 156, 164)", "rgb(230, 98, 111)", "rgb(227, 45, 64)", "rgb(237, 97, 111)", "rgb(245, 143, 154)", "rgb(244, 100, 114)", "rgb(246, 114, 128)", "rgb(248, 90, 105)", "rgb(250, 119, 133)", "rgb(245, 6, 29)", "rgb(255, 90, 106)", "rgb(255, 133, 145)", "rgb(255, 204, 209)", "rgb(171, 149, 151)", "rgb(140, 104, 107)", "rgb(150, 93, 98)", "rgb(169, 118, 122)", "rgb(94, 32, 37)", "rgb(204, 51, 63)", "rgb(217, 67, 79)", "rgb(157, 23, 34)", "rgb(224, 33, 48)", "rgb(232, 77, 91)", "rgb(177, 22, 35)", "rgb(234, 82, 95)", "rgb(218, 26, 41)", "rgb(236, 75, 89)", "rgb(252, 215, 218)", "rgb(250, 42, 58)", "rgb(189, 160, 162)", "rgb(179, 129, 132)", "rgb(171, 106, 110)", "rgb(185, 116, 121)", "rgb(162, 77, 82)", "rgb(137, 55, 61)", "rgb(190, 76, 84)", "rgb(203, 79, 87)", "rgb(133, 30, 37)", "rgb(209, 49, 61)", "rgb(119, 24, 30)", "rgb(232, 128, 135)", "rgb(236, 138, 144)", "rgb(237, 123, 131)", "rgb(159, 17, 27)", "rgb(239, 103, 113)", "rgb(237, 76, 87)", "rgb(240, 93, 103)", "rgb(237, 48, 60)", "rgb(253, 197, 201)", "rgb(254, 205, 208)", "rgb(185, 3, 15)", "rgb(255, 140, 148)", "rgb(78, 58, 59)", "rgb(71, 51, 52)", "rgb(206, 164, 166)", "rgb(180, 88, 93)", "rgb(123, 51, 54)", "rgb(172, 65, 71)", "rgb(63, 23, 25)", "rgb(31, 11, 12)", "rgb(245, 225, 226)", "rgb(207, 90, 96)", "rgb(189, 48, 56)", "rgb(213, 93, 99)", "rgb(237, 157, 161)", "rgb(223, 42, 51)", "rgb(172, 21, 28)", "rgb(240, 110, 117)", "rgb(243, 106, 113)", "rgb(247, 109, 117)", "rgb(247, 11, 23)", "rgb(251, 84, 92)", "rgb(253, 128, 134)", "rgb(143, 0, 6)", "rgb(255, 140, 145)", "rgb(255, 165, 170)", "rgb(138, 106, 107)", "rgb(144, 112, 113)", "rgb(123, 93, 94)", "rgb(75, 49, 50)", "rgb(153, 80, 82)", "rgb(229, 157, 160)", "rgb(224, 111, 114)", "rgb(228, 127, 131)", "rgb(235, 162, 164)", "rgb(180, 37, 41)", "rgb(234, 119, 123)", "rgb(154, 21, 26)", "rgb(239, 129, 132)", "rgb(248, 199, 201)", "rgb(232, 55, 62)", "rgb(240, 127, 131)", "rgb(95, 6, 9)", "rgb(250, 180, 182)", "rgb(245, 86, 91)", "rgb(251, 96, 102)", "rgb(140, 0, 5)", "rgb(158, 0, 4)", "rgb(163, 0, 6)", "rgb(162, 120, 121)", "rgb(182, 110, 111)", "rgb(83, 39, 40)", "rgb(209, 142, 143)", "rgb(209, 142, 143)", "rgb(200, 70, 72)", "rgb(219, 70, 72)", "rgb(52, 10, 11)", "rgb(227, 91, 93)", "rgb(235, 112, 114)", "rgb(51, 7, 8)", "rgb(103, 13, 15)", "rgb(242, 92, 94)", "rgb(248, 159, 161)", "rgb(191, 10, 13)", "rgb(246, 70, 74)", "rgb(107, 1, 3)", "rgb(255, 73, 75)", "rgb(255, 78, 80)", "rgb(255, 78, 80)", "rgb(255, 82, 84)", "rgb(255, 127, 129)", "rgb(186, 60, 61)", "rgb(207, 70, 71)", "rgb(245, 117, 118)", "rgb(190, 0, 1)"],
    "hslArray": ["hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 0%)", "hsl(0, 0%, 1%)", "hsl(0, 0%, 9%)", "hsl(0, 0%, 12%)", "hsl(0, 0%, 17%)", "hsl(0, 0%, 18%)", "hsl(0, 0%, 20%)", "hsl(0, 0%, 20%)", "hsl(0, 0%, 21%)", "hsl(0, 0%, 22%)", "hsl(0, 0%, 23%)", "hsl(0, 0%, 25%)", "hsl(0, 0%, 26%)", "hsl(0, 0%, 27%)", "hsl(0, 0%, 27%)", "hsl(0, 0%, 28%)", "hsl(0, 0%, 28%)", "hsl(0, 0%, 28%)", "hsl(0, 0%, 30%)", "hsl(0, 0%, 32%)", "hsl(0, 0%, 33%)", "hsl(0, 0%, 37%)", "hsl(0, 0%, 39%)", "hsl(0, 0%, 40%)", "hsl(0, 0%, 40%)", "hsl(0, 0%, 42%)", "hsl(0, 0%, 42%)", "hsl(0, 0%, 45%)", "hsl(0, 0%, 46%)", "hsl(0, 0%, 47%)", "hsl(0, 0%, 56%)", "hsl(0, 0%, 60%)", "hsl(0, 0%, 62%)", "hsl(0, 0%, 63%)", "hsl(0, 0%, 74%)", "hsl(0, 0%, 79%)", "hsl(0, 0%, 80%)", "hsl(0, 0%, 80%)", "hsl(0, 0%, 80%)", "hsl(0, 0%, 81%)", "hsl(0, 0%, 82%)", "hsl(0, 0%, 85%)", "hsl(0, 0%, 85%)", "hsl(0, 0%, 85%)", "hsl(0, 0%, 88%)", "hsl(0, 0%, 88%)", "hsl(0, 0%, 90%)", "hsl(0, 0%, 90%)", "hsl(0, 0%, 91%)", "hsl(0, 0%, 91%)", "hsl(0, 0%, 91%)", "hsl(0, 0%, 93%)", "hsl(0, 0%, 94%)", "hsl(0, 0%, 95%)", "hsl(0, 0%, 96%)", "hsl(0, 0%, 96%)", "hsl(0, 0%, 96%)", "hsl(0, 0%, 97%)", "hsl(0, 0%, 98%)", "hsl(0, 0%, 99%)", "hsl(0, 0%, 99%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 0%, 100%)", "hsl(0, 1%, 15%)", "hsl(0, 1%, 66%)", "hsl(0, 3%, 25%)", "hsl(0, 3%, 31%)", "hsl(0, 3%, 37%)", "hsl(0, 4%, 5%)", "hsl(0, 4%, 22%)", "hsl(0, 4%, 42%)", "hsl(0, 5%, 25%)", "hsl(0, 5%, 33%)", "hsl(0, 6%, 33%)", "hsl(0, 6%, 44%)", "hsl(0, 7%, 21%)", "hsl(0, 7%, 47%)", "hsl(0, 7%, 92%)", "hsl(0, 10%, 17%)", "hsl(0, 10%, 26%)", "hsl(0, 10%, 35%)", "hsl(0, 11%, 31%)", "hsl(0, 11%, 46%)", "hsl(0, 11%, 47%)", "hsl(0, 13%, 27%)", "hsl(0, 14%, 19%)", "hsl(0, 14%, 33%)", "hsl(0, 14%, 33%)", "hsl(0, 14%, 40%)", "hsl(0, 14%, 60%)", "hsl(0, 15%, 77%)", "hsl(0, 15%, 92%)", "hsl(0, 17%, 14%)", "hsl(0, 17%, 69%)", "hsl(0, 18%, 25%)", "hsl(0, 18%, 93%)", "hsl(0, 19%, 6%)", "hsl(0, 20%, 17%)", "hsl(0, 20%, 50%)", "hsl(0, 20%, 60%)", "hsl(0, 21%, 9%)", "hsl(0, 21%, 13%)", "hsl(0, 23%, 84%)", "hsl(0, 26%, 47%)", "hsl(0, 30%, 15%)", "hsl(0, 32%, 27%)", "hsl(0, 33%, 30%)", "hsl(0, 33%, 45%)", "hsl(0, 35%, 36%)", "hsl(0, 37%, 37%)", "hsl(0, 37%, 57%)", "hsl(0, 42%, 66%)", "hsl(0, 43%, 53%)", "hsl(0, 49%, 10%)", "hsl(0, 49%, 52%)", "hsl(0, 49%, 65%)", "hsl(0, 50%, 20%)", "hsl(0, 50%, 60%)", "hsl(0, 50%, 69%)", "hsl(0, 55%, 33%)", "hsl(0, 55%, 48%)", "hsl(0, 55%, 48%)", "hsl(0, 57%, 79%)", "hsl(0, 61%, 45%)", "hsl(0, 62%, 12%)", "hsl(0, 63%, 36%)", "hsl(0, 63%, 41%)", "hsl(0, 64%, 48%)", "hsl(0, 65%, 35%)", "hsl(0, 65%, 63%)", "hsl(0, 66%, 84%)", "hsl(0, 67%, 39%)", "hsl(0, 67%, 51%)", "hsl(0, 68%, 65%)", "hsl(0, 70%, 4%)", "hsl(0, 70%, 62%)", "hsl(0, 71%, 23%)", "hsl(0, 72%, 68%)", "hsl(0, 73%, 35%)", "hsl(0, 73%, 71%)", "hsl(0, 75%, 32%)", "hsl(0, 76%, 68%)", "hsl(0, 78%, 66%)", "hsl(0, 78%, 91%)", "hsl(0, 79%, 11%)", "hsl(0, 79%, 66%)", "hsl(0, 79%, 66%)", "hsl(0, 80%, 56%)", "hsl(0, 80%, 70%)", "hsl(0, 81%, 75%)", "hsl(0, 81%, 80%)", "hsl(0, 82%, 72%)", "hsl(0, 83%, 47%)", "hsl(0, 86%, 36%)", "hsl(0, 86%, 63%)", "hsl(0, 86%, 86%)", "hsl(0, 87%, 24%)", "hsl(0, 87%, 27%)", "hsl(0, 88%, 48%)", "hsl(0, 90%, 79%)", "hsl(0, 92%, 28%)", "hsl(0, 95%, 61%)", "hsl(0, 96%, 21%)", "hsl(0, 96%, 37%)", "hsl(0, 96%, 63%)", "hsl(0, 97%, 55%)", "hsl(0, 100%, 1%)", "hsl(0, 100%, 1%)", "hsl(0, 100%, 2%)", "hsl(0, 100%, 30%)", "hsl(0, 100%, 56%)", "hsl(0, 100%, 56%)", "hsl(0, 100%, 62%)", "hsl(0, 100%, 63%)", "hsl(0, 100%, 64%)", "hsl(0, 100%, 65%)", "hsl(0, 100%, 66%)", "hsl(0, 100%, 66%)", "hsl(0, 100%, 69%)", "hsl(0, 100%, 71%)", "hsl(0, 100%, 73%)", "hsl(0, 100%, 73%)", "hsl(0, 100%, 73%)", "hsl(0, 100%, 82%)", "hsl(0, 100%, 84%)", "hsl(0, 100%, 91%)", "hsl(0, 100%, 92%)", "hsl(1, 45%, 58%)", "hsl(1, 50%, 36%)", "hsl(1, 62%, 56%)", "hsl(1, 73%, 46%)", "hsl(1, 77%, 66%)", "hsl(1, 79%, 74%)", "hsl(1, 80%, 69%)", "hsl(1, 88%, 90%)", "hsl(1, 90%, 70%)", "hsl(1, 90%, 73%)", "hsl(1, 91%, 13%)", "hsl(1, 97%, 50%)", "hsl(1, 97%, 66%)", "hsl(1, 100%, 64%)", "hsl(1, 100%, 73%)", "hsl(1, 100%, 75%)", "hsl(1, 100%, 81%)", "hsl(2, 23%, 29%)", "hsl(2, 42%, 63%)", "hsl(2, 46%, 31%)", "hsl(2, 57%, 58%)", "hsl(2, 58%, 72%)", "hsl(2, 61%, 39%)", "hsl(2, 61%, 40%)", "hsl(2, 62%, 66%)", "hsl(2, 65%, 33%)", "hsl(2, 65%, 66%)", "hsl(2, 70%, 55%)", "hsl(2, 70%, 69%)", "hsl(2, 76%, 20%)", "hsl(2, 79%, 50%)", "hsl(2, 80%, 69%)", "hsl(2, 82%, 68%)", "hsl(2, 84%, 27%)", "hsl(2, 85%, 60%)", "hsl(2, 88%, 13%)", "hsl(2, 88%, 71%)", "hsl(2, 90%, 12%)", "hsl(2, 94%, 69%)", "hsl(2, 94%, 80%)", "hsl(2, 98%, 40%)", "hsl(2, 99%, 69%)", "hsl(2, 100%, 67%)", "hsl(3, 15%, 25%)", "hsl(3, 31%, 34%)", "hsl(3, 31%, 77%)", "hsl(3, 40%, 51%)", "hsl(3, 44%, 66%)", "hsl(3, 45%, 90%)", "hsl(3, 61%, 59%)", "hsl(3, 63%, 66%)", "hsl(3, 65%, 45%)", "hsl(3, 68%, 52%)", "hsl(3, 69%, 44%)", "hsl(3, 70%, 57%)", "hsl(3, 70%, 81%)", "hsl(3, 72%, 50%)", "hsl(3, 72%, 63%)", "hsl(3, 73%, 55%)", "hsl(3, 73%, 56%)", "hsl(3, 83%, 42%)", "hsl(3, 84%, 64%)", "hsl(3, 85%, 79%)", "hsl(3, 89%, 75%)", "hsl(3, 89%, 75%)", "hsl(3, 93%, 60%)", "hsl(3, 98%, 75%)", "hsl(3, 98%, 78%)", "hsl(3, 98%, 79%)", "hsl(3, 98%, 82%)", "hsl(3, 99%, 69%)", "hsl(3, 99%, 69%)", "hsl(3, 99%, 69%)", "hsl(3, 100%, 30%)", "hsl(3, 100%, 39%)", "hsl(3, 100%, 63%)", "hsl(3, 100%, 64%)", "hsl(3, 100%, 76%)", "hsl(3, 100%, 80%)", "hsl(3, 100%, 83%)", "hsl(4, 16%, 34%)", "hsl(4, 18%, 52%)", "hsl(4, 21%, 69%)", "hsl(4, 28%, 56%)", "hsl(4, 33%, 8%)", "hsl(4, 35%, 55%)", "hsl(4, 38%, 65%)", "hsl(4, 41%, 30%)", "hsl(4, 46%, 26%)", "hsl(4, 47%, 66%)", "hsl(4, 63%, 42%)", "hsl(4, 67%, 80%)", "hsl(4, 72%, 77%)", "hsl(4, 73%, 53%)", "hsl(4, 75%, 43%)", "hsl(4, 77%, 61%)", "hsl(4, 78%, 51%)", "hsl(4, 87%, 64%)", "hsl(4, 91%, 65%)", "hsl(4, 93%, 72%)", "hsl(4, 100%, 74%)", "hsl(4, 100%, 88%)", "hsl(5, 10%, 22%)", "hsl(5, 26%, 66%)", "hsl(5, 39%, 76%)", "hsl(5, 42%, 51%)", "hsl(5, 55%, 56%)", "hsl(5, 57%, 66%)", "hsl(5, 66%, 50%)", "hsl(5, 70%, 65%)", "hsl(5, 71%, 44%)", "hsl(5, 71%, 54%)", "hsl(5, 72%, 57%)", "hsl(5, 74%, 28%)", "hsl(5, 78%, 25%)", "hsl(5, 83%, 66%)", "hsl(5, 84%, 75%)", "hsl(5, 85%, 49%)", "hsl(5, 85%, 57%)", "hsl(5, 89%, 59%)", "hsl(5, 91%, 64%)", "hsl(5, 92%, 65%)", "hsl(5, 93%, 65%)", "hsl(5, 95%, 75%)", "hsl(5, 100%, 68%)", "hsl(5, 100%, 68%)", "hsl(5, 100%, 72%)", "hsl(5, 100%, 77%)", "hsl(6, 15%, 87%)", "hsl(6, 17%, 46%)", "hsl(6, 17%, 88%)", "hsl(6, 18%, 22%)", "hsl(6, 24%, 16%)", "hsl(6, 26%, 63%)", "hsl(6, 28%, 35%)", "hsl(6, 34%, 89%)", "hsl(6, 35%, 49%)", "hsl(6, 36%, 21%)", "hsl(6, 46%, 68%)", "hsl(6, 55%, 78%)", "hsl(6, 59%, 90%)", "hsl(6, 63%, 51%)", "hsl(6, 64%, 59%)", "hsl(6, 69%, 80%)", "hsl(6, 70%, 79%)", "hsl(6, 71%, 32%)", "hsl(6, 74%, 57%)", "hsl(6, 84%, 42%)", "hsl(6, 84%, 50%)", "hsl(6, 88%, 63%)", "hsl(6, 89%, 72%)", "hsl(6, 97%, 59%)", "hsl(6, 98%, 78%)", "hsl(6, 100%, 22%)", "hsl(6, 100%, 41%)", "hsl(6, 100%, 68%)", "hsl(6, 100%, 69%)", "hsl(6, 100%, 78%)", "hsl(6, 100%, 87%)", "hsl(6, 100%, 92%)", "hsl(6, 100%, 92%)", "hsl(7, 16%, 29%)", "hsl(7, 18%, 52%)", "hsl(7, 25%, 39%)", "hsl(7, 26%, 38%)", "hsl(7, 33%, 49%)", "hsl(7, 41%, 22%)", "hsl(7, 41%, 68%)", "hsl(7, 47%, 79%)", "hsl(7, 51%, 53%)", "hsl(7, 54%, 59%)", "hsl(7, 66%, 68%)", "hsl(7, 68%, 69%)", "hsl(7, 73%, 75%)", "hsl(7, 77%, 71%)", "hsl(7, 78%, 77%)", "hsl(7, 80%, 62%)", "hsl(7, 82%, 27%)", "hsl(7, 82%, 67%)", "hsl(7, 82%, 70%)", "hsl(7, 83%, 77%)", "hsl(7, 86%, 78%)", "hsl(7, 89%, 69%)", "hsl(7, 89%, 69%)", "hsl(7, 93%, 61%)", "hsl(7, 94%, 62%)", "hsl(7, 94%, 80%)", "hsl(7, 95%, 70%)", "hsl(7, 96%, 54%)", "hsl(7, 96%, 69%)", "hsl(7, 100%, 41%)", "hsl(8, 10%, 29%)", "hsl(8, 16%, 55%)", "hsl(8, 27%, 64%)", "hsl(8, 32%, 23%)", "hsl(8, 42%, 65%)", "hsl(8, 44%, 32%)", "hsl(8, 48%, 38%)", "hsl(8, 50%, 52%)", "hsl(8, 52%, 74%)", "hsl(8, 56%, 55%)", "hsl(8, 62%, 47%)", "hsl(8, 66%, 64%)", "hsl(8, 67%, 54%)", "hsl(8, 68%, 56%)", "hsl(8, 69%, 43%)", "hsl(8, 71%, 55%)", "hsl(8, 73%, 60%)", "hsl(8, 73%, 69%)", "hsl(8, 80%, 47%)", "hsl(8, 82%, 9%)", "hsl(8, 83%, 66%)", "hsl(8, 85%, 11%)", "hsl(8, 87%, 72%)", "hsl(8, 88%, 52%)", "hsl(8, 88%, 75%)", "hsl(8, 91%, 22%)", "hsl(8, 94%, 79%)", "hsl(8, 99%, 38%)", "hsl(8, 100%, 69%)", "hsl(8, 100%, 74%)", "hsl(8, 100%, 89%)", "hsl(8, 100%, 90%)", "hsl(9, 20%, 72%)", "hsl(9, 59%, 41%)", "hsl(9, 59%, 76%)", "hsl(9, 64%, 70%)", "hsl(9, 66%, 56%)", "hsl(9, 71%, 38%)", "hsl(9, 74%, 51%)", "hsl(9, 75%, 46%)", "hsl(9, 78%, 71%)", "hsl(9, 78%, 82%)", "hsl(9, 89%, 79%)", "hsl(9, 90%, 63%)", "hsl(9, 91%, 56%)", "hsl(9, 91%, 77%)", "hsl(9, 96%, 61%)", "hsl(9, 96%, 73%)", "hsl(9, 97%, 58%)", "hsl(9, 98%, 78%)", "hsl(9, 100%, 66%)", "hsl(10, 13%, 64%)", "hsl(10, 14%, 58%)", "hsl(10, 19%, 23%)", "hsl(10, 20%, 71%)", "hsl(10, 29%, 12%)", "hsl(10, 32%, 26%)", "hsl(10, 44%, 47%)", "hsl(10, 57%, 84%)", "hsl(10, 62%, 20%)", "hsl(10, 66%, 56%)", "hsl(10, 67%, 52%)", "hsl(10, 70%, 74%)", "hsl(10, 73%, 85%)", "hsl(10, 78%, 66%)", "hsl(10, 80%, 54%)", "hsl(10, 81%, 53%)", "hsl(10, 81%, 61%)", "hsl(10, 84%, 63%)", "hsl(10, 88%, 51%)", "hsl(10, 88%, 68%)", "hsl(10, 90%, 72%)", "hsl(10, 94%, 35%)", "hsl(10, 97%, 35%)", "hsl(10, 97%, 65%)", "hsl(10, 100%, 49%)", "hsl(10, 100%, 53%)", "hsl(10, 100%, 53%)", "hsl(10, 100%, 79%)", "hsl(11, 13%, 44%)", "hsl(11, 14%, 15%)", "hsl(11, 15%, 23%)", "hsl(11, 29%, 11%)", "hsl(11, 30%, 15%)", "hsl(11, 51%, 64%)", "hsl(11, 69%, 55%)", "hsl(11, 69%, 77%)", "hsl(11, 76%, 55%)", "hsl(11, 79%, 72%)", "hsl(11, 80%, 45%)", "hsl(11, 86%, 63%)", "hsl(11, 88%, 56%)", "hsl(11, 88%, 61%)", "hsl(11, 97%, 63%)", "hsl(11, 98%, 52%)", "hsl(11, 100%, 63%)", "hsl(11, 100%, 78%)", "hsl(12, 5%, 20%)", "hsl(12, 6%, 16%)", "hsl(12, 17%, 40%)", "hsl(12, 32%, 40%)", "hsl(12, 33%, 68%)", "hsl(12, 37%, 55%)", "hsl(12, 42%, 86%)", "hsl(12, 52%, 79%)", "hsl(12, 58%, 42%)", "hsl(12, 62%, 68%)", "hsl(12, 63%, 47%)", "hsl(12, 65%, 65%)", "hsl(12, 73%, 74%)", "hsl(12, 75%, 62%)", "hsl(12, 85%, 74%)", "hsl(12, 93%, 58%)", "hsl(12, 94%, 57%)", "hsl(12, 98%, 77%)", "hsl(12, 100%, 64%)", "hsl(12, 100%, 65%)", "hsl(12, 100%, 65%)", "hsl(12, 100%, 67%)", "hsl(12, 100%, 85%)", "hsl(13, 12%, 56%)", "hsl(13, 13%, 53%)", "hsl(13, 17%, 58%)", "hsl(13, 18%, 26%)", "hsl(13, 29%, 15%)", "hsl(13, 40%, 20%)", "hsl(13, 59%, 49%)", "hsl(13, 61%, 54%)", "hsl(13, 63%, 72%)", "hsl(13, 71%, 84%)", "hsl(13, 72%, 50%)", "hsl(13, 79%, 45%)", "hsl(13, 79%, 50%)", "hsl(13, 80%, 46%)", "hsl(13, 81%, 58%)", "hsl(13, 81%, 70%)", "hsl(13, 82%, 61%)", "hsl(13, 82%, 72%)", "hsl(13, 86%, 67%)", "hsl(13, 87%, 59%)", "hsl(13, 87%, 69%)", "hsl(13, 94%, 72%)", "hsl(13, 96%, 51%)", "hsl(13, 98%, 50%)", "hsl(13, 98%, 84%)", "hsl(13, 100%, 48%)", "hsl(13, 100%, 65%)", "hsl(13, 100%, 66%)", "hsl(14, 10%, 26%)", "hsl(14, 11%, 24%)", "hsl(14, 17%, 20%)", "hsl(14, 24%, 21%)", "hsl(14, 25%, 20%)", "hsl(14, 28%, 69%)", "hsl(14, 31%, 89%)", "hsl(14, 34%, 26%)", "hsl(14, 41%, 25%)", "hsl(14, 42%, 64%)", "hsl(14, 53%, 23%)", "hsl(14, 71%, 63%)", "hsl(14, 72%, 89%)", "hsl(14, 78%, 64%)", "hsl(14, 81%, 59%)", "hsl(14, 85%, 76%)", "hsl(14, 85%, 77%)", "hsl(14, 86%, 71%)", "hsl(14, 87%, 76%)", "hsl(14, 89%, 38%)", "hsl(14, 90%, 51%)", "hsl(14, 90%, 73%)", "hsl(14, 91%, 61%)", "hsl(14, 92%, 64%)", "hsl(14, 92%, 71%)", "hsl(14, 92%, 71%)", "hsl(14, 93%, 46%)", "hsl(14, 96%, 61%)", "hsl(14, 96%, 62%)", "hsl(14, 100%, 35%)", "hsl(14, 100%, 50%)", "hsl(14, 100%, 67%)", "hsl(15, 4%, 18%)", "hsl(15, 10%, 40%)", "hsl(15, 14%, 33%)", "hsl(15, 22%, 18%)", "hsl(15, 29%, 57%)", "hsl(15, 30%, 8%)", "hsl(15, 32%, 93%)", "hsl(15, 36%, 85%)", "hsl(15, 39%, 46%)", "hsl(15, 47%, 28%)", "hsl(15, 54%, 56%)", "hsl(15, 58%, 47%)", "hsl(15, 61%, 73%)", "hsl(15, 65%, 45%)", "hsl(15, 65%, 69%)", "hsl(15, 67%, 42%)", "hsl(15, 69%, 71%)", "hsl(15, 71%, 66%)", "hsl(15, 73%, 71%)", "hsl(15, 74%, 54%)", "hsl(15, 76%, 75%)", "hsl(15, 76%, 82%)", "hsl(15, 78%, 84%)", "hsl(15, 82%, 70%)", "hsl(15, 84%, 63%)", "hsl(15, 84%, 75%)", "hsl(15, 89%, 44%)", "hsl(15, 89%, 53%)", "hsl(15, 89%, 69%)", "hsl(15, 89%, 69%)", "hsl(15, 91%, 68%)", "hsl(15, 92%, 81%)", "hsl(15, 94%, 87%)", "hsl(15, 97%, 61%)", "hsl(15, 98%, 47%)", "hsl(15, 98%, 48%)", "hsl(15, 98%, 83%)", "hsl(15, 100%, 35%)", "hsl(15, 100%, 37%)", "hsl(15, 100%, 50%)", "hsl(15, 100%, 62%)", "hsl(15, 100%, 75%)", "hsl(15, 100%, 77%)", "hsl(16, 5%, 57%)", "hsl(16, 13%, 38%)", "hsl(16, 15%, 28%)", "hsl(16, 22%, 24%)", "hsl(16, 28%, 19%)", "hsl(16, 55%, 85%)", "hsl(16, 63%, 53%)", "hsl(16, 73%, 3%)", "hsl(16, 73%, 53%)", "hsl(16, 73%, 78%)", "hsl(16, 73%, 78%)", "hsl(16, 74%, 55%)", "hsl(16, 75%, 64%)", "hsl(16, 78%, 47%)", "hsl(16, 86%, 61%)", "hsl(16, 88%, 84%)", "hsl(16, 95%, 59%)", "hsl(16, 95%, 75%)", "hsl(16, 98%, 77%)", "hsl(16, 98%, 81%)", "hsl(16, 100%, 37%)", "hsl(16, 100%, 42%)", "hsl(16, 100%, 60%)", "hsl(16, 100%, 70%)", "hsl(17, 7%, 40%)", "hsl(17, 16%, 29%)", "hsl(17, 20%, 24%)", "hsl(17, 37%, 21%)", "hsl(17, 37%, 28%)", "hsl(17, 38%, 18%)", "hsl(17, 42%, 70%)", "hsl(17, 58%, 65%)", "hsl(17, 62%, 61%)", "hsl(17, 67%, 50%)", "hsl(17, 69%, 65%)", "hsl(17, 73%, 77%)", "hsl(17, 76%, 72%)", "hsl(17, 76%, 90%)", "hsl(17, 83%, 48%)", "hsl(17, 84%, 70%)", "hsl(17, 85%, 60%)", "hsl(17, 85%, 61%)", "hsl(17, 85%, 63%)", "hsl(17, 88%, 78%)", "hsl(17, 92%, 77%)", "hsl(17, 93%, 79%)", "hsl(17, 94%, 52%)", "hsl(17, 98%, 76%)", "hsl(17, 99%, 46%)", "hsl(17, 99%, 53%)", "hsl(17, 99%, 63%)", "hsl(17, 100%, 49%)", "hsl(17, 100%, 79%)", "hsl(18, 9%, 42%)", "hsl(18, 14%, 14%)", "hsl(18, 22%, 66%)", "hsl(18, 28%, 33%)", "hsl(18, 29%, 58%)", "hsl(18, 39%, 26%)", "hsl(18, 39%, 67%)", "hsl(18, 45%, 71%)", "hsl(18, 62%, 39%)", "hsl(18, 62%, 83%)", "hsl(18, 64%, 75%)", "hsl(18, 65%, 58%)", "hsl(18, 65%, 69%)", "hsl(18, 69%, 72%)", "hsl(18, 76%, 36%)", "hsl(18, 76%, 79%)", "hsl(18, 82%, 39%)", "hsl(18, 82%, 51%)", "hsl(18, 95%, 64%)", "hsl(18, 96%, 65%)", "hsl(18, 98%, 82%)", "hsl(18, 99%, 58%)", "hsl(18, 100%, 49%)", "hsl(18, 100%, 82%)", "hsl(18, 100%, 86%)", "hsl(18, 100%, 87%)", "hsl(18, 100%, 93%)", "hsl(19, 23%, 40%)", "hsl(19, 51%, 65%)", "hsl(19, 70%, 87%)", "hsl(19, 82%, 11%)", "hsl(19, 83%, 54%)", "hsl(19, 83%, 62%)", "hsl(19, 87%, 70%)", "hsl(19, 88%, 16%)", "hsl(19, 89%, 76%)", "hsl(19, 92%, 72%)", "hsl(19, 95%, 63%)", "hsl(19, 96%, 67%)", "hsl(19, 97%, 77%)", "hsl(19, 98%, 52%)", "hsl(19, 100%, 7%)", "hsl(19, 100%, 65%)", "hsl(19, 100%, 69%)", "hsl(19, 100%, 78%)", "hsl(20, 6%, 41%)", "hsl(20, 12%, 31%)", "hsl(20, 19%, 44%)", "hsl(20, 35%, 38%)", "hsl(20, 38%, 48%)", "hsl(20, 47%, 55%)", "hsl(20, 60%, 75%)", "hsl(20, 60%, 83%)", "hsl(20, 61%, 18%)", "hsl(20, 67%, 59%)", "hsl(20, 69%, 52%)", "hsl(20, 71%, 56%)", "hsl(20, 71%, 80%)", "hsl(20, 73%, 74%)", "hsl(20, 75%, 22%)", "hsl(20, 75%, 38%)", "hsl(20, 75%, 73%)", "hsl(20, 77%, 66%)", "hsl(20, 78%, 11%)", "hsl(20, 79%, 61%)", "hsl(20, 81%, 58%)", "hsl(20, 82%, 62%)", "hsl(20, 83%, 77%)", "hsl(20, 84%, 55%)", "hsl(20, 87%, 39%)", "hsl(20, 88%, 58%)", "hsl(20, 89%, 42%)", "hsl(20, 92%, 53%)", "hsl(20, 92%, 53%)", "hsl(20, 92%, 61%)", "hsl(20, 92%, 62%)", "hsl(20, 93%, 57%)", "hsl(20, 99%, 71%)", "hsl(20, 100%, 14%)", "hsl(20, 100%, 58%)", "hsl(20, 100%, 70%)", "hsl(20, 100%, 78%)", "hsl(20, 100%, 83%)", "hsl(21, 26%, 78%)", "hsl(21, 28%, 68%)", "hsl(21, 32%, 44%)", "hsl(21, 40%, 71%)", "hsl(21, 46%, 63%)", "hsl(21, 69%, 69%)", "hsl(21, 83%, 71%)", "hsl(21, 84%, 77%)", "hsl(21, 96%, 9%)", "hsl(21, 96%, 56%)", "hsl(21, 100%, 47%)", "hsl(21, 100%, 89%)", "hsl(22, 5%, 58%)", "hsl(22, 18%, 30%)", "hsl(22, 22%, 36%)", "hsl(22, 23%, 54%)", "hsl(22, 24%, 79%)", "hsl(22, 33%, 38%)", "hsl(22, 36%, 10%)", "hsl(22, 36%, 34%)", "hsl(22, 49%, 71%)", "hsl(22, 57%, 65%)", "hsl(22, 71%, 47%)", "hsl(22, 76%, 76%)", "hsl(22, 78%, 49%)", "hsl(22, 78%, 53%)", "hsl(22, 80%, 98%)", "hsl(22, 85%, 8%)", "hsl(22, 92%, 60%)", "hsl(22, 92%, 79%)", "hsl(22, 97%, 65%)", "hsl(22, 100%, 61%)", "hsl(22, 100%, 68%)", "hsl(22, 100%, 68%)", "hsl(22, 100%, 82%)", "hsl(23, 10%, 55%)", "hsl(23, 12%, 27%)", "hsl(23, 18%, 38%)", "hsl(23, 20%, 30%)", "hsl(23, 20%, 79%)", "hsl(23, 22%, 27%)", "hsl(23, 30%, 70%)", "hsl(23, 33%, 28%)", "hsl(23, 34%, 46%)", "hsl(23, 34%, 73%)", "hsl(23, 34%, 79%)", "hsl(23, 52%, 73%)", "hsl(23, 61%, 71%)", "hsl(23, 63%, 89%)", "hsl(23, 68%, 69%)", "hsl(23, 72%, 89%)", "hsl(23, 73%, 10%)", "hsl(23, 74%, 59%)", "hsl(23, 76%, 68%)", "hsl(23, 77%, 56%)", "hsl(23, 78%, 47%)", "hsl(23, 82%, 44%)", "hsl(23, 86%, 59%)", "hsl(23, 87%, 62%)", "hsl(23, 89%, 71%)", "hsl(23, 94%, 47%)", "hsl(23, 95%, 85%)", "hsl(23, 98%, 79%)", "hsl(23, 98%, 79%)", "hsl(23, 100%, 40%)", "hsl(23, 100%, 59%)", "hsl(23, 100%, 77%)", "hsl(23, 100%, 85%)", "hsl(24, 21%, 48%)", "hsl(24, 30%, 49%)", "hsl(24, 35%, 72%)", "hsl(24, 53%, 85%)", "hsl(24, 54%, 69%)", "hsl(24, 57%, 85%)", "hsl(24, 58%, 78%)", "hsl(24, 60%, 84%)", "hsl(24, 66%, 71%)", "hsl(24, 68%, 64%)", "hsl(24, 78%, 65%)", "hsl(24, 79%, 46%)", "hsl(24, 82%, 47%)", "hsl(24, 82%, 51%)", "hsl(24, 83%, 75%)", "hsl(24, 88%, 53%)", "hsl(24, 88%, 65%)", "hsl(24, 88%, 70%)", "hsl(24, 89%, 69%)", "hsl(24, 90%, 69%)", "hsl(24, 90%, 89%)", "hsl(24, 93%, 52%)", "hsl(24, 93%, 56%)", "hsl(24, 95%, 59%)", "hsl(24, 95%, 65%)", "hsl(24, 98%, 51%)", "hsl(24, 100%, 31%)", "hsl(24, 100%, 50%)", "hsl(24, 100%, 57%)", "hsl(24, 100%, 68%)", "hsl(24, 100%, 85%)", "hsl(24, 100%, 85%)", "hsl(25, 10%, 48%)", "hsl(25, 23%, 29%)", "hsl(25, 30%, 64%)", "hsl(25, 35%, 69%)", "hsl(25, 52%, 8%)", "hsl(25, 53%, 80%)", "hsl(25, 60%, 67%)", "hsl(25, 62%, 79%)", "hsl(25, 64%, 81%)", "hsl(25, 69%, 70%)", "hsl(25, 70%, 46%)", "hsl(25, 70%, 67%)", "hsl(25, 73%, 77%)", "hsl(25, 79%, 16%)", "hsl(25, 81%, 53%)", "hsl(25, 83%, 70%)", "hsl(25, 83%, 76%)", "hsl(25, 85%, 69%)", "hsl(25, 86%, 83%)", "hsl(25, 95%, 67%)", "hsl(25, 97%, 56%)", "hsl(25, 98%, 80%)", "hsl(25, 99%, 70%)", "hsl(25, 100%, 49%)", "hsl(25, 100%, 49%)", "hsl(25, 100%, 50%)", "hsl(25, 100%, 66%)", "hsl(25, 100%, 66%)", "hsl(25, 100%, 66%)", "hsl(25, 100%, 69%)", "hsl(25, 100%, 70%)", "hsl(25, 100%, 76%)", "hsl(25, 100%, 78%)", "hsl(25, 100%, 84%)", "hsl(25, 100%, 87%)", "hsl(25, 100%, 87%)", "hsl(26, 9%, 15%)", "hsl(26, 9%, 33%)", "hsl(26, 14%, 35%)", "hsl(26, 16%, 57%)", "hsl(26, 17%, 33%)", "hsl(26, 23%, 35%)", "hsl(26, 24%, 27%)", "hsl(26, 25%, 27%)", "hsl(26, 27%, 25%)", "hsl(26, 45%, 78%)", "hsl(26, 51%, 58%)", "hsl(26, 51%, 59%)", "hsl(26, 55%, 85%)", "hsl(26, 56%, 25%)", "hsl(26, 61%, 29%)", "hsl(26, 61%, 72%)", "hsl(26, 67%, 86%)", "hsl(26, 68%, 7%)", "hsl(26, 69%, 34%)", "hsl(26, 77%, 67%)", "hsl(26, 85%, 69%)", "hsl(26, 86%, 78%)", "hsl(26, 89%, 57%)", "hsl(26, 94%, 58%)", "hsl(26, 95%, 61%)", "hsl(26, 97%, 12%)", "hsl(26, 97%, 56%)", "hsl(26, 97%, 69%)", "hsl(26, 100%, 34%)", "hsl(26, 100%, 49%)", "hsl(26, 100%, 59%)", "hsl(26, 100%, 70%)", "hsl(27, 8%, 57%)", "hsl(27, 11%, 61%)", "hsl(27, 13%, 51%)", "hsl(27, 13%, 87%)", "hsl(27, 21%, 92%)", "hsl(27, 22%, 25%)", "hsl(27, 27%, 27%)", "hsl(27, 40%, 82%)", "hsl(27, 41%, 29%)", "hsl(27, 45%, 60%)", "hsl(27, 48%, 18%)", "hsl(27, 51%, 67%)", "hsl(27, 53%, 74%)", "hsl(27, 58%, 65%)", "hsl(27, 68%, 60%)", "hsl(27, 76%, 28%)", "hsl(27, 79%, 70%)", "hsl(27, 79%, 87%)", "hsl(27, 80%, 51%)", "hsl(27, 82%, 64%)", "hsl(27, 83%, 34%)", "hsl(27, 85%, 54%)", "hsl(27, 85%, 80%)", "hsl(27, 86%, 51%)", "hsl(27, 88%, 52%)", "hsl(27, 88%, 84%)", "hsl(27, 89%, 89%)", "hsl(27, 91%, 59%)", "hsl(27, 92%, 79%)", "hsl(27, 92%, 79%)", "hsl(27, 97%, 61%)", "hsl(27, 98%, 59%)", "hsl(27, 98%, 83%)", "hsl(27, 100%, 53%)", "hsl(27, 100%, 57%)", "hsl(27, 100%, 61%)", "hsl(27, 100%, 76%)", "hsl(27, 100%, 78%)", "hsl(27, 100%, 89%)", "hsl(27, 100%, 98%)", "hsl(28, 13%, 22%)", "hsl(28, 14%, 35%)", "hsl(28, 15%, 17%)", "hsl(28, 19%, 50%)", "hsl(28, 24%, 61%)", "hsl(28, 35%, 73%)", "hsl(28, 37%, 8%)", "hsl(28, 40%, 92%)", "hsl(28, 42%, 73%)", "hsl(28, 49%, 80%)", "hsl(28, 55%, 56%)", "hsl(28, 55%, 80%)", "hsl(28, 57%, 84%)", "hsl(28, 70%, 67%)", "hsl(28, 77%, 55%)", "hsl(28, 79%, 80%)", "hsl(28, 81%, 86%)", "hsl(28, 88%, 52%)", "hsl(28, 91%, 75%)", "hsl(28, 92%, 47%)", "hsl(28, 92%, 74%)", "hsl(28, 98%, 63%)", "hsl(28, 98%, 76%)", "hsl(28, 100%, 12%)", "hsl(28, 100%, 70%)", "hsl(28, 100%, 75%)", "hsl(28, 100%, 80%)", "hsl(29, 9%, 44%)", "hsl(29, 13%, 40%)", "hsl(29, 14%, 50%)", "hsl(29, 16%, 48%)", "hsl(29, 20%, 67%)", "hsl(29, 23%, 72%)", "hsl(29, 24%, 74%)", "hsl(29, 25%, 60%)", "hsl(29, 25%, 60%)", "hsl(29, 30%, 83%)", "hsl(29, 33%, 36%)", "hsl(29, 35%, 72%)", "hsl(29, 35%, 85%)", "hsl(29, 47%, 48%)", "hsl(29, 67%, 70%)", "hsl(29, 68%, 65%)", "hsl(29, 70%, 22%)", "hsl(29, 72%, 53%)", "hsl(29, 74%, 73%)", "hsl(29, 88%, 51%)", "hsl(29, 89%, 78%)", "hsl(29, 91%, 55%)", "hsl(29, 97%, 49%)", "hsl(29, 100%, 42%)", "hsl(29, 100%, 51%)", "hsl(29, 100%, 54%)", "hsl(29, 100%, 89%)", "hsl(30, 2%, 24%)", "hsl(30, 5%, 68%)", "hsl(30, 11%, 36%)", "hsl(30, 11%, 68%)", "hsl(30, 13%, 18%)", "hsl(30, 14%, 11%)", "hsl(30, 14%, 30%)", "hsl(30, 14%, 60%)", "hsl(30, 17%, 45%)", "hsl(30, 17%, 49%)", "hsl(30, 17%, 60%)", "hsl(30, 21%, 87%)", "hsl(30, 24%, 25%)", "hsl(30, 26%, 15%)", "hsl(30, 27%, 49%)", "hsl(30, 29%, 78%)", "hsl(30, 29%, 87%)", "hsl(30, 55%, 66%)", "hsl(30, 66%, 69%)", "hsl(30, 68%, 72%)", "hsl(30, 70%, 81%)", "hsl(30, 73%, 71%)", "hsl(30, 74%, 78%)", "hsl(30, 79%, 54%)", "hsl(30, 80%, 61%)", "hsl(30, 83%, 82%)", "hsl(30, 84%, 71%)", "hsl(30, 85%, 27%)", "hsl(30, 85%, 47%)", "hsl(30, 88%, 91%)", "hsl(30, 89%, 53%)", "hsl(30, 91%, 57%)", "hsl(30, 91%, 69%)", "hsl(30, 95%, 62%)", "hsl(30, 97%, 86%)", "hsl(30, 98%, 50%)", "hsl(30, 100%, 51%)", "hsl(30, 100%, 60%)", "hsl(30, 100%, 64%)", "hsl(30, 100%, 72%)", "hsl(30, 100%, 79%)", "hsl(31, 23%, 43%)", "hsl(31, 26%, 38%)", "hsl(31, 43%, 70%)", "hsl(31, 63%, 92%)", "hsl(31, 67%, 75%)", "hsl(31, 69%, 65%)", "hsl(31, 73%, 93%)", "hsl(31, 74%, 85%)", "hsl(31, 81%, 53%)", "hsl(31, 89%, 45%)", "hsl(31, 90%, 68%)", "hsl(31, 93%, 63%)", "hsl(31, 100%, 42%)", "hsl(31, 100%, 75%)", "hsl(32, 8%, 35%)", "hsl(32, 9%, 31%)", "hsl(32, 9%, 67%)", "hsl(32, 15%, 80%)", "hsl(32, 16%, 36%)", "hsl(32, 24%, 61%)", "hsl(32, 24%, 63%)", "hsl(32, 25%, 29%)", "hsl(32, 25%, 88%)", "hsl(32, 33%, 47%)", "hsl(32, 36%, 71%)", "hsl(32, 43%, 83%)", "hsl(32, 48%, 88%)", "hsl(32, 51%, 65%)", "hsl(32, 52%, 94%)", "hsl(32, 55%, 39%)", "hsl(32, 59%, 51%)", "hsl(32, 59%, 61%)", "hsl(32, 73%, 75%)", "hsl(32, 77%, 76%)", "hsl(32, 78%, 62%)", "hsl(32, 85%, 66%)", "hsl(32, 85%, 66%)", "hsl(32, 88%, 64%)", "hsl(32, 88%, 74%)", "hsl(32, 89%, 71%)", "hsl(32, 91%, 79%)", "hsl(32, 91%, 86%)", "hsl(32, 92%, 54%)", "hsl(32, 93%, 61%)", "hsl(32, 93%, 84%)", "hsl(32, 98%, 46%)", "hsl(32, 99%, 51%)", "hsl(32, 100%, 50%)", "hsl(32, 100%, 50%)", "hsl(32, 100%, 55%)", "hsl(32, 100%, 59%)", "hsl(32, 100%, 71%)", "hsl(32, 100%, 71%)", "hsl(33, 6%, 35%)", "hsl(33, 6%, 64%)", "hsl(33, 10%, 21%)", "hsl(33, 13%, 35%)", "hsl(33, 13%, 55%)", "hsl(33, 16%, 59%)", "hsl(33, 17%, 58%)", "hsl(33, 17%, 63%)", "hsl(33, 22%, 63%)", "hsl(33, 24%, 64%)", "hsl(33, 26%, 66%)", "hsl(33, 26%, 92%)", "hsl(33, 27%, 58%)", "hsl(33, 28%, 50%)", "hsl(33, 28%, 69%)", "hsl(33, 28%, 80%)", "hsl(33, 29%, 69%)", "hsl(33, 35%, 76%)", "hsl(33, 36%, 70%)", "hsl(33, 39%, 41%)", "hsl(33, 47%, 35%)", "hsl(33, 47%, 69%)", "hsl(33, 54%, 48%)", "hsl(33, 61%, 77%)", "hsl(33, 64%, 50%)", "hsl(33, 77%, 76%)", "hsl(33, 80%, 82%)", "hsl(33, 82%, 76%)", "hsl(33, 87%, 83%)", "hsl(33, 88%, 13%)", "hsl(33, 92%, 61%)", "hsl(33, 92%, 72%)", "hsl(33, 93%, 49%)", "hsl(33, 93%, 70%)", "hsl(33, 96%, 44%)", "hsl(33, 99%, 65%)", "hsl(33, 100%, 59%)", "hsl(33, 100%, 61%)", "hsl(33, 100%, 66%)", "hsl(33, 100%, 82%)", "hsl(34, 3%, 51%)", "hsl(34, 20%, 33%)", "hsl(34, 21%, 69%)", "hsl(34, 25%, 22%)", "hsl(34, 26%, 38%)", "hsl(34, 26%, 53%)", "hsl(34, 26%, 68%)", "hsl(34, 38%, 15%)", "hsl(34, 47%, 56%)", "hsl(34, 51%, 59%)", "hsl(34, 53%, 85%)", "hsl(34, 54%, 90%)", "hsl(34, 58%, 92%)", "hsl(34, 59%, 68%)", "hsl(34, 60%, 78%)", "hsl(34, 65%, 56%)", "hsl(34, 65%, 91%)", "hsl(34, 66%, 90%)", "hsl(34, 70%, 44%)", "hsl(34, 70%, 82%)", "hsl(34, 71%, 81%)", "hsl(34, 78%, 60%)", "hsl(34, 78%, 66%)", "hsl(34, 79%, 55%)", "hsl(34, 80%, 52%)", "hsl(34, 83%, 48%)", "hsl(34, 83%, 71%)", "hsl(34, 84%, 80%)", "hsl(34, 85%, 87%)", "hsl(34, 92%, 85%)", "hsl(34, 94%, 69%)", "hsl(34, 94%, 94%)", "hsl(34, 98%, 51%)", "hsl(34, 98%, 51%)", "hsl(34, 100%, 11%)", "hsl(34, 100%, 54%)", "hsl(34, 100%, 66%)", "hsl(34, 100%, 70%)", "hsl(34, 100%, 84%)", "hsl(34, 100%, 85%)", "hsl(35, 7%, 32%)", "hsl(35, 8%, 55%)", "hsl(35, 19%, 40%)", "hsl(35, 27%, 58%)", "hsl(35, 28%, 13%)", "hsl(35, 32%, 52%)", "hsl(35, 40%, 69%)", "hsl(35, 40%, 79%)", "hsl(35, 51%, 80%)", "hsl(35, 52%, 47%)", "hsl(35, 57%, 77%)", "hsl(35, 58%, 77%)", "hsl(35, 58%, 83%)", "hsl(35, 59%, 49%)", "hsl(35, 59%, 79%)", "hsl(35, 66%, 64%)", "hsl(35, 71%, 73%)", "hsl(35, 73%, 57%)", "hsl(35, 73%, 74%)", "hsl(35, 74%, 85%)", "hsl(35, 77%, 64%)", "hsl(35, 81%, 65%)", "hsl(35, 81%, 86%)", "hsl(35, 82%, 68%)", "hsl(35, 83%, 63%)", "hsl(35, 83%, 84%)", "hsl(35, 87%, 44%)", "hsl(35, 87%, 59%)", "hsl(35, 87%, 83%)", "hsl(35, 88%, 53%)", "hsl(35, 88%, 84%)", "hsl(35, 89%, 74%)", "hsl(35, 90%, 84%)", "hsl(35, 91%, 60%)", "hsl(35, 96%, 70%)", "hsl(35, 96%, 70%)", "hsl(35, 97%, 66%)", "hsl(35, 100%, 45%)", "hsl(35, 100%, 50%)", "hsl(35, 100%, 54%)", "hsl(35, 100%, 64%)", "hsl(35, 100%, 66%)", "hsl(35, 100%, 68%)", "hsl(35, 100%, 83%)", "hsl(35, 100%, 86%)", "hsl(35, 100%, 86%)", "hsl(35, 100%, 90%)", "hsl(35, 100%, 91%)", "hsl(36, 6%, 35%)", "hsl(36, 13%, 44%)", "hsl(36, 20%, 24%)", "hsl(36, 20%, 29%)", "hsl(36, 20%, 65%)", "hsl(36, 36%, 82%)", "hsl(36, 40%, 16%)", "hsl(36, 40%, 67%)", "hsl(36, 42%, 69%)", "hsl(36, 50%, 71%)", "hsl(36, 51%, 80%)", "hsl(36, 51%, 82%)", "hsl(36, 54%, 61%)", "hsl(36, 64%, 13%)", "hsl(36, 64%, 64%)", "hsl(36, 68%, 55%)", "hsl(36, 69%, 31%)", "hsl(36, 69%, 89%)", "hsl(36, 70%, 73%)", "hsl(36, 70%, 88%)", "hsl(36, 75%, 68%)", "hsl(36, 77%, 66%)", "hsl(36, 77%, 92%)", "hsl(36, 87%, 71%)", "hsl(36, 89%, 63%)", "hsl(36, 89%, 82%)", "hsl(36, 91%, 63%)", "hsl(36, 95%, 62%)", "hsl(36, 100%, 49%)", "hsl(36, 100%, 50%)", "hsl(36, 100%, 58%)", "hsl(36, 100%, 74%)", "hsl(36, 100%, 95%)", "hsl(37, 4%, 60%)", "hsl(37, 10%, 15%)", "hsl(37, 10%, 47%)", "hsl(37, 11%, 23%)", "hsl(37, 13%, 42%)", "hsl(37, 14%, 41%)", "hsl(37, 17%, 27%)", "hsl(37, 18%, 47%)", "hsl(37, 19%, 46%)", "hsl(37, 24%, 57%)", "hsl(37, 24%, 83%)", "hsl(37, 29%, 45%)", "hsl(37, 39%, 84%)", "hsl(37, 39%, 85%)", "hsl(37, 44%, 86%)", "hsl(37, 52%, 81%)", "hsl(37, 59%, 23%)", "hsl(37, 59%, 72%)", "hsl(37, 60%, 94%)", "hsl(37, 65%, 77%)", "hsl(37, 71%, 73%)", "hsl(37, 74%, 65%)", "hsl(37, 75%, 87%)", "hsl(37, 76%, 80%)", "hsl(37, 78%, 49%)", "hsl(37, 84%, 60%)", "hsl(37, 86%, 81%)", "hsl(37, 89%, 85%)", "hsl(37, 90%, 62%)", "hsl(37, 91%, 87%)", "hsl(37, 93%, 50%)", "hsl(37, 93%, 54%)", "hsl(37, 94%, 49%)", "hsl(37, 94%, 55%)", "hsl(37, 94%, 75%)", "hsl(37, 98%, 68%)", "hsl(37, 98%, 84%)", "hsl(37, 100%, 61%)", "hsl(37, 100%, 62%)", "hsl(37, 100%, 72%)", "hsl(37, 100%, 74%)", "hsl(37, 100%, 84%)", "hsl(37, 100%, 86%)", "hsl(37, 100%, 87%)", "hsl(38, 7%, 33%)", "hsl(38, 12%, 56%)", "hsl(38, 13%, 17%)", "hsl(38, 20%, 63%)", "hsl(38, 22%, 90%)", "hsl(38, 26%, 20%)", "hsl(38, 27%, 51%)", "hsl(38, 29%, 65%)", "hsl(38, 30%, 72%)", "hsl(38, 30%, 84%)", "hsl(38, 35%, 87%)", "hsl(38, 37%, 60%)", "hsl(38, 41%, 72%)", "hsl(38, 41%, 89%)", "hsl(38, 42%, 53%)", "hsl(38, 45%, 64%)", "hsl(38, 50%, 72%)", "hsl(38, 53%, 80%)", "hsl(38, 54%, 58%)", "hsl(38, 54%, 75%)", "hsl(38, 55%, 92%)", "hsl(38, 62%, 76%)", "hsl(38, 63%, 84%)", "hsl(38, 65%, 82%)", "hsl(38, 65%, 84%)", "hsl(38, 66%, 84%)", "hsl(38, 67%, 64%)", "hsl(38, 69%, 71%)", "hsl(38, 72%, 83%)", "hsl(38, 74%, 83%)", "hsl(38, 76%, 66%)", "hsl(38, 78%, 57%)", "hsl(38, 78%, 70%)", "hsl(38, 78%, 87%)", "hsl(38, 80%, 86%)", "hsl(38, 81%, 63%)", "hsl(38, 81%, 82%)", "hsl(38, 81%, 94%)", "hsl(38, 82%, 76%)", "hsl(38, 86%, 56%)", "hsl(38, 89%, 67%)", "hsl(38, 92%, 76%)", "hsl(38, 94%, 87%)", "hsl(38, 96%, 47%)", "hsl(38, 99%, 51%)", "hsl(38, 99%, 57%)", "hsl(38, 100%, 69%)", "hsl(38, 100%, 78%)", "hsl(38, 100%, 85%)", "hsl(38, 100%, 85%)", "hsl(38, 100%, 87%)", "hsl(38, 100%, 90%)", "hsl(38, 100%, 91%)", "hsl(38, 100%, 98%)", "hsl(39, 7%, 48%)", "hsl(39, 15%, 34%)", "hsl(39, 16%, 68%)", "hsl(39, 16%, 79%)", "hsl(39, 17%, 34%)", "hsl(39, 21%, 26%)", "hsl(39, 25%, 38%)", "hsl(39, 25%, 70%)", "hsl(39, 26%, 77%)", "hsl(39, 26%, 77%)", "hsl(39, 31%, 59%)", "hsl(39, 33%, 59%)", "hsl(39, 36%, 59%)", "hsl(39, 40%, 86%)", "hsl(39, 45%, 71%)", "hsl(39, 49%, 27%)", "hsl(39, 55%, 89%)", "hsl(39, 56%, 83%)", "hsl(39, 59%, 91%)", "hsl(39, 61%, 69%)", "hsl(39, 62%, 78%)", "hsl(39, 63%, 66%)", "hsl(39, 73%, 83%)", "hsl(39, 75%, 81%)", "hsl(39, 83%, 77%)", "hsl(39, 83%, 86%)", "hsl(39, 87%, 49%)", "hsl(39, 87%, 50%)", "hsl(39, 89%, 65%)", "hsl(39, 89%, 76%)", "hsl(39, 90%, 58%)", "hsl(39, 91%, 49%)", "hsl(39, 93%, 74%)", "hsl(39, 94%, 66%)", "hsl(39, 95%, 76%)", "hsl(39, 96%, 71%)", "hsl(39, 98%, 53%)", "hsl(39, 100%, 70%)", "hsl(39, 100%, 92%)", "hsl(40, 3%, 20%)", "hsl(40, 13%, 50%)", "hsl(40, 15%, 47%)", "hsl(40, 16%, 59%)", "hsl(40, 17%, 58%)", "hsl(40, 25%, 68%)", "hsl(40, 29%, 66%)", "hsl(40, 31%, 71%)", "hsl(40, 34%, 72%)", "hsl(40, 38%, 79%)", "hsl(40, 39%, 70%)", "hsl(40, 39%, 80%)", "hsl(40, 40%, 64%)", "hsl(40, 40%, 65%)", "hsl(40, 41%, 71%)", "hsl(40, 44%, 65%)", "hsl(40, 45%, 64%)", "hsl(40, 48%, 81%)", "hsl(40, 56%, 50%)", "hsl(40, 57%, 80%)", "hsl(40, 58%, 79%)", "hsl(40, 63%, 86%)", "hsl(40, 64%, 84%)", "hsl(40, 67%, 64%)", "hsl(40, 68%, 65%)", "hsl(40, 69%, 80%)", "hsl(40, 71%, 80%)", "hsl(40, 71%, 80%)", "hsl(40, 72%, 90%)", "hsl(40, 74%, 57%)", "hsl(40, 74%, 57%)", "hsl(40, 74%, 77%)", "hsl(40, 76%, 54%)", "hsl(40, 77%, 71%)", "hsl(40, 77%, 85%)", "hsl(40, 78%, 86%)", "hsl(40, 79%, 77%)", "hsl(40, 81%, 53%)", "hsl(40, 86%, 11%)", "hsl(40, 86%, 67%)", "hsl(40, 88%, 52%)", "hsl(40, 88%, 56%)", "hsl(40, 92%, 90%)", "hsl(40, 97%, 53%)", "hsl(40, 98%, 53%)", "hsl(40, 100%, 50%)", "hsl(40, 100%, 51%)", "hsl(40, 100%, 51%)", "hsl(40, 100%, 52%)", "hsl(40, 100%, 55%)", "hsl(40, 100%, 58%)", "hsl(40, 100%, 63%)", "hsl(40, 100%, 72%)", "hsl(40, 100%, 93%)", "hsl(41, 11%, 71%)", "hsl(41, 17%, 58%)", "hsl(41, 33%, 77%)", "hsl(41, 36%, 72%)", "hsl(41, 37%, 69%)", "hsl(41, 37%, 69%)", "hsl(41, 39%, 45%)", "hsl(41, 40%, 48%)", "hsl(41, 40%, 61%)", "hsl(41, 41%, 35%)", "hsl(41, 42%, 44%)", "hsl(41, 43%, 78%)", "hsl(41, 46%, 75%)", "hsl(41, 48%, 85%)", "hsl(41, 55%, 49%)", "hsl(41, 58%, 90%)", "hsl(41, 60%, 73%)", "hsl(41, 65%, 64%)", "hsl(41, 66%, 48%)", "hsl(41, 66%, 83%)", "hsl(41, 68%, 64%)", "hsl(41, 72%, 59%)", "hsl(41, 73%, 84%)", "hsl(41, 75%, 84%)", "hsl(41, 78%, 86%)", "hsl(41, 82%, 70%)", "hsl(41, 83%, 81%)", "hsl(41, 83%, 91%)", "hsl(41, 84%, 65%)", "hsl(41, 92%, 90%)", "hsl(41, 94%, 69%)", "hsl(41, 95%, 59%)", "hsl(41, 95%, 78%)", "hsl(41, 97%, 66%)", "hsl(41, 98%, 50%)", "hsl(41, 98%, 84%)", "hsl(41, 100%, 49%)", "hsl(41, 100%, 83%)", "hsl(41, 100%, 87%)", "hsl(42, 4%, 52%)", "hsl(42, 9%, 45%)", "hsl(42, 11%, 70%)", "hsl(42, 16%, 12%)", "hsl(42, 19%, 14%)", "hsl(42, 20%, 53%)", "hsl(42, 20%, 53%)", "hsl(42, 21%, 16%)", "hsl(42, 21%, 49%)", "hsl(42, 22%, 55%)", "hsl(42, 27%, 56%)", "hsl(42, 27%, 85%)", "hsl(42, 28%, 84%)", "hsl(42, 29%, 58%)", "hsl(42, 33%, 56%)", "hsl(42, 33%, 85%)", "hsl(42, 35%, 56%)", "hsl(42, 39%, 86%)", "hsl(42, 39%, 94%)", "hsl(42, 41%, 75%)", "hsl(42, 42%, 83%)", "hsl(42, 43%, 61%)", "hsl(42, 44%, 71%)", "hsl(42, 45%, 71%)", "hsl(42, 48%, 75%)", "hsl(42, 54%, 72%)", "hsl(42, 56%, 67%)", "hsl(42, 59%, 72%)", "hsl(42, 69%, 47%)", "hsl(42, 70%, 79%)", "hsl(42, 71%, 74%)", "hsl(42, 71%, 82%)", "hsl(42, 72%, 83%)", "hsl(42, 77%, 57%)", "hsl(42, 78%, 76%)", "hsl(42, 78%, 86%)", "hsl(42, 79%, 53%)", "hsl(42, 85%, 65%)", "hsl(42, 85%, 95%)", "hsl(42, 86%, 66%)", "hsl(42, 91%, 83%)", "hsl(42, 92%, 76%)", "hsl(42, 93%, 84%)", "hsl(42, 100%, 36%)", "hsl(42, 100%, 42%)", "hsl(42, 100%, 50%)", "hsl(42, 100%, 50%)", "hsl(42, 100%, 54%)", "hsl(42, 100%, 67%)", "hsl(42, 100%, 77%)", "hsl(42, 100%, 77%)", "hsl(42, 100%, 85%)", "hsl(42, 100%, 91%)", "hsl(42, 100%, 92%)", "hsl(42, 100%, 94%)", "hsl(42, 100%, 95%)", "hsl(43, 14%, 51%)", "hsl(43, 15%, 67%)", "hsl(43, 16%, 92%)", "hsl(43, 20%, 40%)", "hsl(43, 24%, 65%)", "hsl(43, 29%, 69%)", "hsl(43, 31%, 18%)", "hsl(43, 31%, 75%)", "hsl(43, 34%, 77%)", "hsl(43, 35%, 60%)", "hsl(43, 36%, 26%)", "hsl(43, 36%, 78%)", "hsl(43, 36%, 82%)", "hsl(43, 37%, 87%)", "hsl(43, 38%, 76%)", "hsl(43, 39%, 91%)", "hsl(43, 44%, 71%)", "hsl(43, 51%, 73%)", "hsl(43, 55%, 44%)", "hsl(43, 55%, 75%)", "hsl(43, 57%, 86%)", "hsl(43, 58%, 73%)", "hsl(43, 59%, 79%)", "hsl(43, 62%, 84%)", "hsl(43, 70%, 87%)", "hsl(43, 74%, 62%)", "hsl(43, 74%, 90%)", "hsl(43, 76%, 62%)", "hsl(43, 81%, 83%)", "hsl(43, 84%, 39%)", "hsl(43, 85%, 72%)", "hsl(43, 88%, 74%)", "hsl(43, 90%, 69%)", "hsl(43, 91%, 83%)", "hsl(43, 95%, 57%)", "hsl(43, 98%, 64%)", "hsl(43, 100%, 53%)", "hsl(43, 100%, 80%)", "hsl(43, 100%, 84%)", "hsl(43, 100%, 86%)", "hsl(43, 100%, 87%)", "hsl(43, 100%, 88%)", "hsl(43, 100%, 90%)", "hsl(44, 32%, 73%)", "hsl(44, 36%, 64%)", "hsl(44, 38%, 87%)", "hsl(44, 41%, 93%)", "hsl(44, 44%, 67%)", "hsl(44, 46%, 91%)", "hsl(44, 48%, 77%)", "hsl(44, 49%, 85%)", "hsl(44, 52%, 81%)", "hsl(44, 52%, 85%)", "hsl(44, 58%, 79%)", "hsl(44, 58%, 93%)", "hsl(44, 60%, 84%)", "hsl(44, 65%, 69%)", "hsl(44, 70%, 80%)", "hsl(44, 73%, 37%)", "hsl(44, 73%, 74%)", "hsl(44, 76%, 90%)", "hsl(44, 81%, 79%)", "hsl(44, 82%, 87%)", "hsl(44, 83%, 86%)", "hsl(44, 83%, 89%)", "hsl(44, 84%, 55%)", "hsl(44, 84%, 68%)", "hsl(44, 89%, 69%)", "hsl(44, 95%, 64%)", "hsl(44, 97%, 71%)", "hsl(44, 97%, 87%)", "hsl(44, 100%, 55%)", "hsl(44, 100%, 55%)", "hsl(44, 100%, 59%)", "hsl(44, 100%, 80%)", "hsl(44, 100%, 97%)", "hsl(45, 3%, 30%)", "hsl(45, 10%, 33%)", "hsl(45, 13%, 52%)", "hsl(45, 13%, 54%)", "hsl(45, 18%, 82%)", "hsl(45, 21%, 66%)", "hsl(45, 24%, 67%)", "hsl(45, 25%, 47%)", "hsl(45, 31%, 65%)", "hsl(45, 36%, 78%)", "hsl(45, 40%, 47%)", "hsl(45, 40%, 88%)", "hsl(45, 46%, 87%)", "hsl(45, 48%, 83%)", "hsl(45, 61%, 14%)", "hsl(45, 61%, 64%)", "hsl(45, 62%, 83%)", "hsl(45, 63%, 51%)", "hsl(45, 66%, 73%)", "hsl(45, 66%, 81%)", "hsl(45, 66%, 91%)", "hsl(45, 69%, 75%)", "hsl(45, 71%, 80%)", "hsl(45, 72%, 75%)", "hsl(45, 73%, 71%)", "hsl(45, 75%, 70%)", "hsl(45, 76%, 68%)", "hsl(45, 76%, 75%)", "hsl(45, 77%, 60%)", "hsl(45, 77%, 65%)", "hsl(45, 78%, 82%)", "hsl(45, 80%, 80%)", "hsl(45, 81%, 73%)", "hsl(45, 82%, 57%)", "hsl(45, 83%, 89%)", "hsl(45, 86%, 63%)", "hsl(45, 89%, 78%)", "hsl(45, 91%, 25%)", "hsl(45, 92%, 85%)", "hsl(45, 92%, 90%)", "hsl(45, 96%, 49%)", "hsl(45, 100%, 25%)", "hsl(45, 100%, 45%)", "hsl(45, 100%, 47%)", "hsl(45, 100%, 60%)", "hsl(45, 100%, 61%)", "hsl(45, 100%, 66%)", "hsl(45, 100%, 84%)", "hsl(45, 100%, 88%)", "hsl(45, 100%, 92%)", "hsl(45, 100%, 92%)", "hsl(45, 100%, 96%)", "hsl(46, 13%, 81%)", "hsl(46, 24%, 46%)", "hsl(46, 25%, 20%)", "hsl(46, 27%, 41%)", "hsl(46, 28%, 16%)", "hsl(46, 29%, 91%)", "hsl(46, 31%, 66%)", "hsl(46, 32%, 74%)", "hsl(46, 37%, 52%)", "hsl(46, 44%, 68%)", "hsl(46, 44%, 87%)", "hsl(46, 52%, 95%)", "hsl(46, 61%, 86%)", "hsl(46, 65%, 93%)", "hsl(46, 70%, 85%)", "hsl(46, 72%, 93%)", "hsl(46, 75%, 70%)", "hsl(46, 77%, 72%)", "hsl(46, 81%, 62%)", "hsl(46, 82%, 78%)", "hsl(46, 86%, 63%)", "hsl(46, 88%, 87%)", "hsl(46, 89%, 36%)", "hsl(46, 90%, 73%)", "hsl(46, 93%, 55%)", "hsl(46, 94%, 94%)", "hsl(46, 95%, 75%)", "hsl(46, 98%, 82%)", "hsl(46, 100%, 49%)", "hsl(46, 100%, 50%)", "hsl(46, 100%, 50%)", "hsl(46, 100%, 55%)", "hsl(46, 100%, 70%)", "hsl(46, 100%, 75%)", "hsl(46, 100%, 86%)", "hsl(46, 100%, 88%)", "hsl(47, 15%, 53%)", "hsl(47, 17%, 57%)", "hsl(47, 18%, 58%)", "hsl(47, 22%, 64%)", "hsl(47, 23%, 66%)", "hsl(47, 27%, 67%)", "hsl(47, 32%, 46%)", "hsl(47, 32%, 86%)", "hsl(47, 36%, 59%)", "hsl(47, 46%, 82%)", "hsl(47, 47%, 37%)", "hsl(47, 55%, 39%)", "hsl(47, 56%, 75%)", "hsl(47, 56%, 79%)", "hsl(47, 57%, 92%)", "hsl(47, 59%, 71%)", "hsl(47, 59%, 75%)", "hsl(47, 60%, 67%)", "hsl(47, 62%, 90%)", "hsl(47, 64%, 86%)", "hsl(47, 72%, 76%)", "hsl(47, 76%, 79%)", "hsl(47, 79%, 37%)", "hsl(47, 81%, 86%)", "hsl(47, 82%, 79%)", "hsl(47, 84%, 62%)", "hsl(47, 84%, 81%)", "hsl(47, 85%, 50%)", "hsl(47, 85%, 50%)", "hsl(47, 86%, 72%)", "hsl(47, 87%, 62%)", "hsl(47, 88%, 91%)", "hsl(47, 89%, 69%)", "hsl(47, 89%, 69%)", "hsl(47, 89%, 74%)", "hsl(47, 90%, 84%)", "hsl(47, 93%, 48%)", "hsl(47, 95%, 74%)", "hsl(47, 95%, 83%)", "hsl(47, 97%, 60%)", "hsl(47, 98%, 45%)", "hsl(47, 99%, 57%)", "hsl(47, 100%, 51%)", "hsl(47, 100%, 66%)", "hsl(47, 100%, 79%)", "hsl(47, 100%, 80%)", "hsl(47, 100%, 85%)", "hsl(47, 100%, 86%)", "hsl(47, 100%, 90%)", "hsl(48, 2%, 43%)", "hsl(48, 13%, 55%)", "hsl(48, 27%, 81%)", "hsl(48, 29%, 90%)", "hsl(48, 32%, 48%)", "hsl(48, 32%, 68%)", "hsl(48, 33%, 73%)", "hsl(48, 33%, 85%)", "hsl(48, 37%, 76%)", "hsl(48, 41%, 71%)", "hsl(48, 42%, 55%)", "hsl(48, 42%, 86%)", "hsl(48, 48%, 94%)", "hsl(48, 51%, 53%)", "hsl(48, 56%, 55%)", "hsl(48, 56%, 74%)", "hsl(48, 56%, 80%)", "hsl(48, 59%, 93%)", "hsl(48, 60%, 61%)", "hsl(48, 71%, 77%)", "hsl(48, 79%, 67%)", "hsl(48, 81%, 77%)", "hsl(48, 83%, 70%)", "hsl(48, 85%, 87%)", "hsl(48, 86%, 73%)", "hsl(48, 91%, 4%)", "hsl(48, 93%, 88%)", "hsl(48, 94%, 6%)", "hsl(48, 98%, 77%)", "hsl(48, 99%, 67%)", "hsl(48, 100%, 56%)", "hsl(48, 100%, 84%)", "hsl(49, 28%, 69%)", "hsl(49, 28%, 69%)", "hsl(49, 31%, 75%)", "hsl(49, 35%, 75%)", "hsl(49, 37%, 57%)", "hsl(49, 40%, 84%)", "hsl(49, 42%, 65%)", "hsl(49, 42%, 72%)", "hsl(49, 52%, 70%)", "hsl(49, 56%, 66%)", "hsl(49, 59%, 89%)", "hsl(49, 61%, 82%)", "hsl(49, 64%, 76%)", "hsl(49, 66%, 74%)", "hsl(49, 69%, 86%)", "hsl(49, 72%, 79%)", "hsl(49, 83%, 82%)", "hsl(49, 84%, 81%)", "hsl(49, 92%, 53%)", "hsl(49, 95%, 50%)", "hsl(49, 95%, 84%)", "hsl(49, 96%, 48%)", "hsl(49, 100%, 49%)", "hsl(49, 100%, 83%)", "hsl(49, 100%, 94%)", "hsl(49, 100%, 95%)", "hsl(50, 7%, 16%)", "hsl(50, 21%, 57%)", "hsl(50, 27%, 45%)", "hsl(50, 27%, 87%)", "hsl(50, 32%, 66%)", "hsl(50, 41%, 9%)", "hsl(50, 50%, 70%)", "hsl(50, 61%, 48%)", "hsl(50, 62%, 60%)", "hsl(50, 72%, 76%)", "hsl(50, 75%, 67%)", "hsl(50, 82%, 96%)", "hsl(50, 85%, 60%)", "hsl(50, 95%, 56%)", "hsl(50, 95%, 56%)", "hsl(50, 95%, 92%)", "hsl(50, 95%, 92%)", "hsl(50, 96%, 89%)", "hsl(50, 97%, 89%)", "hsl(50, 100%, 69%)", "hsl(50, 100%, 84%)", "hsl(50, 100%, 89%)", "hsl(50, 100%, 92%)", "hsl(51, 3%, 51%)", "hsl(51, 6%, 55%)", "hsl(51, 12%, 32%)", "hsl(51, 16%, 57%)", "hsl(51, 17%, 57%)", "hsl(51, 17%, 77%)", "hsl(51, 33%, 75%)", "hsl(51, 36%, 81%)", "hsl(51, 52%, 38%)", "hsl(51, 66%, 84%)", "hsl(51, 67%, 84%)", "hsl(51, 69%, 83%)", "hsl(51, 72%, 89%)", "hsl(51, 75%, 89%)", "hsl(51, 76%, 84%)", "hsl(51, 78%, 83%)", "hsl(51, 80%, 64%)", "hsl(51, 88%, 91%)", "hsl(51, 88%, 91%)", "hsl(51, 95%, 57%)", "hsl(51, 95%, 85%)", "hsl(51, 98%, 82%)", "hsl(51, 100%, 81%)", "hsl(51, 100%, 92%)", "hsl(52, 12%, 49%)", "hsl(52, 14%, 31%)", "hsl(52, 17%, 75%)", "hsl(52, 28%, 79%)", "hsl(52, 32%, 76%)", "hsl(52, 36%, 71%)", "hsl(52, 42%, 83%)", "hsl(52, 53%, 86%)", "hsl(52, 54%, 54%)", "hsl(52, 56%, 80%)", "hsl(52, 58%, 67%)", "hsl(52, 64%, 86%)", "hsl(52, 69%, 83%)", "hsl(52, 69%, 85%)", "hsl(52, 71%, 86%)", "hsl(52, 72%, 82%)", "hsl(52, 77%, 63%)", "hsl(52, 85%, 85%)", "hsl(52, 86%, 60%)", "hsl(52, 86%, 92%)", "hsl(52, 88%, 64%)", "hsl(52, 94%, 64%)", "hsl(52, 94%, 74%)", "hsl(52, 94%, 80%)", "hsl(52, 94%, 81%)", "hsl(52, 95%, 77%)", "hsl(53, 9%, 38%)", "hsl(53, 9%, 64%)", "hsl(53, 25%, 52%)", "hsl(53, 33%, 66%)", "hsl(53, 37%, 68%)", "hsl(53, 37%, 76%)", "hsl(53, 38%, 41%)", "hsl(53, 39%, 73%)", "hsl(53, 40%, 69%)", "hsl(53, 44%, 55%)", "hsl(53, 51%, 72%)", "hsl(53, 51%, 82%)", "hsl(53, 53%, 69%)", "hsl(53, 54%, 88%)", "hsl(53, 57%, 85%)", "hsl(53, 58%, 38%)", "hsl(53, 58%, 70%)", "hsl(53, 59%, 48%)", "hsl(53, 62%, 76%)", "hsl(53, 62%, 79%)", "hsl(53, 63%, 75%)", "hsl(53, 65%, 74%)", "hsl(53, 66%, 80%)", "hsl(53, 66%, 82%)", "hsl(53, 68%, 67%)", "hsl(53, 68%, 90%)", "hsl(53, 79%, 85%)", "hsl(53, 83%, 77%)", "hsl(53, 83%, 82%)", "hsl(53, 84%, 83%)", "hsl(53, 84%, 90%)", "hsl(53, 87%, 91%)", "hsl(53, 88%, 90%)", "hsl(53, 90%, 52%)", "hsl(53, 92%, 85%)", "hsl(53, 93%, 53%)", "hsl(53, 95%, 84%)", "hsl(53, 97%, 71%)", "hsl(53, 100%, 68%)", "hsl(53, 100%, 77%)", "hsl(53, 100%, 87%)", "hsl(53, 100%, 87%)", "hsl(53, 100%, 91%)", "hsl(54, 15%, 13%)", "hsl(54, 19%, 68%)", "hsl(54, 33%, 44%)", "hsl(54, 35%, 74%)", "hsl(54, 36%, 65%)", "hsl(54, 38%, 68%)", "hsl(54, 39%, 75%)", "hsl(54, 39%, 80%)", "hsl(54, 41%, 81%)", "hsl(54, 42%, 81%)", "hsl(54, 45%, 47%)", "hsl(54, 48%, 69%)", "hsl(54, 50%, 76%)", "hsl(54, 57%, 86%)", "hsl(54, 59%, 81%)", "hsl(54, 65%, 71%)", "hsl(54, 65%, 76%)", "hsl(54, 68%, 48%)", "hsl(54, 71%, 89%)", "hsl(54, 75%, 64%)", "hsl(54, 76%, 60%)", "hsl(54, 76%, 85%)", "hsl(54, 80%, 79%)", "hsl(54, 81%, 90%)", "hsl(54, 83%, 88%)", "hsl(54, 84%, 80%)", "hsl(54, 92%, 34%)", "hsl(54, 100%, 65%)", "hsl(54, 100%, 87%)", "hsl(54, 100%, 92%)", "hsl(55, 5%, 56%)", "hsl(55, 25%, 73%)", "hsl(55, 27%, 26%)", "hsl(55, 29%, 74%)", "hsl(55, 40%, 75%)", "hsl(55, 42%, 77%)", "hsl(55, 49%, 76%)", "hsl(55, 54%, 73%)", "hsl(55, 57%, 70%)", "hsl(55, 57%, 82%)", "hsl(55, 58%, 88%)", "hsl(55, 62%, 62%)", "hsl(55, 65%, 66%)", "hsl(55, 67%, 79%)", "hsl(55, 72%, 73%)", "hsl(55, 72%, 82%)", "hsl(55, 74%, 77%)", "hsl(55, 75%, 51%)", "hsl(55, 78%, 56%)", "hsl(55, 79%, 87%)", "hsl(55, 80%, 86%)", "hsl(55, 81%, 53%)", "hsl(55, 86%, 92%)", "hsl(55, 88%, 84%)", "hsl(55, 90%, 88%)", "hsl(55, 96%, 82%)", "hsl(55, 97%, 74%)", "hsl(55, 100%, 93%)", "hsl(56, 7%, 45%)", "hsl(56, 28%, 67%)", "hsl(56, 28%, 69%)", "hsl(56, 39%, 40%)", "hsl(56, 46%, 80%)", "hsl(56, 51%, 74%)", "hsl(56, 63%, 79%)", "hsl(56, 63%, 79%)", "hsl(56, 69%, 77%)", "hsl(56, 71%, 39%)", "hsl(56, 77%, 69%)", "hsl(56, 77%, 69%)", "hsl(56, 78%, 53%)", "hsl(56, 83%, 93%)", "hsl(56, 88%, 90%)", "hsl(56, 90%, 85%)", "hsl(56, 94%, 80%)", "hsl(56, 97%, 74%)", "hsl(56, 97%, 88%)", "hsl(56, 100%, 35%)", "hsl(56, 100%, 84%)", "hsl(56, 100%, 85%)", "hsl(57, 12%, 33%)", "hsl(57, 13%, 72%)", "hsl(57, 19%, 53%)", "hsl(57, 30%, 85%)", "hsl(57, 32%, 63%)", "hsl(57, 32%, 87%)", "hsl(57, 33%, 79%)", "hsl(57, 37%, 50%)", "hsl(57, 39%, 70%)", "hsl(57, 42%, 44%)", "hsl(57, 44%, 75%)", "hsl(57, 48%, 71%)", "hsl(57, 50%, 86%)", "hsl(57, 54%, 93%)", "hsl(57, 58%, 71%)", "hsl(57, 66%, 74%)", "hsl(57, 69%, 80%)", "hsl(57, 70%, 74%)", "hsl(57, 74%, 86%)", "hsl(57, 80%, 43%)", "hsl(57, 80%, 86%)", "hsl(57, 91%, 87%)", "hsl(57, 93%, 89%)", "hsl(57, 96%, 91%)", "hsl(57, 97%, 37%)", "hsl(57, 97%, 85%)", "hsl(57, 99%, 36%)", "hsl(57, 100%, 36%)", "hsl(57, 100%, 61%)", "hsl(57, 100%, 86%)", "hsl(57, 100%, 91%)", "hsl(57, 100%, 96%)", "hsl(58, 20%, 47%)", "hsl(58, 20%, 66%)", "hsl(58, 24%, 26%)", "hsl(58, 24%, 54%)", "hsl(58, 28%, 67%)", "hsl(58, 28%, 82%)", "hsl(58, 31%, 69%)", "hsl(58, 36%, 72%)", "hsl(58, 40%, 84%)", "hsl(58, 41%, 62%)", "hsl(58, 41%, 75%)", "hsl(58, 45%, 87%)", "hsl(58, 46%, 51%)", "hsl(58, 46%, 77%)", "hsl(58, 47%, 79%)", "hsl(58, 50%, 79%)", "hsl(58, 52%, 87%)", "hsl(58, 55%, 75%)", "hsl(58, 60%, 90%)", "hsl(58, 61%, 91%)", "hsl(58, 63%, 53%)", "hsl(58, 73%, 80%)", "hsl(58, 74%, 17%)", "hsl(58, 74%, 86%)", "hsl(58, 80%, 61%)", "hsl(58, 100%, 88%)", "hsl(58, 100%, 88%)", "hsl(58, 100%, 93%)", "hsl(58, 100%, 94%)", "hsl(58, 100%, 94%)", "hsl(58, 100%, 95%)", "hsl(59, 23%, 37%)", "hsl(59, 24%, 60%)", "hsl(59, 27%, 63%)", "hsl(59, 29%, 59%)", "hsl(59, 39%, 77%)", "hsl(59, 43%, 79%)", "hsl(59, 49%, 64%)", "hsl(59, 49%, 73%)", "hsl(59, 51%, 75%)", "hsl(59, 53%, 65%)", "hsl(59, 60%, 63%)", "hsl(59, 61%, 73%)", "hsl(59, 62%, 79%)", "hsl(59, 62%, 82%)", "hsl(59, 68%, 60%)", "hsl(59, 69%, 88%)", "hsl(59, 76%, 74%)", "hsl(59, 86%, 80%)", "hsl(59, 92%, 90%)", "hsl(59, 100%, 89%)", "hsl(59, 100%, 89%)", "hsl(59, 100%, 89%)", "hsl(59, 100%, 89%)", "hsl(60, 3%, 6%)", "hsl(60, 3%, 85%)", "hsl(60, 5%, 17%)", "hsl(60, 5%, 49%)", "hsl(60, 5%, 60%)", "hsl(60, 6%, 7%)", "hsl(60, 7%, 8%)", "hsl(60, 7%, 29%)", "hsl(60, 8%, 22%)", "hsl(60, 8%, 95%)", "hsl(60, 10%, 19%)", "hsl(60, 11%, 49%)", "hsl(60, 13%, 62%)", "hsl(60, 14%, 77%)", "hsl(60, 16%, 62%)", "hsl(60, 16%, 71%)", "hsl(60, 17%, 2%)", "hsl(60, 17%, 49%)", "hsl(60, 17%, 49%)", "hsl(60, 21%, 61%)", "hsl(60, 22%, 56%)", "hsl(60, 22%, 72%)", "hsl(60, 22%, 72%)", "hsl(60, 24%, 80%)", "hsl(60, 24%, 80%)", "hsl(60, 24%, 85%)", "hsl(60, 27%, 62%)", "hsl(60, 27%, 63%)", "hsl(60, 28%, 78%)", "hsl(60, 28%, 80%)", "hsl(60, 28%, 90%)", "hsl(60, 33%, 77%)", "hsl(60, 36%, 83%)", "hsl(60, 38%, 66%)", "hsl(60, 39%, 64%)", "hsl(60, 40%, 80%)", "hsl(60, 40%, 96%)", "hsl(60, 44%, 89%)", "hsl(60, 44%, 89%)", "hsl(60, 44%, 89%)", "hsl(60, 44%, 89%)", "hsl(60, 44%, 89%)", "hsl(60, 44%, 89%)", "hsl(60, 44%, 89%)", "hsl(60, 44%, 89%)", "hsl(60, 45%, 79%)", "hsl(60, 46%, 95%)", "hsl(60, 46%, 95%)", "hsl(60, 47%, 63%)", "hsl(60, 47%, 68%)", "hsl(60, 47%, 77%)", "hsl(60, 50%, 60%)", "hsl(60, 50%, 99%)", "hsl(60, 51%, 91%)", "hsl(60, 52%, 72%)", "hsl(60, 53%, 93%)", "hsl(60, 54%, 83%)", "hsl(60, 60%, 94%)", "hsl(60, 61%, 48%)", "hsl(60, 61%, 76%)", "hsl(60, 62%, 80%)", "hsl(60, 63%, 85%)", "hsl(60, 64%, 55%)", "hsl(60, 68%, 62%)", "hsl(60, 68%, 81%)", "hsl(60, 71%, 91%)", "hsl(60, 72%, 48%)", "hsl(60, 73%, 71%)", "hsl(60, 75%, 87%)", "hsl(60, 78%, 91%)", "hsl(60, 79%, 91%)", "hsl(60, 81%, 94%)", "hsl(60, 83%, 69%)", "hsl(60, 84%, 80%)", "hsl(60, 85%, 78%)", "hsl(60, 86%, 92%)", "hsl(60, 90%, 96%)", "hsl(60, 100%, 50%)", "hsl(60, 100%, 79%)", "hsl(60, 100%, 80%)", "hsl(60, 100%, 80%)", "hsl(60, 100%, 88%)", "hsl(60, 100%, 88%)", "hsl(60, 100%, 90%)", "hsl(60, 100%, 93%)", "hsl(60, 100%, 95%)", "hsl(60, 100%, 95%)", "hsl(60, 100%, 96%)", "hsl(60, 100%, 98%)", "hsl(60, 100%, 100%)", "hsl(61, 36%, 42%)", "hsl(61, 42%, 46%)", "hsl(61, 43%, 77%)", "hsl(61, 48%, 81%)", "hsl(61, 51%, 69%)", "hsl(61, 52%, 63%)", "hsl(61, 54%, 61%)", "hsl(61, 65%, 84%)", "hsl(61, 78%, 85%)", "hsl(61, 80%, 90%)", "hsl(61, 80%, 90%)", "hsl(61, 100%, 92%)", "hsl(61, 100%, 92%)", "hsl(62, 13%, 52%)", "hsl(62, 14%, 58%)", "hsl(62, 25%, 80%)", "hsl(62, 29%, 82%)", "hsl(62, 37%, 85%)", "hsl(62, 40%, 88%)", "hsl(62, 42%, 62%)", "hsl(62, 47%, 89%)", "hsl(62, 50%, 63%)", "hsl(62, 50%, 78%)", "hsl(62, 54%, 67%)", "hsl(62, 58%, 88%)", "hsl(62, 59%, 52%)", "hsl(62, 64%, 35%)", "hsl(62, 75%, 92%)", "hsl(62, 75%, 94%)", "hsl(62, 78%, 85%)", "hsl(62, 79%, 72%)", "hsl(62, 81%, 29%)", "hsl(62, 83%, 44%)", "hsl(62, 98%, 41%)", "hsl(63, 10%, 66%)", "hsl(63, 12%, 66%)", "hsl(63, 16%, 75%)", "hsl(63, 20%, 81%)", "hsl(63, 21%, 35%)", "hsl(63, 25%, 65%)", "hsl(63, 27%, 66%)", "hsl(63, 31%, 76%)", "hsl(63, 33%, 50%)", "hsl(63, 38%, 79%)", "hsl(63, 41%, 83%)", "hsl(63, 46%, 76%)", "hsl(63, 46%, 84%)", "hsl(63, 47%, 49%)", "hsl(63, 52%, 84%)", "hsl(63, 53%, 92%)", "hsl(63, 70%, 34%)", "hsl(63, 77%, 70%)", "hsl(63, 82%, 96%)", "hsl(63, 87%, 91%)", "hsl(63, 100%, 93%)", "hsl(63, 100%, 93%)", "hsl(64, 11%, 71%)", "hsl(64, 22%, 58%)", "hsl(64, 29%, 70%)", "hsl(64, 36%, 57%)", "hsl(64, 37%, 85%)", "hsl(64, 40%, 47%)", "hsl(64, 41%, 93%)", "hsl(64, 42%, 56%)", "hsl(64, 42%, 80%)", "hsl(64, 48%, 46%)", "hsl(64, 54%, 75%)", "hsl(64, 60%, 68%)", "hsl(64, 60%, 81%)", "hsl(64, 62%, 78%)", "hsl(64, 79%, 48%)", "hsl(64, 82%, 72%)", "hsl(64, 85%, 62%)", "hsl(64, 91%, 64%)", "hsl(64, 91%, 87%)", "hsl(64, 96%, 42%)", "hsl(65, 6%, 40%)", "hsl(65, 9%, 50%)", "hsl(65, 10%, 58%)", "hsl(65, 18%, 63%)", "hsl(65, 19%, 59%)", "hsl(65, 19%, 77%)", "hsl(65, 20%, 76%)", "hsl(65, 31%, 76%)", "hsl(65, 37%, 63%)", "hsl(65, 46%, 91%)", "hsl(65, 49%, 65%)", "hsl(65, 53%, 72%)", "hsl(65, 55%, 63%)", "hsl(65, 59%, 51%)", "hsl(65, 62%, 37%)", "hsl(65, 62%, 79%)", "hsl(65, 65%, 61%)", "hsl(65, 73%, 3%)", "hsl(65, 100%, 90%)", "hsl(65, 100%, 90%)", "hsl(65, 100%, 93%)", "hsl(66, 5%, 60%)", "hsl(66, 15%, 87%)", "hsl(66, 18%, 69%)", "hsl(66, 53%, 41%)", "hsl(66, 53%, 79%)", "hsl(66, 54%, 86%)", "hsl(66, 61%, 88%)", "hsl(66, 66%, 64%)", "hsl(66, 68%, 49%)", "hsl(66, 68%, 67%)", "hsl(66, 77%, 85%)", "hsl(66, 78%, 32%)", "hsl(66, 78%, 64%)", "hsl(66, 89%, 32%)", "hsl(66, 97%, 48%)", "hsl(67, 19%, 50%)", "hsl(67, 20%, 42%)", "hsl(67, 31%, 52%)", "hsl(67, 39%, 71%)", "hsl(67, 53%, 44%)", "hsl(67, 62%, 53%)", "hsl(67, 67%, 70%)", "hsl(67, 78%, 32%)", "hsl(67, 79%, 45%)", "hsl(67, 79%, 62%)", "hsl(67, 82%, 33%)", "hsl(67, 85%, 79%)", "hsl(67, 92%, 38%)", "hsl(67, 92%, 85%)", "hsl(67, 93%, 95%)", "hsl(67, 100%, 85%)", "hsl(68, 31%, 50%)", "hsl(68, 32%, 69%)", "hsl(68, 44%, 4%)", "hsl(68, 54%, 83%)", "hsl(68, 59%, 40%)", "hsl(68, 60%, 48%)", "hsl(68, 66%, 86%)", "hsl(68, 69%, 89%)", "hsl(69, 21%, 87%)", "hsl(69, 22%, 76%)", "hsl(69, 28%, 72%)", "hsl(69, 39%, 71%)", "hsl(69, 42%, 57%)", "hsl(69, 43%, 48%)", "hsl(69, 44%, 57%)", "hsl(69, 45%, 47%)", "hsl(69, 60%, 79%)", "hsl(69, 68%, 73%)", "hsl(69, 68%, 81%)", "hsl(69, 72%, 89%)", "hsl(69, 76%, 61%)", "hsl(69, 80%, 90%)", "hsl(69, 83%, 95%)", "hsl(69, 89%, 82%)", "hsl(69, 92%, 60%)", "hsl(69, 100%, 70%)", "hsl(69, 100%, 95%)", "hsl(70, 13%, 63%)", "hsl(70, 16%, 64%)", "hsl(70, 20%, 59%)", "hsl(70, 26%, 72%)", "hsl(70, 31%, 85%)", "hsl(70, 36%, 63%)", "hsl(70, 43%, 64%)", "hsl(70, 43%, 73%)", "hsl(70, 56%, 81%)", "hsl(70, 60%, 47%)", "hsl(70, 65%, 72%)", "hsl(70, 74%, 41%)", "hsl(70, 74%, 60%)", "hsl(70, 77%, 36%)", "hsl(70, 77%, 85%)", "hsl(71, 16%, 79%)", "hsl(71, 18%, 81%)", "hsl(71, 22%, 85%)", "hsl(71, 27%, 68%)", "hsl(71, 29%, 85%)", "hsl(71, 37%, 86%)", "hsl(71, 40%, 61%)", "hsl(71, 53%, 78%)", "hsl(71, 57%, 86%)", "hsl(71, 70%, 32%)", "hsl(71, 81%, 65%)", "hsl(71, 100%, 76%)", "hsl(72, 2%, 50%)", "hsl(72, 4%, 27%)", "hsl(72, 24%, 64%)", "hsl(72, 30%, 46%)", "hsl(72, 39%, 78%)", "hsl(72, 41%, 54%)", "hsl(72, 42%, 95%)", "hsl(72, 49%, 56%)", "hsl(72, 56%, 45%)", "hsl(72, 60%, 82%)", "hsl(72, 61%, 61%)", "hsl(72, 62%, 71%)", "hsl(72, 74%, 63%)", "hsl(72, 81%, 44%)", "hsl(72, 82%, 69%)", "hsl(72, 88%, 80%)", "hsl(72, 88%, 81%)", "hsl(72, 92%, 45%)", "hsl(72, 94%, 47%)", "hsl(72, 100%, 32%)", "hsl(72, 100%, 56%)", "hsl(73, 11%, 48%)", "hsl(73, 13%, 14%)", "hsl(73, 24%, 65%)", "hsl(73, 26%, 75%)", "hsl(73, 29%, 82%)", "hsl(73, 46%, 64%)", "hsl(73, 53%, 57%)", "hsl(73, 56%, 94%)", "hsl(73, 77%, 7%)", "hsl(73, 82%, 98%)", "hsl(73, 93%, 56%)", "hsl(73, 98%, 48%)", "hsl(73, 100%, 50%)", "hsl(74, 20%, 74%)", "hsl(74, 24%, 54%)", "hsl(74, 25%, 60%)", "hsl(74, 31%, 84%)", "hsl(74, 34%, 87%)", "hsl(74, 39%, 57%)", "hsl(74, 45%, 67%)", "hsl(74, 47%, 87%)", "hsl(74, 48%, 83%)", "hsl(74, 49%, 61%)", "hsl(74, 52%, 81%)", "hsl(74, 59%, 83%)", "hsl(74, 61%, 69%)", "hsl(74, 64%, 91%)", "hsl(74, 64%, 91%)", "hsl(74, 65%, 49%)", "hsl(74, 66%, 62%)", "hsl(74, 71%, 69%)", "hsl(74, 73%, 63%)", "hsl(74, 73%, 66%)", "hsl(74, 73%, 66%)", "hsl(74, 100%, 85%)", "hsl(75, 9%, 82%)", "hsl(75, 12%, 87%)", "hsl(75, 19%, 84%)", "hsl(75, 32%, 74%)", "hsl(75, 40%, 71%)", "hsl(75, 41%, 79%)", "hsl(75, 60%, 80%)", "hsl(75, 70%, 84%)", "hsl(75, 72%, 55%)", "hsl(75, 77%, 83%)", "hsl(75, 84%, 83%)", "hsl(75, 100%, 37%)", "hsl(75, 100%, 53%)", "hsl(75, 100%, 60%)", "hsl(75, 100%, 88%)", "hsl(75, 100%, 91%)", "hsl(76, 6%, 47%)", "hsl(76, 13%, 83%)", "hsl(76, 28%, 86%)", "hsl(76, 31%, 79%)", "hsl(76, 38%, 64%)", "hsl(76, 49%, 77%)", "hsl(76, 50%, 58%)", "hsl(76, 56%, 80%)", "hsl(76, 57%, 71%)", "hsl(76, 62%, 61%)", "hsl(76, 67%, 61%)", "hsl(76, 68%, 59%)", "hsl(76, 72%, 50%)", "hsl(76, 72%, 52%)", "hsl(76, 76%, 67%)", "hsl(76, 84%, 58%)", "hsl(76, 86%, 30%)", "hsl(76, 100%, 91%)", "hsl(77, 16%, 55%)", "hsl(77, 21%, 94%)", "hsl(77, 25%, 75%)", "hsl(77, 29%, 53%)", "hsl(77, 30%, 52%)", "hsl(77, 30%, 82%)", "hsl(77, 32%, 76%)", "hsl(77, 59%, 84%)", "hsl(77, 76%, 84%)", "hsl(77, 100%, 50%)", "hsl(77, 100%, 63%)", "hsl(77, 100%, 89%)", "hsl(78, 9%, 78%)", "hsl(78, 18%, 60%)", "hsl(78, 22%, 69%)", "hsl(78, 27%, 53%)", "hsl(78, 27%, 75%)", "hsl(78, 37%, 51%)", "hsl(78, 37%, 78%)", "hsl(78, 49%, 83%)", "hsl(78, 62%, 75%)", "hsl(78, 64%, 81%)", "hsl(78, 65%, 74%)", "hsl(78, 73%, 83%)", "hsl(78, 74%, 55%)", "hsl(78, 81%, 94%)", "hsl(78, 95%, 60%)", "hsl(78, 100%, 38%)", "hsl(78, 100%, 91%)", "hsl(79, 12%, 47%)", "hsl(79, 20%, 53%)", "hsl(79, 22%, 74%)", "hsl(79, 26%, 52%)", "hsl(79, 30%, 70%)", "hsl(79, 37%, 35%)", "hsl(79, 41%, 74%)", "hsl(79, 42%, 75%)", "hsl(79, 43%, 80%)", "hsl(79, 49%, 63%)", "hsl(79, 49%, 70%)", "hsl(79, 59%, 65%)", "hsl(79, 78%, 56%)", "hsl(79, 84%, 86%)", "hsl(79, 87%, 67%)", "hsl(79, 100%, 90%)", "hsl(80, 9%, 7%)", "hsl(80, 23%, 75%)", "hsl(80, 27%, 43%)", "hsl(80, 33%, 42%)", "hsl(80, 36%, 61%)", "hsl(80, 37%, 60%)", "hsl(80, 48%, 71%)", "hsl(80, 48%, 81%)", "hsl(80, 72%, 90%)", "hsl(80, 100%, 50%)", "hsl(80, 100%, 92%)", "hsl(81, 14%, 67%)", "hsl(81, 16%, 76%)", "hsl(81, 17%, 63%)", "hsl(81, 28%, 84%)", "hsl(81, 32%, 77%)", "hsl(81, 56%, 79%)", "hsl(81, 74%, 74%)", "hsl(81, 88%, 74%)", "hsl(81, 91%, 83%)", "hsl(81, 96%, 79%)", "hsl(81, 96%, 82%)", "hsl(82, 27%, 62%)", "hsl(82, 37%, 53%)", "hsl(82, 37%, 80%)", "hsl(82, 39%, 35%)", "hsl(82, 43%, 77%)", "hsl(82, 43%, 88%)", "hsl(82, 46%, 69%)", "hsl(82, 47%, 57%)", "hsl(82, 54%, 70%)", "hsl(82, 63%, 78%)", "hsl(82, 67%, 74%)", "hsl(82, 77%, 40%)", "hsl(83, 22%, 60%)", "hsl(83, 27%, 74%)", "hsl(83, 29%, 70%)", "hsl(83, 29%, 70%)", "hsl(83, 32%, 75%)", "hsl(83, 37%, 76%)", "hsl(83, 68%, 46%)", "hsl(83, 96%, 69%)", "hsl(84, 4%, 75%)", "hsl(84, 10%, 90%)", "hsl(84, 15%, 6%)", "hsl(84, 23%, 79%)", "hsl(84, 31%, 67%)", "hsl(84, 37%, 54%)", "hsl(84, 54%, 85%)", "hsl(84, 71%, 86%)", "hsl(84, 71%, 86%)", "hsl(84, 71%, 86%)", "hsl(84, 71%, 86%)", "hsl(84, 80%, 76%)", "hsl(84, 91%, 87%)", "hsl(84, 100%, 84%)", "hsl(85, 10%, 63%)", "hsl(85, 29%, 51%)", "hsl(85, 30%, 83%)", "hsl(85, 38%, 83%)", "hsl(85, 54%, 85%)", "hsl(85, 68%, 78%)", "hsl(85, 88%, 90%)", "hsl(86, 6%, 23%)", "hsl(86, 8%, 41%)", "hsl(86, 44%, 87%)", "hsl(86, 45%, 62%)", "hsl(86, 62%, 60%)", "hsl(86, 75%, 72%)", "hsl(86, 76%, 71%)", "hsl(86, 76%, 84%)", "hsl(86, 84%, 62%)", "hsl(86, 84%, 64%)", "hsl(86, 95%, 77%)", "hsl(86, 97%, 88%)", "hsl(87, 16%, 66%)", "hsl(87, 16%, 66%)", "hsl(87, 18%, 61%)", "hsl(87, 18%, 61%)", "hsl(87, 28%, 72%)", "hsl(87, 38%, 56%)", "hsl(87, 41%, 83%)", "hsl(87, 67%, 57%)", "hsl(88, 8%, 48%)", "hsl(88, 11%, 51%)", "hsl(88, 13%, 53%)", "hsl(88, 17%, 58%)", "hsl(88, 23%, 73%)", "hsl(88, 28%, 62%)", "hsl(88, 38%, 57%)", "hsl(88, 48%, 80%)", "hsl(88, 88%, 90%)", "hsl(88, 100%, 93%)", "hsl(89, 12%, 63%)", "hsl(89, 17%, 67%)", "hsl(89, 32%, 65%)", "hsl(89, 36%, 65%)", "hsl(89, 45%, 64%)", "hsl(89, 48%, 76%)", "hsl(89, 100%, 55%)", "hsl(89, 100%, 86%)", "hsl(90, 2%, 18%)", "hsl(90, 2%, 21%)", "hsl(90, 6%, 58%)", "hsl(90, 11%, 49%)", "hsl(90, 13%, 79%)", "hsl(90, 14%, 22%)", "hsl(90, 25%, 38%)", "hsl(90, 25%, 78%)", "hsl(90, 28%, 66%)", "hsl(90, 37%, 88%)", "hsl(90, 88%, 73%)", "hsl(90, 92%, 85%)", "hsl(90, 100%, 88%)", "hsl(91, 13%, 45%)", "hsl(91, 23%, 54%)", "hsl(91, 43%, 74%)", "hsl(91, 51%, 79%)", "hsl(91, 57%, 57%)", "hsl(91, 58%, 63%)", "hsl(91, 72%, 89%)", "hsl(91, 100%, 88%)", "hsl(92, 8%, 65%)", "hsl(92, 14%, 56%)", "hsl(92, 21%, 82%)", "hsl(92, 23%, 66%)", "hsl(92, 27%, 78%)", "hsl(92, 31%, 75%)", "hsl(92, 34%, 72%)", "hsl(93, 19%, 63%)", "hsl(93, 26%, 66%)", "hsl(93, 34%, 75%)", "hsl(93, 36%, 83%)", "hsl(93, 38%, 69%)", "hsl(93, 40%, 74%)", "hsl(93, 53%, 90%)", "hsl(94, 15%, 67%)", "hsl(94, 17%, 68%)", "hsl(94, 20%, 75%)", "hsl(94, 21%, 68%)", "hsl(94, 23%, 73%)", "hsl(94, 26%, 81%)", "hsl(94, 26%, 83%)", "hsl(94, 33%, 73%)", "hsl(94, 35%, 67%)", "hsl(94, 40%, 76%)", "hsl(94, 43%, 73%)", "hsl(95, 20%, 63%)", "hsl(95, 20%, 67%)", "hsl(95, 35%, 78%)", "hsl(95, 35%, 81%)", "hsl(95, 36%, 76%)", "hsl(95, 45%, 63%)", "hsl(95, 53%, 72%)", "hsl(95, 100%, 78%)", "hsl(96, 17%, 69%)", "hsl(96, 29%, 43%)", "hsl(96, 30%, 73%)", "hsl(96, 34%, 66%)", "hsl(96, 37%, 67%)", "hsl(96, 46%, 75%)", "hsl(96, 46%, 76%)", "hsl(96, 53%, 69%)", "hsl(96, 83%, 98%)", "hsl(96, 100%, 90%)", "hsl(96, 100%, 96%)", "hsl(97, 11%, 45%)", "hsl(97, 22%, 79%)", "hsl(97, 79%, 20%)", "hsl(97, 79%, 85%)", "hsl(98, 13%, 52%)", "hsl(98, 23%, 72%)", "hsl(98, 26%, 69%)", "hsl(98, 28%, 72%)", "hsl(98, 31%, 69%)", "hsl(98, 33%, 51%)", "hsl(98, 34%, 74%)", "hsl(98, 53%, 74%)", "hsl(98, 85%, 92%)", "hsl(98, 100%, 92%)", "hsl(99, 25%, 80%)", "hsl(99, 52%, 76%)", "hsl(99, 85%, 72%)", "hsl(100, 17%, 54%)", "hsl(100, 36%, 67%)", "hsl(100, 47%, 85%)", "hsl(100, 100%, 1%)", "hsl(101, 27%, 56%)", "hsl(101, 27%, 64%)", "hsl(101, 47%, 78%)", "hsl(101, 59%, 54%)", "hsl(101, 96%, 80%)", "hsl(102, 20%, 37%)", "hsl(102, 20%, 83%)", "hsl(102, 22%, 64%)", "hsl(102, 22%, 66%)", "hsl(102, 42%, 83%)", "hsl(102, 61%, 68%)", "hsl(103, 6%, 75%)", "hsl(103, 14%, 60%)", "hsl(103, 25%, 77%)", "hsl(103, 32%, 53%)", "hsl(103, 43%, 77%)", "hsl(104, 5%, 44%)", "hsl(104, 28%, 63%)", "hsl(104, 73%, 75%)", "hsl(104, 100%, 94%)", "hsl(105, 10%, 54%)", "hsl(105, 16%, 52%)", "hsl(105, 24%, 80%)", "hsl(105, 28%, 76%)", "hsl(105, 30%, 24%)", "hsl(105, 100%, 88%)", "hsl(106, 25%, 77%)", "hsl(106, 28%, 70%)", "hsl(106, 55%, 73%)", "hsl(106, 67%, 85%)", "hsl(106, 100%, 90%)", "hsl(107, 5%, 35%)", "hsl(107, 24%, 33%)", "hsl(107, 32%, 76%)", "hsl(107, 41%, 57%)", "hsl(107, 54%, 61%)", "hsl(108, 26%, 73%)", "hsl(108, 32%, 56%)", "hsl(108, 64%, 89%)", "hsl(109, 14%, 25%)", "hsl(109, 22%, 70%)", "hsl(110, 5%, 25%)", "hsl(110, 14%, 65%)", "hsl(110, 17%, 49%)", "hsl(110, 85%, 95%)", "hsl(111, 42%, 65%)", "hsl(111, 72%, 89%)", "hsl(112, 16%, 72%)", "hsl(112, 22%, 74%)", "hsl(112, 27%, 63%)", "hsl(112, 33%, 78%)", "hsl(113, 33%, 67%)", "hsl(113, 35%, 43%)", "hsl(113, 48%, 34%)", "hsl(114, 5%, 57%)", "hsl(114, 10%, 64%)", "hsl(114, 22%, 74%)", "hsl(114, 29%, 87%)", "hsl(114, 35%, 83%)", "hsl(114, 41%, 85%)", "hsl(114, 41%, 85%)", "hsl(115, 26%, 72%)", "hsl(115, 28%, 83%)", "hsl(115, 29%, 69%)", "hsl(116, 24%, 75%)", "hsl(116, 29%, 56%)", "hsl(116, 33%, 66%)", "hsl(116, 41%, 21%)", "hsl(116, 54%, 72%)", "hsl(117, 12%, 59%)", "hsl(117, 12%, 67%)", "hsl(118, 13%, 61%)", "hsl(118, 18%, 66%)", "hsl(118, 46%, 86%)", "hsl(119, 21%, 39%)", "hsl(119, 41%, 79%)", "hsl(119, 42%, 75%)", "hsl(119, 57%, 84%)", "hsl(120, 1%, 31%)", "hsl(120, 6%, 57%)", "hsl(120, 14%, 71%)", "hsl(120, 16%, 47%)", "hsl(120, 16%, 82%)", "hsl(120, 20%, 69%)", "hsl(120, 22%, 69%)", "hsl(120, 22%, 84%)", "hsl(120, 24%, 89%)", "hsl(120, 25%, 60%)", "hsl(120, 44%, 74%)", "hsl(120, 59%, 92%)", "hsl(120, 100%, 88%)", "hsl(121, 50%, 78%)", "hsl(121, 97%, 88%)", "hsl(122, 16%, 65%)", "hsl(122, 35%, 81%)", "hsl(122, 39%, 82%)", "hsl(122, 93%, 84%)", "hsl(123, 26%, 56%)", "hsl(123, 44%, 77%)", "hsl(123, 60%, 67%)", "hsl(124, 12%, 72%)", "hsl(124, 20%, 71%)", "hsl(124, 26%, 75%)", "hsl(124, 29%, 72%)", "hsl(124, 30%, 67%)", "hsl(124, 35%, 50%)", "hsl(124, 38%, 79%)", "hsl(125, 9%, 52%)", "hsl(125, 11%, 41%)", "hsl(125, 11%, 61%)", "hsl(125, 18%, 64%)", "hsl(125, 26%, 66%)", "hsl(125, 27%, 71%)", "hsl(125, 33%, 64%)", "hsl(125, 42%, 76%)", "hsl(125, 64%, 73%)", "hsl(125, 100%, 88%)", "hsl(126, 9%, 56%)", "hsl(126, 9%, 79%)", "hsl(126, 26%, 71%)", "hsl(126, 26%, 79%)", "hsl(126, 42%, 86%)", "hsl(127, 6%, 68%)", "hsl(127, 16%, 79%)", "hsl(127, 21%, 75%)", "hsl(127, 33%, 95%)", "hsl(127, 39%, 82%)", "hsl(127, 43%, 77%)", "hsl(127, 55%, 68%)", "hsl(127, 74%, 83%)", "hsl(127, 81%, 8%)", "hsl(127, 82%, 81%)", "hsl(127, 94%, 86%)", "hsl(128, 16%, 48%)", "hsl(128, 27%, 65%)", "hsl(129, 4%, 66%)", "hsl(129, 9%, 53%)", "hsl(129, 15%, 43%)", "hsl(129, 23%, 82%)", "hsl(129, 29%, 76%)", "hsl(129, 50%, 79%)", "hsl(130, 8%, 42%)", "hsl(130, 10%, 52%)", "hsl(130, 10%, 52%)", "hsl(130, 11%, 56%)", "hsl(130, 24%, 66%)", "hsl(130, 26%, 77%)", "hsl(131, 24%, 74%)", "hsl(132, 5%, 58%)", "hsl(132, 17%, 65%)", "hsl(132, 17%, 65%)", "hsl(132, 19%, 75%)", "hsl(132, 21%, 68%)", "hsl(132, 31%, 85%)", "hsl(133, 12%, 85%)", "hsl(133, 14%, 61%)", "hsl(133, 26%, 68%)", "hsl(133, 27%, 33%)", "hsl(133, 29%, 81%)", "hsl(133, 31%, 59%)", "hsl(133, 53%, 76%)", "hsl(133, 57%, 50%)", "hsl(134, 10%, 50%)", "hsl(134, 21%, 55%)", "hsl(134, 24%, 54%)", "hsl(134, 24%, 54%)", "hsl(134, 29%, 77%)", "hsl(134, 39%, 79%)", "hsl(134, 41%, 81%)", "hsl(134, 51%, 89%)", "hsl(134, 52%, 75%)", "hsl(134, 55%, 58%)", "hsl(134, 69%, 90%)", "hsl(135, 4%, 78%)", "hsl(135, 16%, 61%)", "hsl(135, 21%, 61%)", "hsl(135, 27%, 52%)", "hsl(135, 28%, 65%)", "hsl(135, 43%, 68%)", "hsl(135, 59%, 88%)", "hsl(135, 85%, 72%)", "hsl(136, 20%, 46%)", "hsl(136, 39%, 83%)", "hsl(136, 53%, 81%)", "hsl(137, 13%, 49%)", "hsl(137, 24%, 70%)", "hsl(137, 26%, 66%)", "hsl(137, 27%, 66%)", "hsl(137, 33%, 66%)", "hsl(137, 38%, 79%)", "hsl(137, 53%, 83%)", "hsl(138, 11%, 70%)", "hsl(138, 18%, 51%)", "hsl(138, 29%, 72%)", "hsl(138, 30%, 78%)", "hsl(138, 36%, 71%)", "hsl(138, 40%, 38%)", "hsl(138, 45%, 75%)", "hsl(138, 54%, 41%)", "hsl(138, 57%, 72%)", "hsl(138, 59%, 89%)", "hsl(138, 64%, 85%)", "hsl(138, 83%, 44%)", "hsl(138, 90%, 88%)", "hsl(138, 100%, 91%)", "hsl(139, 20%, 56%)", "hsl(139, 32%, 68%)", "hsl(139, 35%, 80%)", "hsl(139, 39%, 79%)", "hsl(139, 41%, 62%)", "hsl(139, 41%, 66%)", "hsl(139, 61%, 77%)", "hsl(140, 6%, 9%)", "hsl(140, 15%, 76%)", "hsl(140, 16%, 49%)", "hsl(140, 21%, 5%)", "hsl(140, 21%, 84%)", "hsl(140, 23%, 61%)", "hsl(140, 29%, 70%)", "hsl(140, 29%, 70%)", "hsl(140, 36%, 35%)", "hsl(140, 70%, 77%)", "hsl(141, 8%, 67%)", "hsl(141, 22%, 79%)", "hsl(141, 27%, 60%)", "hsl(141, 27%, 68%)", "hsl(141, 30%, 68%)", "hsl(141, 43%, 74%)", "hsl(142, 10%, 68%)", "hsl(142, 13%, 72%)", "hsl(142, 19%, 65%)", "hsl(142, 23%, 61%)", "hsl(142, 26%, 80%)", "hsl(142, 31%, 62%)", "hsl(142, 31%, 65%)", "hsl(142, 32%, 78%)", "hsl(142, 33%, 76%)", "hsl(142, 34%, 61%)", "hsl(142, 44%, 75%)", "hsl(142, 55%, 73%)", "hsl(142, 80%, 84%)", "hsl(142, 95%, 76%)", "hsl(143, 9%, 60%)", "hsl(143, 13%, 74%)", "hsl(143, 14%, 78%)", "hsl(143, 22%, 62%)", "hsl(143, 23%, 62%)", "hsl(143, 23%, 79%)", "hsl(143, 41%, 82%)", "hsl(143, 46%, 73%)", "hsl(143, 59%, 85%)", "hsl(144, 9%, 89%)", "hsl(144, 16%, 76%)", "hsl(144, 25%, 51%)", "hsl(144, 25%, 55%)", "hsl(144, 35%, 57%)", "hsl(144, 80%, 90%)", "hsl(144, 98%, 82%)", "hsl(145, 7%, 50%)", "hsl(145, 18%, 73%)", "hsl(145, 20%, 50%)", "hsl(145, 20%, 69%)", "hsl(145, 35%, 56%)", "hsl(145, 35%, 59%)", "hsl(145, 37%, 88%)", "hsl(145, 67%, 55%)", "hsl(145, 100%, 35%)", "hsl(146, 18%, 52%)", "hsl(146, 19%, 56%)", "hsl(146, 21%, 49%)", "hsl(146, 22%, 49%)", "hsl(146, 25%, 66%)", "hsl(146, 26%, 83%)", "hsl(146, 39%, 43%)", "hsl(146, 52%, 77%)", "hsl(146, 89%, 78%)", "hsl(147, 12%, 85%)", "hsl(147, 17%, 49%)", "hsl(147, 21%, 60%)", "hsl(147, 23%, 58%)", "hsl(147, 26%, 73%)", "hsl(147, 31%, 50%)", "hsl(147, 40%, 51%)", "hsl(148, 11%, 58%)", "hsl(148, 20%, 47%)", "hsl(148, 23%, 66%)", "hsl(148, 23%, 67%)", "hsl(148, 25%, 58%)", "hsl(148, 32%, 61%)", "hsl(148, 43%, 53%)", "hsl(148, 46%, 68%)", "hsl(148, 46%, 72%)", "hsl(148, 49%, 73%)", "hsl(149, 22%, 78%)", "hsl(149, 25%, 46%)", "hsl(149, 28%, 59%)", "hsl(149, 28%, 68%)", "hsl(149, 30%, 79%)", "hsl(149, 32%, 56%)", "hsl(149, 36%, 72%)", "hsl(149, 41%, 83%)", "hsl(150, 1%, 35%)", "hsl(150, 2%, 21%)", "hsl(150, 3%, 29%)", "hsl(150, 14%, 92%)", "hsl(150, 22%, 56%)", "hsl(150, 22%, 56%)", "hsl(150, 24%, 80%)", "hsl(150, 26%, 49%)", "hsl(150, 28%, 71%)", "hsl(150, 32%, 63%)", "hsl(150, 36%, 42%)", "hsl(150, 38%, 68%)", "hsl(150, 63%, 60%)", "hsl(150, 63%, 79%)", "hsl(151, 9%, 55%)", "hsl(151, 17%, 65%)", "hsl(151, 25%, 56%)", "hsl(151, 30%, 69%)", "hsl(151, 36%, 23%)", "hsl(151, 41%, 86%)", "hsl(151, 67%, 84%)", "hsl(151, 69%, 55%)", "hsl(152, 9%, 68%)", "hsl(152, 16%, 44%)", "hsl(152, 21%, 68%)", "hsl(152, 24%, 73%)", "hsl(152, 24%, 85%)", "hsl(152, 25%, 90%)", "hsl(152, 27%, 63%)", "hsl(152, 36%, 78%)", "hsl(152, 45%, 63%)", "hsl(152, 57%, 77%)", "hsl(152, 57%, 78%)", "hsl(153, 22%, 60%)", "hsl(153, 23%, 63%)", "hsl(153, 24%, 74%)", "hsl(153, 37%, 60%)", "hsl(153, 44%, 62%)", "hsl(153, 92%, 25%)", "hsl(153, 100%, 89%)", "hsl(154, 21%, 58%)", "hsl(154, 100%, 38%)", "hsl(155, 13%, 71%)", "hsl(155, 14%, 47%)", "hsl(155, 17%, 52%)", "hsl(155, 20%, 59%)", "hsl(155, 24%, 62%)", "hsl(155, 26%, 74%)", "hsl(155, 27%, 56%)", "hsl(155, 31%, 54%)", "hsl(155, 31%, 62%)", "hsl(155, 31%, 62%)", "hsl(155, 33%, 61%)", "hsl(155, 33%, 62%)", "hsl(155, 37%, 45%)", "hsl(155, 38%, 70%)", "hsl(155, 58%, 34%)", "hsl(155, 84%, 81%)", "hsl(156, 6%, 51%)", "hsl(156, 23%, 49%)", "hsl(156, 39%, 70%)", "hsl(156, 40%, 57%)", "hsl(156, 51%, 80%)", "hsl(156, 66%, 71%)", "hsl(157, 20%, 34%)", "hsl(157, 20%, 55%)", "hsl(157, 21%, 62%)", "hsl(157, 22%, 47%)", "hsl(157, 27%, 70%)", "hsl(157, 34%, 72%)", "hsl(157, 36%, 69%)", "hsl(157, 37%, 53%)", "hsl(157, 37%, 84%)", "hsl(157, 55%, 78%)", "hsl(157, 69%, 90%)", "hsl(157, 77%, 35%)", "hsl(157, 100%, 38%)", "hsl(158, 9%, 35%)", "hsl(158, 21%, 52%)", "hsl(158, 24%, 80%)", "hsl(158, 28%, 67%)", "hsl(158, 29%, 61%)", "hsl(158, 30%, 54%)", "hsl(158, 30%, 54%)", "hsl(158, 31%, 63%)", "hsl(158, 35%, 27%)", "hsl(158, 44%, 62%)", "hsl(158, 44%, 77%)", "hsl(158, 51%, 90%)", "hsl(158, 95%, 50%)", "hsl(159, 9%, 50%)", "hsl(159, 12%, 41%)", "hsl(159, 17%, 51%)", "hsl(159, 17%, 64%)", "hsl(159, 20%, 77%)", "hsl(159, 21%, 70%)", "hsl(159, 22%, 49%)", "hsl(159, 24%, 63%)", "hsl(159, 26%, 70%)", "hsl(159, 34%, 55%)", "hsl(159, 39%, 55%)", "hsl(159, 49%, 42%)", "hsl(159, 52%, 78%)", "hsl(160, 9%, 47%)", "hsl(160, 12%, 50%)", "hsl(160, 17%, 83%)", "hsl(160, 22%, 29%)", "hsl(160, 30%, 50%)", "hsl(160, 30%, 59%)", "hsl(160, 31%, 68%)", "hsl(160, 32%, 56%)", "hsl(160, 36%, 61%)", "hsl(160, 36%, 67%)", "hsl(160, 38%, 49%)", "hsl(160, 38%, 62%)", "hsl(160, 38%, 67%)", "hsl(160, 39%, 64%)", "hsl(160, 41%, 61%)", "hsl(160, 52%, 83%)", "hsl(160, 53%, 66%)", "hsl(160, 75%, 23%)", "hsl(160, 83%, 66%)", "hsl(160, 91%, 40%)", "hsl(160, 100%, 88%)", "hsl(161, 25%, 63%)", "hsl(161, 25%, 71%)", "hsl(161, 28%, 65%)", "hsl(161, 36%, 56%)", "hsl(161, 36%, 59%)", "hsl(161, 49%, 74%)", "hsl(161, 52%, 65%)", "hsl(161, 57%, 61%)", "hsl(161, 57%, 88%)", "hsl(161, 65%, 75%)", "hsl(162, 12%, 55%)", "hsl(162, 13%, 50%)", "hsl(162, 21%, 75%)", "hsl(162, 45%, 53%)", "hsl(162, 67%, 21%)", "hsl(162, 75%, 73%)", "hsl(162, 88%, 32%)", "hsl(162, 100%, 26%)", "hsl(163, 24%, 56%)", "hsl(163, 27%, 82%)", "hsl(163, 30%, 82%)", "hsl(163, 31%, 59%)", "hsl(163, 35%, 67%)", "hsl(163, 36%, 58%)", "hsl(163, 49%, 66%)", "hsl(163, 52%, 61%)", "hsl(163, 56%, 77%)", "hsl(163, 71%, 23%)", "hsl(163, 89%, 47%)", "hsl(164, 10%, 56%)", "hsl(164, 11%, 58%)", "hsl(164, 15%, 61%)", "hsl(164, 21%, 71%)", "hsl(164, 27%, 62%)", "hsl(164, 33%, 59%)", "hsl(164, 33%, 64%)", "hsl(164, 40%, 42%)", "hsl(164, 46%, 74%)", "hsl(164, 46%, 78%)", "hsl(164, 49%, 57%)", "hsl(164, 59%, 35%)", "hsl(164, 59%, 80%)", "hsl(164, 86%, 29%)", "hsl(164, 99%, 64%)", "hsl(164, 100%, 84%)", "hsl(165, 8%, 52%)", "hsl(165, 9%, 65%)", "hsl(165, 10%, 84%)", "hsl(165, 12%, 87%)", "hsl(165, 17%, 65%)", "hsl(165, 28%, 59%)", "hsl(165, 31%, 69%)", "hsl(165, 36%, 73%)", "hsl(165, 45%, 74%)", "hsl(165, 54%, 83%)", "hsl(165, 56%, 52%)", "hsl(165, 100%, 58%)", "hsl(166, 24%, 69%)", "hsl(166, 32%, 48%)", "hsl(166, 32%, 66%)", "hsl(166, 33%, 65%)", "hsl(166, 34%, 57%)", "hsl(166, 36%, 59%)", "hsl(166, 37%, 39%)", "hsl(166, 41%, 73%)", "hsl(166, 44%, 78%)", "hsl(166, 67%, 43%)", "hsl(167, 7%, 24%)", "hsl(167, 10%, 37%)", "hsl(167, 30%, 43%)", "hsl(167, 31%, 49%)", "hsl(167, 34%, 60%)", "hsl(167, 37%, 56%)", "hsl(167, 55%, 78%)", "hsl(167, 58%, 32%)", "hsl(167, 63%, 49%)", "hsl(167, 78%, 52%)", "hsl(167, 85%, 69%)", "hsl(167, 100%, 23%)", "hsl(168, 6%, 34%)", "hsl(168, 9%, 11%)", "hsl(168, 11%, 42%)", "hsl(168, 22%, 43%)", "hsl(168, 29%, 57%)", "hsl(168, 69%, 35%)", "hsl(168, 73%, 81%)", "hsl(169, 17%, 43%)", "hsl(169, 18%, 30%)", "hsl(169, 21%, 47%)", "hsl(169, 23%, 57%)", "hsl(169, 24%, 60%)", "hsl(169, 25%, 44%)", "hsl(169, 29%, 58%)", "hsl(169, 33%, 62%)", "hsl(169, 37%, 57%)", "hsl(169, 41%, 54%)", "hsl(169, 43%, 53%)", "hsl(169, 67%, 42%)", "hsl(169, 81%, 42%)", "hsl(169, 85%, 29%)", "hsl(169, 97%, 28%)", "hsl(170, 7%, 51%)", "hsl(170, 16%, 36%)", "hsl(170, 16%, 39%)", "hsl(170, 22%, 27%)", "hsl(170, 23%, 31%)", "hsl(170, 23%, 54%)", "hsl(170, 23%, 79%)", "hsl(170, 26%, 27%)", "hsl(170, 28%, 40%)", "hsl(170, 32%, 53%)", "hsl(170, 51%, 44%)", "hsl(170, 83%, 71%)", "hsl(170, 95%, 44%)", "hsl(171, 9%, 58%)", "hsl(171, 24%, 34%)", "hsl(171, 25%, 59%)", "hsl(171, 26%, 65%)", "hsl(171, 29%, 59%)", "hsl(171, 30%, 83%)", "hsl(171, 55%, 47%)", "hsl(171, 63%, 92%)", "hsl(171, 78%, 23%)", "hsl(171, 95%, 15%)", "hsl(171, 100%, 1%)", "hsl(172, 9%, 31%)", "hsl(172, 13%, 58%)", "hsl(172, 18%, 48%)", "hsl(172, 26%, 62%)", "hsl(172, 27%, 39%)", "hsl(172, 27%, 58%)", "hsl(172, 29%, 61%)", "hsl(172, 31%, 29%)", "hsl(172, 34%, 59%)", "hsl(172, 35%, 56%)", "hsl(172, 48%, 75%)", "hsl(172, 51%, 85%)", "hsl(172, 52%, 18%)", "hsl(172, 54%, 58%)", "hsl(172, 59%, 44%)", "hsl(172, 76%, 87%)", "hsl(172, 79%, 85%)", "hsl(172, 82%, 61%)", "hsl(172, 82%, 85%)", "hsl(172, 97%, 29%)", "hsl(173, 7%, 77%)", "hsl(173, 12%, 39%)", "hsl(173, 27%, 65%)", "hsl(173, 43%, 60%)", "hsl(173, 52%, 67%)", "hsl(173, 55%, 54%)", "hsl(173, 56%, 47%)", "hsl(173, 63%, 80%)", "hsl(173, 74%, 18%)", "hsl(173, 92%, 14%)", "hsl(173, 93%, 32%)", "hsl(174, 21%, 69%)", "hsl(174, 22%, 25%)", "hsl(174, 23%, 60%)", "hsl(174, 24%, 61%)", "hsl(174, 27%, 48%)", "hsl(174, 33%, 62%)", "hsl(174, 36%, 69%)", "hsl(174, 38%, 58%)", "hsl(174, 39%, 43%)", "hsl(174, 44%, 68%)", "hsl(174, 45%, 78%)", "hsl(174, 51%, 7%)", "hsl(174, 54%, 56%)", "hsl(174, 56%, 44%)", "hsl(174, 63%, 37%)", "hsl(174, 76%, 40%)", "hsl(174, 83%, 43%)", "hsl(174, 100%, 30%)", "hsl(175, 7%, 31%)", "hsl(175, 12%, 58%)", "hsl(175, 46%, 62%)", "hsl(175, 53%, 66%)", "hsl(175, 56%, 33%)", "hsl(175, 56%, 35%)", "hsl(175, 59%, 45%)", "hsl(175, 60%, 45%)", "hsl(175, 60%, 65%)", "hsl(175, 71%, 23%)", "hsl(175, 75%, 26%)", "hsl(175, 83%, 40%)", "hsl(175, 89%, 42%)", "hsl(176, 12%, 49%)", "hsl(176, 22%, 70%)", "hsl(176, 35%, 28%)", "hsl(176, 40%, 73%)", "hsl(176, 42%, 87%)", "hsl(176, 45%, 35%)", "hsl(176, 49%, 48%)", "hsl(176, 50%, 41%)", "hsl(176, 56%, 55%)", "hsl(176, 59%, 48%)", "hsl(176, 100%, 30%)", "hsl(176, 100%, 40%)", "hsl(177, 11%, 34%)", "hsl(177, 17%, 51%)", "hsl(177, 18%, 51%)", "hsl(177, 22%, 53%)", "hsl(177, 24%, 17%)", "hsl(177, 25%, 54%)", "hsl(177, 30%, 60%)", "hsl(177, 38%, 44%)", "hsl(177, 41%, 39%)", "hsl(177, 42%, 76%)", "hsl(177, 43%, 47%)", "hsl(177, 45%, 65%)", "hsl(177, 53%, 38%)", "hsl(177, 54%, 62%)", "hsl(177, 61%, 45%)", "hsl(177, 69%, 38%)", "hsl(177, 81%, 32%)", "hsl(177, 100%, 50%)", "hsl(178, 16%, 69%)", "hsl(178, 19%, 59%)", "hsl(178, 28%, 43%)", "hsl(178, 31%, 75%)", "hsl(178, 43%, 37%)", "hsl(178, 54%, 26%)", "hsl(178, 54%, 26%)", "hsl(178, 71%, 37%)", "hsl(178, 86%, 28%)", "hsl(178, 86%, 37%)", "hsl(178, 87%, 21%)", "hsl(178, 88%, 27%)", "hsl(178, 90%, 28%)", "hsl(178, 98%, 50%)", "hsl(179, 25%, 53%)", "hsl(179, 26%, 48%)", "hsl(179, 39%, 54%)", "hsl(179, 49%, 38%)", "hsl(179, 52%, 55%)", "hsl(179, 60%, 35%)", "hsl(179, 61%, 51%)", "hsl(179, 65%, 24%)", "hsl(179, 80%, 20%)", "hsl(179, 85%, 37%)", "hsl(179, 90%, 34%)", "hsl(179, 90%, 39%)", "hsl(179, 94%, 20%)", "hsl(179, 96%, 22%)", "hsl(179, 97%, 31%)", "hsl(179, 100%, 9%)", "hsl(179, 100%, 13%)", "hsl(180, 1%, 22%)", "hsl(180, 2%, 83%)", "hsl(180, 3%, 35%)", "hsl(180, 3%, 85%)", "hsl(180, 4%, 21%)", "hsl(180, 7%, 32%)", "hsl(180, 9%, 40%)", "hsl(180, 10%, 52%)", "hsl(180, 16%, 81%)", "hsl(180, 16%, 89%)", "hsl(180, 19%, 58%)", "hsl(180, 19%, 62%)", "hsl(180, 19%, 68%)", "hsl(180, 20%, 50%)", "hsl(180, 21%, 94%)", "hsl(180, 24%, 4%)", "hsl(180, 24%, 80%)", "hsl(180, 25%, 14%)", "hsl(180, 26%, 32%)", "hsl(180, 29%, 20%)", "hsl(180, 33%, 30%)", "hsl(180, 33%, 70%)", "hsl(180, 33%, 82%)", "hsl(180, 37%, 41%)", "hsl(180, 46%, 44%)", "hsl(180, 50%, 19%)", "hsl(180, 50%, 40%)", "hsl(180, 51%, 38%)", "hsl(180, 54%, 35%)", "hsl(180, 56%, 54%)", "hsl(180, 61%, 38%)", "hsl(180, 64%, 18%)", "hsl(180, 64%, 31%)", "hsl(180, 66%, 38%)", "hsl(180, 69%, 42%)", "hsl(180, 76%, 37%)", "hsl(180, 83%, 27%)", "hsl(180, 85%, 30%)", "hsl(180, 86%, 41%)", "hsl(180, 94%, 31%)", "hsl(180, 100%, 19%)", "hsl(180, 100%, 20%)", "hsl(180, 100%, 24%)", "hsl(180, 100%, 26%)", "hsl(180, 100%, 70%)", "hsl(180, 100%, 88%)", "hsl(181, 27%, 60%)", "hsl(181, 50%, 56%)", "hsl(181, 58%, 18%)", "hsl(181, 79%, 28%)", "hsl(181, 79%, 30%)", "hsl(181, 90%, 48%)", "hsl(181, 93%, 28%)", "hsl(181, 96%, 91%)", "hsl(181, 100%, 20%)", "hsl(181, 100%, 25%)", "hsl(181, 100%, 36%)", "hsl(181, 100%, 37%)", "hsl(182, 30%, 83%)", "hsl(182, 32%, 48%)", "hsl(182, 38%, 37%)", "hsl(182, 41%, 13%)", "hsl(182, 47%, 39%)", "hsl(182, 49%, 22%)", "hsl(182, 49%, 39%)", "hsl(182, 52%, 25%)", "hsl(182, 57%, 41%)", "hsl(182, 58%, 47%)", "hsl(182, 61%, 49%)", "hsl(182, 75%, 31%)", "hsl(182, 80%, 44%)", "hsl(182, 83%, 32%)", "hsl(182, 85%, 28%)", "hsl(182, 92%, 34%)", "hsl(182, 97%, 25%)", "hsl(182, 100%, 21%)", "hsl(182, 100%, 55%)", "hsl(183, 14%, 70%)", "hsl(183, 22%, 20%)", "hsl(183, 23%, 17%)", "hsl(183, 26%, 72%)", "hsl(183, 27%, 50%)", "hsl(183, 29%, 37%)", "hsl(183, 39%, 43%)", "hsl(183, 60%, 26%)", "hsl(183, 72%, 53%)", "hsl(183, 83%, 32%)", "hsl(183, 92%, 15%)", "hsl(183, 92%, 34%)", "hsl(183, 100%, 41%)", "hsl(183, 100%, 84%)", "hsl(184, 7%, 59%)", "hsl(184, 8%, 58%)", "hsl(184, 13%, 46%)", "hsl(184, 22%, 74%)", "hsl(184, 30%, 79%)", "hsl(184, 31%, 53%)", "hsl(184, 34%, 64%)", "hsl(184, 35%, 37%)", "hsl(184, 48%, 61%)", "hsl(184, 60%, 24%)", "hsl(184, 60%, 37%)", "hsl(184, 61%, 39%)", "hsl(184, 66%, 35%)", "hsl(184, 69%, 24%)", "hsl(184, 87%, 37%)", "hsl(184, 90%, 36%)", "hsl(184, 91%, 23%)", "hsl(184, 94%, 35%)", "hsl(184, 99%, 28%)", "hsl(184, 100%, 6%)", "hsl(184, 100%, 86%)", "hsl(185, 9%, 75%)", "hsl(185, 12%, 20%)", "hsl(185, 14%, 46%)", "hsl(185, 18%, 50%)", "hsl(185, 19%, 40%)", "hsl(185, 48%, 95%)", "hsl(185, 51%, 87%)", "hsl(185, 57%, 52%)", "hsl(185, 58%, 30%)", "hsl(185, 74%, 28%)", "hsl(185, 90%, 38%)", "hsl(185, 100%, 35%)", "hsl(185, 100%, 95%)", "hsl(186, 27%, 54%)", "hsl(186, 36%, 41%)", "hsl(186, 40%, 53%)", "hsl(186, 48%, 46%)", "hsl(186, 61%, 24%)", "hsl(186, 66%, 38%)", "hsl(186, 66%, 45%)", "hsl(186, 98%, 35%)", "hsl(187, 7%, 25%)", "hsl(187, 20%, 41%)", "hsl(187, 29%, 75%)", "hsl(187, 38%, 91%)", "hsl(187, 39%, 40%)", "hsl(187, 45%, 50%)", "hsl(187, 52%, 52%)", "hsl(187, 53%, 36%)", "hsl(187, 83%, 14%)", "hsl(187, 100%, 10%)", "hsl(187, 100%, 21%)", "hsl(187, 100%, 31%)", "hsl(187, 100%, 40%)", "hsl(187, 100%, 49%)", "hsl(187, 100%, 69%)", "hsl(188, 21%, 61%)", "hsl(188, 24%, 26%)", "hsl(188, 28%, 52%)", "hsl(188, 34%, 56%)", "hsl(188, 45%, 31%)", "hsl(188, 46%, 88%)", "hsl(188, 48%, 32%)", "hsl(188, 70%, 35%)", "hsl(188, 76%, 37%)", "hsl(188, 76%, 37%)", "hsl(188, 77%, 36%)", "hsl(188, 77%, 37%)", "hsl(188, 100%, 9%)", "hsl(188, 100%, 16%)", "hsl(189, 6%, 59%)", "hsl(189, 17%, 78%)", "hsl(189, 24%, 84%)", "hsl(189, 27%, 56%)", "hsl(189, 56%, 80%)", "hsl(189, 57%, 26%)", "hsl(189, 60%, 19%)", "hsl(189, 61%, 44%)", "hsl(189, 68%, 62%)", "hsl(189, 74%, 32%)", "hsl(189, 96%, 50%)", "hsl(189, 100%, 9%)", "hsl(189, 100%, 39%)", "hsl(190, 17%, 66%)", "hsl(190, 21%, 23%)", "hsl(190, 21%, 42%)", "hsl(190, 28%, 45%)", "hsl(190, 55%, 24%)", "hsl(190, 55%, 54%)", "hsl(190, 72%, 66%)", "hsl(190, 73%, 15%)", "hsl(190, 77%, 46%)", "hsl(190, 88%, 48%)", "hsl(190, 100%, 48%)", "hsl(191, 7%, 43%)", "hsl(191, 12%, 36%)", "hsl(191, 17%, 61%)", "hsl(191, 50%, 9%)", "hsl(191, 51%, 75%)", "hsl(191, 83%, 52%)", "hsl(191, 88%, 29%)", "hsl(191, 100%, 49%)", "hsl(192, 10%, 81%)", "hsl(192, 18%, 37%)", "hsl(192, 18%, 71%)", "hsl(192, 26%, 26%)", "hsl(192, 35%, 22%)", "hsl(192, 42%, 86%)", "hsl(192, 57%, 39%)", "hsl(193, 16%, 60%)", "hsl(193, 19%, 34%)", "hsl(193, 22%, 62%)", "hsl(193, 23%, 73%)", "hsl(193, 32%, 25%)", "hsl(193, 81%, 65%)", "hsl(193, 83%, 53%)", "hsl(193, 94%, 28%)", "hsl(193, 99%, 37%)", "hsl(193, 100%, 15%)", "hsl(194, 40%, 58%)", "hsl(194, 47%, 56%)", "hsl(194, 52%, 5%)", "hsl(194, 60%, 45%)", "hsl(194, 64%, 42%)", "hsl(194, 68%, 75%)", "hsl(194, 79%, 30%)", "hsl(195, 7%, 34%)", "hsl(195, 15%, 51%)", "hsl(195, 16%, 55%)", "hsl(195, 16%, 76%)", "hsl(195, 20%, 62%)", "hsl(195, 22%, 69%)", "hsl(195, 32%, 45%)", "hsl(195, 54%, 28%)", "hsl(195, 55%, 22%)", "hsl(195, 58%, 46%)", "hsl(195, 84%, 22%)", "hsl(195, 98%, 31%)", "hsl(196, 5%, 45%)", "hsl(196, 20%, 50%)", "hsl(196, 44%, 31%)", "hsl(196, 56%, 71%)", "hsl(196, 86%, 29%)", "hsl(196, 92%, 15%)", "hsl(196, 97%, 37%)", "hsl(197, 3%, 39%)", "hsl(197, 16%, 35%)", "hsl(197, 71%, 31%)", "hsl(197, 78%, 52%)", "hsl(197, 78%, 61%)", "hsl(197, 83%, 23%)", "hsl(197, 90%, 16%)", "hsl(197, 100%, 25%)", "hsl(197, 100%, 43%)", "hsl(197, 100%, 49%)", "hsl(197, 100%, 69%)", "hsl(198, 11%, 58%)", "hsl(198, 14%, 14%)", "hsl(198, 17%, 20%)", "hsl(198, 42%, 28%)", "hsl(198, 49%, 25%)", "hsl(198, 69%, 59%)", "hsl(198, 93%, 23%)", "hsl(199, 13%, 28%)", "hsl(199, 14%, 56%)", "hsl(199, 37%, 43%)", "hsl(199, 67%, 45%)", "hsl(199, 98%, 16%)", "hsl(199, 100%, 84%)", "hsl(200, 5%, 77%)", "hsl(200, 13%, 5%)", "hsl(200, 21%, 25%)", "hsl(200, 22%, 45%)", "hsl(200, 31%, 11%)", "hsl(200, 33%, 2%)", "hsl(200, 35%, 35%)", "hsl(200, 100%, 50%)", "hsl(201, 32%, 66%)", "hsl(201, 41%, 28%)", "hsl(201, 55%, 12%)", "hsl(201, 57%, 16%)", "hsl(201, 78%, 91%)", "hsl(201, 80%, 21%)", "hsl(201, 92%, 31%)", "hsl(201, 100%, 35%)", "hsl(202, 16%, 30%)", "hsl(202, 22%, 30%)", "hsl(203, 9%, 44%)", "hsl(203, 11%, 29%)", "hsl(203, 11%, 64%)", "hsl(203, 31%, 66%)", "hsl(203, 36%, 42%)", "hsl(203, 86%, 28%)", "hsl(203, 91%, 9%)", "hsl(204, 4%, 22%)", "hsl(204, 27%, 38%)", "hsl(204, 29%, 50%)", "hsl(204, 30%, 17%)", "hsl(204, 31%, 41%)", "hsl(204, 32%, 65%)", "hsl(204, 33%, 81%)", "hsl(204, 36%, 5%)", "hsl(204, 40%, 87%)", "hsl(204, 42%, 68%)", "hsl(204, 45%, 46%)", "hsl(204, 84%, 25%)", "hsl(204, 85%, 23%)", "hsl(204, 100%, 21%)", "hsl(205, 29%, 92%)", "hsl(205, 66%, 35%)", "hsl(205, 96%, 22%)", "hsl(206, 23%, 12%)", "hsl(206, 33%, 12%)", "hsl(206, 38%, 46%)", "hsl(206, 43%, 27%)", "hsl(206, 45%, 16%)", "hsl(206, 47%, 54%)", "hsl(206, 48%, 16%)", "hsl(206, 57%, 95%)", "hsl(206, 64%, 73%)", "hsl(206, 81%, 83%)", "hsl(206, 100%, 11%)", "hsl(207, 5%, 65%)", "hsl(207, 14%, 40%)", "hsl(207, 57%, 51%)", "hsl(207, 57%, 75%)", "hsl(207, 77%, 25%)", "hsl(207, 88%, 10%)", "hsl(208, 8%, 66%)", "hsl(208, 11%, 34%)", "hsl(208, 40%, 35%)", "hsl(208, 40%, 44%)", "hsl(208, 47%, 15%)", "hsl(208, 98%, 46%)", "hsl(209, 15%, 36%)", "hsl(209, 31%, 83%)", "hsl(209, 44%, 14%)", "hsl(209, 70%, 74%)", "hsl(209, 91%, 13%)", "hsl(209, 91%, 69%)", "hsl(210, 1%, 48%)", "hsl(210, 2%, 53%)", "hsl(210, 4%, 11%)", "hsl(210, 4%, 28%)", "hsl(210, 7%, 41%)", "hsl(210, 16%, 10%)", "hsl(210, 22%, 56%)", "hsl(210, 25%, 61%)", "hsl(210, 33%, 1%)", "hsl(210, 45%, 31%)", "hsl(211, 14%, 39%)", "hsl(211, 14%, 39%)", "hsl(211, 24%, 43%)", "hsl(211, 28%, 20%)", "hsl(211, 100%, 57%)", "hsl(212, 20%, 40%)", "hsl(212, 64%, 19%)", "hsl(212, 100%, 39%)", "hsl(213, 20%, 42%)", "hsl(213, 39%, 46%)", "hsl(213, 78%, 20%)", "hsl(214, 12%, 49%)", "hsl(214, 18%, 31%)", "hsl(214, 26%, 44%)", "hsl(214, 79%, 7%)", "hsl(215, 6%, 61%)", "hsl(215, 21%, 36%)", "hsl(215, 82%, 19%)", "hsl(216, 14%, 44%)", "hsl(216, 17%, 88%)", "hsl(216, 33%, 34%)", "hsl(216, 43%, 54%)", "hsl(216, 49%, 33%)", "hsl(216, 54%, 11%)", "hsl(216, 54%, 48%)", "hsl(216, 100%, 75%)", "hsl(217, 19%, 27%)", "hsl(217, 22%, 26%)", "hsl(217, 24%, 15%)", "hsl(217, 84%, 20%)", "hsl(217, 89%, 11%)", "hsl(218, 26%, 21%)", "hsl(219, 14%, 49%)", "hsl(219, 26%, 23%)", "hsl(219, 94%, 7%)", "hsl(220, 7%, 26%)", "hsl(220, 23%, 85%)", "hsl(220, 28%, 30%)", "hsl(220, 43%, 1%)", "hsl(220, 43%, 33%)", "hsl(220, 56%, 24%)", "hsl(220, 100%, 14%)", "hsl(220, 100%, 55%)", "hsl(220, 100%, 99%)", "hsl(221, 17%, 54%)", "hsl(221, 49%, 28%)", "hsl(221, 98%, 24%)", "hsl(222, 11%, 24%)", "hsl(222, 18%, 70%)", "hsl(222, 51%, 33%)", "hsl(222, 63%, 92%)", "hsl(222, 100%, 3%)", "hsl(223, 8%, 18%)", "hsl(223, 11%, 26%)", "hsl(223, 78%, 86%)", "hsl(224, 6%, 46%)", "hsl(224, 31%, 43%)", "hsl(224, 51%, 20%)", "hsl(224, 100%, 14%)", "hsl(224, 100%, 72%)", "hsl(225, 18%, 35%)", "hsl(225, 26%, 15%)", "hsl(225, 37%, 11%)", "hsl(227, 7%, 37%)", "hsl(227, 15%, 19%)", "hsl(227, 22%, 29%)", "hsl(227, 32%, 12%)", "hsl(228, 5%, 18%)", "hsl(228, 14%, 42%)", "hsl(228, 38%, 18%)", "hsl(228, 45%, 98%)", "hsl(228, 74%, 61%)", "hsl(229, 14%, 84%)", "hsl(229, 21%, 25%)", "hsl(229, 61%, 16%)", "hsl(230, 13%, 37%)", "hsl(230, 20%, 29%)", "hsl(230, 23%, 36%)", "hsl(231, 20%, 13%)", "hsl(231, 23%, 18%)", "hsl(231, 31%, 27%)", "hsl(231, 33%, 23%)", "hsl(231, 71%, 38%)", "hsl(231, 76%, 27%)", "hsl(231, 96%, 11%)", "hsl(231, 96%, 18%)", "hsl(232, 51%, 12%)", "hsl(232, 93%, 16%)", "hsl(232, 100%, 7%)", "hsl(233, 15%, 11%)", "hsl(233, 30%, 42%)", "hsl(234, 23%, 33%)", "hsl(234, 25%, 85%)", "hsl(234, 41%, 75%)", "hsl(235, 17%, 13%)", "hsl(235, 17%, 39%)", "hsl(235, 44%, 56%)", "hsl(235, 67%, 19%)", "hsl(236, 13%, 41%)", "hsl(236, 15%, 45%)", "hsl(236, 53%, 69%)", "hsl(237, 61%, 13%)", "hsl(238, 22%, 55%)", "hsl(238, 86%, 5%)", "hsl(240, 2%, 12%)", "hsl(240, 2%, 39%)", "hsl(240, 3%, 85%)", "hsl(240, 4%, 9%)", "hsl(240, 4%, 42%)", "hsl(240, 6%, 7%)", "hsl(240, 6%, 31%)", "hsl(240, 8%, 5%)", "hsl(240, 10%, 25%)", "hsl(240, 10%, 50%)", "hsl(240, 11%, 18%)", "hsl(240, 11%, 42%)", "hsl(240, 12%, 29%)", "hsl(240, 14%, 28%)", "hsl(240, 16%, 54%)", "hsl(240, 16%, 94%)", "hsl(240, 20%, 25%)", "hsl(240, 24%, 24%)", "hsl(240, 41%, 12%)", "hsl(240, 50%, 19%)", "hsl(240, 100%, 11%)", "hsl(242, 27%, 23%)", "hsl(242, 33%, 19%)", "hsl(242, 60%, 42%)", "hsl(243, 32%, 11%)", "hsl(244, 53%, 36%)", "hsl(245, 11%, 59%)", "hsl(246, 7%, 29%)", "hsl(246, 41%, 13%)", "hsl(246, 58%, 10%)", "hsl(246, 100%, 5%)", "hsl(247, 11%, 52%)", "hsl(248, 9%, 31%)", "hsl(248, 18%, 39%)", "hsl(248, 29%, 33%)", "hsl(248, 56%, 64%)", "hsl(248, 80%, 12%)", "hsl(249, 8%, 83%)", "hsl(249, 16%, 18%)", "hsl(250, 100%, 72%)", "hsl(251, 8%, 42%)", "hsl(251, 50%, 13%)", "hsl(252, 4%, 27%)", "hsl(252, 5%, 21%)", "hsl(252, 13%, 16%)", "hsl(252, 14%, 21%)", "hsl(252, 34%, 67%)", "hsl(252, 42%, 18%)", "hsl(252, 58%, 39%)", "hsl(252, 64%, 91%)", "hsl(253, 28%, 16%)", "hsl(253, 29%, 15%)", "hsl(253, 32%, 20%)", "hsl(253, 56%, 13%)", "hsl(253, 64%, 22%)", "hsl(255, 6%, 14%)", "hsl(255, 9%, 27%)", "hsl(255, 80%, 4%)", "hsl(256, 10%, 35%)", "hsl(256, 21%, 25%)", "hsl(256, 27%, 36%)", "hsl(256, 31%, 14%)", "hsl(256, 100%, 11%)", "hsl(257, 9%, 46%)", "hsl(257, 21%, 30%)", "hsl(258, 11%, 42%)", "hsl(258, 23%, 11%)", "hsl(258, 24%, 27%)", "hsl(258, 100%, 9%)", "hsl(259, 16%, 39%)", "hsl(259, 21%, 39%)", "hsl(259, 31%, 20%)", "hsl(259, 36%, 18%)", "hsl(259, 47%, 31%)", "hsl(259, 64%, 55%)", "hsl(260, 3%, 21%)", "hsl(260, 4%, 59%)", "hsl(260, 8%, 29%)", "hsl(260, 17%, 53%)", "hsl(260, 27%, 33%)", "hsl(260, 43%, 33%)", "hsl(260, 60%, 24%)", "hsl(260, 69%, 15%)", "hsl(261, 11%, 42%)", "hsl(261, 28%, 61%)", "hsl(261, 80%, 41%)", "hsl(262, 3%, 46%)", "hsl(262, 6%, 37%)", "hsl(262, 34%, 31%)", "hsl(262, 42%, 45%)", "hsl(263, 60%, 51%)", "hsl(263, 74%, 40%)", "hsl(264, 9%, 21%)", "hsl(264, 13%, 45%)", "hsl(265, 17%, 39%)", "hsl(265, 18%, 36%)", "hsl(265, 39%, 19%)", "hsl(265, 75%, 94%)", "hsl(266, 6%, 51%)", "hsl(266, 13%, 21%)", "hsl(266, 36%, 36%)", "hsl(266, 60%, 14%)", "hsl(267, 14%, 47%)", "hsl(267, 17%, 34%)", "hsl(267, 22%, 30%)", "hsl(267, 88%, 14%)", "hsl(267, 96%, 10%)", "hsl(268, 49%, 7%)", "hsl(269, 12%, 45%)", "hsl(269, 17%, 32%)", "hsl(269, 21%, 25%)", "hsl(269, 44%, 20%)", "hsl(269, 44%, 57%)", "hsl(269, 58%, 10%)", "hsl(269, 100%, 75%)", "hsl(270, 2%, 18%)", "hsl(270, 9%, 29%)", "hsl(270, 11%, 47%)", "hsl(270, 17%, 39%)", "hsl(270, 22%, 11%)", "hsl(270, 25%, 38%)", "hsl(270, 29%, 14%)", "hsl(270, 34%, 28%)", "hsl(270, 68%, 36%)", "hsl(270, 100%, 0%)", "hsl(271, 15%, 73%)", "hsl(271, 18%, 32%)", "hsl(271, 28%, 19%)", "hsl(272, 15%, 42%)", "hsl(272, 33%, 8%)", "hsl(272, 40%, 18%)", "hsl(272, 44%, 87%)", "hsl(272, 59%, 11%)", "hsl(272, 68%, 4%)", "hsl(273, 5%, 58%)", "hsl(273, 57%, 8%)", "hsl(273, 90%, 15%)", "hsl(273, 100%, 84%)", "hsl(274, 11%, 76%)", "hsl(275, 14%, 58%)", "hsl(275, 24%, 29%)", "hsl(275, 25%, 20%)", "hsl(275, 100%, 25%)", "hsl(276, 10%, 41%)", "hsl(276, 15%, 19%)", "hsl(276, 15%, 38%)", "hsl(276, 24%, 22%)", "hsl(277, 15%, 17%)", "hsl(277, 36%, 21%)", "hsl(278, 9%, 24%)", "hsl(278, 26%, 30%)", "hsl(278, 34%, 23%)", "hsl(278, 47%, 20%)", "hsl(279, 19%, 24%)", "hsl(279, 59%, 13%)", "hsl(279, 63%, 94%)", "hsl(280, 4%, 14%)", "hsl(280, 6%, 9%)", "hsl(280, 16%, 18%)", "hsl(280, 17%, 47%)", "hsl(280, 42%, 41%)", "hsl(280, 43%, 65%)", "hsl(280, 48%, 30%)", "hsl(280, 64%, 94%)", "hsl(280, 100%, 50%)", "hsl(282, 9%, 37%)", "hsl(282, 10%, 51%)", "hsl(282, 67%, 12%)", "hsl(283, 3%, 41%)", "hsl(283, 18%, 32%)", "hsl(283, 24%, 65%)", "hsl(283, 33%, 17%)", "hsl(283, 48%, 11%)", "hsl(283, 78%, 19%)", "hsl(284, 18%, 41%)", "hsl(284, 52%, 17%)", "hsl(284, 100%, 50%)", "hsl(285, 10%, 31%)", "hsl(285, 31%, 15%)", "hsl(285, 37%, 17%)", "hsl(285, 47%, 15%)", "hsl(285, 82%, 15%)", "hsl(285, 100%, 12%)", "hsl(287, 10%, 29%)", "hsl(287, 57%, 21%)", "hsl(287, 59%, 8%)", "hsl(287, 60%, 82%)", "hsl(287, 78%, 4%)", "hsl(288, 11%, 9%)", "hsl(288, 52%, 6%)", "hsl(288, 71%, 15%)", "hsl(288, 95%, 30%)", "hsl(289, 30%, 7%)", "hsl(289, 36%, 25%)", "hsl(289, 45%, 16%)", "hsl(289, 47%, 14%)", "hsl(289, 76%, 16%)", "hsl(290, 22%, 43%)", "hsl(290, 23%, 31%)", "hsl(290, 40%, 21%)", "hsl(291, 9%, 48%)", "hsl(291, 11%, 35%)", "hsl(291, 45%, 9%)", "hsl(291, 57%, 28%)", "hsl(292, 11%, 27%)", "hsl(292, 28%, 39%)", "hsl(292, 37%, 12%)", "hsl(293, 11%, 31%)", "hsl(293, 12%, 41%)", "hsl(293, 29%, 23%)", "hsl(293, 40%, 16%)", "hsl(293, 97%, 11%)", "hsl(294, 13%, 15%)", "hsl(294, 21%, 39%)", "hsl(295, 46%, 15%)", "hsl(295, 71%, 9%)", "hsl(296, 15%, 36%)", "hsl(296, 24%, 25%)", "hsl(296, 36%, 35%)", "hsl(296, 50%, 94%)", "hsl(296, 84%, 13%)", "hsl(296, 94%, 7%)", "hsl(297, 10%, 45%)", "hsl(298, 15%, 55%)", "hsl(298, 19%, 31%)", "hsl(298, 22%, 35%)", "hsl(298, 31%, 20%)", "hsl(298, 31%, 25%)", "hsl(299, 69%, 24%)", "hsl(299, 77%, 12%)", "hsl(299, 100%, 15%)", "hsl(300, 6%, 17%)", "hsl(300, 7%, 70%)", "hsl(300, 11%, 24%)", "hsl(300, 11%, 35%)", "hsl(300, 18%, 27%)", "hsl(300, 20%, 47%)", "hsl(300, 24%, 23%)", "hsl(300, 33%, 30%)", "hsl(300, 45%, 21%)", "hsl(300, 60%, 42%)", "hsl(300, 100%, 1%)", "hsl(300, 100%, 9%)", "hsl(300, 100%, 11%)", "hsl(300, 100%, 14%)", "hsl(300, 100%, 25%)", "hsl(300, 100%, 99%)", "hsl(300, 100%, 99%)", "hsl(301, 27%, 30%)", "hsl(301, 29%, 34%)", "hsl(301, 33%, 29%)", "hsl(301, 45%, 23%)", "hsl(302, 20%, 30%)", "hsl(302, 33%, 22%)", "hsl(303, 28%, 24%)", "hsl(304, 15%, 22%)", "hsl(304, 75%, 22%)", "hsl(304, 85%, 22%)", "hsl(305, 46%, 28%)", "hsl(305, 53%, 26%)", "hsl(305, 53%, 26%)", "hsl(306, 12%, 45%)", "hsl(306, 19%, 31%)", "hsl(306, 35%, 21%)", "hsl(306, 36%, 5%)", "hsl(306, 51%, 8%)", "hsl(307, 9%, 62%)", "hsl(307, 14%, 75%)", "hsl(307, 17%, 29%)", "hsl(307, 19%, 26%)", "hsl(307, 22%, 16%)", "hsl(307, 27%, 24%)", "hsl(307, 35%, 15%)", "hsl(307, 42%, 41%)", "hsl(308, 31%, 19%)", "hsl(308, 35%, 38%)", "hsl(308, 95%, 17%)", "hsl(309, 11%, 75%)", "hsl(309, 47%, 14%)", "hsl(309, 57%, 27%)", "hsl(309, 86%, 17%)", "hsl(309, 90%, 24%)", "hsl(309, 100%, 12%)", "hsl(310, 5%, 22%)", "hsl(310, 7%, 35%)", "hsl(310, 45%, 19%)", "hsl(310, 48%, 27%)", "hsl(310, 80%, 10%)", "hsl(311, 12%, 26%)", "hsl(311, 19%, 66%)", "hsl(311, 27%, 15%)", "hsl(311, 33%, 17%)", "hsl(311, 54%, 30%)", "hsl(311, 76%, 16%)", "hsl(311, 100%, 16%)", "hsl(312, 2%, 52%)", "hsl(312, 8%, 12%)", "hsl(312, 19%, 26%)", "hsl(312, 31%, 26%)", "hsl(312, 33%, 14%)", "hsl(312, 69%, 16%)", "hsl(312, 76%, 15%)", "hsl(313, 12%, 47%)", "hsl(313, 13%, 20%)", "hsl(313, 14%, 39%)", "hsl(313, 18%, 31%)", "hsl(313, 21%, 43%)", "hsl(313, 22%, 25%)", "hsl(313, 41%, 36%)", "hsl(313, 66%, 26%)", "hsl(313, 83%, 16%)", "hsl(313, 100%, 31%)", "hsl(313, 100%, 36%)", "hsl(314, 17%, 33%)", "hsl(314, 34%, 49%)", "hsl(314, 44%, 42%)", "hsl(314, 45%, 16%)", "hsl(314, 57%, 12%)", "hsl(314, 65%, 27%)", "hsl(314, 83%, 14%)", "hsl(315, 13%, 49%)", "hsl(315, 24%, 63%)", "hsl(315, 31%, 59%)", "hsl(315, 38%, 40%)", "hsl(315, 67%, 55%)", "hsl(315, 100%, 36%)", "hsl(316, 5%, 41%)", "hsl(316, 6%, 35%)", "hsl(316, 15%, 19%)", "hsl(316, 21%, 52%)", "hsl(316, 40%, 27%)", "hsl(316, 50%, 24%)", "hsl(316, 63%, 14%)", "hsl(317, 17%, 25%)", "hsl(317, 33%, 16%)", "hsl(317, 66%, 12%)", "hsl(317, 96%, 11%)", "hsl(318, 6%, 34%)", "hsl(318, 8%, 42%)", "hsl(318, 19%, 13%)", "hsl(318, 23%, 14%)", "hsl(318, 36%, 29%)", "hsl(318, 37%, 17%)", "hsl(318, 38%, 9%)", "hsl(318, 74%, 29%)", "hsl(318, 91%, 23%)", "hsl(319, 35%, 27%)", "hsl(319, 38%, 18%)", "hsl(319, 63%, 18%)", "hsl(319, 66%, 9%)", "hsl(319, 66%, 14%)", "hsl(319, 74%, 7%)", "hsl(319, 98%, 21%)", "hsl(319, 100%, 26%)", "hsl(319, 100%, 30%)", "hsl(320, 16%, 18%)", "hsl(320, 21%, 22%)", "hsl(320, 56%, 12%)", "hsl(320, 60%, 24%)", "hsl(320, 93%, 6%)", "hsl(320, 100%, 50%)", "hsl(321, 13%, 60%)", "hsl(321, 15%, 45%)", "hsl(321, 21%, 45%)", "hsl(321, 27%, 33%)", "hsl(321, 49%, 23%)", "hsl(321, 98%, 33%)", "hsl(322, 17%, 31%)", "hsl(322, 38%, 16%)", "hsl(322, 65%, 28%)", "hsl(322, 99%, 55%)", "hsl(322, 99%, 62%)", "hsl(322, 99%, 67%)", "hsl(323, 20%, 23%)", "hsl(323, 27%, 17%)", "hsl(323, 46%, 14%)", "hsl(323, 73%, 20%)", "hsl(323, 73%, 23%)", "hsl(323, 77%, 24%)", "hsl(323, 97%, 39%)", "hsl(323, 98%, 33%)", "hsl(324, 16%, 41%)", "hsl(324, 31%, 49%)", "hsl(324, 41%, 26%)", "hsl(324, 42%, 26%)", "hsl(324, 74%, 35%)", "hsl(324, 88%, 13%)", "hsl(324, 100%, 1%)", "hsl(324, 100%, 50%)", "hsl(325, 6%, 40%)", "hsl(325, 15%, 57%)", "hsl(325, 32%, 24%)", "hsl(325, 65%, 10%)", "hsl(325, 84%, 7%)", "hsl(325, 94%, 7%)", "hsl(325, 100%, 7%)", "hsl(326, 9%, 31%)", "hsl(326, 32%, 48%)", "hsl(326, 44%, 20%)", "hsl(326, 49%, 36%)", "hsl(326, 56%, 16%)", "hsl(326, 64%, 46%)", "hsl(326, 76%, 21%)", "hsl(326, 78%, 52%)", "hsl(326, 79%, 26%)", "hsl(326, 100%, 15%)", "hsl(326, 100%, 50%)", "hsl(327, 4%, 41%)", "hsl(327, 17%, 32%)", "hsl(327, 53%, 22%)", "hsl(327, 74%, 15%)", "hsl(327, 81%, 40%)", "hsl(328, 11%, 33%)", "hsl(328, 20%, 60%)", "hsl(328, 25%, 29%)", "hsl(328, 33%, 37%)", "hsl(328, 41%, 23%)", "hsl(328, 41%, 40%)", "hsl(328, 42%, 64%)", "hsl(328, 45%, 23%)", "hsl(328, 48%, 32%)", "hsl(328, 51%, 42%)", "hsl(328, 68%, 11%)", "hsl(328, 72%, 28%)", "hsl(328, 93%, 22%)", "hsl(329, 13%, 50%)", "hsl(329, 38%, 33%)", "hsl(329, 45%, 62%)", "hsl(329, 64%, 15%)", "hsl(329, 64%, 39%)", "hsl(329, 68%, 36%)", "hsl(329, 72%, 41%)", "hsl(329, 74%, 18%)", "hsl(329, 85%, 44%)", "hsl(329, 98%, 50%)", "hsl(329, 100%, 45%)", "hsl(329, 100%, 50%)", "hsl(330, 2%, 16%)", "hsl(330, 2%, 40%)", "hsl(330, 9%, 42%)", "hsl(330, 11%, 24%)", "hsl(330, 15%, 13%)", "hsl(330, 34%, 30%)", "hsl(330, 46%, 34%)", "hsl(330, 54%, 95%)", "hsl(330, 94%, 48%)", "hsl(330, 95%, 29%)", "hsl(330, 100%, 0%)", "hsl(330, 100%, 63%)", "hsl(331, 17%, 51%)", "hsl(331, 24%, 22%)", "hsl(331, 26%, 52%)", "hsl(331, 30%, 27%)", "hsl(331, 33%, 28%)", "hsl(331, 33%, 32%)", "hsl(331, 39%, 40%)", "hsl(331, 43%, 64%)", "hsl(331, 48%, 37%)", "hsl(331, 53%, 17%)", "hsl(331, 57%, 21%)", "hsl(331, 71%, 58%)", "hsl(331, 86%, 23%)", "hsl(331, 87%, 34%)", "hsl(331, 100%, 80%)", "hsl(332, 13%, 75%)", "hsl(332, 13%, 80%)", "hsl(332, 17%, 17%)", "hsl(332, 24%, 49%)", "hsl(332, 25%, 27%)", "hsl(332, 26%, 28%)", "hsl(332, 29%, 9%)", "hsl(332, 31%, 20%)", "hsl(332, 31%, 20%)", "hsl(332, 35%, 35%)", "hsl(332, 68%, 28%)", "hsl(332, 73%, 38%)", "hsl(332, 75%, 29%)", "hsl(332, 82%, 7%)", "hsl(332, 82%, 30%)", "hsl(332, 87%, 28%)", "hsl(332, 91%, 9%)", "hsl(332, 99%, 49%)", "hsl(333, 20%, 43%)", "hsl(333, 32%, 46%)", "hsl(333, 61%, 30%)", "hsl(333, 69%, 51%)", "hsl(333, 79%, 49%)", "hsl(333, 89%, 7%)", "hsl(333, 93%, 32%)", "hsl(333, 99%, 29%)", "hsl(333, 100%, 6%)", "hsl(333, 100%, 60%)", "hsl(334, 21%, 44%)", "hsl(334, 21%, 51%)", "hsl(334, 24%, 31%)", "hsl(334, 31%, 20%)", "hsl(334, 33%, 33%)", "hsl(334, 37%, 7%)", "hsl(334, 47%, 22%)", "hsl(334, 48%, 43%)", "hsl(334, 51%, 26%)", "hsl(334, 53%, 31%)", "hsl(334, 77%, 10%)", "hsl(334, 87%, 38%)", "hsl(334, 87%, 40%)", "hsl(334, 94%, 26%)", "hsl(334, 94%, 50%)", "hsl(334, 100%, 48%)", "hsl(334, 100%, 50%)", "hsl(335, 14%, 51%)", "hsl(335, 17%, 45%)", "hsl(335, 20%, 69%)", "hsl(335, 22%, 39%)", "hsl(335, 25%, 29%)", "hsl(335, 35%, 19%)", "hsl(335, 54%, 11%)", "hsl(335, 60%, 96%)", "hsl(335, 62%, 31%)", "hsl(335, 64%, 56%)", "hsl(335, 68%, 60%)", "hsl(335, 73%, 43%)", "hsl(335, 76%, 23%)", "hsl(335, 87%, 45%)", "hsl(335, 91%, 45%)", "hsl(335, 94%, 14%)", "hsl(335, 97%, 38%)", "hsl(335, 98%, 50%)", "hsl(335, 100%, 10%)", "hsl(335, 100%, 39%)", "hsl(335, 100%, 46%)", "hsl(335, 100%, 47%)", "hsl(335, 100%, 52%)", "hsl(336, 3%, 32%)", "hsl(336, 3%, 39%)", "hsl(336, 6%, 16%)", "hsl(336, 20%, 42%)", "hsl(336, 29%, 53%)", "hsl(336, 31%, 20%)", "hsl(336, 40%, 24%)", "hsl(336, 49%, 62%)", "hsl(336, 51%, 40%)", "hsl(336, 55%, 23%)", "hsl(336, 63%, 52%)", "hsl(336, 64%, 35%)", "hsl(336, 65%, 83%)", "hsl(336, 66%, 37%)", "hsl(336, 68%, 26%)", "hsl(336, 77%, 49%)", "hsl(336, 77%, 57%)", "hsl(336, 80%, 31%)", "hsl(336, 81%, 31%)", "hsl(336, 87%, 21%)", "hsl(336, 87%, 54%)", "hsl(336, 90%, 51%)", "hsl(336, 91%, 49%)", "hsl(336, 96%, 40%)", "hsl(336, 96%, 46%)", "hsl(336, 98%, 42%)", "hsl(336, 100%, 9%)", "hsl(336, 100%, 43%)", "hsl(337, 29%, 21%)", "hsl(337, 38%, 24%)", "hsl(337, 39%, 18%)", "hsl(337, 60%, 35%)", "hsl(337, 61%, 49%)", "hsl(337, 72%, 67%)", "hsl(337, 91%, 46%)", "hsl(337, 97%, 69%)", "hsl(337, 100%, 29%)", "hsl(337, 100%, 37%)", "hsl(337, 100%, 96%)", "hsl(338, 27%, 70%)", "hsl(338, 30%, 24%)", "hsl(338, 30%, 43%)", "hsl(338, 43%, 49%)", "hsl(338, 51%, 33%)", "hsl(338, 55%, 46%)", "hsl(338, 67%, 46%)", "hsl(338, 68%, 37%)", "hsl(338, 82%, 50%)", "hsl(338, 82%, 61%)", "hsl(338, 87%, 33%)", "hsl(338, 87%, 45%)", "hsl(338, 90%, 8%)", "hsl(338, 92%, 36%)", "hsl(338, 92%, 49%)", "hsl(338, 93%, 16%)", "hsl(338, 93%, 53%)", "hsl(338, 93%, 54%)", "hsl(338, 94%, 19%)", "hsl(338, 94%, 66%)", "hsl(338, 95%, 49%)", "hsl(338, 96%, 33%)", "hsl(338, 98%, 41%)", "hsl(338, 98%, 46%)", "hsl(338, 98%, 53%)", "hsl(338, 100%, 52%)", "hsl(338, 100%, 53%)", "hsl(338, 100%, 53%)", "hsl(339, 16%, 47%)", "hsl(339, 23%, 22%)", "hsl(339, 23%, 51%)", "hsl(339, 24%, 27%)", "hsl(339, 41%, 92%)", "hsl(339, 59%, 11%)", "hsl(339, 74%, 45%)", "hsl(339, 76%, 32%)", "hsl(339, 77%, 42%)", "hsl(339, 79%, 44%)", "hsl(339, 80%, 41%)", "hsl(339, 85%, 92%)", "hsl(339, 87%, 88%)", "hsl(339, 91%, 49%)", "hsl(339, 98%, 52%)", "hsl(339, 98%, 52%)", "hsl(339, 100%, 50%)", "hsl(339, 100%, 66%)", "hsl(340, 2%, 30%)", "hsl(340, 4%, 14%)", "hsl(340, 9%, 20%)", "hsl(340, 17%, 14%)", "hsl(340, 21%, 33%)", "hsl(340, 21%, 52%)", "hsl(340, 22%, 8%)", "hsl(340, 37%, 41%)", "hsl(340, 37%, 51%)", "hsl(340, 37%, 51%)", "hsl(340, 37%, 51%)", "hsl(340, 54%, 56%)", "hsl(340, 58%, 54%)", "hsl(340, 72%, 16%)", "hsl(340, 74%, 56%)", "hsl(340, 75%, 60%)", "hsl(340, 76%, 13%)", "hsl(340, 77%, 47%)", "hsl(340, 79%, 64%)", "hsl(340, 82%, 50%)", "hsl(340, 87%, 37%)", "hsl(340, 92%, 76%)", "hsl(340, 98%, 36%)", "hsl(340, 99%, 51%)", "hsl(340, 99%, 59%)", "hsl(340, 99%, 69%)", "hsl(340, 100%, 20%)", "hsl(340, 100%, 55%)", "hsl(340, 100%, 58%)", "hsl(340, 100%, 62%)", "hsl(341, 28%, 52%)", "hsl(341, 33%, 19%)", "hsl(341, 39%, 49%)", "hsl(341, 46%, 50%)", "hsl(341, 52%, 29%)", "hsl(341, 54%, 30%)", "hsl(341, 60%, 59%)", "hsl(341, 61%, 52%)", "hsl(341, 68%, 45%)", "hsl(341, 69%, 55%)", "hsl(341, 75%, 64%)", "hsl(341, 79%, 50%)", "hsl(341, 81%, 64%)", "hsl(341, 87%, 36%)", "hsl(341, 88%, 16%)", "hsl(341, 88%, 57%)", "hsl(341, 93%, 30%)", "hsl(341, 100%, 39%)", "hsl(341, 100%, 49%)", "hsl(341, 100%, 50%)", "hsl(342, 11%, 55%)", "hsl(342, 30%, 35%)", "hsl(342, 31%, 32%)", "hsl(342, 43%, 27%)", "hsl(342, 48%, 38%)", "hsl(342, 55%, 38%)", "hsl(342, 65%, 42%)", "hsl(342, 70%, 41%)", "hsl(342, 74%, 34%)", "hsl(342, 84%, 53%)", "hsl(342, 86%, 33%)", "hsl(342, 90%, 39%)", "hsl(342, 95%, 53%)", "hsl(342, 98%, 52%)", "hsl(342, 98%, 53%)", "hsl(342, 100%, 95%)", "hsl(343, 14%, 42%)", "hsl(343, 21%, 33%)", "hsl(343, 30%, 28%)", "hsl(343, 32%, 52%)", "hsl(343, 35%, 50%)", "hsl(343, 40%, 59%)", "hsl(343, 47%, 70%)", "hsl(343, 48%, 52%)", "hsl(343, 49%, 67%)", "hsl(343, 50%, 57%)", "hsl(343, 53%, 39%)", "hsl(343, 55%, 39%)", "hsl(343, 55%, 52%)", "hsl(343, 58%, 46%)", "hsl(343, 58%, 60%)", "hsl(343, 59%, 38%)", "hsl(343, 61%, 51%)", "hsl(343, 62%, 56%)", "hsl(343, 72%, 42%)", "hsl(343, 73%, 37%)", "hsl(343, 74%, 35%)", "hsl(343, 74%, 42%)", "hsl(343, 77%, 57%)", "hsl(343, 81%, 10%)", "hsl(343, 85%, 54%)", "hsl(343, 87%, 58%)", "hsl(343, 87%, 58%)", "hsl(343, 90%, 20%)", "hsl(343, 94%, 41%)", "hsl(343, 97%, 59%)", "hsl(343, 97%, 61%)", "hsl(343, 98%, 41%)", "hsl(343, 98%, 52%)", "hsl(343, 100%, 23%)", "hsl(343, 100%, 50%)", "hsl(343, 100%, 50%)", "hsl(343, 100%, 53%)", "hsl(343, 100%, 54%)", "hsl(343, 100%, 59%)", "hsl(344, 40%, 16%)", "hsl(344, 45%, 50%)", "hsl(344, 47%, 46%)", "hsl(344, 48%, 43%)", "hsl(344, 55%, 15%)", "hsl(344, 59%, 62%)", "hsl(344, 60%, 9%)", "hsl(344, 67%, 62%)", "hsl(344, 68%, 50%)", "hsl(344, 69%, 41%)", "hsl(344, 70%, 5%)", "hsl(344, 78%, 52%)", "hsl(344, 78%, 61%)", "hsl(344, 82%, 44%)", "hsl(344, 82%, 44%)", "hsl(344, 83%, 40%)", "hsl(344, 91%, 50%)", "hsl(344, 93%, 46%)", "hsl(344, 93%, 51%)", "hsl(344, 99%, 66%)", "hsl(344, 100%, 26%)", "hsl(345, 2%, 33%)", "hsl(345, 12%, 19%)", "hsl(345, 33%, 52%)", "hsl(345, 34%, 21%)", "hsl(345, 39%, 23%)", "hsl(345, 53%, 45%)", "hsl(345, 55%, 19%)", "hsl(345, 56%, 40%)", "hsl(345, 63%, 56%)", "hsl(345, 70%, 21%)", "hsl(345, 72%, 68%)", "hsl(345, 75%, 42%)", "hsl(345, 87%, 58%)", "hsl(345, 89%, 61%)", "hsl(345, 92%, 48%)", "hsl(345, 93%, 52%)", "hsl(345, 94%, 42%)", "hsl(345, 100%, 15%)", "hsl(345, 100%, 58%)", "hsl(345, 100%, 60%)", "hsl(345, 100%, 60%)", "hsl(345, 100%, 60%)", "hsl(345, 100%, 78%)", "hsl(346, 16%, 26%)", "hsl(346, 20%, 21%)", "hsl(346, 20%, 25%)", "hsl(346, 31%, 13%)", "hsl(346, 34%, 47%)", "hsl(346, 37%, 41%)", "hsl(346, 45%, 55%)", "hsl(346, 47%, 62%)", "hsl(346, 48%, 58%)", "hsl(346, 51%, 37%)", "hsl(346, 59%, 55%)", "hsl(346, 59%, 74%)", "hsl(346, 60%, 56%)", "hsl(346, 60%, 56%)", "hsl(346, 61%, 71%)", "hsl(346, 63%, 39%)", "hsl(346, 68%, 49%)", "hsl(346, 69%, 61%)", "hsl(346, 71%, 49%)", "hsl(346, 72%, 44%)", "hsl(346, 74%, 66%)", "hsl(346, 75%, 47%)", "hsl(346, 75%, 63%)", "hsl(346, 77%, 52%)", "hsl(346, 77%, 58%)", "hsl(346, 78%, 65%)", "hsl(346, 79%, 44%)", "hsl(346, 79%, 79%)", "hsl(346, 81%, 52%)", "hsl(346, 82%, 39%)", "hsl(346, 84%, 34%)", "hsl(346, 86%, 60%)", "hsl(346, 87%, 56%)", "hsl(346, 88%, 58%)", "hsl(346, 89%, 32%)", "hsl(346, 89%, 42%)", "hsl(346, 96%, 53%)", "hsl(346, 98%, 49%)", "hsl(346, 98%, 68%)", "hsl(346, 99%, 65%)", "hsl(346, 100%, 50%)", "hsl(346, 100%, 50%)", "hsl(346, 100%, 52%)", "hsl(346, 100%, 59%)", "hsl(347, 7%, 24%)", "hsl(347, 13%, 87%)", "hsl(347, 22%, 13%)", "hsl(347, 24%, 35%)", "hsl(347, 27%, 29%)", "hsl(347, 34%, 82%)", "hsl(347, 43%, 50%)", "hsl(347, 62%, 41%)", "hsl(347, 69%, 47%)", "hsl(347, 75%, 47%)", "hsl(347, 76%, 54%)", "hsl(347, 81%, 51%)", "hsl(347, 83%, 53%)", "hsl(347, 85%, 55%)", "hsl(347, 85%, 79%)", "hsl(347, 88%, 56%)", "hsl(347, 90%, 54%)", "hsl(347, 95%, 58%)", "hsl(347, 95%, 62%)", "hsl(347, 98%, 68%)", "hsl(347, 99%, 38%)", "hsl(347, 100%, 48%)", "hsl(347, 100%, 55%)", "hsl(347, 100%, 57%)", "hsl(347, 100%, 60%)", "hsl(347, 100%, 63%)", "hsl(348, 6%, 32%)", "hsl(348, 15%, 47%)", "hsl(348, 16%, 44%)", "hsl(348, 17%, 59%)", "hsl(348, 21%, 42%)", "hsl(348, 27%, 51%)", "hsl(348, 35%, 49%)", "hsl(348, 44%, 40%)", "hsl(348, 52%, 45%)", "hsl(348, 53%, 55%)", "hsl(348, 55%, 55%)", "hsl(348, 61%, 27%)", "hsl(348, 63%, 34%)", "hsl(348, 63%, 54%)", "hsl(348, 65%, 46%)", "hsl(348, 69%, 36%)", "hsl(348, 69%, 46%)", "hsl(348, 72%, 44%)", "hsl(348, 80%, 35%)", "hsl(348, 82%, 22%)", "hsl(348, 82%, 28%)", "hsl(348, 82%, 34%)", "hsl(348, 82%, 61%)", "hsl(348, 88%, 33%)", "hsl(348, 88%, 52%)", "hsl(348, 91%, 42%)", "hsl(348, 91%, 73%)", "hsl(348, 92%, 52%)", "hsl(348, 92%, 59%)", "hsl(348, 94%, 39%)", "hsl(348, 97%, 59%)", "hsl(348, 97%, 71%)", "hsl(348, 100%, 15%)", "hsl(348, 100%, 56%)", "hsl(348, 100%, 66%)", "hsl(348, 100%, 85%)", "hsl(348, 100%, 88%)", "hsl(349, 20%, 64%)", "hsl(349, 28%, 59%)", "hsl(349, 66%, 58%)", "hsl(349, 67%, 54%)", "hsl(349, 69%, 54%)", "hsl(349, 74%, 47%)", "hsl(349, 79%, 63%)", "hsl(349, 81%, 63%)", "hsl(349, 82%, 54%)", "hsl(349, 83%, 65%)", "hsl(349, 94%, 73%)", "hsl(349, 95%, 71%)", "hsl(349, 97%, 57%)", "hsl(349, 98%, 65%)", "hsl(349, 99%, 63%)", "hsl(350, 3%, 58%)", "hsl(350, 8%, 28%)", "hsl(350, 9%, 13%)", "hsl(350, 9%, 26%)", "hsl(350, 28%, 52%)", "hsl(350, 33%, 64%)", "hsl(350, 40%, 55%)", "hsl(350, 47%, 36%)", "hsl(350, 49%, 42%)", "hsl(350, 63%, 63%)", "hsl(350, 65%, 46%)", "hsl(350, 71%, 30%)", "hsl(350, 71%, 47%)", "hsl(350, 71%, 50%)", "hsl(350, 72%, 61%)", "hsl(350, 73%, 32%)", "hsl(350, 78%, 65%)", "hsl(350, 79%, 45%)", "hsl(350, 85%, 57%)", "hsl(350, 86%, 65%)", "hsl(350, 89%, 53%)", "hsl(350, 100%, 56%)", "hsl(350, 100%, 56%)", "hsl(351, 16%, 16%)", "hsl(351, 20%, 59%)", "hsl(351, 25%, 21%)", "hsl(351, 27%, 51%)", "hsl(351, 36%, 49%)", "hsl(351, 37%, 53%)", "hsl(351, 44%, 76%)", "hsl(351, 45%, 60%)", "hsl(351, 49%, 67%)", "hsl(351, 50%, 25%)", "hsl(351, 52%, 53%)", "hsl(351, 55%, 48%)", "hsl(351, 57%, 78%)", "hsl(351, 66%, 48%)", "hsl(351, 67%, 49%)", "hsl(351, 68%, 43%)", "hsl(351, 74%, 62%)", "hsl(351, 79%, 70%)", "hsl(351, 80%, 80%)", "hsl(351, 85%, 74%)", "hsl(351, 87%, 61%)", "hsl(351, 89%, 39%)", "hsl(351, 98%, 45%)", "hsl(351, 100%, 1%)", "hsl(351, 100%, 27%)", "hsl(351, 100%, 53%)", "hsl(351, 100%, 62%)", "hsl(351, 100%, 62%)", "hsl(351, 100%, 66%)", "hsl(351, 100%, 70%)", "hsl(352, 16%, 27%)", "hsl(352, 23%, 43%)", "hsl(352, 34%, 75%)", "hsl(352, 37%, 65%)", "hsl(352, 42%, 57%)", "hsl(352, 46%, 56%)", "hsl(352, 49%, 30%)", "hsl(352, 52%, 44%)", "hsl(352, 73%, 76%)", "hsl(352, 77%, 60%)", "hsl(352, 78%, 39%)", "hsl(352, 78%, 55%)", "hsl(352, 81%, 59%)", "hsl(352, 85%, 60%)", "hsl(352, 87%, 9%)", "hsl(352, 100%, 68%)", "hsl(353, 8%, 21%)", "hsl(353, 13%, 14%)", "hsl(353, 16%, 78%)", "hsl(353, 30%, 16%)", "hsl(353, 35%, 45%)", "hsl(353, 56%, 52%)", "hsl(353, 61%, 55%)", "hsl(353, 64%, 52%)", "hsl(353, 67%, 55%)", "hsl(353, 69%, 63%)", "hsl(353, 79%, 41%)", "hsl(353, 84%, 68%)", "hsl(353, 84%, 83%)", "hsl(353, 85%, 42%)", "hsl(353, 85%, 60%)", "hsl(353, 86%, 55%)", "hsl(353, 88%, 80%)", "hsl(353, 90%, 58%)", "hsl(353, 90%, 72%)", "hsl(353, 91%, 25%)", "hsl(353, 97%, 40%)", "hsl(353, 97%, 60%)", "hsl(353, 97%, 61%)", "hsl(353, 99%, 64%)", "hsl(354, 13%, 30%)", "hsl(354, 20%, 72%)", "hsl(354, 22%, 64%)", "hsl(354, 30%, 13%)", "hsl(354, 35%, 83%)", "hsl(354, 38%, 38%)", "hsl(354, 42%, 62%)", "hsl(354, 44%, 51%)", "hsl(354, 50%, 54%)", "hsl(354, 51%, 7%)", "hsl(354, 51%, 67%)", "hsl(354, 59%, 51%)", "hsl(354, 66%, 35%)", "hsl(354, 72%, 77%)", "hsl(354, 73%, 64%)", "hsl(354, 76%, 53%)", "hsl(354, 80%, 65%)", "hsl(354, 84%, 76%)", "hsl(354, 87%, 67%)", "hsl(354, 88%, 71%)", "hsl(354, 92%, 66%)", "hsl(354, 93%, 72%)", "hsl(354, 95%, 49%)", "hsl(354, 100%, 68%)", "hsl(354, 100%, 76%)", "hsl(354, 100%, 90%)", "hsl(355, 12%, 63%)", "hsl(355, 15%, 48%)", "hsl(355, 23%, 48%)", "hsl(355, 23%, 56%)", "hsl(355, 49%, 25%)", "hsl(355, 60%, 50%)", "hsl(355, 66%, 56%)", "hsl(355, 74%, 35%)", "hsl(355, 75%, 50%)", "hsl(355, 77%, 61%)", "hsl(355, 78%, 39%)", "hsl(355, 78%, 62%)", "hsl(355, 79%, 48%)", "hsl(355, 81%, 61%)", "hsl(355, 86%, 92%)", "hsl(355, 95%, 57%)", "hsl(356, 18%, 68%)", "hsl(356, 25%, 60%)", "hsl(356, 28%, 54%)", "hsl(356, 33%, 59%)", "hsl(356, 36%, 47%)", "hsl(356, 43%, 38%)", "hsl(356, 47%, 52%)", "hsl(356, 54%, 55%)", "hsl(356, 63%, 32%)", "hsl(356, 63%, 51%)", "hsl(356, 66%, 28%)", "hsl(356, 69%, 71%)", "hsl(356, 72%, 73%)", "hsl(356, 76%, 71%)", "hsl(356, 81%, 35%)", "hsl(356, 81%, 67%)", "hsl(356, 82%, 61%)", "hsl(356, 83%, 65%)", "hsl(356, 84%, 56%)", "hsl(356, 93%, 88%)", "hsl(356, 96%, 90%)", "hsl(356, 97%, 37%)", "hsl(356, 100%, 77%)", "hsl(357, 15%, 27%)", "hsl(357, 16%, 24%)", "hsl(357, 30%, 73%)", "hsl(357, 38%, 53%)", "hsl(357, 41%, 34%)", "hsl(357, 45%, 46%)", "hsl(357, 47%, 17%)", "hsl(357, 48%, 8%)", "hsl(357, 50%, 92%)", "hsl(357, 55%, 58%)", "hsl(357, 59%, 46%)", "hsl(357, 59%, 60%)", "hsl(357, 69%, 77%)", "hsl(357, 74%, 52%)", "hsl(357, 78%, 38%)", "hsl(357, 81%, 69%)", "hsl(357, 85%, 68%)", "hsl(357, 90%, 70%)", "hsl(357, 94%, 51%)", "hsl(357, 95%, 66%)", "hsl(357, 97%, 75%)", "hsl(357, 100%, 28%)", "hsl(357, 100%, 77%)", "hsl(357, 100%, 82%)", "hsl(358, 13%, 48%)", "hsl(358, 13%, 50%)", "hsl(358, 14%, 42%)", "hsl(358, 21%, 24%)", "hsl(358, 31%, 46%)", "hsl(358, 58%, 76%)", "hsl(358, 65%, 66%)", "hsl(358, 65%, 70%)", "hsl(358, 65%, 78%)", "hsl(358, 66%, 43%)", "hsl(358, 73%, 69%)", "hsl(358, 76%, 34%)", "hsl(358, 77%, 72%)", "hsl(358, 78%, 88%)", "hsl(358, 79%, 56%)", "hsl(358, 79%, 72%)", "hsl(358, 88%, 20%)", "hsl(358, 88%, 84%)", "hsl(358, 89%, 65%)", "hsl(358, 95%, 68%)", "hsl(358, 100%, 27%)", "hsl(358, 100%, 31%)", "hsl(358, 100%, 32%)", "hsl(359, 18%, 55%)", "hsl(359, 33%, 57%)", "hsl(359, 36%, 24%)", "hsl(359, 42%, 69%)", "hsl(359, 42%, 69%)", "hsl(359, 54%, 53%)", "hsl(359, 67%, 57%)", "hsl(359, 68%, 12%)", "hsl(359, 71%, 62%)", "hsl(359, 75%, 68%)", "hsl(359, 76%, 11%)", "hsl(359, 78%, 23%)", "hsl(359, 85%, 65%)", "hsl(359, 86%, 80%)", "hsl(359, 90%, 39%)", "hsl(359, 91%, 62%)", "hsl(359, 98%, 21%)", "hsl(359, 100%, 64%)", "hsl(359, 100%, 65%)", "hsl(359, 100%, 65%)", "hsl(359, 100%, 66%)", "hsl(359, 100%, 75%)", "hsl(360, 51%, 48%)", "hsl(360, 59%, 54%)", "hsl(360, 86%, 71%)", "hsl(360, 100%, 37%)"]
}
/* harmony export (immutable) */ __webpack_exports__["a"] = COLOR;



/***/ })
/******/ ]);